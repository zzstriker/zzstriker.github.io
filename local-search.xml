<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JS学习(22)-迭代器</title>
    <link href="/2024/08/04/JS%E5%AD%A6%E4%B9%A0(22)-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <url>/2024/08/04/JS%E5%AD%A6%E4%B9%A0(22)-%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p><code>Set</code> 是一种集合类型，可以存储任何类型的值，无论是原始值还是对象引用。</p><span id="more"></span><h1>迭代器</h1>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(21)-Set</title>
    <link href="/2024/08/03/JS%E5%AD%A6%E4%B9%A0(21)-Set/"/>
    <url>/2024/08/03/JS%E5%AD%A6%E4%B9%A0(21)-Set/</url>
    
    <content type="html"><![CDATA[<p><code>Set</code> 是一种集合类型，可以存储任何类型的值，无论是原始值还是对象引用。</p><span id="more"></span><h1>Set</h1><p><code>Set</code> 对象是值的合集。<code>Set</code> 中的元素<strong>只会出现一次</strong>，即集合中的元素是唯一的，可以按照插入顺序迭代集合中的元素。</p><h2 id="构造函数">构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Set</span>(iterable)</span><br></pre></td></tr></table></figure><ol><li><strong>iterable</strong>（可选）：如果传入一个可迭代对象，它的所有元素将不重复地被添加到新的 <code>Set</code> 中。如果不指定此参数或其值为 <code>null</code>，则新的 <code>Set</code> 为空。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure><h2 id="实例属性">实例属性</h2><ol><li><p><strong>size</strong>：返回 <code>Map</code> 中元素的数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet.<span class="property">size</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><ol><li><p><code>add()</code>：向 <code>Set</code> 中添加一个新元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(5) &#123; 1, 2, 3, 4, 5 &#125;</span></span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(6) &#123; 1, 2, 3, 4, 5, 6 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>has()</code>：返回一个布尔值，检查 <code>Set</code> 中是否存在某个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet.<span class="title function_">has</span>(<span class="number">3</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet.<span class="title function_">has</span>(<span class="number">6</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>delete()</code>：从 <code>Set</code> 中删除一个元素，如果该值在集合中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(5) &#123; 1, 2, 3, 4, 5 &#125;</span></span><br><span class="line">mySet.<span class="title function_">delete</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(5) &#123; 1, 2, 3, 5 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>clear()</code>：移除该 <code>Set</code> 中的所有元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(5) &#123; 1, 2, 3, 4, 5 &#125;</span></span><br><span class="line">mySet.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>entries()</code>：返回一个新的迭代器对象，该对象包含了此 Set 中的每个元素的 <code>[value, value]</code> 数组，按插入顺序排列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">42</span>);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&#x27;forty two&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 entries 迭代器</span></span><br><span class="line"><span class="keyword">let</span> entries = mySet.<span class="title function_">entries</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of 迭代 entries</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> entries) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(entry);</span><br><span class="line">    <span class="comment">// [42, 42]</span></span><br><span class="line"><span class="comment">// [&#x27;forty two&#x27;, &#x27;forty two&#x27;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>forEach()</code>：按插入顺序对该 <code>Set</code> 中的每个值执行一次提供的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">forEach</span>(callbackFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callbackFn</code>：为 Set 中每个元素执行的函数。使用以下参数调用该函数<ul><li><code>value</code>：每个迭代的值</li><li><code>key</code>：每个迭代的键，与value相同</li><li><code>set</code>：正在迭代的 Set</li></ul></li><li><code>thisArg</code>：执行 <code>callbackFn</code> 时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;val1&quot;</span>, <span class="string">&quot;val2&quot;</span>, <span class="string">&quot;val3&quot;</span>]); </span><br><span class="line"></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val, dupVal</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;val&#125;</span> -&gt; <span class="subst">$&#123;dupVal&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// val1 -&gt; val1</span></span><br><span class="line"><span class="comment">// val2 -&gt; val2</span></span><br><span class="line"><span class="comment">// val3 -&gt; val3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>keys()</code>：是<code>values()</code>方法的别名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> set.<span class="title function_">keys</span>()) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>values()</code>：返回一个新的迭代器对象，该对象包含 <code>Set</code> 对象中每个元素的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> set.<span class="title function_">values</span>()) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>union()</code>：并集，返回一个新集合，该集合是两个集合中所有的唯一项元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> evens = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]);</span><br><span class="line"><span class="keyword">const</span> squares = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evens.<span class="title function_">union</span>(squares)); <span class="comment">// Set(6) &#123; 2, 4, 6, 8, 1, 9 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>intersection()</code>：交集，返回一个新集合，该集合是两个集合都存在的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> odds = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="keyword">const</span> squares = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(odds.<span class="title function_">intersection</span>(squares)); <span class="comment">// Set(2) &#123; 1, 9 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>difference()</code>：差集，返回一个新集合，返回集合A中不在集合B中的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> odds = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="keyword">const</span> squares = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(odds.<span class="title function_">difference</span>(squares)); <span class="comment">// Set(3) &#123; 3, 5, 7 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>symmetricDifference()</code>：返回一个新集合，返回只在集合A或集合B中的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> evens = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]);</span><br><span class="line"><span class="keyword">const</span> squares = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evens.<span class="title function_">symmetricDifference</span>(squares)); <span class="comment">// Set(5) &#123; 2, 6, 8, 1, 9 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>isSubsetOf()</code>：检查一个集合的所有元素是否都在另一个集合中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fours = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>]);</span><br><span class="line"><span class="keyword">const</span> evens = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fours.<span class="title function_">isSubsetOf</span>(evens)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>isSupersetOf()</code>：检查一个集合是否包含另一个集合中的所有元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> evens = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]);</span><br><span class="line"><span class="keyword">const</span> fours = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evens.<span class="title function_">isSupersetOf</span>(fours)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>isDisjointFrom()</code>：检查两个集合是否没有任何共同的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> primes = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>]);</span><br><span class="line"><span class="keyword">const</span> squares = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(primes.<span class="title function_">isDisjointFrom</span>(squares)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h1>WeakSet</h1><p><code>WeakSet</code> 是 JavaScript 中一种集合类型。<code>WeakSet</code>是 Set 的“兄弟”类型，其 API 也是 Map 的子集。</p><h2 id="特性">特性</h2><ol><li><p><code>WeakSet</code> 的元素只能是对象或 Symbol，不能是原始类型的值</p></li><li><p><code>WeakSet</code> 中对象的引用为弱引用。如果没有其他的对 <code>WeakSet</code> 中对象的引用存在，那么这些对象会被垃圾回收</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> val1 = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,val2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;,val3 = &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> ws1 = <span class="keyword">new</span> <span class="title class_">WeakSet</span>([val1, val2, val3]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws1.<span class="title function_">has</span>(val1)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws1.<span class="title function_">has</span>(val2)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws1.<span class="title function_">has</span>(val3)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws2 = <span class="keyword">new</span> <span class="title class_">WeakSet</span>([val1, <span class="string">&quot;BADVAL&quot;</span>, val3]);</span><br><span class="line"><span class="comment">// TypeError: Invalid value used in WeakSet </span></span><br></pre></td></tr></table></figure></li><li><p>因为 <code>WeakSet</code> 中的值有可能被垃圾回收，所以<code>WeakSet</code>不可迭代</p></li></ol><h2 id="构造函数-2">构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">WeakSet</span>(iterable)</span><br></pre></td></tr></table></figure><ol><li><strong>iterable</strong>（可选）：如果传入了一个可迭代对象，这个对象的所有元素都会被添加到新的 <code>WeakSet</code> 对象中。<code>null</code> 会被视为 <code>undefined</code>。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> weakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>([obj1, obj2]);</span><br></pre></td></tr></table></figure><h2 id="实例方法-2">实例方法</h2><ol><li><p><code>add()</code>：向 <code>WeakSet</code> 中添加一个新对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> weakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>([obj1, obj2]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">name</span>: <span class="string">&quot;Charlie&quot;</span> &#125;;</span><br><span class="line">weakSet.<span class="title function_">add</span>(obj3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet.<span class="title function_">has</span>(obj3)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>has()</code>：检查 <code>WeakSet</code> 中是否存在某个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> weakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>([obj1, obj2]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet.<span class="title function_">has</span>(obj1)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet.<span class="title function_">has</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;)); <span class="comment">// false，不同的对象引用</span></span><br></pre></td></tr></table></figure></li><li><p><code>delete()</code>：从 <code>WeakSet</code> 中删除一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> weakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>([obj1, obj2]);</span><br><span class="line">weakSet.<span class="title function_">delete</span>(obj2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet.<span class="title function_">has</span>(obj2)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(20)-Map</title>
    <link href="/2024/08/02/JS%E5%AD%A6%E4%B9%A0(20)-Map/"/>
    <url>/2024/08/02/JS%E5%AD%A6%E4%B9%A0(20)-Map/</url>
    
    <content type="html"><![CDATA[<p><code>Map</code> 是一种用于存储键值对的数据结构，类似于对象（Object），但具有一些显著的区别和优势。</p><span id="more"></span><h1>Map</h1><p><code>Map</code> 对象是键值对的集合。<code>Map</code> 中的一个键<strong>只能出现一次</strong>；键在 <code>Map</code> 的集合中是独一无二的。<code>Map</code> 对象按键值对迭代，在每次迭代后会返回一个形式为 <code>[key, value]</code> 的数组。迭代按插入顺序进行。</p><h2 id="构造函数">构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Map</span>(iterable)</span><br></pre></td></tr></table></figure><ol><li><strong>iterable</strong>（可选）：一个元素是键值对的数组或其他可迭代对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val3&quot;</span>]</span><br><span class="line">]); </span><br></pre></td></tr></table></figure><h2 id="实例属性">实例属性</h2><ol><li><p><strong>size</strong>：返回 <code>Map</code> 中元素的数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val3&quot;</span>]</span><br><span class="line">]); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap.<span class="property">size</span>); <span class="comment">// 输出: 3</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><ol><li><p><code>set()</code>：向 <code>Map</code> 对象添加或更新一个指定的键值对</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 0</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;Matt&quot;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;lastName&quot;</span>, <span class="string">&quot;Frisbie&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// Matt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 2 </span></span><br></pre></td></tr></table></figure></li><li><p><code>get()</code>：返回该 <code>Map</code> 中的指定元素，如果键相关联的值是一个对象，那么将获得该对象的引用，对该对象所做的任何更改都会有效地在 <code>Map</code> 对象中修改它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;Matt&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// Matt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;zzstriker&#x27;</span>&#125;</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;bar&#x27;</span>)); <span class="comment">// zzstriker</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;bar&#x27;</span>)) <span class="comment">// test</span></span><br></pre></td></tr></table></figure></li><li><p><code>has()</code>：返回一个布尔值，指示具有指定键的元素是否存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;Matt&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>delete()</code>：从该 <code>Map</code> 中删除指定键的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;Matt&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">map.<span class="title function_">delete</span>(<span class="string">&quot;firstName&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>clear()</code>：移除该 <code>Map</code> 中的所有元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;Matt&quot;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;lastName&quot;</span>, <span class="string">&quot;Frisbie&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 2</span></span><br><span class="line">map.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p><code>entries()</code>：返回一个新的 Map 迭代器对象，该对象包含了此 Map 中的每个元素的 <code>[key, value]</code> 对，按插入顺序排列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;occupation&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 entries 迭代器</span></span><br><span class="line"><span class="keyword">let</span> entries = map.<span class="title function_">entries</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of 迭代 entries</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> entries) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Key: <span class="subst">$&#123;key&#125;</span>, Value: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// Key: name, Value: Alice</span></span><br><span class="line"><span class="comment">// Key: age, Value: 30</span></span><br><span class="line"><span class="comment">// Key: occupation, Value: Engineer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>forEach()</code>：按插入顺序对该 <code>Map</code> 中的每个键/值对执行一次提供的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">forEach</span>(callbackFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callbackFn</code>：为 map 中每个元素执行的函数。使用以下参数调用该函数<ul><li><code>value</code>：每个迭代的值</li><li><code>key</code>：每个迭代的键</li><li><code>map</code>：正在迭代的 Map</li></ul></li><li><code>thisArg</code>：执行 <code>callbackFn</code> 时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">stringMap.<span class="title function_">set</span>(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">stringMap.<span class="title function_">set</span>(<span class="string">&#x27;second&#x27;</span>, <span class="string">&#x27;World&#x27;</span>);</span><br><span class="line">stringMap.<span class="title function_">set</span>(<span class="string">&#x27;third&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 forEach 方法计算并输出每个字符串的长度</span></span><br><span class="line">stringMap.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The length of the string at key &quot;<span class="subst">$&#123;key&#125;</span>&quot; is <span class="subst">$&#123;value.length&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// The length of the string at key &quot;first&quot; is 5</span></span><br><span class="line"><span class="comment">// The length of the string at key &quot;second&quot; is 5</span></span><br><span class="line"><span class="comment">// The length of the string at key &quot;third&quot; is 10</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>keys()</code>：返回一个新的 <code>Map</code> 迭代器对象，该对象包含了此 Map 中的每个元素的键，按插入顺序排列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Map</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;occupation&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 keys 迭代器</span></span><br><span class="line"><span class="keyword">let</span> keys = map.<span class="title function_">keys</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of 迭代 keys</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">    <span class="comment">// name</span></span><br><span class="line"><span class="comment">// age</span></span><br><span class="line"><span class="comment">// occupation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>values()</code>：返回一个新的 <code>Map</code> 迭代器对象，该对象包含了此 Map 中的每个元素的值，按插入顺序排列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Map</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;occupation&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 values 迭代器</span></span><br><span class="line"><span class="keyword">let</span> values = map.<span class="title function_">values</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of 迭代 values</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> values) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    <span class="comment">// Alice</span></span><br><span class="line"><span class="comment">// 30</span></span><br><span class="line"><span class="comment">// Engineer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Map和Object对比">Map和Object对比</h2><table><thead><tr><th></th><th>Map</th><th>Object</th></tr></thead><tbody><tr><td>默认键</td><td>Map 默认不包含任何键，只显式存入键值对</td><td>Object 有原型，包含默认的键，原型键名可能会与自己的键名冲突</td></tr><tr><td>键的类型</td><td>Map 的键可以为任何类型的值</td><td>Object 的键必须为 String 或 Symbol类型</td></tr><tr><td>键的顺序</td><td>Map 会维护键值对的插入顺序，可以根据插入顺序执行迭代操作</td><td>普通的 Object 的键是有序的，但情况并非总是如此，并且其排序比较复杂的</td></tr><tr><td>计算大小</td><td>Map 可以通过 size 属性获取 Map 的大小</td><td>Object 通常获取 Object.keys() 返回的数组长度来计算大小</td></tr><tr><td>操作性能</td><td>在涉及频繁添加和删除键值对的场景中表现更好。</td><td>未针对频繁添加和删除键值对进行优化。</td></tr></tbody></table><h1>WeakMap</h1><p><code>WeakMap</code> 是 JavaScript 中一种专门用于存储对象键值对的集合。WeakMap 是 Map 的“兄弟”类型，其 API 也是 Map 的子集。</p><h2 id="特性">特性</h2><ol><li><p>键必须是对象或 Symbol，值可以是任意的数据类型</p></li><li><p>如果键中的对象只被 <code>WeakMap</code>引用，没有其他引用，那么这个对象会被垃圾回收，只要键没有被垃圾回收，键值对就会存在于<code>WeakMap</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line">weakMap.<span class="title function_">set</span>(&#123;&#125;, <span class="string">&quot;val&quot;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">has</span>(&#123;&#125;));   <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> container = &#123;</span><br><span class="line"> <span class="attr">key</span>: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">weakMap.<span class="title function_">set</span>(container.<span class="property">key</span>, <span class="string">&quot;val&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">has</span>(container.<span class="property">key</span>));   <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure></li><li><p>因为 <code>WeakMap</code> 中的键值对有可能被垃圾回收，所以<code>WeakMap</code>不可迭代</p></li></ol><h2 id="构造函数-2">构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">WeakMap</span>(iterable)</span><br></pre></td></tr></table></figure><ol><li><strong>iterable</strong>（可选）：一个元素是键值对的数组或其他可迭代对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key1 = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;, key2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;, key3 = &#123;<span class="attr">id</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([</span><br><span class="line">    [key1, <span class="string">&quot;val1&quot;</span>],</span><br><span class="line">    [key2, <span class="string">&quot;val2&quot;</span>],</span><br><span class="line">    [key3, <span class="string">&quot;val3&quot;</span>]</span><br><span class="line">]); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">get</span>(key1)); <span class="comment">// val1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">get</span>(key2)); <span class="comment">// val2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">get</span>(key3)); <span class="comment">// val3</span></span><br></pre></td></tr></table></figure><h2 id="实例方法-2">实例方法</h2><ol><li><p><code>set()</code>：向 <code>WeakMap</code> 对象添加或更新一个指定的键值对</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;;</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj1, <span class="string">&#x27;Object 1&#x27;</span>);</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj2, <span class="string">&#x27;Object 2&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>get()</code>：返回该 <code>WeakMap</code>中的指定元素，如果找不到该键，则返回 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;;</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj1, <span class="string">&#x27;Object 1&#x27;</span>);</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj2, <span class="string">&#x27;Object 2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">get</span>(obj1)); <span class="comment">// 输出: &#x27;Object 1&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">get</span>(obj2)); <span class="comment">// 输出: &#x27;Object 2&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><code>has()</code>：返回一个布尔值，指示具有指定键的元素是否存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;;</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj1, <span class="string">&#x27;Object 1&#x27;</span>);</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj2, <span class="string">&#x27;Object 2&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">has</span>(obj1)); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">has</span>(&#123;&#125;));   <span class="comment">// 输出: false (不同的对象引用)</span></span><br></pre></td></tr></table></figure></li><li><p><code>delete()</code>：从该 <code>WeakMap</code> 中删除指定键的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;;</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj1, <span class="string">&#x27;Object 1&#x27;</span>);</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj2, <span class="string">&#x27;Object 2&#x27;</span>);</span><br><span class="line">weakMap.<span class="title function_">delete</span>(obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">has</span>(obj1)); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(19)-结构化数据</title>
    <link href="/2024/08/01/JS%E5%AD%A6%E4%B9%A0(19)-%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/"/>
    <url>/2024/08/01/JS%E5%AD%A6%E4%B9%A0(19)-%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>ArrayBuffer 和 SharedArrayBuffer 对象表示一段二进制数据，用来模拟内存里面的数据。通过这个对象，JavaScript 可以读写二进制数据。</p><span id="more"></span><h1>结构化数据</h1><h2 id="ArrayBuffer">ArrayBuffer</h2><p><code>ArrayBuffer</code>表示通用的原始二进制数据缓冲区，它是一个字节数组。不能直接操作 <code>ArrayBuffer</code> 中的内容，需要通过<code>TypedArray</code>或<code>DataView</code>对象来操作。</p><h3 id="构造函数">构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(length, options)</span><br></pre></td></tr></table></figure><ol><li><code>length</code>：要创建的数组缓冲区的大小（以字节为单位）</li><li><code>options</code>（可选）：一个对象，可以包含<strong>maxByteLength</strong>属性，表示数据缓冲区可以调整的最大大小，以字节为单位</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>, &#123; <span class="attr">maxByteLength</span>: <span class="number">16</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="静态方法">静态方法</h3><ol><li><p><code>isView()</code>：判断传入值是否是 <code>ArrayBuffer</code> 视图之一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 ArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建各种 TypedArray 视图</span></span><br><span class="line"><span class="keyword">const</span> int8View = <span class="keyword">new</span> <span class="title class_">Int8Array</span>(buffer);</span><br><span class="line"><span class="keyword">const</span> float32View = <span class="keyword">new</span> <span class="title class_">Float32Array</span>(buffer);</span><br><span class="line"><span class="keyword">const</span> dataView = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个普通对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查视图和普通对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ArrayBuffer</span>.<span class="title function_">isView</span>(int8View));   <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ArrayBuffer</span>.<span class="title function_">isView</span>(float32View)); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ArrayBuffer</span>.<span class="title function_">isView</span>(dataView));   <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ArrayBuffer</span>.<span class="title function_">isView</span>(obj));        <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="实例属性">实例属性</h3><ol><li><p><strong>byteLength</strong>：返回该数组缓冲区的长度（以字节为单位）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure></li><li><p><strong>maxByteLength</strong>：返回该数组缓冲区可调整到的最大长度（以字节为单位）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>, &#123; <span class="attr">maxByteLength</span>: <span class="number">16</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">maxByteLength</span>); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure></li><li><p><strong>resizable</strong>：返回此数组缓冲区是否可以调整大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer1 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>, &#123; <span class="attr">maxByteLength</span>: <span class="number">16</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> buffer2 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer1.<span class="property">resizable</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer2.<span class="property">resizable</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="实例方法">实例方法</h3><ol><li><p><code>resize()</code>：将 <code>ArrayBuffer</code> 调整为指定的大小，以字节为单位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>, &#123; <span class="attr">maxByteLength</span>: <span class="number">16</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">// 8</span></span><br><span class="line">buffer.<span class="title function_">resize</span>(<span class="number">12</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure></li><li><p><code>slice()</code>：返回一个新的 <code>ArrayBuffer</code>，包含原 <code>ArrayBuffer</code> 实例中从 <code>begin</code>（包含）到 <code>end</code>（不含）的所有字节的副本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向 ArrayBuffer 中写入数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">  view[i] = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新 ArrayBuffer，包含原始缓冲区的一部分</span></span><br><span class="line"><span class="keyword">const</span> newBuffer = buffer.<span class="title function_">slice</span>(<span class="number">4</span>, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">const</span> newView = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(newBuffer);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view); <span class="comment">// 输出: Uint8Array(16) [ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newView); <span class="comment">// 输出: Uint8Array(8) [ 8, 10, 12, 14, 16, 18, 20, 22 ]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="视图">视图</h2><h3 id="TypedArray">TypedArray</h3><ol><li><p><code>Int8Array</code>：表示 8 位带符号整数的数组，每个元素占用 1 字节，范围从 -128 到 127。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> int8Array = <span class="keyword">new</span> <span class="title class_">Int8Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int8Array); <span class="comment">// 输出: Int8Array(4) [1, 2, 3, -4]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Uint8Array</code>：表示 8 位无符号整数的数组，每个元素占用 1 字节，范围从 0 到 255。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uint8Array = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">255</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uint8Array); <span class="comment">// 输出: Uint8Array(4) [1, 2, 3, 255]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Uint8ClampedArray</code>：表示 8 位无符号整数的数组，每个元素占用 1 字节，范围从 0 到 255，超出范围的值会被裁剪。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uint8ClampedArray = <span class="keyword">new</span> <span class="title class_">Uint8ClampedArray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">300</span>, -<span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uint8ClampedArray); <span class="comment">// 输出: Uint8ClampedArray(4) [1, 2, 255, 0]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Int16Array</code>：表示 16 位带符号整数的数组，每个元素占用 2 字节，范围从 -32768 到 32767。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> int16Array = <span class="keyword">new</span> <span class="title class_">Int16Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, -<span class="number">32768</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int16Array); <span class="comment">// 输出: Int16Array(4) [1, 2, 3, -32768]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Uint16Array</code>：表示 16 位无符号整数的数组，每个元素占用 2 字节，范围从 0 到 65535。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uint16Array = <span class="keyword">new</span> <span class="title class_">Uint16Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">65535</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uint16Array); <span class="comment">// 输出: Uint16Array(4) [1, 2, 3, 65535]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Int32Array</code>：表示 32 位带符号整数的数组，每个元素占用 4 字节，范围从 -2,147,483,648 到 2,147,483,647。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> int32Array = <span class="keyword">new</span> <span class="title class_">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, -<span class="number">2147483648</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32Array); <span class="comment">// 输出: Int32Array(4) [1, 2, 3, -2147483648]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Uint32Array</code>：表示 32 位无符号整数的数组，每个元素占用 4 字节，范围从 0 到 4,294,967,295。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uint32Array = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4294967295</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uint32Array); <span class="comment">// 输出: Uint32Array(4) [1, 2, 3, 4294967295]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Float32Array</code>：表示 32 位浮点数的数组，每个元素占用 4 字节，精度约为 7 位十进制数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> float32Array = <span class="keyword">new</span> <span class="title class_">Float32Array</span>([<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, -<span class="number">4.4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(float32Array); <span class="comment">// 输出: Float32Array(4) [1.1, 2.2, 3.3, -4.4]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Float64Array</code>：表示 64 位浮点数的数组，每个元素占用 8 字节，精度约为 15 位十进制数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> float64Array = <span class="keyword">new</span> <span class="title class_">Float64Array</span>([<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, -<span class="number">4.4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(float64Array); <span class="comment">// 输出: Float64Array(4) [1.1, 2.2, 3.3, -4.4]</span></span><br></pre></td></tr></table></figure></li><li><p><code>BigInt64Array</code>：表示 64 位带符号大整数的数组，每个元素占用 8 字节，范围从 $ -2^{63} $ 到  $ 2^{63} - 1 $​​。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigInt64Array = <span class="keyword">new</span> <span class="title class_">BigInt64Array</span>([<span class="title class_">BigInt</span>(<span class="number">1</span>), <span class="title class_">BigInt</span>(<span class="number">2</span>), <span class="title class_">BigInt</span>(-<span class="number">3</span>)]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigInt64Array); <span class="comment">// 输出: BigInt64Array(3) [1n, 2n, -3n]</span></span><br></pre></td></tr></table></figure></li><li><p><code>BigUint64Array</code>：表示 64 位无符号大整数的数组，每个元素占用 8 字节，范围从 0 到  $ 2^{64} - 1 $​。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigUint64Array = <span class="keyword">new</span> <span class="title class_">BigUint64Array</span>([<span class="title class_">BigInt</span>(<span class="number">1</span>), <span class="title class_">BigInt</span>(<span class="number">2</span>), <span class="title class_">BigInt</span>(<span class="number">3</span>)]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigUint64Array); <span class="comment">// 输出: BigUint64Array(3) [1n, 2n, 3n]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="DataView">DataView</h3><h4 id="构造函数-2">构造函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">DataView</span>(buffer, byteOffset, byteLength)</span><br></pre></td></tr></table></figure><ol><li><code>buffer</code>： 要创建视图的 <code>ArrayBuffer</code> 对象。这个缓冲区是 <code>DataView</code> 将用于读取和写入数据的基础</li><li><code>byteOffset</code>（可选）：从 <code>ArrayBuffer</code> 的哪个字节偏移量开始创建 <code>DataView</code>。默认值是 <code>0</code></li><li><code>byteLength</code>（可选）：字节数组中的元素数。如果未指定，则视图的长度将与缓冲区的长度匹配。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>); <span class="comment">// 创建一个长度为 16 字节的 ArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer); <span class="comment">// 创建一个 DataView，覆盖整个 ArrayBuffer</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="property">byteLength</span>); <span class="comment">// 输出: 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>); <span class="comment">// 创建一个长度为 16 字节的 ArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer, <span class="number">4</span>, <span class="number">8</span>); <span class="comment">// 从偏移量 4 开始创建 DataView，长度为 8 字节</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="property">byteLength</span>); <span class="comment">// 输出: 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="property">byteOffset</span>); <span class="comment">// 输出: 4</span></span><br></pre></td></tr></table></figure><h4 id="实例方法-2">实例方法</h4><ol><li><code>get/setInt8</code>：读取/写入指定偏移量的 8 位带符号整数</li><li><code>get/setUint8</code>：读取/写入指定偏移量的 8 位无符号整数</li><li><code>get/setInt16</code>：读取/写入指定偏移量的 16 位带符号整数</li><li><code>get/setUint16</code>：读取/写入指定偏移量的 16 位无符号整数</li><li><code>get/setInt32</code>：读取/写入指定偏移量的 32 位带符号整数</li><li><code>get/setUint32</code>：读取/写入指定偏移量的 32 位无符号整数</li><li><code>get/setFloat16</code>：读取/写入指定偏移量的 16 位浮点数</li><li><code>get/setFloat32</code>：读取/写入指定偏移量的 32 位浮点数</li><li><code>get/setFloat64</code>：读取/写入指定偏移量的 64 位浮点数</li><li><code>get/setBigInt64</code>：读取/写入指定偏移量的 64 位带符号大整数</li><li><code>get/setBigUint64</code>：读取/写入指定偏移量的 64 位无符号大整数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 ArrayBuffer 和 DataView</span></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>); <span class="comment">// 创建一个长度为 16 字节的 ArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入数据</span></span><br><span class="line">view.<span class="title function_">setUint8</span>(<span class="number">0</span>, <span class="number">255</span>);           <span class="comment">// 在偏移量 0 处写入 8 位无符号整数 255</span></span><br><span class="line">view.<span class="title function_">setInt16</span>(<span class="number">1</span>, -<span class="number">12345</span>, <span class="literal">true</span>);  <span class="comment">// 在偏移量 1 处写入 16 位带符号整数 -12345，使用小端序</span></span><br><span class="line">view.<span class="title function_">setFloat32</span>(<span class="number">3</span>, <span class="number">3.14</span>, <span class="literal">false</span>); <span class="comment">// 在偏移量 3 处写入 32 位浮点数 3.14，使用大端序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="title function_">getUint8</span>(<span class="number">0</span>));        <span class="comment">// 输出: 255</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="title function_">getInt16</span>(<span class="number">1</span>, <span class="literal">true</span>));  <span class="comment">// 输出: -12345</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="title function_">getFloat32</span>(<span class="number">3</span>, <span class="literal">false</span>)); <span class="comment">// 输出: 3.140000104904175</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li><p><code>get()</code>有两个参数：第一个参数表示偏移量，第二个参数表示字节序；<code>set()</code>有三个参数：第一个参数表示偏移量，第二个参数表示要设置的值，第三个参数表示数据以什么字节序格式来存储</p></li><li><p><code>Int8</code>和<code>Uint8</code>没有字节序，因此<code>get()</code>只有一个参数，<code>set()</code>有两个参数</p></li><li><p>字节序指的是在存储多字节数据时，字节的顺序排列方式。通常用布尔值表示，<code>true</code>表示小端序，<code>false</code>表示大端序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假设我们有一个 <span class="number">32</span> 位（<span class="number">4</span> 字节）整数 <span class="number">0x12345678</span>。</span><br><span class="line">大端序：<span class="number">0x12</span> <span class="number">0x34</span> <span class="number">0x56</span> <span class="number">0x78</span></span><br><span class="line">小端序：<span class="number">0x78</span> <span class="number">0x56</span> <span class="number">0x34</span> <span class="number">0x12</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="SharedArrayBuffer">SharedArrayBuffer</h2><p><code>SharedArrayBuffer</code>表示通用的原始二进制数据缓冲区，类似于 <code>ArrayBuffer</code> 对象，需要通过<code>TypedArray</code>或<code>DataView</code>对象来操作。、</p><h3 id="构造函数-3">构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(length, options)</span><br></pre></td></tr></table></figure><ol><li><code>length</code>：要创建的数组缓冲区的大小（以字节为单位）</li><li><code>options</code>（可选）：一个对象，可以包含<strong>maxByteLength</strong>属性，表示数据缓冲区可以调整的最大大小，以字节为单位</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">8</span>, &#123; <span class="attr">maxByteLength</span>: <span class="number">16</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="实例属性-2">实例属性</h3><ol><li><p><strong>byteLength</strong>：返回该数组缓冲区的长度（以字节为单位）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure></li><li><p><strong>maxByteLength</strong>：返回该数组缓冲区可调整到的最大长度（以字节为单位）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">8</span>, &#123; <span class="attr">maxByteLength</span>: <span class="number">16</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">maxByteLength</span>); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="实例方法-3">实例方法</h3><ol><li><p><code>slice()</code>：返回一个新的 <code>SharedArrayBuffer</code>，包含原 <code>ArrayBuffer</code> 实例中从 <code>begin</code>（包含）到 <code>end</code>（不含）的所有字节的副本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 SharedArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 Int32Array 视图</span></span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 slice 获取部分缓冲区</span></span><br><span class="line"><span class="keyword">const</span> partialBuffer = sharedBuffer.<span class="title function_">slice</span>(<span class="number">4</span>, <span class="number">12</span>); <span class="comment">// 这里的偏移量和长度以字节为单位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的视图</span></span><br><span class="line"><span class="keyword">const</span> partialView = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(partialBuffer);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(partialView.<span class="property">byteLength</span>); <span class="comment">// 输出: 8（从字节 4 到 12 是 8 字节）</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="ArrayBuffer与SharedArrayBuffer区别">ArrayBuffer与SharedArrayBuffer区别</h2><ol><li>创建和大小<ul><li><code>ArrayBuffer</code>：通过 <code>new ArrayBuffer(size)</code> 创建，其中<code>size</code>是缓冲区的字节大小，一旦创建，<code>ArrayBuffer</code> 的大小不可更改</li><li><code>SharedArrayBuffer</code>：通过 <code>new SharedArrayBuffer(size)</code> 创建，其中 <code>size</code> 是缓冲区的字节大小，<code>SharedArrayBuffer</code> 的大小在创建时固定，无法动态调整</li></ul></li><li>并发和内存共享<ul><li><code>ArrayBuffer</code>：单线程环境中使用的固定大小的内存缓冲区。它不支持直接在多个线程之间共享数据</li><li><code>SharedArrayBuffer</code>：可以在多个线程之间共享内存。它允许不同线程访问相同的内存区域</li></ul></li><li>安全和兼容性<ul><li><code>ArrayBuffer</code>：在所有现代浏览器中都被广泛支持，不受特别的安全限制</li><li><code>SharedArrayBuffer</code>：<code>SharedArrayBuffer</code> 在某些浏览器中可能会由于安全性问题被禁用。需要设置特定的 HTTP 头部（<code>Cross-Origin-Opener-Policy</code> 和 <code>Cross-Origin-Embedder-Policy</code>）才能启用。浏览器可能需要在一些环境中进行额外的配置。</li></ul></li></ol><h2 id="Atomics">Atomics</h2><p><code>Atomics</code> 提供了一组原子操作的方法，用于在多线程环境中操作共享内存。这些操作可以在 <code>SharedArrayBuffer</code> 上执行，以确保数据的一致性和正确性。</p><ol><li><p><code>Atomics.load()</code>：从 <code>typedArray</code> 的指定 <code>index</code> 位置读取值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">42</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Atomics</span>.<span class="title function_">load</span>(int32View, <span class="number">0</span>)); <span class="comment">// 输出: 42</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.store(typedArray, index, value)</code>：将 <code>value</code> 存储到 <code>typedArray</code> 的指定 <code>index</code> 位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">42</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 42</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.add(typedArray, index, value)</code>：将 <code>value</code> 加到 <code>typedArray</code> 的指定 <code>index</code> 位置的当前值，并返回旧值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> oldValue = <span class="title class_">Atomics</span>.<span class="title function_">add</span>(int32View, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 15</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.sub(typedArray, index, value)</code>：从 <code>typedArray</code> 的指定 <code>index</code> 位置的当前值中减去 <code>value</code>，并返回旧值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">const</span> oldValue = <span class="title class_">Atomics</span>.<span class="title function_">sub</span>(int32View, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue); <span class="comment">// 输出: 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 15</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.and(typedArray, index, value)</code>：对 <code>typedArray</code> 的指定 <code>index</code> 位置的当前值进行位与操作（<code>&amp;</code>），并返回旧值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">15</span>); <span class="comment">// 1111 in binary</span></span><br><span class="line"><span class="keyword">const</span> oldValue = <span class="title class_">Atomics</span>.<span class="title function_">and</span>(int32View, <span class="number">0</span>, <span class="number">7</span>); <span class="comment">// 0111 in binary</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue); <span class="comment">// 输出: 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 7</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.or(typedArray, index, value)</code>：对 <code>typedArray</code> 的指定 <code>index</code> 位置的当前值进行位或操作（<code>|</code>），并返回旧值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">10</span>); <span class="comment">// 1010 in binary</span></span><br><span class="line"><span class="keyword">const</span> oldValue = <span class="title class_">Atomics</span>.<span class="title function_">or</span>(int32View, <span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 0011 in binary</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 11</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.xor(typedArray, index, value)</code>：对 <code>typedArray</code> 的指定 <code>index</code> 位置的当前值进行位异或操作（<code>^</code>），并返回旧值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">10</span>); <span class="comment">// 1010 in binary</span></span><br><span class="line"><span class="keyword">const</span> oldValue = <span class="title class_">Atomics</span>.<span class="title function_">xor</span>(int32View, <span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 0011 in binary</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 9</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.exchange(typedArray, index, value)</code>：将 <code>typedArray</code> 的指定 <code>index</code> 位置的值替换为 <code>value</code>，并返回旧值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> oldValue = <span class="title class_">Atomics</span>.<span class="title function_">exchange</span>(int32View, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 20</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.compareExchange(typedArray, index, expectedValue, newValue)</code>：将 <code>typedArray</code> 的指定 <code>index</code> 位置的值替换为 <code>newValue</code>，当且仅当当前位置的值等于 <code>expectedValue</code>。返回当前值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> currentValue = <span class="title class_">Atomics</span>.<span class="title function_">compareExchange</span>(int32View, <span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(currentValue); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 20</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.wait(typedArray, index, value, timeout)</code>：阻塞当前线程，直到 <code>typedArray</code> 的指定 <code>index</code> 位置的值变为 <code>value</code>，或者超时（如果指定了 <code>timeout</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在另一个线程中：</span></span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">wait</span>(int32View, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>); <span class="comment">// 等待直到值变为 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.waitAsync(typedArray, index, value, timeout)</code>：异步等待，直到 <code>typedArray</code> 的指定 <code>index</code> 位置的值变为 <code>value</code>，或者超时（如果指定了 <code>timeout</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个共享内存缓冲区</span></span><br><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储初始值</span></span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步函数，使用 Atomics.waitAsync() 等待值变化</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">waitForValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Waiting for value to change...&#x27;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Atomics</span>.<span class="title function_">waitAsync</span>(int32View, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5000</span>); <span class="comment">// 最多等待 5 秒</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Value changed to:&#x27;</span>, <span class="title class_">Atomics</span>.<span class="title function_">load</span>(int32View, <span class="number">0</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error or timeout:&#x27;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用异步函数</span></span><br><span class="line"><span class="title function_">waitForValue</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟值变化</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// 修改共享内存中的值</span></span><br><span class="line">    <span class="title class_">Atomics</span>.<span class="title function_">notify</span>(int32View, <span class="number">0</span>); <span class="comment">// 唤醒等待中的线程</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Value updated and waiting thread notified&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.isLockFree(size)</code>：检测当前平台是否能够在不使用锁的情况下执行<code>size</code>大小的原子操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Atomics</span>.<span class="title function_">isLockFree</span>(<span class="number">1</span>)); <span class="comment">// 检查是否支持 8 位的原子操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Atomics</span>.<span class="title function_">isLockFree</span>(<span class="number">2</span>)); <span class="comment">// 检查是否支持 16 位的原子操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Atomics</span>.<span class="title function_">isLockFree</span>(<span class="number">4</span>)); <span class="comment">// 检查是否支持 32 位的原子操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Atomics</span>.<span class="title function_">isLockFree</span>(<span class="number">8</span>)); <span class="comment">// 检查是否支持 64 位的原子操作</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.notify(typedArray, index, count)</code>：唤醒在共享内存中的某个位置上等待的线程。这个方法与 <code>Atomics.wait()</code> 配合使用，用于在多线程环境中管理线程间的同步</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个共享内存缓冲区</span></span><br><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储初始值</span></span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在另一个线程中，线程 A 等待共享内存中的值变为 1</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;worker.js&#x27;</span>); <span class="comment">// 假设有一个 worker.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// worker.js 内容示例</span></span><br><span class="line">self.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="title class_">Atomics</span>.<span class="title function_">wait</span>(int32View, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 等待直到值变为 1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Worker: Value changed to&#x27;</span>, <span class="title class_">Atomics</span>.<span class="title function_">load</span>(int32View, <span class="number">0</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在主线程中，设置一个超时，模拟对共享内存的更改</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// 修改共享内存中的值</span></span><br><span class="line">    <span class="title class_">Atomics</span>.<span class="title function_">notify</span>(int32View, <span class="number">0</span>); <span class="comment">// 唤醒等待中的线程</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Main thread: Value updated and worker notified&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="JSON">JSON</h2><p>JSON 是一种语法，用来序列化对象、数组、数值、字符串、布尔值和 null。基于 JavaScript 语法，但与之不同</p><h3 id="基本语法">基本语法</h3><ol><li>数据以键值对形式出现<ul><li>键（key）是字符串</li><li>值（value）可以是字符串、数字、布尔值、<code>null</code>、对象（JSON 对象）、数组（JSON 数组）</li></ul></li><li>键值之间以冒号分隔</li><li>每个键值对之间用逗号分隔</li><li>JSON 数据使用大括号 <code>&#123;&#125;</code> 表示对象，使用方括号 <code>[]</code> 表示数组</li></ol><h3 id="静态方法-2">静态方法</h3><ol><li><p><code>JSON.stringify()</code>：将 JavaScript 对象或数组转换为 JSON 字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">courses</span>: [<span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Science&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonString);</span><br><span class="line"><span class="comment">// 输出: &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:25,&quot;courses&quot;:[&quot;Math&quot;,&quot;Science&quot;]&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>JSON.parse()</code>：将 JSON 字符串转换为 JavaScript 对象或数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonString = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:25,&quot;courses&quot;:[&quot;Math&quot;,&quot;Science&quot;]&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonString);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="comment">// 输出: &#123; name: &#x27;Alice&#x27;, age: 25, courses: [ &#x27;Math&#x27;, &#x27;Science&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(18)-Array</title>
    <link href="/2024/07/31/JS%E5%AD%A6%E4%B9%A0(18)-Array/"/>
    <url>/2024/07/31/JS%E5%AD%A6%E4%B9%A0(18)-Array/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 中数组是一组有序的数据，数组中每个槽位可以存储任意类型的数据。数组也是动态大小的，会随着数据添加而自动增长。JavaScript 中数组的索引是从 0 开始，数组的复制操作是浅拷贝。</p><span id="more"></span><h1>Array</h1><p>JavaScript中的<code>Array</code>对象是一个用于创建和操作数组的全局对象。数组是一种高阶的数据结构，可以存储多个值并按索引进行访问。</p><h2 id="数组字面量">数组字面量</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h2 id="构造函数">构造函数</h2><p><code>Array()</code> 构造函数用于创建 Array 对象，调用 <code>Array()</code> 时可以使用或不使用 new都会创建一个新的 <code>Array</code> 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(element0)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(element0, element1, … , elementN)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(arrayLength)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>()</span><br><span class="line"><span class="title class_">Array</span>(element0)</span><br><span class="line"><span class="title class_">Array</span>(element0, element1,  … , elementN)</span><br><span class="line"><span class="title class_">Array</span>(arrayLength)</span><br></pre></td></tr></table></figure><ol><li><p><strong>elementN</strong>：根据给定的元素创建数组，但是当仅有一个参数且为数字时除外</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayOfOne = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;2&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayOfOne.<span class="property">length</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayOfOne); <span class="comment">// [&#x27;2&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>arrayLength</strong>：创建该属性设置的长度的空数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayEmpty = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayEmpty.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayEmpty); <span class="comment">// [empty × 2]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="静态方法">静态方法</h2><ol><li><p><code>Array.from()</code>：用于将类数组结构转换为数组实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike, mapFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>arrayLike</code>：想要转换成数组的类数组对象或可迭代对象。</li><li><code>mapFn</code>（可选）：如果指定了该参数，则新数组中的每个元素会执行该回调函数。</li><li><code>thisArg</code>（可选）：执行 <code>mapFn</code> 函数时 <code>this</code> 对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要转换成数组的类数组或可迭代对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">// [&#x27;f&#x27;, &#x27;o&#x27;, &#x27;o&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数为可选的映射函数，函数中第一个参数是数组当前处理的元素，第二个参数为数组索引</span></span><br><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(a1, <span class="function"><span class="params">x</span> =&gt;</span> x**<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2); <span class="comment">// [1, 4, 9, 16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三个参数为映射函数中this的值，在箭头函数中不适用</span></span><br><span class="line"><span class="keyword">const</span> a3 = <span class="title class_">Array</span>.<span class="title function_">from</span>(a1, <span class="keyword">function</span>(<span class="params">x</span>) &#123;<span class="keyword">return</span> x**<span class="variable language_">this</span>.<span class="property">exponent</span>&#125;, &#123;<span class="attr">exponent</span>: <span class="number">2</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a3); <span class="comment">// [1, 4, 9, 16] </span></span><br></pre></td></tr></table></figure></li><li><p><code>Array.fromAsync()</code>：与<code>from()</code>方法类似，但是可以操作异步可迭代对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncIterable = (<span class="keyword">async</span> <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">10</span> * i));</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">fromAsync</span>(asyncIterable).<span class="title function_">then</span>(<span class="function">(<span class="params">array</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(array)); <span class="comment">// [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Array.isArray()</code>：用于确定传递的值是否是一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="string">&#x27;[]&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Array.of()</code>：通过可变数量的参数创建一个新的 <code>Array</code> 实例，而不考虑参数的数量或类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="literal">true</span>)); <span class="comment">// [&#x27;foo&#x27;, 2, &#x27;bar&#x27;, true]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">of</span>()); <span class="comment">// []</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例属性">实例属性</h2><ol><li><p><strong>length</strong>：表示该数组中元素的个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 输出: 3</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><h3 id="迭代器方法">迭代器方法</h3><ol><li><p><code>keys()</code>：返回数组索引的迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>, <span class="string">&quot;qux&quot;</span>]; </span><br><span class="line"><span class="keyword">const</span> aKeys = <span class="title class_">Array</span>.<span class="title function_">from</span>(a.<span class="title function_">keys</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aKeys); <span class="comment">// [0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><code>values()</code>：返回数组元素的迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>, <span class="string">&quot;qux&quot;</span>]; </span><br><span class="line"><span class="keyword">const</span> aValues = <span class="title class_">Array</span>.<span class="title function_">from</span>(a.<span class="title function_">values</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aValues); <span class="comment">//  [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;qux&quot;] </span></span><br></pre></td></tr></table></figure></li><li><p><code>entries()</code>：返回索引/值对的迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>, <span class="string">&quot;qux&quot;</span>]; </span><br><span class="line"><span class="keyword">const</span> aEntries = <span class="title class_">Array</span>.<span class="title function_">from</span>(a.<span class="title function_">entries</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aEntries); <span class="comment">//   [[0, &quot;foo&quot;], [1, &quot;bar&quot;], [2, &quot;baz&quot;], [3, &quot;qux&quot;]]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="复制填充方法">复制填充方法</h3><ol><li><p><code>fill()</code>：向一个已有的数组中插入全部或部分相同的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">fill</span>(value, start, end)</span><br></pre></td></tr></table></figure><ul><li><code>value</code>：用来填充数组元素的值。</li><li><code>start</code>（可选）：开始填充的位置，默认为 <code>0</code>。</li><li><code>end</code>（可选）：停止填充的位置（不包括该位置），默认为 <code>this.length</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [0, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 0, 0, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>copyWithin()</code>：复制数组的一部分到同一数组中的另一个位置，并返回它，而不修改其大小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">copyWithin</span>(target, start, end)</span><br></pre></td></tr></table></figure><ul><li><code>target</code>：开始替换的目标位置。</li><li><code>start</code>（可选）：要复制的元素序列的起始位置，默认为 <code>0</code>。</li><li><code>end</code>（可选）：要复制的元素序列的结束位置（不包括该位置），默认为数组的长度。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">copyWithin</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [4, 5, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">copyWithin</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 4, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="转换方法">转换方法</h3><ol><li><p><code>toLocaleString()</code>：返回一个字符串表示数组的元素，每个元素通过调用它们自己的 <code>toLocaleString</code> 方法转换为字符串，并且使用特定于语言环境的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">toLocaleString</span>(locales, options)</span><br></pre></td></tr></table></figure><ul><li><code>locales</code>（可选）：一种 BCP 47 语言标签的字符串或字符串数组，表示所需的语言环境。</li><li><code>options</code>（可选）：一个对象，其属性是配置语言环境中某些特定格式化行为的属性。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;21 Dec 1997 14:12:00 UTC&#x27;</span>)];</span><br><span class="line"><span class="keyword">let</span> localeString = arr.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;en&#x27;</span>, &#123; <span class="attr">timeZone</span>: <span class="string">&#x27;UTC&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localeString); <span class="comment">// &quot;1,a,12/21/1997, 2:12:00 PM&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toString()</code>：返回一个字符串，表示指定的数组及其元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1a&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">toString</span>()); <span class="comment">// &quot;1,2,a,1a&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>valueOf()</code>：用于返回数组对象本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> value = arr.<span class="title function_">valueOf</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出: [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>join()</code>：将一个数组的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。如果数组只有一个元素，那么将返回该元素而不使用分隔符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">join</span>(separator)</span><br></pre></td></tr></table></figure><ul><li><code>separator</code>（可选）：指定一个字符串来分隔数组的每个元素。如果省略，数组元素用逗号（<code>,</code>）分隔。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">join</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出: &quot;Hello,world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;awesome&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">// 输出: &quot;Hello-world-JavaScript-is-awesome&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>)); <span class="comment">// 输出: &quot;Hello|world|JavaScript|is|awesome&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));  <span class="comment">// 输出: &quot;HelloworldJavaScriptisawesome&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="栈方法">栈方法</h3><ol><li><p><code>pop()</code>：删除数组末尾的一个元素，返回该元素，会更改数组的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> lastElement = arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lastElement); <span class="comment">// 输出: 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2]</span></span><br></pre></td></tr></table></figure></li><li><p><code>push()</code>：将指定的元素添加到数组的末尾，并返回新的数组长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="队列方法">队列方法</h3><ol><li><p><code>shift()</code>：从数组中删除<strong>第一个</strong>元素，并返回该元素的值。会更改数组的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> firstElement = arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstElement); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><code>unshift()</code>：将指定元素添加到数组的开头，并返回数组的新长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="迭代方法">迭代方法</h3><ol><li><p><code>forEach()</code>：对数组的每个元素执行一次给定的函数，没有返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">forEach</span>(<span class="title function_">callback</span>(currentValue, index, array), thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：forEach 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  array[index] = element * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// 输出: [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">multiplier</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr2.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(element * <span class="variable language_">this</span>.<span class="property">multiplier</span>);</span><br><span class="line">&#125;, obj);</span><br></pre></td></tr></table></figure></li><li><p><code>every()</code>：测试数组中的所有元素是否都通过了指定函数的测试。该方法返回一个布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">every</span>(<span class="title function_">callback</span>(element, index, array), thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：every 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> allEven = arr1.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(allEven); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">min</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">20</span>];</span><br><span class="line"><span class="keyword">let</span> allGreaterThanMin = arr2.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="variable language_">this</span>.<span class="property">min</span>;</span><br><span class="line">&#125;, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(allGreaterThanMin); <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure></li><li><p><code>filter()</code>：创建一个新数组，新数组中的元素是通过测试的所有数组元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">filter</span>(<span class="title function_">callback</span>(element, index, array), thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：filter 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> evenNumbers = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evenNumbers); <span class="comment">// 输出: [2, 4]</span></span><br></pre></td></tr></table></figure></li><li><p><code>map()</code>：创建一个新数组，新数组中的元素是通过调用提供的函数对每个元素进行处理的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">map</span>(<span class="title function_">callback</span>(element, index, array), thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：map 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> doubled = arr1.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(doubled); <span class="comment">// 输出: [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> squared = arr2.<span class="title function_">map</span>(<span class="function"><span class="params">element</span> =&gt;</span> element ** <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(squared); <span class="comment">// 输出: [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> names = people.<span class="title function_">map</span>(<span class="function"><span class="params">person</span> =&gt;</span> person.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names); <span class="comment">// 输出: [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">factor</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> multiplied = arr3.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element * <span class="variable language_">this</span>.<span class="property">factor</span>;</span><br><span class="line">&#125;, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(multiplied); <span class="comment">// 输出: [10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure></li><li><p><code>some()</code>：测试数组中是否至少有一个元素通过了由提供的函数实现的测试。如果在数组中找到一个元素使得提供的函数返回 true，则返回 true；否则返回 false。它不会修改数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">some</span>(<span class="title function_">callback</span>(element, index, array), thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：some 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> hasEven = arr1.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hasEven); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> hasYoungPerson = people.<span class="title function_">some</span>(<span class="function"><span class="params">person</span> =&gt;</span> person.<span class="property">age</span> &lt; <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hasYoungPerson); <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="归并方法">归并方法</h3><ol><li><p><code>reduce()</code>：将数组中的所有元素按某种规则累计成一个单一的值。这个方法会遍历数组中的每个元素，执行提供的函数，并将结果汇总为最终的单一值。<code>reduce</code> 方法不会改变原数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">reduce</span>(<span class="title function_">callback</span>(accumulator, currentValue, currentIndex, array), initialValue)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受四个参数<ul><li><code>accumulator</code>：上一次调用 <code>callback</code> 时返回的值。第一次调用时，如果指定了 <code>initialValue</code> 则为指定的值，否则为 <code>array[0]</code> 的值。</li><li><code>currentValue</code>：当前元素的值。在第一次调用时，如果指定了 <code>initialValue</code>，则为 <code>array[0]</code> 的值，否则为 <code>array[1]</code>。</li><li><code>currentIndex</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：reduce 方法正在操作的数组</li></ul></li><li><code>initialValue</code>（可选）：指定第一次调用 <code>callback</code> 时 <code>accumulator</code> 的初始值。如果没有提供，<code>accumulator</code> 将使用数组中的<code>array[0]</code> 的值，<code>currentValue</code> 是<code>array[1]</code> 的值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> sum = arr1.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">accumulator, currentValue</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 输出: 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> product = arr2.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">accumulator, currentValue</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator * currentValue;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(product); <span class="comment">// 输出: 120</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> totalAge = people.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">accumulator, person</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + person.<span class="property">age</span>;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(totalAge); <span class="comment">// 输出: 90</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> max = arr3.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(accumulator, currentValue);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max); <span class="comment">// 输出: 5</span></span><br></pre></td></tr></table></figure></li><li><p><code>reduceRight()</code>：与 <code>reduce()</code> 方法类似，都是用于将数组中的所有元素按某种规则累计成一个单一的值。不同的是，<code>reduceRight()</code> 从数组的最后一个元素开始向前遍历，直到第一个元素。</p></li></ol><h3 id="排序方法">排序方法</h3><ol><li><p><code>reverse()</code>：反转数组中的元素，并返回数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure></li><li><p><code>sort()</code>：对数组的元素进行排序并返回数组，默认排序是将元素转换为字符串，然后按照它们的 UTF-16 码元值升序排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">sort</span>(compareFn)</span><br></pre></td></tr></table></figure><ul><li><code>compareFn</code>（可选）：一个用于排序的比较函数。它接受两个参数 <code>a</code> 和 <code>b</code>，并根据它们的顺序来确定排序顺序。如果未提供 <code>compareFn</code>，则默认按照字符串的 Unicode 编码顺序进行排序。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">10</span>, <span class="number">5</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">50</span>];</span><br><span class="line">numbers.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// 输出: [1, 5, 10, 50, 100]</span></span><br></pre></td></tr></table></figure></li><li><p><code>toReversed()</code>：返回一个新数组，反转数组中的元素，而原始数组不会被修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> reversed = numbers.<span class="title function_">toReversed</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reversed); <span class="comment">// 输出: [5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// 输出: [1, 2, 3, 4, 5] (原始数组未被修改)</span></span><br></pre></td></tr></table></figure></li><li><p><code>toSorted()</code>：返回一个新数组，反转数组中的元素，而原始数组不会被修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">toSorted</span>(compareFn);</span><br></pre></td></tr></table></figure><ul><li><code>compareFn</code>（可选）：一个用于排序的比较函数。它接受两个参数 <code>a</code> 和 <code>b</code>，并根据它们的顺序来排序元素。如果未提供 <code>compareFn</code>，则默认为升序排序。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> sorted = numbers.<span class="title function_">toSorted</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sorted); <span class="comment">// 输出: [1, 2, 3, 5, 8]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// 输出: [5, 3, 8, 1, 2] (原始数组未被修改)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">10</span>, <span class="number">5</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">let</span> sorted = numbers.<span class="title function_">toSorted</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sorted); <span class="comment">// 输出: [1, 5, 10, 50, 100]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// 输出: [10, 5, 100, 1, 50]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="操作方法">操作方法</h3><ol><li><p><code>concat()</code>：用于合并两个或更多的数组或值，并返回一个新的数组。该方法不会改变原始数组，而是返回一个新的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">concat</span>(value1, value2, ..., valueN)</span><br></pre></td></tr></table></figure><ul><li><code>value1, value2, ..., valueN</code>：要合并到数组中的值或数组。可以是任意数量的数组或值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> combined = arr1.<span class="title function_">concat</span>(arr2, arr3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(combined); <span class="comment">// 输出: [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li><li><p><code>slice()</code>：从数组中返回选定的元素，生成一个新数组。它不会修改原始数组，而是返回一个包含选定元素的新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">slice</span>(begin, end)</span><br></pre></td></tr></table></figure><ul><li><code>begin</code>（可选）：从哪个索引开始选择元素。包括该索引。默认为 <code>0</code>。</li><li><code>end</code>（可选）：在哪个索引停止选择元素。排除该索引。默认为数组的长度。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newArr1 = arr1.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr1); <span class="comment">// 输出: [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newArr2 = arr2.<span class="title function_">slice</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr2); <span class="comment">// 输出: [3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>splice()</code>：用于在数组中添加、删除或替换元素，并返回被删除的元素。<code>splice()</code> 方法会修改原始数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">splice</span>(start, deleteCount, item1, item2, ..., itemN)</span><br></pre></td></tr></table></figure><ul><li><code>start</code>：从哪个索引开始改变数组。负值表示从数组的末尾开始计算位置。</li><li><code>deleteCount</code>（可选）：要删除的元素个数。如果省略或为 <code>0</code>，则不会删除元素。</li><li><code>item1, item2, ..., itemN</code>（可选）：要添加到数组中的元素。如果没有提供，则只删除元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> removed1 = arr1.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// 输出: [1, 2, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed1); <span class="comment">// 输出: [3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr3.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3); <span class="comment">// 输出: [1, &#x27;a&#x27;, &#x27;b&#x27;, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>toSpliced()</code>：返回一个新数组，该数组是通过对原始数组进行指定的删除和插入操作得到的，而原始数组不会被修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">toSpliced</span>(start, deleteCount, ...items)</span><br></pre></td></tr></table></figure><ul><li><code>start</code>：从哪个索引开始改变数组。负值表示从数组的末尾开始计算位置。</li><li><code>deleteCount</code>（可选）：要删除的元素个数。如果省略或为 <code>0</code>，则不会删除元素。</li><li><code>item1, item2, ..., itemN</code>（可选）：要添加到数组中的元素。如果没有提供，则只删除元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newArray = numbers.<span class="title function_">toSpliced</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray); <span class="comment">// 输出: [1, 2, 6, 7, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// 输出: [1, 2, 3, 4, 5] (原始数组未被修改)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="搜索和位置方法">搜索和位置方法</h3><ol><li><p><code>indexOf()</code>：返回数组中第一次出现给定元素的下标，如果不存在则返回 -1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">indexOf</span>(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><ul><li><code>searchElement</code>：要查找的元素。</li><li><code>fromIndex</code>（可选）：开始搜索的索引位置。默认为 <code>0</code>。如果 <code>fromIndex</code> 为负数，它会从数组的末尾开始计算位置。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> index1 = arr1.<span class="title function_">indexOf</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index1); <span class="comment">// 输出: 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> index2 = arr2.<span class="title function_">indexOf</span>(<span class="number">7</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index2); <span class="comment">// 输出: -1</span></span><br></pre></td></tr></table></figure></li><li><p><code>lastIndexOf()</code>：返回数组中给定元素最后一次出现的索引，如果不存在则返回 -1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">lastIndexOf</span>(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><ul><li><code>searchElement</code>：要查找的元素。</li><li><code>fromIndex</code>（可选）：开始搜索的索引位置。默认为 <code>0</code>。如果 <code>fromIndex</code> 为负数，它会从数组的末尾开始计算位置。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> index1 = arr1.<span class="title function_">lastIndexOf</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index1); <span class="comment">// 输出: 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> index2 = arr2.<span class="title function_">lastIndexOf</span>(<span class="number">7</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index2); <span class="comment">// 输出: -1</span></span><br></pre></td></tr></table></figure></li><li><p><code>includes()</code>：判断数组是否包含指定的元素。如果数组中包含该元素，则返回 <code>true</code>；否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">includes</span>(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><ul><li><code>searchElement</code>：要查找的元素。</li><li><code>fromIndex</code>（可选）：开始搜索的索引位置。默认为 <code>0</code>。如果 <code>fromIndex</code> 为负数，它会从数组的末尾开始计算位置。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> includes1 = arr1.<span class="title function_">includes</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(includes1); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> includes2 = arr2.<span class="title function_">includes</span>(<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(includes2); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li><li><p><code>find()</code>：返回数组中第一个满足提供测试函数的元素。如果没有找到满足条件的元素，则返回 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">find</span>(callbackFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：find 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">let</span> found1 = numbers1.<span class="title function_">find</span>(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(found1); <span class="comment">// 输出: 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people2 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> ageThreshold = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> person2 = people2.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">p</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> p.<span class="property">age</span> &gt; <span class="variable language_">this</span>;</span><br><span class="line">&#125;, ageThreshold);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2); <span class="comment">// 输出: &#123; name: &#x27;Charlie&#x27;, age: 35 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>findIndex()</code>：返回数组中第一个满足提供测试函数的元素的索引。如果没有找到符合条件的元素，则返回 <code>-1</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">findIndex</span>(callbackFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：findIndex 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">let</span> index1 = numbers1.<span class="title function_">findIndex</span>(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index1); <span class="comment">// 输出: 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people2 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> ageThreshold = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> index4 = people2.<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">p</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> p.<span class="property">age</span> &gt; <span class="variable language_">this</span>;</span><br><span class="line">&#125;, ageThreshold);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index4); <span class="comment">// 输出: 2</span></span><br></pre></td></tr></table></figure></li><li><p><code>findLast()</code>：返回数组中最后一个满足提供测试函数的元素。如果没有找到满足条件的元素，则返回 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">findLast</span>(callbackFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：findLast 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> found1 = numbers1.<span class="title function_">findLast</span>(<span class="function"><span class="params">element</span> =&gt;</span> element === <span class="number">8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(found1); <span class="comment">// 输出: 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people1 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Diana&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> person1 = people1.<span class="title function_">findLast</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">age</span> === <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1); <span class="comment">// 输出: &#123; name: &#x27;Diana&#x27;, age: 30 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people2 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Diana&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> ageThreshold = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> person2 = people2.<span class="title function_">findLast</span>(<span class="keyword">function</span>(<span class="params">p</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> p.<span class="property">age</span> === <span class="variable language_">this</span>;</span><br><span class="line">&#125;, ageThreshold);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2); <span class="comment">// 输出: &#123; name: &#x27;Diana&#x27;, age: 30 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>findLastIndex()</code>：返回数组中最后一个满足提供测试函数的元素的索引。如果没有找到满足条件的元素，则返回 <code>-1</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">findLastIndex</span>(callbackFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：findLastIndex 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> index1 = numbers1.<span class="title function_">findLastIndex</span>(<span class="function"><span class="params">element</span> =&gt;</span> element === <span class="number">8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index1); <span class="comment">// 输出: 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people1 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Diana&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> index2 = people1.<span class="title function_">findLastIndex</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">age</span> === <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index2); <span class="comment">// 输出: 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people2 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Diana&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> ageThreshold = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> index4 = people2.<span class="title function_">findLastIndex</span>(<span class="keyword">function</span>(<span class="params">p</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> p.<span class="property">age</span> === <span class="variable language_">this</span>;</span><br><span class="line">&#125;, ageThreshold);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index4); <span class="comment">// 输出: 3</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="扁平化方法">扁平化方法</h3><ol><li><p><code>flat()</code>：创建一个新的数组，并根据指定深度递归地将所有子数组元素拼接到新的数组中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">flat</span>(depth);</span><br></pre></td></tr></table></figure><ul><li><strong><code>depth</code></strong>（可选）：一个整数，表示递归的深度。默认值是 <code>1</code>。如果 <code>depth</code> 为 <code>Infinity</code>，则会递归所有嵌套的数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nestedArray = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]]]];</span><br><span class="line"><span class="keyword">let</span> flatArray = nestedArray.<span class="title function_">flat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flatArray); <span class="comment">// 输出: [1, 2, [3, [4]]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> deeplyNestedArray = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>]]]]];</span><br><span class="line"><span class="keyword">let</span> flatArray3 = deeplyNestedArray.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flatArray3); <span class="comment">// 输出: [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>flatMap()</code>：对数组中的每个元素应用给定的回调函数，然后将结果展开一级，返回一个新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">flatMap</span>(callback, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：一个生产新数组元素的函数。接收三个参数：<ul><li><code>currentValue</code>: 当前数组元素。</li><li><code>index</code>（可选）：当前元素的索引。</li><li><code>array</code>（可选）：原始数组。</li></ul></li><li><code>thisArg</code>（可选）：执行 <code>callback</code> 函数时 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">flatMap</span>(<span class="function"><span class="params">x</span> =&gt;</span> [x, x * <span class="number">2</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// 输出: [1, 2, 2, 4, 3, 6, 4, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> newArr2 = arr2.<span class="title function_">flatMap</span>(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span> ? [x] : []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr2); <span class="comment">// 输出: [2, 4]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="其他操作方法">其他操作方法</h3><ol><li><p><code>at()</code>：使用正负整数索引来访问数组中的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = array.<span class="title function_">at</span>(index);</span><br></pre></td></tr></table></figure><ul><li><code>index</code>: 一个整数，表示要访问的元素的索引。可以是正数或负数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用正索引</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(<span class="number">0</span>));  <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(<span class="number">2</span>));  <span class="comment">// 输出: 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(<span class="number">4</span>));  <span class="comment">// 输出: 50</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(<span class="number">5</span>));  <span class="comment">// 输出: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用负索引</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(-<span class="number">1</span>)); <span class="comment">// 输出: 50</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(-<span class="number">2</span>)); <span class="comment">// 输出: 40</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(-<span class="number">5</span>)); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(-<span class="number">6</span>)); <span class="comment">// 输出: undefined</span></span><br></pre></td></tr></table></figure></li><li><p><code>with()</code>：返回一个新的数组，该数组是对原始数组进行指定索引位置的元素替换后的结果，而不修改原始数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">with</span>(index, value);</span><br></pre></td></tr></table></figure><ul><li><code>index</code>: 要替换的元素的索引。如果是负数，表示从数组末尾开始计数。</li><li><code>value</code>: 要替换的新值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">with</span>(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// 输出: [1, 2, 10, 4, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 3, 4, 5] (原始数组未被修改)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr2 = arr.<span class="title function_">with</span>(-<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr2); <span class="comment">// 输出: [1, 2, 3, 4, 10]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 3, 4, 5] (原始数组未被修改)</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(17)-Global</title>
    <link href="/2024/07/30/JS%E5%AD%A6%E4%B9%A0(17)-Global/"/>
    <url>/2024/07/30/JS%E5%AD%A6%E4%B9%A0(17)-Global/</url>
    
    <content type="html"><![CDATA[<p>Global 对象代码不会显式地访问它。Global 对象针对的是不属于任何对象的属性和方法。全局作用域中定义的变量和函数都会变成 Global 对象的属性 。包括 <code>isNaN()</code>、<code>isFinite()</code>、<code>parseInt()</code>和 <code>parseFloat()</code>，实际上都是 Global 对象的方法。除了这些，Global 对象上还有另外一些方法。</p><span id="more"></span><h1>Global</h1><p>JavaScript 中的 Global 对象提供了许多全局属性和方法，这些属性和方法在任何 JavaScript 代码中都可以直接访问，无需导入或引用。</p><h2 id="全局对象">全局对象</h2><ol><li><p><code>Infinity</code>：表示正无穷大，超出了 JavaScript 能表示的最大数值范围。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span>); <span class="comment">// 输出: Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> / <span class="number">0</span>); <span class="comment">// 输出: Infinity</span></span><br></pre></td></tr></table></figure></li><li><p><code>NaN</code>：表示一个非数字值，通常用于表示无法计算的数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>); <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> / <span class="number">0</span>); <span class="comment">// 输出: NaN</span></span><br></pre></td></tr></table></figure></li><li><p><code>undefined</code>：表示一个未定义的值，通常用于尚未赋值的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: undefined</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="全局函数">全局函数</h2><ol><li><p><code>isFinite()</code>：检查传入的值是否为有限数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="number">10</span>)); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>)); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li><li><p><code>isNaN()</code>：检查传入的值是否为 <code>NaN</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="number">10</span>)); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li><li><p><code>parseFloat()</code>：将一个字符串解析为浮点数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&quot;10.5&quot;</span>)); <span class="comment">// 输出: 10.5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&quot;10&quot;</span>)); <span class="comment">// 输出: 10</span></span><br></pre></td></tr></table></figure></li><li><p><code>parseInt()</code>：将一个字符串解析为整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;10.5&quot;</span>)); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>)); <span class="comment">// 输出: 10</span></span><br></pre></td></tr></table></figure></li><li><p><code>encodeURI()</code>：用于对整个 URI 进行编码，不会编码属于 URL 组件的特殊字符，比如冒号、斜杠、问号、 井号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;https://www.example.com/?key=value with spaces&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> encodedUri = <span class="built_in">encodeURI</span>(uri);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(encodedUri); <span class="comment">// 输出: https://www.example.com/?key=value%20with%20spaces</span></span><br></pre></td></tr></table></figure></li><li><p><code>decodeURI()</code>：只对使用 <code>encodeURI()</code>编码过的字符解码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;https://www.example.com/?key=value with spaces&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> encodedUri = <span class="built_in">encodeURI</span>(uri);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(encodedUri); <span class="comment">// 输出: https://www.example.com/?key=value%20with%20spaces</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decodedUri = <span class="built_in">decodeURI</span>(encodedUri);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(decodedUri); <span class="comment">// 输出: https://www.example.com/?key=value with spaces</span></span><br></pre></td></tr></table></figure></li><li><p><code>encodeURIComponent()</code>：会编码它发现的所有非标准字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;http://www.example.com/#start&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> encodedUriComponent = <span class="built_in">encodeURIComponent</span>(uri);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(encodedUriComponent); <span class="comment">// &quot;http%3A%2F%2Fwww.example.com%2F%23start&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>decodeURIComponent()</code>：解码所有 被 <code>encodeURIComponent()</code>编码的字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;http://www.example.com/#start&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> encodedUriComponent = <span class="built_in">encodeURIComponent</span>(uri);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(encodedUriComponent); <span class="comment">// &quot;http%3A%2F%2Fwww.example.com%2F%23start&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decodedUriComponent = <span class="built_in">decodeURIComponent</span>(encodedUriComponent);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(decodedUriComponent); <span class="comment">// &quot;http://www.example.com/#start&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>eval()</code>：将传入的字符串作为 JavaScript 代码执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code = <span class="string">&#x27;console.log(&quot;Hello, World!&quot;)&#x27;</span>;</span><br><span class="line"><span class="built_in">eval</span>(code); <span class="comment">// 输出: Hello, World!</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(16)-BigInt</title>
    <link href="/2024/07/29/JS%E5%AD%A6%E4%B9%A0(16)-BigInt/"/>
    <url>/2024/07/29/JS%E5%AD%A6%E4%B9%A0(16)-BigInt/</url>
    
    <content type="html"><![CDATA[<p><code>BigInt</code> 是一种内置对象，它提供了一种方法来表示大于 $2^{53} - 1 $ 的整数。 Javascript 中用 <code>Number</code> 表示数字。<code>BigInt</code> 可以表示任意大的整数。</p><span id="more"></span><h1>BigInt</h1><p><code>BigInt</code>类似于<code>Number</code>，但是<code>BigInt</code>不能用于<code>Math</code>对象中的方法，不能和任何<code>Number</code>实例混合运算。</p><h2 id="字面量">字面量</h2><p>在一个整数字面量后面加 <code>n</code> 的方式定义一个 <code>BigInt</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bigInt1 = <span class="number">1234567890123456789012345678901234567890n</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigInt1); <span class="comment">// 输出: 1234567890123456789012345678901234567890n</span></span><br></pre></td></tr></table></figure><h2 id="构造函数">构造函数</h2><p><code>BigInt()</code> 构造函数用来创建 BigInt 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">BigInt</span>(value)</span><br></pre></td></tr></table></figure><ol><li><strong>value</strong>：被创建的对象的数值。可以是字符串或整数。</li></ol><h2 id="静态方法">静态方法</h2><ol><li><p><code>BigInt.asIntN()</code>：将BigInt值截断为给定的最低有效位数，并将该值作为有符号整数返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bigInt = <span class="number">128n</span>;</span><br><span class="line"><span class="keyword">let</span> intN = <span class="title class_">BigInt</span>.<span class="title function_">asIntN</span>(<span class="number">8</span>, bigInt);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(intN); <span class="comment">// 输出: -128n</span></span><br></pre></td></tr></table></figure></li><li><p><code>BigInt.asUnitN()</code>：将BigInt值截断为给定的最低有效位数，并将该值作为无符号整数返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bigInt = <span class="number">128n</span>;</span><br><span class="line"><span class="keyword">let</span> intN = <span class="title class_">BigInt</span>.<span class="title function_">asUintN</span>(<span class="number">8</span>, bigInt);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(intN); <span class="comment">// 输出: 128n</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><ol><li><p><code>toLocaleString()</code>：返回一个表示给定 BigIng 对象的字符串，该字符串格式因不同语言而不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigint = <span class="number">123456789123456789n</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigint.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;de-DE&#x27;</span>)); <span class="comment">// 123.456.789.123.456.789</span></span><br></pre></td></tr></table></figure></li><li><p><code>toString()</code>：返回一个字符串，表示指定 BigInt 对象，后面的<code>n</code>不是字符串的一部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1024n</span>.<span class="title function_">toString</span>()); <span class="comment">// 1024</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1024n</span>.<span class="title function_">toString</span>(<span class="number">2</span>)); <span class="comment">// 10000000000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1024n</span>.<span class="title function_">toString</span>(<span class="number">16</span>)); <span class="comment">// 400</span></span><br></pre></td></tr></table></figure></li><li><p><code>valueOf()</code>：返回 BigInt 对象包装的原始值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bigIntObj = <span class="title class_">BigInt</span>(<span class="string">&quot;1234567890123456789012345678901234567890&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> originalValue = bigIntObj.<span class="title function_">valueOf</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigIntObj);         <span class="comment">// 输出: 1234567890123456789012345678901234567890n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalValue);     <span class="comment">// 输出: 1234567890123456789012345678901234567890n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> originalValue); <span class="comment">// 输出: bigint</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(15)-Symbol</title>
    <link href="/2024/07/28/JS%E5%AD%A6%E4%B9%A0(15)-Symbol/"/>
    <url>/2024/07/28/JS%E5%AD%A6%E4%B9%A0(15)-Symbol/</url>
    
    <content type="html"><![CDATA[<p><code>Symbol</code> 是 ES6 引入的一种新的原始数据类型。每个 <code>Symbol</code> 值都是唯一的，用于生成独一无二的标识符。它是通过调用 <code>Symbol</code> 函数创建的，<code>Symbol</code> 函数不能作为构造函数使用。</p><span id="more"></span><h1>Symbol</h1><p>每个从 <code>Symbol()</code> 返回的 symbol 值都是唯一的。一个 symbol 值能作为对象属性的标识符</p><h2 id="构造函数">构造函数</h2><p><code>Symbol()</code> 构造函数返回一个 <strong>symbol</strong> 类型的值，但是它并不完全支持构造函数的语法，因为它不支持 <code>new Symbol()</code> 语法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="title class_">Symbol</span>(<span class="number">42</span>);</span><br><span class="line"><span class="keyword">const</span> symbol3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> symbol1); <span class="comment">// &#x27;symbol&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbol2 === <span class="number">42</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbol3.<span class="title function_">toString</span>()); <span class="comment">// &#x27;Symbol(foo)&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="静态方法">静态方法</h2><ol><li><p><code>Symbol.for()</code>：<code>Symbol.for()</code> 方法会根据给定的键，来从运行时的 Symbol 注册表中找到对应的 Symbol，如果找到了，则返回它，否则，新建一个与该键关联的 Symbol，并放入全局 Symbol 注册表中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>Symbol.for</code> 与 <code>Symbol</code> 这两种写法，都会生成新的 Symbol。它们的区别是：前者会被登记在全局环境中供搜索，后者不会。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3 === s4); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s3); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.keyFor()</code>：<code>Symbol.keyFor(sym)</code> 方法用来获取全局 symbol 注册表中与某个 symbol 关联的键。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个全局 Symbol</span></span><br><span class="line"><span class="keyword">var</span> globalSym = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(globalSym); <span class="comment">// &quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> localSym = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(localSym); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="静态属性">静态属性</h2><ol><li><p><code>Symbol.asyncIterator</code>：指定了一个对象的默认异步迭代器。如果一个对象设置了这个属性，它就是异步可迭代对象，可用于for await…of 循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAsyncIterable = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">myAsyncIterable[<span class="title class_">Symbol</span>.<span class="property">asyncIterator</span>] = <span class="keyword">async</span> <span class="keyword">function</span>* () &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;async&quot;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;iteration!&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> x <span class="keyword">of</span> myAsyncIterable) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">        <span class="comment">//    &quot;hello&quot;</span></span><br><span class="line">        <span class="comment">//    &quot;async&quot;</span></span><br><span class="line">        <span class="comment">//    &quot;iteration!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.hasInstance</code>：用于判断某对象是否为某构造器的实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Array1</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](instance) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(instance);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.isConcatSpreadable</code>：用于配置对象作为 <code>Array.prototype.concat()</code> 方法的参数时是否展开其数组元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alpha = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> numeric = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> alphaNumeric = alpha.<span class="title function_">concat</span>(numeric);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphaNumeric); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">numeric[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">false</span>;</span><br><span class="line">alphaNumeric = alpha.<span class="title function_">concat</span>(numeric);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphaNumeric); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, Array [1, 2, 3]]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.iterator</code>：为每一个对象定义了默认的迭代器。该迭代器可以被 for…of 循环使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iterable1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">iterable1[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...iterable1]); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.species</code>：用于设置创建对象时使用的构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> get [<span class="title class_">Symbol</span>.<span class="property">species</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">MyArray</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> mapped = arr.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped <span class="keyword">instanceof</span> <span class="title class_">MyArray</span>); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.toPrimitive</code>：修改对象转换的原始值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+obj1); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;obj1&#125;</span>`</span>); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 + <span class="string">&quot;&quot;</span>); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下面声明一个对象，手动赋予了 Symbol.toPrimitive 属性</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>](hint) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hint === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hint === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+obj2); <span class="comment">// 10  — hint 参数值是 &quot;number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;obj2&#125;</span>`</span>); <span class="comment">// &quot;hello&quot;   — hint 参数值是 &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2 + <span class="string">&quot;&quot;</span>); <span class="comment">// &quot;true&quot;    — hint 参数值是 &quot;default&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.toStringTag</code>：修改 <code>Object.prototype.toString</code> 的默认行为，使其返回自定义标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  get [<span class="title class_">Symbol</span>.<span class="property">toStringTag</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;MyCustomClass&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(myObj)); <span class="comment">// 输出: [object MyCustomClass]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><ol><li><p><code>toString</code>：返回当前 symbol 对象的字符串表示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>(<span class="string">&quot;foo&quot;</span>).<span class="title function_">toString</span>() + <span class="string">&quot;bar&quot;</span>)</span><br><span class="line"><span class="comment">// &quot;Symbol(foo)bar&quot;，就相当于下面的：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>(<span class="title class_">Symbol</span>(<span class="string">&quot;foo&quot;</span>)).<span class="title function_">toString</span>() + <span class="string">&quot;bar&quot;</span>)</span><br><span class="line"><span class="comment">// &quot;Symbol(foo)bar&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>valueOf()</code>：返回当前 symbol 对象的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> symbol1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>(symbol1)); <span class="comment">// Symbol &#123;Symbol(foo), description: &#x27;foo&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>(symbol1).<span class="title function_">valueOf</span>()); <span class="comment">// Symbol(foo)</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例属性">实例属性</h2><ol><li><p><code>description</code>：是一个只读属性，它会返回 Symbol 对象的可选描述的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;desc&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;desc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym1 === sym2); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym1.<span class="property">description</span>); <span class="comment">// 输出: &#x27;desc&#x27;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(14)-RegExp</title>
    <link href="/2024/07/27/JS%E5%AD%A6%E4%B9%A0(14)-RegExp/"/>
    <url>/2024/07/27/JS%E5%AD%A6%E4%B9%A0(14)-RegExp/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，<code>RegExp</code> 对象用于匹配字符串中的模式。可以通过字面量或者构造函数创建 <code>RegExp</code> 对象，用于执行匹配、搜索和替换操作。</p><span id="more"></span><h1>RegExp</h1><p>正则表达式是用于匹配字符串中字符组合的模式。</p><h2 id="正则字面量">正则字面量</h2><p>由斜杠 (/) 包围而不是引号包围。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/abc/</span>;</span><br></pre></td></tr></table></figure><h2 id="构造函数">构造函数</h2><p><strong><code>RegExp</code></strong> 用于创建正则表达式对象，该对象用于将文本与一个模式匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">RegExp</span>(pattern [, flags])</span><br></pre></td></tr></table></figure><ol><li><strong>pattern</strong>：要匹配的字符串模式</li><li><strong>flags</strong>：可选的标志字符串</li></ol><h3 id="修饰符">修饰符</h3><ol><li><code>g</code>：全局匹配</li><li><code>i</code>：忽略大小写</li><li><code>m</code>：多行匹配</li><li><code>s</code>：允许 <code>.</code> 匹配换行符</li><li><code>u</code>：Unicode 模式</li><li><code>y</code>：粘性匹配</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/abc/i</span>; <span class="comment">// 忽略大小写匹配 &quot;abc&quot;</span></span><br><span class="line"><span class="keyword">let</span> patternGlobal = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;g&#x27;</span>); <span class="comment">// 全局匹配 &quot;abc&quot;</span></span><br></pre></td></tr></table></figure><h2 id="实例方法">实例方法</h2><ol><li><p><code>test()</code>：执行一个检索，用来查看正则表达式与指定的字符串是否匹配，返回布尔值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/hello/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="title function_">test</span>(<span class="string">&#x27;Hello world&#x27;</span>)); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="title function_">test</span>(<span class="string">&#x27;hello world&#x27;</span>)); <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure></li><li><p><code>exec()</code>：在一个指定字符串中执行一个搜索匹配。返回一个结果数组（未匹配则返回 <code>null</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/hello/</span>;</span><br><span class="line"><span class="keyword">let</span> result = pattern.<span class="title function_">exec</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出: [ &#x27;hello&#x27;, index: 0, input: &#x27;hello world&#x27;, groups: undefined ]</span></span><br></pre></td></tr></table></figure></li><li><p><code>toString()</code>：返回一个表示该正则表达式的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myExp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;a+b+c&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myExp.<span class="title function_">toString</span>()); <span class="comment">// &quot;/a+b+c/&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例属性">实例属性</h2><ol><li><code>global</code>：布尔值，表示是否设置了 g 标记。</li><li><code>ignoreCase</code>：布尔值，表示是否设置了 i 标记。</li><li><code>unicode</code>：布尔值，表示是否设置了 u 标记。</li><li><code>sticky</code>：布尔值，表示是否设置了 y 标记。</li><li><code>lastIndex</code>：整数，表示在源字符串中下一次搜索的开始位置，始终从 0 开始。</li><li><code>multiline</code>：布尔值，表示是否设置了 m 标记。</li><li><code>dotAll</code>：布尔值，表示是否设置了 s 标记。</li><li><code>source</code>：正则表达式的字面量字符串，没有开头和结尾的 斜杠。</li><li><code>flags</code>：正则表达式的标记字符串。始终以字面量而非传入构造函数的字符串模式形式返回</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern1 = <span class="regexp">/\[bc\]at/i</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern1.<span class="property">global</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern1.<span class="property">ignoreCase</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern1.<span class="property">multiline</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern1.<span class="property">lastIndex</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern1.<span class="property">source</span>); <span class="comment">// &quot;\[bc\]at&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern1.<span class="property">flags</span>); <span class="comment">// &quot;i&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pattern2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\[bc\\]at&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern2.<span class="property">global</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern2.<span class="property">ignoreCase</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern2.<span class="property">multiline</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern2.<span class="property">lastIndex</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern2.<span class="property">source</span>); <span class="comment">// &quot;\[bc\]at&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern2.<span class="property">flags</span>); <span class="comment">// &quot;i&quot; </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(13)-Math</title>
    <link href="/2024/07/26/JS%E5%AD%A6%E4%B9%A0(13)-Math/"/>
    <url>/2024/07/26/JS%E5%AD%A6%E4%B9%A0(13)-Math/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，<code>Math</code> 对象拥有一些数学常数属性和数学函数方法。<code>Math</code> 对象用于 Number 类型，不支持 BigInt。</p><span id="more"></span><h1>Math</h1><p><code>Math</code> 对象的方法和属性是静态的，可以直接调用而无需创建 <code>Math</code> 对象的实例。</p><h2 id="静态属性">静态属性</h2><ol><li><code>Math.PI</code>：圆周率 π 的值（约等于 3.14159）。</li><li><code>Math.E</code>：自然对数的底数 e（约等于 2.718）。</li><li><code>Math.LN2</code>：2 的自然对数（约等于 0.693）。</li><li><code>Math.LN10</code>：10 的自然对数（约等于 2.302）。</li><li><code>Math.LOG2E</code>：以 2 为底的 e 的对数（约等于 1.442）。</li><li><code>Math.LOG10E</code>：以 10 为底的 e 的对数（约等于 0.434）。</li><li><code>Math.SQRT1_2</code>：1/2 的平方根（约等于 0.707）。</li><li><code>Math.SQRT2</code>：2 的平方根（约等于 1.414）。</li></ol><h2 id="静态方法">静态方法</h2><ol><li><p><code>Marh.abs(x)</code>：返回数值的绝对值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">5</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="number">5</span>));  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.ceil(x)</code>：向上取整，返回大于等于 x 的最小整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">4.2</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">4.2</span>)); <span class="comment">// -4</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.floor(x)</code>：向下取整，返回小于等于 x 的最大整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">4.8</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(-<span class="number">4.8</span>)); <span class="comment">// -5</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.round(x)</code>：四舍五入，返回最接近 x 的整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.5</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.4</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.random()</code>：返回一个大于等于 0 且小于 1 的伪随机浮点数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()); <span class="comment">// 随机数（例如: 0.123456789）</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.max(...values)</code>：返回给定一组数中的最大值，如果没有参数，则返回 -Infinity。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.min(...values)</code>：返回给定一组数中的最小值，如果没有参数，则返回 Infinity。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.pow(base, exponent)</code>：返回 base 的 exponent 次幂。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.sqrt(x)</code>：返回 x 的平方根。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">16</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.cbrt(x)</code>：返回 x 的立方根。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">cbrt</span>(<span class="number">8</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.hypot(...values)</code>：返回所有参数的平方和的平方根</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">hypot</span>(<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.trunc(x)</code>：返回数字的整数部分，去除小数部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">4.9</span>)); <span class="comment">// 输出: 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(-<span class="number">4.9</span>)); <span class="comment">// 输出: -4</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.sin(x)</code>：返回 x 的正弦值，x 是以弧度表示的角度。</p></li><li><p><code>Marh.cos(x)</code>：返回 x 的余弦值，x 是以弧度表示的角度。</p></li><li><p><code>Marh.tan(x)</code>：返回 x 的正切值，x 是以弧度表示的角度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sin</span>(<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">cos</span>(<span class="title class_">Math</span>.<span class="property">PI</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">tan</span>(<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">4</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.asin(x)</code>：返回 x 的反正弦值，返回值在 -π/2 到 π/2 之间。</p></li><li><p><code>Marh.acos(x)</code>：返回 x 的反余弦值，返回值在 0 到 π 之间。</p></li><li><p><code>Marh.atan(x)</code>：返回 x 的反正切值，返回值在 -π/2 到 π/2 之间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">asin</span>(<span class="number">1</span>)); <span class="comment">// π/2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">acos</span>(<span class="number">1</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">atan</span>(<span class="number">1</span>)); <span class="comment">// π/4</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(12)-Date</title>
    <link href="/2024/07/25/JS%E5%AD%A6%E4%B9%A0(12)-Date/"/>
    <url>/2024/07/25/JS%E5%AD%A6%E4%B9%A0(12)-Date/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，<code>Date</code> 对象是用于处理日期和时间的内置对象。它允许创建、操作和格式化日期和时间。<code>Date</code> 对象提供了多种方法来获取和设置日期、时间、时区等信息。</p><span id="more"></span><h1>Date</h1><p>内置对象 Date 用来处理日期和时间。</p><h2 id="构造函数">构造函数</h2><p><strong><code>Date()</code></strong> 构造函数可以创建一个 Date 实例或返回代表当前时间的字符串，<code>Date()</code>构造函数有四种基本形式</p><ol><li><p>没有参数：表示实例化时刻的日期和时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now); <span class="comment">// Thu Jul 25 2024 10:02:28 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>UNIX时间戳：从 1970-01-01T00:00:00Z 到给定时间的毫秒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timestamp = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1721836800000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(timestamp); <span class="comment">// Thu Jul 25 2024 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>日期字符串：格式能被<code>Date.parse()</code>方法所识别就行（符合<a href="https://datatracker.ietf.org/doc/html/rfc2822#page-14">IEFT  RFC 2822 timestamps</a>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dateString = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2024-07-25T00:00:00Z&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dateString); <span class="comment">// Thu Jul 25 2024 08:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>使用具体的年、月、日、时、分、秒、毫秒：年、月是必须的值，月是从0开始计数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> specificDate = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2024</span>, <span class="number">6</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(specificDate); <span class="comment">// Thu Jul 25 2024 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="静态方法">静态方法</h2><ol><li><p><code>Date.now()</code>：返回自 1970 年 1 月 1 日 00:00:00 (UTC) 到当前时间的毫秒数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timestamp = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(timestamp); <span class="comment">// 1721872958000</span></span><br></pre></td></tr></table></figure></li><li><p><code>Date.parse()</code>：解析一个表示某个日期的字符串，并返回从 1970-1-1 00:00:00 UTC 到该日期对象（该日期对象的 UTC 时间）的毫秒数，如果该字符串无法识别，则返回值为 NaN。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unixTimeZero = <span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="string">&#x27;01 Jan 1970 00:00:00 GMT&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unixTimeZero); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> javaScriptRelease = <span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="string">&#x27;04 Dec 1995 00:12:00 GMT&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(javaScriptRelease); <span class="comment">// 818035920000</span></span><br></pre></td></tr></table></figure></li><li><p><code>Date.UTC()</code>：返回自 1970 年 1 月 1 日 00:00:00 (UTC) 到当前UTC时间的毫秒数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> utcDate1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">96</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utcDate1.<span class="title function_">toUTCString</span>()); <span class="comment">// Fri, 02 Feb 1996 03:04:05 GMT</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><h3 id="获取日期和时间">获取日期和时间</h3><ol><li><code>getFullYear()</code>: 获取4位的年份</li><li><code>getMonth()</code>: 获取月份（0-11）</li><li><code>getDate()</code>: 获取月份中的第几天（1-31）</li><li><code>getDay()</code>: 获取星期几（0-6）</li><li><code>getHours()</code>: 获取小时（0-23）</li><li><code>getMinutes()</code>: 获取分钟（0-59）</li><li><code>getSeconds()</code>: 获取秒数（0-59）</li><li><code>getMilliseconds()</code>: 获取毫秒数（0-999）</li><li><code>getUTCFullYear()</code>: 以UTC时间为标准，获取4位的年份</li><li><code>getUTCMonth()</code>: 以UTC时间为标准，获取月份（0-11）</li><li><code>getUTCDate()</code>: 以UTC时间为标准，获取月份中的第几天（1-31）</li><li><code>getUTCDay()</code>: 以UTC时间为标准，获取星期几（0-6）</li><li><code>getUTCHours()</code>: 以UTC时间为标准，获取小时（0-23）</li><li><code>getUTCMinutes()</code>: 以UTC时间为标准，获取分钟（0-59）</li><li><code>getUTCSeconds()</code>: 以UTC时间为标准，获取秒数（0-59）</li><li><code>getUTCMilliseconds()</code>: 以UTC时间为标准，获取毫秒数（0-999）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2024</span>, <span class="number">6</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>()); <span class="comment">// 2024</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>()); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDate</span>()); <span class="comment">// 25</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDay</span>()); <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getHours</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMinutes</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getSeconds</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMilliseconds</span>()); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCFullYear</span>()); <span class="comment">// 2024</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCMonth</span>()); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCDate</span>()); <span class="comment">// 24</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCDay</span>()); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCHours</span>()); <span class="comment">// 16</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCMinutes</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCSeconds</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCMilliseconds</span>()); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="设置日期和时间">设置日期和时间</h3><ol><li><code>setFullYear()</code>: 设置年份</li><li><code>setMonth()</code>: 设置月份（0-11）</li><li><code>setDate()</code>: 设置月份中的第几天（1-31）</li><li><code>setHours()</code>: 设置小时（0-23）</li><li><code>setMinutes()</code>: 设置分钟（0-59）</li><li><code>setSeconds()</code>: 设置秒数（0-59）</li><li><code>setMilliseconds()</code>: 设置毫秒数（0-999）</li><li><code>setUTCFullYear()</code>: 以UTC时间为标准，设置年份</li><li><code>setUTCMonth()</code>: 以UTC时间为标准，设置月份（0-11）</li><li><code>setUTCDate()</code>: 以UTC时间为标准，设置月份中的第几天（1-31）</li><li><code>setUTCHours()</code>: 以UTC时间为标准，设置小时（0-23）</li><li><code>setUTCMinutes()</code>: 以UTC时间为标准，设置分钟（0-59）</li><li><code>setUTCSeconds()</code>: 以UTC时间为标准，设置秒数（0-59）</li><li><code>setUTCMilliseconds()</code>: 以UTC时间为标准，设置毫秒数（0-999）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">date.<span class="title function_">setFullYear</span>(<span class="number">2022</span>);</span><br><span class="line">date.<span class="title function_">setMonth</span>(<span class="number">11</span>);</span><br><span class="line">date.<span class="title function_">setDate</span>(<span class="number">25</span>);</span><br><span class="line">date.<span class="title function_">setHours</span>(<span class="number">7</span>);</span><br><span class="line">date.<span class="title function_">setMinutes</span>(<span class="number">30</span>);</span><br><span class="line">date.<span class="title function_">setSeconds</span>(<span class="number">45</span>);</span><br><span class="line">date.<span class="title function_">setMilliseconds</span>(<span class="number">500</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// Sun Dec 25 2022 07:30:45 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line">date.<span class="title function_">setUTCFullYear</span>(<span class="number">2022</span>);</span><br><span class="line">date.<span class="title function_">setUTCMonth</span>(<span class="number">11</span>);</span><br><span class="line">date.<span class="title function_">setUTCDate</span>(<span class="number">25</span>);</span><br><span class="line">date.<span class="title function_">setUTCHours</span>(<span class="number">7</span>);</span><br><span class="line">date.<span class="title function_">setUTCMinutes</span>(<span class="number">30</span>);</span><br><span class="line">date.<span class="title function_">setUTCSeconds</span>(<span class="number">45</span>);</span><br><span class="line">date.<span class="title function_">setUTCMilliseconds</span>(<span class="number">500</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// Sun Dec 25 2022 15:30:45 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><h3 id="日期和时间运算">日期和时间运算</h3><ol><li><code>getTime()</code>: 获取自1970-01-01T00:00:00Z以来的毫秒数</li><li><code>setTime(time)</code>: 设置自1970-01-01T00:00:00Z以来的毫秒数</li><li><code>getTimezoneOffset</code>：返回本地时间与 UTC 之间的时差（单位：分钟）。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getTime()</span></span><br><span class="line"><span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2022</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> diff = date1.<span class="title function_">getTime</span>() - date2.<span class="title function_">getTime</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(diff); <span class="comment">// 输出两个日期之间的毫秒数差异</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setTime()</span></span><br><span class="line"><span class="keyword">const</span> launchDate = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;July 1, 1999, 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> futureDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">futureDate.<span class="title function_">setTime</span>(launchDate.<span class="title function_">getTime</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(futureDate); <span class="comment">// Thu Jul 01 1999 12:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getTimeOffset()</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> offset = date.<span class="title function_">getTimezoneOffset</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(offset); <span class="comment">// -480</span></span><br></pre></td></tr></table></figure><h3 id="格式化日期和时间">格式化日期和时间</h3><ol><li><code>toLocaleString()</code>：返回与浏览器 运行的本地环境一致的日期和时间。</li><li><code>toString()</code>：返回一个字符串，以本地的时区表示</li><li><code>valueOf()</code>：返回 Date 对象的原始值，即从 1970 年 1 月 1 日 0 时 0 分 0 秒（UTC）到该日期的毫秒数。</li><li><code>toDateString()</code>: 将日期转换为字符串格式</li><li><code>toTimeString()</code>: 将时间转换为字符串格式</li><li><code>toISOString()</code>: 将日期转换为ISO 8601格式的字符串</li><li><code>toLocaleDateString()</code>: 根据本地格式将日期转换为字符串</li><li><code>toLocaleTimeString()</code>: 根据本地格式将时间转换为字符串</li><li><code>toUTCString()</code>：将日期转换为一个字符串，使用 UTC 时区。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toLocaleString</span>()); <span class="comment">// 2024/7/25 10:28:22</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toString</span>()); <span class="comment">// Thu Jul 25 2024 10:28:22 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">valueOf</span>()); <span class="comment">// 1721874502812</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toDateString</span>()); <span class="comment">// Thu Jul 25 2024</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toTimeString</span>()); <span class="comment">// 10:28:22 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toISOString</span>()); <span class="comment">// 2024-07-25T02:28:22.812Z</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toLocaleDateString</span>()); <span class="comment">// 2024/7/25</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toLocaleTimeString</span>()); <span class="comment">// 10:28:22</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toUTCString</span>()); <span class="comment">// Thu, 25 Jul 2024 02:28:22 GMT</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(11)-String</title>
    <link href="/2024/07/24/JS%E5%AD%A6%E4%B9%A0(11)-String/"/>
    <url>/2024/07/24/JS%E5%AD%A6%E4%B9%A0(11)-String/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，<code>String</code> 类型用于表示和操作文本数据。字符串可以使用单引号 (<strong>'</strong>)、双引号 (<strong>&quot;</strong>)、或者反引号（<strong>`</strong>）包围。</p><span id="more"></span><h1>String</h1><h2 id="字符串字面量">字符串字面量</h2><p>字符串可以通过字符串字面量创建为原始值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;Hello, World!&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str3 = <span class="string">`Hello, World!`</span>; <span class="comment">// 反引号用于模板字符串</span></span><br></pre></td></tr></table></figure><h2 id="构造函数">构造函数</h2><p><strong><code>String()</code></strong> 构造函数创建 String 对象。当作为函数调用时，它返回 String 类型的原始值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(thing)</span><br><span class="line"><span class="title class_">String</span>(thing)</span><br></pre></td></tr></table></figure><ol><li><strong>thing</strong>：任何要转换为字符串的内容。</li></ol><p>当 <code>String</code> 作为构造函数（使用 <code>new</code>）被调用时，它会创建一个 String 对象，该对象<strong>不是</strong>原始类型。当 <code>String</code> 作为函数被调用时，它会将参数强制转换为一个字符串原始类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strPrim = <span class="string">&quot;foo&quot;</span>; <span class="comment">// 字面量是一个字符串原始值</span></span><br><span class="line"><span class="keyword">const</span> strPrim2 = <span class="title class_">String</span>(<span class="number">1</span>); <span class="comment">// 被强制转换为字符串原始值“1”</span></span><br><span class="line"><span class="keyword">const</span> strPrim3 = <span class="title class_">String</span>(<span class="literal">true</span>); <span class="comment">// 被强制转换为字符串原始值“true”</span></span><br><span class="line"><span class="keyword">const</span> strObj = <span class="keyword">new</span> <span class="title class_">String</span>(strPrim); <span class="comment">// 使用 `new` 关键字调用 `String` 构造函数返回一个字符串包装对象。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> strPrim); <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> strPrim2); <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> strPrim3); <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> strObj); <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure><h2 id="实例属性">实例属性</h2><ol><li><p><strong>length</strong>：表示字符串中字符的数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="property">length</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="静态方法">静态方法</h2><ol><li><p><code>String.fromCharCode()</code>：返回由指定的 UTF-16 代码单元序列创建的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>); <span class="comment">// ABC</span></span><br><span class="line"><span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">0x2014</span>); <span class="comment">// -</span></span><br></pre></td></tr></table></figure></li><li><p><code>String.fromCodePoint()</code>：返回使用指定的代码点序列创建的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="title function_">fromCodePoint</span>(<span class="number">65</span>, <span class="number">90</span>); <span class="comment">// &quot;AZ&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>String.raw()</code>：处理模板字符串的标签函数，用于获取模板字符串中原始、未转义的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Alice&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="title class_">String</span>.<span class="property">raw</span><span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>\nHow are you?`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 输出: Hello, Alice\nHow are you?</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><h3 id="获取字符串的值">获取字符串的值</h3><ol><li><p><code>toString()</code>：返回该字符串的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringObj = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringObj); <span class="comment">// String &#123;&#x27;foo&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringObj.<span class="title function_">toString</span>()); <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><code>valueOf()</code>：返回 String 对象的字符串值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringObj = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringObj); <span class="comment">// String &#123;&#x27;foo&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringObj.<span class="title function_">valueOf</span>()); <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="获取字符串指定位置的值">获取字符串指定位置的值</h3><ol><li><p><code>at()</code>：用于在字符串中根据指定的索引返回字符，支持负索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello, world!&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">at</span>(<span class="number">0</span>)); <span class="comment">// 输出: H</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">at</span>(-<span class="number">7</span>)); <span class="comment">// 输出: w</span></span><br></pre></td></tr></table></figure></li><li><p><code>charAt()</code>：返回指定位置的字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">str.<span class="title function_">charAt</span>(<span class="number">1</span>)  <span class="comment">// 输出结果：e </span></span><br></pre></td></tr></table></figure></li><li><p><code>charCodeAt()</code>：返回指定索引位置字符的 UTF-16 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">1</span>)); <span class="comment">// &quot;b&quot; --&gt; 98</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="字符串包含方法">字符串包含方法</h3><ol><li><p><code>indexOf()</code>：返回第一次出现指定字符串的位置，如果没有找到则返回 -1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;World&quot;</span>)); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure></li><li><p><code>lastIndexOf()</code>：返回指定字符串在字符串中最后一次出现的位置，如果没有找到则返回 -1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World! Hello!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;Hello&quot;</span>)); <span class="comment">// 14</span></span><br></pre></td></tr></table></figure></li><li><p><code>startsWith()</code>：判断当前字符串是否以指定字符串开头，如果是则返回 <code>true</code>，否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&quot;He&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>endsWith()</code>：判断一个字符串是否以指定字符串结尾，如果是则返回 <code>true</code>，否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">endsWith</span>(<span class="string">&quot;He&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>includes()</code>：判断一个字符串是否包含另一个字符串，返回布尔值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&quot;World&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="字符串操作方法">字符串操作方法</h3><ol><li><p><code>concat()</code>：连接一个或多个字符串，并返回新的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = str1.<span class="title function_">concat</span>(<span class="string">&quot;, &quot;</span>, str2, <span class="string">&quot;!&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>slice()</code>：提取字符串的一部分，并返回一个新的字符串。不修改原始字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">5</span>)); <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>subString()</code>：提取字符串中两个指定的索引之间的字符。如果未提供结束索引，则返回到字符串末尾的部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">5</span>)); <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">0</span>)); <span class="comment">// &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="重复字符串">重复字符串</h3><ol><li><p><code>repeat()</code>：返回一个新字符串，表示将原字符串重复n次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mood = <span class="string">&#x27;Happy! &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`I feel <span class="subst">$&#123;mood.repeat(<span class="number">3</span>)&#125;</span>`</span>); <span class="comment">// I feel Happy! Happy! Happy! </span></span><br></pre></td></tr></table></figure></li></ol><h3 id="补充字符串长度">补充字符串长度</h3><ol><li><p><code>padStart()</code>：用于头部补全。该方法有两个参数，其中第一个参数是一个数字，表示字符串补齐之后的长度；第二个参数是用来补全的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)); <span class="comment">// &quot;05&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>padEnd()</code>：用于尾部补全。该方法也是接收两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Breaded Mushrooms&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">padEnd</span>(<span class="number">25</span>, <span class="string">&#x27;.&#x27;</span>)); <span class="comment">// &quot;Breaded Mushrooms........&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="移出字符串空白字符">移出字符串空白字符</h3><ol><li><p><code>trim()</code>：字符串的两端移除空白字符，并返回一个新的字符串，不会修改原始字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">&#x27;   Hello world!   &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting); <span class="comment">// &quot;   Hello world!  &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting.<span class="title function_">trim</span>()); <span class="comment">// &quot;Hello world!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>trimEnd()</code>：字符串的结尾移除空白字符，并返回一个新的字符串，不会修改原始字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">&#x27;   Hello world!   &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting); <span class="comment">// &quot;   Hello world!  &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting.<span class="title function_">trimEnd</span>()); <span class="comment">// &quot;   Hello world!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>trimStart()</code>：字符串的开头移除空白字符，并返回一个新的字符串，不会修改原始字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">&#x27;   Hello world!   &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting); <span class="comment">// &quot;   Hello world!  &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting.<span class="title function_">trimStart</span>()); <span class="comment">// &quot;Hello world!   &quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="字符串转换">字符串转换</h3><ol><li><p><code>toLowerCase()</code>：将字符串转换为小写形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLowerCase</span>()); <span class="comment">// &quot;hello, world!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toLocaleLowerCase()</code>：根据特定区域设置的大小写映射规则，将字符串转换为小写形式并返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLocaleLowerCase</span>()); <span class="comment">// &quot;hello, world!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toUpperCase()</code>：将字符串转换为大写形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>()); <span class="comment">// &quot;HELLO, WORLD!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toLocaleUpperCase()</code>：根据特定区域设置的大小写映射规则，将字符串转换为大写形式并返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLocaleUpperCase</span>()); <span class="comment">// &quot;HELLO, WORLD!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>isWellFormed()</code>：检测字符串是否是有效的 UTF-16 编码序列。此方法返回一个布尔值，表示字符串是否包含任何无效的 Unicode 代码点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validEmojiString = <span class="string">&quot;😀&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">isWellFormed</span>(validEmojiString)); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> invalidSurrogatePair = <span class="string">&quot;😀\uD800&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">isWellFormed</span>(invalidSurrogatePair)); <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> loneLowSurrogate = <span class="string">&quot;\uDC00&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">isWellFormed</span>(loneLowSurrogate)); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li><li><p><code>toWellFormed()</code>：将给定字符串转换为一个有效的 UTF-16 编码序列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> invalidString = <span class="string">&quot;Hello, world!\uD800&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> wellFormedString = <span class="title class_">String</span>.<span class="title function_">toWellFormed</span>(invalidString);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wellFormedString); <span class="comment">// 输出: Hello, world!� (或其他替换字符)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="字符串模式匹配">字符串模式匹配</h3><ol><li><p><code>split()</code>：用于把一个字符串分割成字符串数组。该方法不会改变原始字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="title function_">split</span>(separator,limit)</span><br></pre></td></tr></table></figure><p>该方法有两个参数：</p><ul><li>separator：必需。字符串或正则表达式，从该参数指定的地方分割 string。</li><li>limit：可选。该参数可指定返回的数组的最大长度</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">str.<span class="title function_">split</span>(<span class="string">&quot;c&quot;</span>);    <span class="comment">// [&quot;ab&quot;, &quot;def&quot;]</span></span><br><span class="line">str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>, <span class="number">4</span>)   <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;] </span></span><br></pre></td></tr></table></figure></li><li><p><code>search()</code>：在 String 对象中执行正则表达式的搜索，寻找匹配项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> paragraph = <span class="string">&quot;I think Ruth&#x27;s dog is cuter than your dog!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/[^\w\s&#x27;]/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(paragraph.<span class="title function_">search</span>(regex)); <span class="comment">// 41</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(paragraph[paragraph.<span class="title function_">search</span>(regex)]); <span class="comment">// &quot;!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>replace()</code>：用于使用指定字符串替换当前字符串中匹配指定正则表达式模式的子字符串，并返回完成替换后的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> paragraph = <span class="string">&quot;I think Ruth&#x27;s dog is cuter than your dog!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(paragraph.<span class="title function_">replace</span>(<span class="string">&quot;dog&quot;</span>, <span class="string">&#x27;ferret&#x27;</span>)); <span class="comment">// &quot;I think Ruth&#x27;s ferret is cuter than your dog!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>replaceAll()</code>：用于使用指定字符串替换所有当前字符串中匹配指定正则表达式模式的子字符串，并返回完成替换后的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> paragraph = <span class="string">&quot;I think Ruth&#x27;s dog is cuter than your dog!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(paragraph.<span class="title function_">replace</span>(<span class="string">&quot;dog&quot;</span>, <span class="string">&#x27;ferret&#x27;</span>)); <span class="comment">// &quot;I think Ruth&#x27;s ferret is cuter than your ferret!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>match()</code>：使用指定的正则表达式模式在当前字符串中进行匹配查找，并返回数组形式的查找结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> paragraph = <span class="string">&#x27;The quick brown fox jumps over the lazy dog. It barked.&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/[A-Z]/g</span>;</span><br><span class="line"><span class="keyword">const</span> found = paragraph.<span class="title function_">match</span>(regex);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(found); <span class="comment">// [&#x27;T&#x27;, &#x27;I&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>matchAll()</code>：返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;table football foosball&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regexp = <span class="title class_">RegExp</span>(<span class="string">&#x27;foo[a-z]*&#x27;</span>, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> matches = str.<span class="title function_">matchAll</span>(regexp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> match <span class="keyword">of</span> matches) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(match[<span class="number">0</span>], match.<span class="property">index</span>, match.<span class="property">index</span> + match[<span class="number">0</span>].<span class="property">length</span>); <span class="comment">// football 6 14 foosball 15 23</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(10)-Boolean</title>
    <link href="/2024/07/23/JS%E5%AD%A6%E4%B9%A0(10)-Boolean/"/>
    <url>/2024/07/23/JS%E5%AD%A6%E4%B9%A0(10)-Boolean/</url>
    
    <content type="html"><![CDATA[<p>在JavaScript中，<code>Boolean</code>类型用于表示两个值：<code>true</code> 和 <code>false</code>。布尔值在逻辑运算、条件判断以及控制代码执行路径中非常重要。</p><span id="more"></span><h1>Boolean</h1><p>JavaScript 的 <code>Boolean</code> 内置对象是一个用于包装布尔值的对象。它可以将布尔值 <code>true</code> 或 <code>false</code> 包装成对象，通常情况下，我们直接使用布尔值，而不是 <code>Boolean</code> 对象。</p><h2 id="构造函数">构造函数</h2><p><code>Boolean()</code> 构造函数可以创建 Boolean对象或返回布尔类型的原始值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Boolean</span>([value])</span><br></pre></td></tr></table></figure><ol><li><strong>value</strong>：可选参数。任何值。如果省略或其值为 <code>0</code>, <code>-0</code>,  <code>0n</code>, <code>null</code>, <code>false</code>, <code>NaN</code>, <code>undefined</code> 或者空字符串（“”），则该对象的初始值为 <code>false</code>。所有其他的值，包括任何对象、空数组（<code>[]</code>）或字符串 <code>&quot;false&quot;</code>，都会创建一个初始值为 <code>true</code> 的对象。</li></ol><h2 id="实例方法">实例方法</h2><ol><li><p><code>toString()</code>：返回表示指定的布尔对象的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> boolObj = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boolObj.<span class="title function_">toString</span>()); <span class="comment">// &quot;true&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>valueOf()</code>： 返回一个Boolean 对象的原始值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Boolean</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">valueOf</span>()); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> y = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&#x27;Mozilla&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y.<span class="title function_">valueOf</span>()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(9)-Number</title>
    <link href="/2024/07/22/JS%E5%AD%A6%E4%B9%A0(9)-Number/"/>
    <url>/2024/07/22/JS%E5%AD%A6%E4%B9%A0(9)-Number/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，<code>Number</code> 类型是用于表示数字的基本数据类型。它可以表示整数、浮点数、正数、负数、以及一些特殊的值如 <code>Infinity</code> 和 <code>NaN</code>。JavaScript 中所有数字都是以64位双精度浮点数（IEEE 754标准）存储的。</p><span id="more"></span><h1>Number</h1><p><code>Number</code> 构造函数包含常量和处理数值的方法。其他类型的值可以使用 <code>Number()</code> 函数转换为数字。</p><h2 id="数字字面量">数字字面量</h2><p>JavaScript 支持多种表示数字的方式：</p><ol><li><p><strong>十进制</strong>：常见的数字表示方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decimal = <span class="number">42</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>浮点数</strong>：包含小数点的数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> float = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>科学计数法</strong>：用于表示非常大的或非常小的数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> largeNumber = <span class="number">6.022e23</span>; <span class="comment">// 6.022 × 10^23</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数字分隔符</strong>：使用下划线 <code>_</code> 作为分隔符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> billion = <span class="number">1_000_000_000</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>八进制</strong>：以 <code>0o</code> 或 <code>0O</code> 开头。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> octal = <span class="number">0o755</span>; <span class="comment">// 八进制 755</span></span><br></pre></td></tr></table></figure></li><li><p><strong>十六进制</strong>：以 <code>0x</code> 或 <code>0X</code> 开头。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hex = <span class="number">0x2A</span>; <span class="comment">// 十六进制 2A，即 42</span></span><br></pre></td></tr></table></figure></li><li><p><strong>二进制</strong>：以 <code>0b</code> 或 <code>0B</code> 开头。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> binary = <span class="number">0b101010</span>; <span class="comment">// 二进制 101010，即 42</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="特殊值">特殊值</h2><ol><li><p><strong>Infinity 和 -Infinity</strong>：表示无穷大和负无穷大。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> positiveInfinity = <span class="title class_">Infinity</span>;</span><br><span class="line"><span class="keyword">let</span> negativeInfinity = -<span class="title class_">Infinity</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>NaN</strong>(Not-a-Number)：表示一个非数字的值，通常是非法数学操作的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notANumber = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> / <span class="number">0</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Number对象">Number对象</h2><p>JavaScript 提供了一个<code>Number</code>对象，用于包装数字类型，并提供了一些静态属性和方法。</p><h3 id="构造函数">构造函数</h3><p>Number 是对应数值的引用类型。要创建一个 Number 对象，就使用 Number 构造函数并传入一个 数值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Number</span>([value]);</span><br></pre></td></tr></table></figure><ol><li><strong>value</strong>：可选，任意类型，表示数字的任意值，默认为0</li></ol><h3 id="静态属性">静态属性</h3><ol><li><p><strong>Number.EPSILON</strong>：判断两个浮点数是否“足够接近”，从而认为它们相等，因为在 JavaScript 中，直接比较两个浮点数是否相等可能会导致意外结果，因为浮点数的表示精度有限。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">areFloatsEqual</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">abs</span>(a - b) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">0.3</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">areFloatsEqual</span>(num1, num2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.MAX_SAFE_VALUE</strong>：JavaScript 中最大的安全整数，即 $ 2^{53} - 1 $ 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>); <span class="comment">// 9007199254740991</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.MAX_VALUE</strong>：JavaScript 中能表示的最大数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>); <span class="comment">// 1.7976931348623157e+308</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.MIN_SAFE_VALUE</strong>：JavaScript 中最小的安全整数，即 $ - 2^{53} + 1 $  。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_SAFE_INTEGER</span>); <span class="comment">// -9007199254740991</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.MIN_VALUE</strong>：JavaScript 中能表示的最小的正数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>); <span class="comment">// 5e-324</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.NaN</strong>：表示 NaN。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">NaN</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.NEGATIVE_INFINITY</strong>：表示负无穷大。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">NEGATIVE_INFINITY</span>); <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.POSITIVE_INFINITY</strong>：表示正无穷大。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">POSITIVE_INFINITY</span>); <span class="comment">// Infinity</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="静态方法">静态方法</h3><ol><li><p><code>Number.isFinite(value)</code>：检查值是否是有限的（非 <code>Infinity</code>、<code>-Infinity</code> 或 <code>NaN</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">42</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Number.isInteger(value)</code>：检查值是否是整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">42</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">3.14</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Number.isNaN(value)</code>：检查值是否是 <code>NaN</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">42</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Number.isSafeInteger(value)</code>：判断传入的值是否为安全整数 ( $ -2^{53} + 1 $ 至 $ 2^{53} - 1 $ 之间)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isSafeInteger</span>(<span class="number">9007199254740992</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Number.parseFloat(string)</code>：解析一个参数（必要时先转换为字符串）为浮点数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14&#x27;</span>)); <span class="comment">// 3.14</span></span><br></pre></td></tr></table></figure></li><li><p><code>Number.parseInt(string, [radix])</code>：将字符串解析为指定基数的十进制整数，<code>radix</code> 是进制基数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;0xFF&#x27;</span>, <span class="number">16</span>)); <span class="comment">// 255</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="实例方法">实例方法</h3><ol><li><p><code>toExponential(fractionDigits)</code>：将数字格式化为指数计数法的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">42</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toExponential</span>(<span class="number">2</span>)); <span class="comment">// &quot;4.20e+1&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toFixed(digits)</code>：将数字格式化为固定小数位的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">3.14159</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toFixed</span>(<span class="number">2</span>)); <span class="comment">// &quot;3.14&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toLocaleString(digits)</code>：将数字格式化为固定小数位的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">1234567.89</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;de-DE&#x27;</span>)); </span><br><span class="line"><span class="comment">// 输出: &quot;1.234.567,89&quot; （德国格式）</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;ja-JP&#x27;</span>)); </span><br><span class="line"><span class="comment">// 输出: &quot;1,234,567.89&quot; （日本格式）</span></span><br></pre></td></tr></table></figure></li><li><p><code>toPrecision(precision)</code>：将数字格式化为本地化字符串表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">42.12345</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toPrecision</span>(<span class="number">5</span>)); <span class="comment">// &quot;42.123&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toString(radix)</code>：将数字转换为字符串，<code>radix</code> 是进制基数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">42</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">2</span>)); <span class="comment">// &quot;101010&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">16</span>)); <span class="comment">// &quot;2a&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>valueOf()</code>：返回指定对象的原始值，通常是隐式调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numObj = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">42</span>);</span><br><span class="line"><span class="keyword">let</span> result = numObj + <span class="number">8</span>; <span class="comment">// numObj.valueOf() 隐式调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出: 50</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(8)-跳转语句</title>
    <link href="/2024/07/21/JS%E5%AD%A6%E4%B9%A0(8)-%E8%B7%B3%E8%BD%AC%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/07/21/JS%E5%AD%A6%E4%B9%A0(8)-%E8%B7%B3%E8%BD%AC%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<p>跳转语句用于改变程序执行的顺序。它们可以在程序的不同部分之间跳转，通常用于控制流程、异常处理和循环控制。常见的跳转语句包括 <code>break</code>、<code>continue</code>、<code>return</code> 和 <code>throw</code>。</p><span id="more"></span><h1>跳转语句</h1><p>跳转语句用于改变代码执行的顺序。</p><h2 id="标签语句">标签语句</h2><p>标签语句用于给语句加标签，在后面通过<code>break</code>或<code>continue</code>语句引用，标签语句的典型应用场景是嵌套循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">start</span>: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="break">break</h2><p><code>break</code> 语句用于立即退出最内层的 <code>for</code>、<code>while</code> 或 <code>switch</code> 语句。，强制执行下一条语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p><code>break</code> 语句可以与标签语句一起使用，使<code>break</code> 语句退出到标签标识的语句位置，多用于嵌套循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="attr">outermost</span>: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span> outermost;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><h2 id="continue">continue</h2><p><code>continue</code> 语句用于跳过当前迭代并进入下一次循环迭代，仅适用于循环语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p><code>continue</code> 语句也可以与标签语句一起使用，使<code>continue</code> 语句跳到标签标识的语句位置，多用于嵌套循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="attr">outermost</span>: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span> outermost;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><h2 id="return">return</h2><p><code>return</code> 语句用于退出当前函数并返回一个值。如果函数没有显式返回值，则返回 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b; <span class="comment">// 返回 a 和 b 的和</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">sum</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 return 提前退出函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAge</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Minor&quot;</span>; <span class="comment">// 提前退出函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Adult&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkAge</span>(<span class="number">15</span>)); <span class="comment">// 输出 &quot;Minor&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkAge</span>(<span class="number">20</span>)); <span class="comment">// 输出 &quot;Adult&quot;</span></span><br></pre></td></tr></table></figure><h2 id="with">with</h2><p><code>with</code>语句的用途是将代码作用域设置为特定的对象，使用<code>with</code>语句的主要场景是针对一个对象反复操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出 1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出 2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 输出 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(7)-循环语句</title>
    <link href="/2024/07/20/JS%E5%AD%A6%E4%B9%A0(7)-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/07/20/JS%E5%AD%A6%E4%B9%A0(7)-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<p>循环语句用于重复执行某段代码，直到满足某个条件为止。循环语句可以帮助减少代码冗余，使代码更加简洁和高效。</p><span id="more"></span><h1>循环语句</h1><p>循环语句用于重复执行某段代码，直到满足某个条件为止。</p><h2 id="for-语句">for 语句</h2><p><code>for</code> 循环通常用于已知循环次数的情况。它由初始化语句、条件表达式和迭代语句组成。</p><ol><li><strong>初始化语句</strong>：在循环开始前执行一次，通常用于初始化计数器变量。</li><li><strong>条件表达式</strong>：在每次迭代开始前进行求值，如果条件为真，则执行循环体；如果条件为假，则退出循环。</li><li><strong>迭代语句</strong>：在每次循环体执行后执行，用于更新计数器变量。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 输出 0 到 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while-语句">while 语句</h2><p><code>while</code> 循环用于未知循环次数的情况，当条件表达式为真时执行循环体。</p><ol><li><strong>条件表达式</strong>：在每次迭代开始前进行求值，如果条件为真，则执行循环体；如果条件为假，则退出循环。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 输出 0 到 4</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="do-whiile-语句">do-whiile 语句</h2><p><code>do-while</code> 循环与 <code>while</code> 循环类似，但会先执行一次循环体，然后再检查条件表达式。</p><ol><li><strong>循环体</strong>：无条件执行一次，然后重复执行，直到条件表达式为假为止。</li><li><strong>条件表达式</strong>：在每次循环体执行后进行求值，如果条件为真，则继续执行循环体；如果条件为假，则退出循环。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 输出 0 到 4</span></span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="for-in-语句">for-in 语句</h2><p><code>for-in</code> 循环用于遍历对象的可枚举属性。</p><ol><li><strong>key</strong>：在每次迭代时，变量 <code>key</code> 被赋值为对象的一个属性名。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(key, obj[key]); <span class="comment">// 输出 &quot;a 1&quot;, &quot;b 2&quot;, &quot;c 3&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-of-语句">for-of 语句</h2><p><code>for-of</code> 循环用于遍历可迭代对象（如数组、字符串、Map、Set 等）的元素。</p><ol><li><strong>value</strong>：在每次迭代时，变量 <code>value</code> 被赋值为可迭代对象的一个元素。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出 1, 2, 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-await-of-语句">for-await-of 语句</h2><p><code>for-await-of</code>循环用于处理异步可迭代对象，它允许在循环中等待每个异步操作完成</p><ol><li><strong>variable</strong>: 在每次迭代时，变量被赋值为异步可迭代对象的一个值。</li><li><strong>iterable</strong>: 一个实现了 <code>Symbol.asyncIterator</code> 方法的异步可迭代对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个异步生成器函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">asyncGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">delay</span> = ms =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms));</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>); <span class="comment">// 模拟异步操作</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 for-await-of 循环迭代异步生成器</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="title function_">asyncGenerator</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出 1, 2, 3，每个值之间间隔 1 秒</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟一个返回异步可迭代对象的函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> urls = [</span><br><span class="line">        <span class="string">&quot;https://api.example.com/data1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://api.example.com/data2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://api.example.com/data3&quot;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> url <span class="keyword">of</span> urls) &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="keyword">yield</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 for-await-of 循环处理异步数据流</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> data <span class="keyword">of</span> <span class="title function_">fetchData</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 逐个输出从 API 获取的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><code>for-await-of</code> 只能用于异步可迭代对象，不能用于普通的同步可迭代对象。</li><li>必须在 <code>async</code> 函数中使用 <code>for-await-of</code> 循环。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(6)-条件语句</title>
    <link href="/2024/07/19/JS%E5%AD%A6%E4%B9%A0(6)-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/07/19/JS%E5%AD%A6%E4%B9%A0(6)-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的，可以通过控制语句的执行顺序来实现想要的业务逻辑和功能。</p><span id="more"></span><h1>条件语句</h1><p>条件语句用于根据某个条件的真假来决定执行哪个代码块</p><h2 id="代码块">代码块</h2><p>代码块是由一对大括号 <code>&#123;&#125;</code> 包围的一组语句。代码块用于定义一组逻辑上相关的语句，使它们可以一起执行。代码块通常用于控制语句、函数和类的定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 这是一个代码块</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition is true&quot;</span>);</span><br><span class="line">    <span class="comment">// 这里可以包含多个语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 另一个代码块</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition is false&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 这是一个代码块</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    <span class="comment">// 这里可以包含多个语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 这是一个代码块</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Looping&quot;</span>);</span><br><span class="line">    <span class="comment">// 这里可以包含多个语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="comment">// 这是一个代码块</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + name);</span><br><span class="line">    <span class="comment">// 这里可以包含多个语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHello</span>(<span class="string">&quot;Alice&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="if语句">if语句</h2><p><code>if</code> 语句有三种形式，<code>if</code> 语句条件可以是任何表达式，并且求值结果不一定是布尔值。JavaScript 会自动调用<code>Boolean()</code>函数将这个表达式的值转换为布尔值。</p><h3 id="if">if</h3><p>根据条件判断是否执行某段代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 当 condition 为 true 时执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition is true&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if-else">if-else</h3><p>根据条件的真假执行不同的代码块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 当 condition 为 true 时执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition is true&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 当 condition 为 false 时执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition is false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="else-if">else-if</h3><p>用于检查多个条件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">    <span class="comment">// 当 condition1 为 true 时执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition1 is true&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">    <span class="comment">// 当 condition1 为 false 且 condition2 为 true 时执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition2 is true&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 当 condition1 和 condition2 都为 false 时执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Both conditions are false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch语句">switch语句</h2><p><code>switch</code> 语句允许一个程序求一个表达式的值并且尝试去匹配表达式的值到一个 <code>case</code> 标签。如果匹配成功，这个程序执行相关的语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">value1</span>:</span><br><span class="line">        <span class="comment">// 当 expression === value1 时执行</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Value is value1&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">value2</span>:</span><br><span class="line">        <span class="comment">// 当 expression === value2 时执行</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Value is value2&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="comment">// 当 expression 不等于上面的值时执行</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Value does not match&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>计算出表达式的值，和各个 <code>case</code> 依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到 <code>break</code> 就会结束。</li><li>如果所有的 <code>case</code> 都和表达式的值不匹配，就会执行 <code>default</code> 语句。</li><li>如果没有找到 <code>default</code>，程序会继续执行 <code>switch</code> 语句后面的语句</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(5)-类型转换</title>
    <link href="/2024/07/18/JS%E5%AD%A6%E4%B9%A0(5)-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2024/07/18/JS%E5%AD%A6%E4%B9%A0(5)-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>Javascript 是一种弱类型语言，这意味着变量是没有明确类型的，而是由 JavaScript 引擎在编译时隐式完成，类型转换是将一种数据类型转换为另一种数据类型。</p><span id="more"></span><h1>类型转换</h1><p>任何数据类型，无论是原始类型还是对象，都可以进行类型转换。尽管原始类型和对象的转换逻辑各不相同，但是都只能转换为三种类型：<strong>字符串（string）、数字（number）、布尔值（boolean）</strong>。</p><p>JavaScript 中的类型转换有两种方式：</p><ol><li>**隐式类型转换：**由 JavaScript 编译器完成的自动类型转换。</li><li>**显式类型转换：**由开发人员完成的手动类型转换。</li></ol><h2 id="显式类型转换">显式类型转换</h2><p>通过 JavaScript 内置的一些 API 将一种类型转换为另一种类型，这称为显式类型转化。</p><h3 id="数字类型转换">数字类型转换</h3><p>有3个函数可以把非数值转换为数值，<code>Number()</code>、<code>parseInt()</code>和<code>parseFloat()</code>。<code>Number()</code>可以用于任何数据类型，另外两个用于把字符串转换成数值。</p><ol><li><p><code>Number()</code>：可以用于任何数据类型</p></li><li><p><code>parseInt()</code>和<code>parseFloat()</code>：用于把字符串转换成数值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;123.1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseInt</span>(str);</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseFloat</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1); <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num2); <span class="comment">// 123.1</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="隐式类型转换">隐式类型转换</h2><h3 id="Boolean类型转换">Boolean类型转换</h3>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(4)-运算符</title>
    <link href="/2024/07/17/JS%E5%AD%A6%E4%B9%A0(4)-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2024/07/17/JS%E5%AD%A6%E4%B9%A0(4)-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>运算符是编程语言中用于执行各种操作的符号或关键词。JavaScript 中的运算符涵盖了算术运算、赋值、比较、逻辑运算等多种操作</p><span id="more"></span><h1>运算符</h1><p>运算符也叫操作符，是一种符号。通过运算符可以对一个或多个值进行运算，并获取运算结果。</p><h2 id="一元运算符">一元运算符</h2><p>只操作一个值的操作符叫一元操作符，一元操作符是 ECMAScript中最简单的操作符。</p><h3 id="递增运算符">递增运算符(<code>++</code>)</h3><p>avaScript 中的递增操作符 <code>++</code> 用于将变量的值增加 1。它有两种形式：前置递增（<code>++x</code>）和后置递增（<code>x++</code>）。这两种形式在操作顺序和返回值上有些许不同。</p><ol><li>对于字符串，如果是有效的数值形式，则转换为数值再应用改变。变量类型从字符串变成数值。</li><li>对于字符串，如果不是有效的数值形式，则将变量的值设置为 NaN 。变量类型从字符串变成 数值。</li><li>对于布尔值，如果是 false，则转换为 0 再应用改变，如果是 true，则转换为 1 再应用改变。变量类型从布尔值变成数值。</li><li>对于浮点值，直接应用</li><li>如果是对象，则调用其<code>valueOf()</code>方法取得可以操作的值。对得到的值应用上述规则。如果是 NaN，则调用<code>toString()</code>并再次应用其他规则。变量类型从对象变成数值。</li></ol><h4 id="前置递增（-x）">前置递增（++x）</h4><p>前置递增操作符会先将变量的值增加 1，然后返回增加后的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = a++ + <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">// 输出: 4，因为 a 已经增加了 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">// 输出: 5，因为 b = 3 + 2，a 的初始值是 3</span></span><br></pre></td></tr></table></figure><h4 id="后置递增（x-）">后置递增（x++）</h4><p>后置递增操作符会先返回变量的当前值，然后将变量的值增加 1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> d = ++c + <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);  <span class="comment">// 输出: 4，因为 c 已经增加了 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);  <span class="comment">// 输出: 6，因为 d = 4 + 2，c 的值增加后变为 4</span></span><br></pre></td></tr></table></figure><h3 id="递减运算符">递减运算符(<code>--</code>)</h3><p>avaScript 中的递减操作符 <code>--</code> 用于将变量的值减 1。它有两种形式：前置递减（<code>--x</code>）和后置递减（<code>x--</code>）。这两种形式在操作顺序和返回值上有些许不同。</p><ol><li>对于字符串，如果是有效的数值形式，则转换为数值再应用改变。变量类型从字符串变成数值。</li><li>对于字符串，如果不是有效的数值形式，则将变量的值设置为 NaN 。变量类型从字符串变成 数值。</li><li>对于布尔值，如果是 false，则转换为 0 再应用改变，如果是 true，则转换为 1 再应用改变。变量类型从布尔值变成数值。</li><li>对于浮点值，直接应用</li><li>如果是对象，则调用其<code>valueOf()</code>方法取得可以操作的值。对得到的值应用上述规则。如果是 NaN，则调用<code>toString()</code>并再次应用其他规则。变量类型从对象变成数值。</li></ol><h4 id="前置递减（–x）">前置递减（–x）</h4><p>前置递减操作符会先将变量的值减 1，然后返回减后的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = a-- + <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">// 输出: 2，因为 a 已经减了1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">// 输出: 5，因为 b = 3 + 2，a 的初始值是3</span></span><br></pre></td></tr></table></figure><h4 id="后置递减（x–）">后置递减（x–）</h4><p>后置递减操作符会先返回变量的当前值，然后将变量的值减1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> d = --c + <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);  <span class="comment">// 输出: 2，因为 c 已经减了1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);  <span class="comment">// 输出: 4，因为 d = 2 + 2，c 的值减后变为2</span></span><br></pre></td></tr></table></figure><h3 id="typeof">typeof</h3><p><code>typeof</code>运算符用于返回操作数的数据类型。它的返回值是一个字符串，表示操作数的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">// 输出: &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);      <span class="comment">// 输出: &quot;boolean&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">42</span>);        <span class="comment">// 输出: &quot;number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">10n</span>);       <span class="comment">// 输出: &quot;bigint&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;Hello&quot;</span>);   <span class="comment">// 输出: &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>)); <span class="comment">// 输出: &quot;symbol&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);      <span class="comment">// 输出: &quot;object&quot; (这是一个历史遗留问题)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;);          <span class="comment">// 输出: &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []);          <span class="comment">// 输出: &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;); <span class="comment">// 输出: &quot;function&quot;</span></span><br></pre></td></tr></table></figure><h3 id="delete">delete</h3><p><code>delete</code> 操作符用于删除对象的属性，返回一个布尔值。如果删除成功，返回 <code>true</code>，如果删除不成功，返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">firstName</span>); <span class="comment">// 输出: &quot;John&quot;</span></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">firstName</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">firstName</span>); <span class="comment">// 输出: undefined</span></span><br></pre></td></tr></table></figure><ol><li><p>如果删除的属性不存在，那么 <code>delete</code> 将不会起任何作用，并且返回 <code>true</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> obj.<span class="property">b</span>); <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure></li><li><p><code>delete</code> 只影响自身属性。如果对象的原型链上有一个与待删除属性同名的属性，那么删除属性之后，对象会使用原型链上的那个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bar</span> = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.bar 指代了自身属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 foo 对象的自身属性</span></span><br><span class="line"><span class="keyword">delete</span> foo.<span class="property">bar</span>; <span class="comment">// 返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.bar 仍然在原型链上可用。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>); <span class="comment">//42</span></span><br></pre></td></tr></table></figure></li><li><p>删除一个数组元素时，数组的长度不受影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 输出: 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]);    <span class="comment">// 输出: undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 输出: 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);        <span class="comment">// 输出: [1, empty, 3]</span></span><br></pre></td></tr></table></figure></li><li><p>直接定义在全局对象上的属性或通过 <code>Object.defineProperty</code> 定义为不可配置的属性，<code>delete</code> 不会有任何效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;x&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> obj.<span class="property">x</span>); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">x</span>);        <span class="comment">// 输出: 0</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="void">void</h3><p><code>void</code> 操作符用于计算一个表达式并返回 <code>undefined</code>。它主要用于在不希望返回任何值的情况下执行表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">void</span> <span class="number">0</span>);          <span class="comment">// 输出: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Link clicked!&#x27;)&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">void</span> <span class="title function_">doSomething</span>()); <span class="comment">// 输出: undefined</span></span><br></pre></td></tr></table></figure><h2 id="算数运算符">算数运算符</h2><h3 id="加法运算符">加法运算符(<code>+</code>)</h3><p>加法操作符（+）用于求两个数的和，加性操作符拥有一些特殊的行为，会产生不同数据类型的转换。</p><p>如果两个操作数都是数值，加法操作符执行加法运算并根据如下规则返回结果：</p><ol><li>如果有任一操作数是 NaN，则返回 NaN；</li><li>如果是 Infinity 加 Infinity，则返回 Infinity；</li><li>如果是-Infinity 加-Infinity，则返回-Infinity；</li><li>如果是 Infinity 加-Infinity，则返回 NaN；</li><li>如果是+0 加+0，则返回+0；</li><li>如果是-0 加+0，则返回+0；</li><li>如果是-0 加-0，则返回-0</li></ol><p>如果有一个操作数是字符串，则要应用如下规则：</p><ol><li>如果两个操作数都是字符串，则将第二个字符串拼接到第一个字符串后面；</li><li>如果只有一个操作数是字符串，则将另一个操作数转换为字符串，再将两个字符串拼接在一起。</li><li>如果有任一操作数是对象、数值或布尔值，则调用<code>toString()</code>方法获取字符串，然后再应用前面的关于字符串的规则。</li><li>对于<code>undefined</code>和<code>null</code>，则调用<code>String()</code>函数，分别获取 “undefined&quot;和&quot;null”</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="number">5</span> + <span class="number">5</span>; <span class="comment">// 两个数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="number">5</span> + <span class="string">&quot;5&quot;</span>; <span class="comment">// 一个数值和一个字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// &quot;55&quot;</span></span><br></pre></td></tr></table></figure><h3 id="减法运算符">减法运算符(<code>-</code>)</h3><p>减法操作符（-）用于求两个数的差，减法操作符和加法操作符一样，也会产生数据类型的转换。</p><ol><li>如果两个操作数都是数值，则执行数学减法运算并返回结果。</li><li>如果有任一操作数是 NaN，则返回 NaN。</li><li>如果是 Infinity 减 Infinity，则返回 NaN。</li><li>如果是-Infinity 减-Infinity，则返回 NaN。</li><li>如果是 Infinity 减-Infinity，则返回 Infinity。</li><li>如果是-Infinity 减 Infinity，则返回-Infinity。</li><li>如果是+0 减+0，则返回+0。</li><li>如果是+0 减-0，则返回-0。</li><li>如果是-0 减-0，则返回+0。</li><li>如果有任一操作数是字符串、布尔值、<code>null</code>或<code>undefined</code>，则先在后台使用<code>Number()</code>将其转换为数值，然后再根据前面的规则执行数学运算。如果转换结果是 NaN，则减法计算的结果是 NaN。</li><li>如果有任一操作数是对象，则调用其 valueOf()方法取得表示它的数值。如果该值是 NaN，则 减法计算的结果是 NaN。如果对象没有 <code>valueOf()</code>方法，则调用其<code>toString()</code>方法，然后再 将得到的字符串转换为数值。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="number">5</span> - <span class="literal">true</span>; <span class="comment">// true 被转换为 1，所以结果是 4</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title class_">NaN</span> - <span class="number">1</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="number">5</span> - <span class="number">3</span>; <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> result4 = <span class="number">5</span> - <span class="string">&quot;&quot;</span>; <span class="comment">// &quot;&quot;被转换为 0，所以结果是 5</span></span><br><span class="line"><span class="keyword">let</span> result5 = <span class="number">5</span> - <span class="string">&quot;2&quot;</span>; <span class="comment">// &quot;2&quot;被转换为 2，所以结果是 3</span></span><br><span class="line"><span class="keyword">let</span> result6 = <span class="number">5</span> - <span class="literal">null</span>; <span class="comment">// null 被转换为 0，所以结果是 5</span></span><br></pre></td></tr></table></figure><h3 id="乘法运算符">乘法运算符(<code>*</code>)</h3><p>乘法操作符由一个星号（*）表示，可以用于计算两个数值的乘积。</p><ol><li>如果操作数都是数值，则执行常规的乘法运算</li><li>如果有任一操作数是 NaN，则返回 NaN。</li><li>如果是 Infinity 乘以 0，则返回 NaN。</li><li>如果是 Infinity 乘以非 0的有限数值，则根据第二个操作数的符号返回 Infinity 或-Infinity。</li><li>如果是 Infinity 乘以 Infinity，则返回 Infinity。</li><li>如果有不是数值的操作数，则先在后台用 Number()将其转换为数值，然后再应用上述规则。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="number">5</span> * <span class="literal">true</span>; <span class="comment">// true 被转换为 1，所以结果是 5</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title class_">NaN</span> * <span class="number">1</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="number">5</span> * <span class="number">3</span>; <span class="comment">// 15</span></span><br><span class="line"><span class="keyword">let</span> result4 = <span class="number">5</span> * <span class="string">&quot;&quot;</span>; <span class="comment">// &quot;&quot;被转换为 0，所以结果是 0</span></span><br><span class="line"><span class="keyword">let</span> result5 = <span class="number">5</span> * <span class="string">&quot;2&quot;</span>; <span class="comment">// &quot;2&quot;被转换为 2，所以结果是 10</span></span><br><span class="line"><span class="keyword">let</span> result6 = <span class="number">5</span> * <span class="literal">null</span>; <span class="comment">// null 被转换为 0，所以结果是 0</span></span><br></pre></td></tr></table></figure><h3 id="除法运算符">除法运算符(<code>/</code>)</h3><p>除法操作符由一个斜杠（/）表示，用于计算第一个操作数除以第二个操作数的商</p><ol><li>如果操作数都是数值，则执行常规的除法运算</li><li>如果有任一操作数是 NaN，则返回 NaN。</li><li>如果是 Infinity 除以 Infinity，则返回 NaN。</li><li>如果是 0 除以 0，则返回 NaN。</li><li>如果是非 0 的有限值除以 0，则根据第一个操作数的符号返回 Infinity 或-Infinity。</li><li>如果是 Infinity 除以任何数值，则根据第二个操作数的符号返回 Infinity 或-Infinity。</li><li>如果有不是数值的操作数，则先在后台用 Number()函数将其转换为数值，然后再应用上述规则</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> / <span class="number">2</span>);          <span class="comment">// 输出: 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> / <span class="number">2</span>);         <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> / <span class="title class_">NaN</span>);        <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span> / <span class="title class_">Infinity</span>); <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> / <span class="number">0</span>);           <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> / <span class="number">0</span>);          <span class="comment">// 输出: Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="number">10</span> / <span class="number">0</span>);         <span class="comment">// 输出: -Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span> / <span class="number">10</span>);   <span class="comment">// 输出: Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span> / -<span class="number">10</span>);  <span class="comment">// 输出: -Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;20&quot;</span> / <span class="number">2</span>);        <span class="comment">// 字符串转换为数值，输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> / <span class="number">2</span>);        <span class="comment">// 布尔值转换为数值，输出: 0.5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> / <span class="number">2</span>);   <span class="comment">// undefined 转换为数值 NaN，输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> / <span class="number">2</span>);        <span class="comment">// null 被转换为 0，输出: 0</span></span><br></pre></td></tr></table></figure><h3 id="取模运算符">取模运算符(<code>%</code>)</h3><p>取模（余数）操作符由一个百分比符号（%）表示</p><ol><li>如果操作数是数值，则执行常规除法运算，返回余数。</li><li>如果被除数是无限值，除数是有限值，则返回 NaN。</li><li>如果被除数是有限值，除数是 0，则返回 NaN。</li><li>如果是 Infinity 除以 Infinity，则返回 NaN。</li><li>如果被除数是有限值，除数是无限值，则返回被除数。</li><li>如果被除数是 0，除数不是 0，则返回 0。</li><li>如果有不是数值的操作数，则先在后台用 Number()函数将其转换为数值，然后再应用上述规则</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> % <span class="number">3</span>);               <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span> % <span class="number">10</span>);        <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> % <span class="number">0</span>);               <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span> % <span class="title class_">Infinity</span>);  <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> % <span class="title class_">Infinity</span>);        <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> % <span class="number">10</span>);               <span class="comment">// 输出: 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;20&quot;</span> % <span class="number">3</span>);             <span class="comment">// 字符串转换为数值，输出: 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> % <span class="number">2</span>);             <span class="comment">// 布尔值转换为数值，输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> % <span class="number">2</span>);        <span class="comment">// undefined 转换为数值 NaN，输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> % <span class="number">2</span>);             <span class="comment">// null 被转换为 0，输出: 0</span></span><br></pre></td></tr></table></figure><h3 id="指数运算符">指数运算符(<code>**</code>)</h3><p>指数操作符由一个百分比符号（**）表示，等同于<code>Math.pow()</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">3</span>, <span class="number">2</span>); <span class="comment">// 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> ** <span class="number">2</span>); <span class="comment">// 9 </span></span><br></pre></td></tr></table></figure><h2 id="关系运算符">关系运算符</h2><p>关系操作符执行比较两个值的操作，包括小于（&lt;）、大于（&gt;）、小于等于（&lt;=）和大于等于（&gt;=），这几个操作符都返回布尔值</p><ol><li>如果操作数都是数值，则执行数值比较。</li><li>如果操作数都是字符串，则逐个比较字符串中对应字符的编码。</li><li>如果有任一操作数是数值，则将另一个操作数转换为数值，执行数值比较。</li><li>如果有任一操作数是对象，则调用其<code>valueOf()</code>方法，取得结果后再根据前面的规则执行比较。 如果没有<code>valueOf()</code>方法，则调用<code>toString()</code>方法，取得结果后再根据前面的规则执行比较。</li><li>如果有任一操作数是布尔值，则将其转换为数值再执行比较。</li></ol><h3 id="大于">大于(<code>&gt;</code>)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt; <span class="number">5</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apple&quot;</span> &gt; <span class="string">&quot;banana&quot;</span>);   <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值和字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> &gt; <span class="number">5</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象比较</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">10</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 &gt; <span class="number">5</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3 &gt; <span class="number">0</span>);      <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure><h3 id="小于">小于(<code>&lt;</code>)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">7</span>);         <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cat&quot;</span> &lt; <span class="string">&quot;dog&quot;</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apple&quot;</span> &lt; <span class="string">&quot;apple pie&quot;</span>);<span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值和字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="string">&quot;7&quot;</span>);       <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象比较</span></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">toString</span>: <span class="function">() =&gt;</span> <span class="string">&quot;5&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2 &lt; <span class="number">7</span>);      <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h3 id="大于等于">大于等于(<code>&gt;=</code>)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt;= <span class="number">5</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span> &gt;= <span class="number">7</span>);         <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt;= <span class="number">8</span>);         <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apple&quot;</span> &gt;= <span class="string">&quot;banana&quot;</span>);   <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cat&quot;</span> &gt;= <span class="string">&quot;cat&quot;</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apple&quot;</span> &gt;= <span class="string">&quot;apple pie&quot;</span>);<span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值与字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> &gt;= <span class="number">5</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt;= <span class="string">&quot;7&quot;</span>);       <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> &gt;= <span class="number">10</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span> &gt;= <span class="number">10</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔值比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &gt;= <span class="number">1</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &gt;= <span class="number">0</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &gt;= <span class="number">0</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &gt;= <span class="number">1</span>);     <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象比较</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">5</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 &gt;= obj2);   <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">toString</span>: <span class="function">() =&gt;</span> <span class="string">&quot;5&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3 &gt;= <span class="number">3</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj4 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">2</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj4 &gt;= <span class="number">5</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊情况</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt;= <span class="string">&#x27;a&#x27;</span>);      <span class="comment">// &#x27;a&#x27; 转换为 NaN，NaN 与任何值比较结果都是 false，输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> &gt;= <span class="number">10</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> &gt;= <span class="number">0</span>);      <span class="comment">// null 转换为 0，输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> &gt;= <span class="number">0</span>); <span class="comment">// undefined 转换为 NaN，输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &gt;= <span class="literal">false</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &gt;= <span class="literal">true</span>);      <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h3 id="小于等于">小于等于(<code>&lt;=</code>)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> &lt;= <span class="number">10</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span> &lt;= <span class="number">7</span>);         <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &lt;= <span class="number">3</span>);        <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apple&quot;</span> &lt;= <span class="string">&quot;banana&quot;</span>);   <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cat&quot;</span> &lt;= <span class="string">&quot;cat&quot;</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apple&quot;</span> &lt;= <span class="string">&quot;apple pie&quot;</span>);<span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值与字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> &lt;= <span class="number">15</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">20</span> &lt;= <span class="string">&quot;25&quot;</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;30&quot;</span> &lt;= <span class="number">30</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span> &lt;= <span class="number">3</span>);       <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔值比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &lt;= <span class="number">1</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &lt;= <span class="number">0</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &lt;= <span class="number">0</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &lt;= <span class="number">1</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象比较</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">10</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 &lt;= obj2);   <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">toString</span>: <span class="function">() =&gt;</span> <span class="string">&quot;10&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3 &lt;= <span class="number">15</span>);    <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj4 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">20</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj4 &lt;= <span class="number">10</span>);    <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊情况</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &lt;= <span class="string">&#x27;a&#x27;</span>);      <span class="comment">// &#x27;a&#x27; 转换为 NaN，NaN 与任何值比较结果都是 false，输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> &lt;= <span class="number">10</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> &lt;= <span class="number">0</span>);      <span class="comment">// null 转换为 0，输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> &lt;= <span class="number">0</span>); <span class="comment">// undefined 转换为 NaN，输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &lt;= <span class="literal">false</span>);    <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &lt;= <span class="literal">true</span>);     <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h3 id="instanceof">instanceof</h3><p><code>instanceof</code> 操作符用于检测对象是否为某个构造函数的实例。它在原型链上查找对象，确认对象是否派生自某个构造函数的 <code>prototype</code> 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测对象是否为某个构造函数的实例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(john <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Person</span>);  <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测内置对象的实例</span></span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>);    <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>);   <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date <span class="keyword">instanceof</span> <span class="title class_">Date</span>);    <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date <span class="keyword">instanceof</span> <span class="title class_">Object</span>);  <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h3 id="in">in</h3><p><code>in</code> 操作符用于检查某个属性是否存在于对象中。它可以用于检测对象是否具有特定的属性（包括那些从原型链继承的属性）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查对象的直接属性</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> person); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;age&quot;</span> <span class="keyword">in</span> person);  <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;gender&quot;</span> <span class="keyword">in</span> person); <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查继承的属性</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;toString&quot;</span> <span class="keyword">in</span> obj); <span class="comment">// 输出: true，因为 toString 是从 Object.prototype 继承的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于数组，in 操作符可以检查某个索引是否存在（即该位置是否有元素）。</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> <span class="keyword">in</span> arr); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> <span class="keyword">in</span> arr); <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hasOwnProperty 只检查对象自身的属性，而不检查原型链上的属性。</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;toString&quot;</span>)); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;toString&quot;</span> <span class="keyword">in</span> person); <span class="comment">// 输出: true，因为 toString 是继承的</span></span><br></pre></td></tr></table></figure><h2 id="相等运算符">相等运算符</h2><h3 id="等于-和不等于">等于(<code>==</code>)和不等于(<code>!=</code>)</h3><p>等于操作符用两个等于号（==）表示，如果操作数相等，则会返回 true。不等于 操作符用叹号和等于号（!=）表示，如果两个操作数不相等，则会返回 true。这两个操作符都会先进 行类型转换（通常称为强制类型转换）再确定操作数是否相等。</p><ol><li>如果任一操作数是布尔值，则将其转换为数值再比较是否相等。false 转换为 0，true 转换 为 1。</li><li>如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否 相等。</li><li>如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf()方法取得其原始值，再 根据前面的规则进行比较。</li><li>null 和 undefined 相等。</li><li>null 和 undefined 不能转换为其他类型的值再进行比较。</li><li>如果有任一操作数是 NaN，则相等操作符返回 false，不相等操作符返回 true。即使两 个操作数都是 NaN，相等操作符也返回 false，因为按照规则，NaN 不等于 NaN。</li><li>如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象， 则相等操作符返回 true。否则，两者不相等。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等于 (==)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> == <span class="number">10</span>);       <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> == <span class="number">10</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> == <span class="number">1</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; == &#123;&#125;);       <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不等于 (!=)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> != <span class="number">5</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> != <span class="number">5</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> != <span class="number">1</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> != <span class="literal">undefined</span>); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; != &#123;&#125;);       <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h3 id="全等-和不全等">全等(<code>===</code>)和不全等(<code>!==</code>)</h3><p>全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由 3 个等于号（===）表示，只有两个操作数在不转换的前提下相等才返回 true。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全等于 (===)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> === <span class="number">10</span>);       <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> === <span class="number">10</span>);     <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> === <span class="number">1</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; === &#123;&#125;);       <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">2</span>] === [<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// 输出: false，因为不同的数组是不同的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不全等于 (!==)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> !== <span class="number">5</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> !== <span class="number">10</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> !== <span class="number">1</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> !== <span class="literal">undefined</span>); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; !== &#123;&#125;);       <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">2</span>] !== [<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// 输出: true，因为不同的数组是不同的对象</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符">逻辑运算符</h2><h3 id="逻辑非">逻辑非(<code>!</code>)</h3><p>逻辑非运算符用于取反一个布尔值。如果操作数为真，则返回假；如果操作数为假，则返回真。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取反布尔值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">true</span>); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">false</span>); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取反非布尔值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="number">0</span>); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="string">&quot;Hello&quot;</span>); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="title class_">NaN</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="string">&quot;&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="number">12345</span>); <span class="comment">// false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="逻辑与">逻辑与(<code>&amp;&amp;</code>)</h3><p>逻辑与操作符可用于任何类型的操作数，不限于布尔值。逻辑与操作符是一种短路操作符，意思就是如果第一个操作数决定了结果，那么永远不会对第二个操作数求值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> result1 = obj1 &amp;&amp; <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">// 输出: 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> result2 = <span class="literal">true</span> &amp;&amp; obj2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// 输出: &#123; key: &#x27;value&#x27; &#125;</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="literal">false</span> &amp;&amp; obj2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3); <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">key1</span>: <span class="string">&#x27;value1&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj4 = &#123; <span class="attr">key2</span>: <span class="string">&#x27;value2&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> result4 = obj3 &amp;&amp; obj4;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result4); <span class="comment">// 输出: &#123; key2: &#x27;value2&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result5 = <span class="literal">null</span> &amp;&amp; <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result5); <span class="comment">// 输出: null</span></span><br><span class="line"><span class="keyword">let</span> result6 = <span class="number">10</span> &amp;&amp; <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result6); <span class="comment">// 输出: null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result7 = <span class="title class_">NaN</span> &amp;&amp; <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result7); <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="keyword">let</span> result8 = <span class="number">10</span> &amp;&amp; <span class="title class_">NaN</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result8); <span class="comment">// 输出: NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result9 = <span class="literal">undefined</span> &amp;&amp; <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result9); <span class="comment">// 输出: undefined</span></span><br><span class="line"><span class="keyword">let</span> result10 = <span class="number">10</span> &amp;&amp; <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result10); <span class="comment">// 输出: undefined</span></span><br></pre></td></tr></table></figure><h3 id="逻辑或">逻辑或(<code>||</code>)</h3><p>逻辑或操作符可用于任何类型的操作数，不限于布尔值。逻辑或操作符是一种短路操作符，意思就是如果第一个操作数求值为 true，第二个操作数就不会再被求值了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> result1 = obj1 || <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">// 输出: &#123; key: &#x27;value&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="literal">false</span> || <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="number">0</span> || <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3); <span class="comment">// 输出: &#x27;default&#x27;</span></span><br><span class="line"><span class="keyword">let</span> result4 = <span class="string">&#x27;&#x27;</span> || <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result4); <span class="comment">// 输出: &#x27;default&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">key1</span>: <span class="string">&#x27;value1&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">key2</span>: <span class="string">&#x27;value2&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> result5 = obj2 || obj3;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result5); <span class="comment">// 输出: &#123; key1: &#x27;value1&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result6 = <span class="literal">null</span> || <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result6); <span class="comment">// 输出: null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result7 = <span class="title class_">NaN</span> || <span class="title class_">NaN</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result7); <span class="comment">// 输出: NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result8 = <span class="literal">undefined</span> || <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result8); <span class="comment">// 输出: undefined</span></span><br></pre></td></tr></table></figure><h2 id="位运算符">位运算符</h2><p>位操作符是用于对数字的二进制表示进行直接操作的运算符。JavaScript 中所有数值都以 IEEE 754 64 位格式存储，但位操作并不直接应用到 64 位表示，而是先把值转换为 32 位整数，再进行位操作，之后再把结果转换为 64 位。</p><h3 id="按位非">按位非(<code>~</code>)</h3><p>按位非操作会将操作数的每个位进行取反操作（0 变 1，1 变 0）。</p><h4 id="正数按位取反">正数按位取反</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~num); <span class="comment">// -2</span></span><br><span class="line"><span class="number">1.</span>十进制转为二进制原码</span><br><span class="line"><span class="number">1</span> =&gt; <span class="number">0000</span> <span class="number">0001</span></span><br><span class="line"><span class="number">2.</span>二进制原码按位取反</span><br><span class="line"><span class="number">0000</span> <span class="number">0001</span> =&gt; <span class="number">1111</span> <span class="number">1110</span></span><br><span class="line"><span class="number">3.</span>取反后的二进制转为原码(符号位保留，其余位取反+<span class="number">1</span>)</span><br><span class="line"><span class="number">1111</span> <span class="number">1110</span> =&gt; <span class="number">1000</span> <span class="number">0001</span> =&gt; <span class="number">1000</span> <span class="number">0010</span></span><br><span class="line"><span class="number">4.</span>将原码二进制转为十进制</span><br><span class="line"><span class="number">1000</span> <span class="number">0010</span> =&gt; -<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="负数按位取反">负数按位取反</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = -<span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~num); <span class="comment">// 1</span></span><br><span class="line"><span class="number">1.</span>十进制转为二进制原码</span><br><span class="line">-<span class="number">2</span> =&gt; <span class="number">1000</span> <span class="number">0010</span></span><br><span class="line"><span class="number">2.</span>符号位保留，其余位取反+<span class="number">1</span></span><br><span class="line"><span class="number">1000</span> <span class="number">0010</span> =&gt; <span class="number">1111</span> <span class="number">1101</span> =&gt; <span class="number">1111</span> <span class="number">1110</span></span><br><span class="line"><span class="number">3.</span>二进制原码按位取反</span><br><span class="line"><span class="number">1111</span> <span class="number">1110</span> =&gt; <span class="number">0000</span> <span class="number">0001</span></span><br><span class="line"><span class="number">4.</span>将原码二进制转为十进制</span><br><span class="line"><span class="number">0000</span> <span class="number">0001</span> =&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="按位与">按位与(<code>&amp;</code>)</h3><p>按位与操作会将两个操作数的每个位进行与操作（两个位都为 1 时，结果为 1，否则为 0）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>; <span class="comment">// 二进制：0101</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>; <span class="comment">// 二进制：0011</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = a &amp; b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：1 (二进制：0001)</span></span><br></pre></td></tr></table></figure><h3 id="按位或">按位或(<code>|</code>)</h3><p>按位或操作会将两个操作数的每个位进行或操作（任一位为 1 时，结果为 1，否则为 0）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>; <span class="comment">// 二进制：0101</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>; <span class="comment">// 二进制：0011</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = a | b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：7 (二进制：0111)</span></span><br></pre></td></tr></table></figure><h3 id="按位异或">按位异或(<code>^</code>)</h3><p>按位异或操作会将两个操作数的每个位进行异或操作（两个位不同时，结果为 1，否则为 0）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>; <span class="comment">// 二进制：0101</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>; <span class="comment">// 二进制：0011</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = a ^ b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：6 (二进制：0110)</span></span><br></pre></td></tr></table></figure><h3 id="左移">左移(<code>&lt;&lt;</code>)</h3><p>左移操作会将第一个操作数的所有位向左移动指定的位数，右侧用零填充。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>; <span class="comment">// 二进制：0101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = a &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：10 (二进制：1010)</span></span><br></pre></td></tr></table></figure><h3 id="有符号右移">有符号右移(<code>&gt;&gt;</code>)</h3><p>右移操作会将第一个操作数的所有位向右移动指定的位数，左侧用操作数的符号位填充（即保留符号）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">64</span>; <span class="comment">// 二进制：1000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = a &gt;&gt; <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：2 (二进制：10)</span></span><br></pre></td></tr></table></figure><h3 id="无符号右移">无符号右移(<code>&gt;&gt;&gt;</code>)</h3><p>无符号右移操作会将第一个操作数的所有位向右移动指定的位数，左侧用零填充，忽略符号位。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = -<span class="number">64</span>; <span class="comment">// 二进制：11111111111111111111111111000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = a &gt;&gt;&gt; <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">toString</span>(<span class="number">2</span>)); <span class="comment">// 输出：134217726 (二进制：111111111111111111111111110)</span></span><br></pre></td></tr></table></figure><h2 id="条件（三元）运算符">条件（三元）运算符(<code>?:</code>)</h2><p>条件（三元）运算符是 JavaScript 唯一使用三个操作数的运算符：一个条件后跟一个问号（<code>?</code>），如果条件为真值，则执行冒号（<code>:</code>）前的表达式；若条件为假值，则执行最后的表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition ? expr1 : expr2</span><br></pre></td></tr></table></figure><ol><li><code>condition</code>：一个表达式，求值结果为 <code>true</code> 或 <code>false</code>。</li><li><code>expr1</code>：如果 <code>condition</code> 为 <code>true</code>，则返回的值。</li><li><code>expr2</code>：如果 <code>condition</code> 为 <code>false</code>，则返回的值。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> canVote = age &gt;= <span class="number">18</span> ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(canVote); <span class="comment">// &quot;Yes&quot;</span></span><br></pre></td></tr></table></figure><h2 id="赋值操作符">赋值操作符</h2><p>赋值操作符用于给变量赋值，通常结合其他运算符来进行数学运算和赋值。</p><h3 id="赋值">赋值(<code>=</code>)</h3><p>将右侧的值赋给左侧的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 10</span></span><br></pre></td></tr></table></figure><h3 id="加法赋值">加法赋值(<code>+=</code>)</h3><p>将右侧的值加到左侧变量上，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">x += <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 15</span></span><br></pre></td></tr></table></figure><h3 id="减法赋值">减法赋值(<code>-=</code>)</h3><p>将右侧的值从左侧变量中减去，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">x -= <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 5</span></span><br></pre></td></tr></table></figure><h3 id="乘法赋值">乘法赋值(<code>*=</code>)</h3><p>将左侧变量与右侧的值相乘，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">x *= <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 50</span></span><br></pre></td></tr></table></figure><h3 id="除法赋值">除法赋值(<code>/=</code>)</h3><p>将左侧变量除以右侧的值，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">x /= <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 2</span></span><br></pre></td></tr></table></figure><h3 id="取模赋值">取模赋值(<code>%=</code>)</h3><p>将左侧变量取右侧的值的模，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">x %= <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 1</span></span><br></pre></td></tr></table></figure><h3 id="指数赋值">指数赋值(<code>**=</code>)</h3><p>将左侧变量取右侧值的幂，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">x **= <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 8</span></span><br></pre></td></tr></table></figure><h3 id="按位与赋值">按位与赋值(<code>&amp;=</code>)</h3><p>将左侧变量按位与右侧值，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>; <span class="comment">// 二进制: 0101</span></span><br><span class="line">x &amp;= <span class="number">3</span>;    <span class="comment">// 二进制: 0011</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 1 (二进制: 0001)</span></span><br></pre></td></tr></table></figure><h3 id="按位或赋值">按位或赋值(<code>|=</code>)</h3><p>将左侧变量按位或右侧值，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>; <span class="comment">// 二进制: 0101</span></span><br><span class="line">x |= <span class="number">3</span>;    <span class="comment">// 二进制: 0011</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 7 (二进制: 0111)</span></span><br></pre></td></tr></table></figure><h3 id="按位异或赋值">按位异或赋值(<code>^=</code>)</h3><p>将左侧变量按位异或右侧值，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>; <span class="comment">// 二进制: 0101</span></span><br><span class="line">x ^= <span class="number">3</span>;    <span class="comment">// 二进制: 0011</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 6 (二进制: 0110)</span></span><br></pre></td></tr></table></figure><h3 id="左移赋值">左移赋值(<code>&lt;&lt;=</code>)</h3><p>将左侧变量按位左移右侧指定的位数，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>; <span class="comment">// 二进制: 0101</span></span><br><span class="line">x &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 10 (二进制: 1010)</span></span><br></pre></td></tr></table></figure><h3 id="右移赋值">右移赋值(<code>&gt;&gt;=</code>)</h3><p>将左侧变量按位右移右侧指定的位数，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>; <span class="comment">// 二进制: 0101</span></span><br><span class="line">x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 2 (二进制: 0010)</span></span><br></pre></td></tr></table></figure><h3 id="无符号右移赋值">无符号右移赋值(<code>&gt;&gt;&gt;=</code>)</h3><p>将左侧变量按位右移右侧指定的位数，左侧补零，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = -<span class="number">5</span>; <span class="comment">// 二进制: 11111111111111111111111111111011</span></span><br><span class="line">x &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 2147483645 (二进制: 01111111111111111111111111111101)</span></span><br></pre></td></tr></table></figure><h3 id="逻辑与赋值">逻辑与赋值(<code>&amp;&amp;=</code>)</h3><p>当左侧的值为真时，才将右侧的值赋给左侧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 a 为真时，将 b 的值赋给 a</span></span><br><span class="line">a &amp;&amp;= b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure><h3 id="逻辑或赋值">逻辑或赋值(<code>||=</code>)</h3><p>当左侧的值为假时，才将右侧的值赋给左侧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">a ||= b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h3 id="逻辑空赋值">逻辑空赋值(<code>??=</code>)</h3><p>当左侧的值为<code>null</code>或<code>undefined</code>时，才将右侧的值赋给左侧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">a ??= b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: 42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="literal">undefined</span>;</span><br><span class="line">c ??= b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 输出: 42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d = <span class="number">0</span>;</span><br><span class="line">d ??= b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// 输出: 0</span></span><br></pre></td></tr></table></figure><h3 id="解构赋值">解构赋值</h3><p>解构赋值可以将数组或对象中的数据解构为变量。</p><h4 id="解构数组">解构数组</h4><p>数组解构允许我们通过模式匹配来从数组中提取值，并将其赋给变量。</p><ol><li><p>模式匹配：只要等号两边的模式相同，左边变量就会被赋予对应的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出: 2</span></span><br></pre></td></tr></table></figure></li><li><p>剩余属性：剩余属性（<code>...rest</code>）结束解构模式。此模式会将对象或数组的所有剩余属性存储到新的对象或数组中，剩余属性必须是模式中的最后一个，并且不能有尾随逗号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// 输出: [2, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p>跳过属性：在解构模式中使用逗号（<code>,</code>）来跳过数组中的某些元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, , b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出: 3</span></span><br></pre></td></tr></table></figure></li><li><p>默认值：每个解构属性都有一个默认值。当属性不存在或值为 <code>undefined</code> 时，将使用默认值。如果属性的值为 <code>null</code>，则不使用它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">5</span>, b = <span class="number">7</span>] = [<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出: 7</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="解构对象">解构对象</h4><p>对象解构允许我们通过匹配对象属性来从对象中提取值，并将其赋给变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b&#125; = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出: 2</span></span><br></pre></td></tr></table></figure><h2 id="拓展操作符">拓展操作符</h2><p>拓展运算符是 ES6 中引入的一种语法，通过在数组或对象前加上三个点（<code>...</code>），可以展开数组或对象。拓展运算符在函数调用、数组构造、对象字面量等场景中非常有用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在函数中调用展开数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(...numbers)); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并数组</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mergedArray = [...arr1, ...arr2];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mergedArray); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝数组(浅拷贝)</span></span><br><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> copiedArray = [...originalArray];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copiedArray); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转数组</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> strArray = [...str];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(strArray); <span class="comment">// [&quot;H&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并对象或添加新属性</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mergedObject = &#123; ...obj1, ...obj2 &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mergedObject); <span class="comment">// &#123; a: 1, b: 2, c: 3, d: 4 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="空值合并操作符">空值合并操作符</h2><p>空值合并运算符（<code>??</code>）是 ES11 引入的一个逻辑运算符，当左侧的操作数为 <code>null</code> 或者 <code>undefined</code> 时，返回其右侧操作数，否则返回左侧操作数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = value1 ?? value2;</span><br></pre></td></tr></table></figure><ol><li><code>value1</code>：第一个值。</li><li><code>value2</code>：第二个值，当 <code>value1</code> 为 <code>null</code> 或 <code>undefined</code> 时返回 <code>value2</code>。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user;</span><br><span class="line"><span class="keyword">let</span> userName = user ?? <span class="string">&quot;Guest&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userName); <span class="comment">// &quot;Guest&quot;</span></span><br></pre></td></tr></table></figure><h2 id="可选链操作符">可选链操作符</h2><p>可选链运算符（<code>?.</code>）用于简化对嵌套对象属性的访问，可以安全地访问对象属性，即使中间的属性是 <code>null</code> 或 <code>undefined</code>，也不会引发错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">profile</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user?.<span class="property">profile</span>?.<span class="property">name</span>); <span class="comment">// &quot;Alice&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user?.<span class="property">address</span>?.<span class="property">street</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="逗号操作符">逗号操作符</h2><p>逗号运算符允许在一个表达式中包含多个表达式，并在求值时按从左到右的顺序依次求值，并最终返回最后一个表达式的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x, y, z;</span><br><span class="line"></span><br><span class="line">x = (y = <span class="number">5</span>, z = <span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(3)-数据类型</title>
    <link href="/2024/07/16/JS%E5%AD%A6%E4%B9%A0(3)-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2024/07/16/JS%E5%AD%A6%E4%B9%A0(3)-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 是一种“动态类型语言”，即定义的变量并不会在定义后，被限制为某一数据类型。</p><span id="more"></span><h1>数据类型</h1><p>在 JavaScript 中有 8 种基本的数据类型（7 种基本数据类型和 1 种引用数据类型）。</p><ol><li>基本数据类型<ul><li>Undefined类型</li><li>Null类型</li><li>Boolean类型</li><li>Number类型</li><li>BigInt类型</li><li>String类型</li><li>Symbol类型</li></ul></li><li>引用数据类型<ul><li>Object类型</li></ul></li></ol><h2 id="Undefined-类型">Undefined 类型</h2><p>Undefined 类型只有一个值，即<code>undefined</code>，当使用 var 或 let 声明了变量但没有初始化时，就相当于给变量赋予了<code>undefined</code>值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="Null-类型">Null 类型</h2><p>Null 类型只有一个值，即<code>null</code>，<code>null</code>值表示一个空对象指针（变量未指向任何对象），变量要保存对象，而当时又没有那个对象可保存，就要用<code>null</code>来填充该变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p><code>undefined</code>值是派生自<code>null</code>值的，因此<code>null</code>和<code>undefined</code>表面上相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="Boolean-类型">Boolean 类型</h2><p>Boolean 类型包含两个值：<code>true</code> 和 <code>false</code>，通常用于条件运算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isGreater = <span class="number">4</span> &gt; <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isGreater); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Number-类型">Number 类型</h2><p>Number 类型表示整数和浮点数。</p><h3 id="数值进制">数值进制</h3><p>整数除了以十进制表示以外，还可以通过八进制或十六进制等表示。</p><ol><li><strong>二进制</strong>：在ES6 之前不支持直接用二进制字面量表示数值，在ES6 之后使用<code>0b</code>前缀标识二进制</li><li><strong>八进制</strong>：在ES6 之前使用<code>0</code>前缀标识八进制，在ES6 之后使用<code>0o</code>前缀标识八进制</li><li><strong>十六进制</strong>：使用<code>0x</code>前缀标识八进制</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0b11111111</span>); <span class="comment">// 255</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0o377</span>); <span class="comment">// 255</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0xff</span>); <span class="comment">// 255</span></span><br></pre></td></tr></table></figure><h3 id="浮点数">浮点数</h3><p>浮点数必须包含一个小数点，并且小数点至少有一个数字。因为存储浮点值使用的内存空间是存储整数值的两倍，因此在小数点后面没有数字的情况下，数值就会变成整数。类似地，如果数值本身就是整数，只是小数点后面跟着<code>0</code>，那它也会被转换为整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floatNum1 = <span class="number">1.</span>;</span><br><span class="line"><span class="keyword">let</span> floatNum2 = <span class="number">10.0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(floatNum1); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(floatNum2); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h3 id="数值范围">数值范围</h3><p>在 JavaScript 中并不能包含所有的数值，最小数值保存在<code>Number.MIN_VALUE</code>中，最大数值保存在<code>Number.MAX_VALUE</code>中，如果一个数值超出了 Number 类型的取值范围，通常使用<code>Infinity</code>和<code>-Infinity</code>来表示无穷大和无穷小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>); <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>); <span class="comment">// 5e-324</span></span><br></pre></td></tr></table></figure><p><code>isFinite()</code> 检测值是否为有限数（介于最小值和最大值之间），而 <code>Number.isFinite()</code> 只在值为有限数并且类型是 <code>number</code> 时返回 <code>true</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="number">123</span>));            <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>));       <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="string">&#x27;123&#x27;</span>));          <span class="comment">// true (字符串被转换为数值)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">123</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>));<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="string">&#x27;123&#x27;</span>));   <span class="comment">// false (字符串不会被转换为数值)</span></span><br></pre></td></tr></table></figure><h3 id="NaN">NaN</h3><p><code>NaN</code>代表不是一个数字。它是一个特殊的数值，表示无效的数字。</p><ol><li>任何带有 <code>NaN</code>的操作都返回 <code>NaN</code></li><li><code>NaN</code>不等于任何值，包括它自己</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> / <span class="number">2</span>); <span class="comment">// NaN;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> / <span class="number">2</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>isNaN()</code> 可以检测值是否为 <code>NaN</code>，而 <code>Number.isNaN()</code> 只在值真正是 <code>NaN</code> 时返回 <code>true</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>));           <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;hello&#x27;</span>));       <span class="comment">// true (非数字字符串会被转换为 NaN)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>));    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&#x27;hello&#x27;</span>));<span class="comment">// false (非数字字符串不会被转换为 NaN)</span></span><br></pre></td></tr></table></figure><h2 id="BigInt-类型">BigInt 类型</h2><p>在 JavaScript 中，Number 类型无法安全地表示大于 $ 2^{53}-1 $ 或小于 $ -2^{53}+1 $ 的整数，BigInt 用于表示任意长度的整数。创建 BigInt 的方式有两种：</p><ol><li>在一个整数字面量后面加 <code>n</code></li><li>调用 <code>BigInt</code> 函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigint = <span class="number">1234567890123456789012345678901234567890n</span>;</span><br><span class="line"><span class="keyword">const</span> sameBigint = <span class="title class_">BigInt</span>(<span class="string">&quot;1234567890123456789012345678901234567890&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigint === sameBigint); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>BigInt 大多数情况下可以像常规数字类型一样使用，BigInt 和 Number 不能混合使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1n</span> + <span class="number">2n</span>); <span class="comment">// 3n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1n</span> + <span class="number">2</span>); <span class="comment">// TypeError: Cannot mix BigInt and other types, use explicit conversions</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2n</span> &gt; <span class="number">1n</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2n</span> &gt; <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1n</span> == <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1n</span> === <span class="number">1</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="String-类型">String 类型</h2><p>字符串是一串表示文本值的字符序列，在 JavaScript 中，字符串可以由双引号（&quot;）、单引号（'）或反引号（`）表示。</p><p>单引号和双引号基本相同，使用反引号声明的字符串是一种特殊字符串，被称为模板字符串。在大多数情况下，模板字符串与普通字符串类似，但它具有一些特殊的属性：</p><ol><li>允许通过<code>$&#123;...&#125;</code>将变量或表达式嵌入到字符串中</li><li>允许字符串跨行</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`1 + 2 = <span class="subst">$&#123;sum(<span class="number">1</span>, <span class="number">2</span>)&#125;</span>`</span>); <span class="comment">// 1 + 2 = 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newline = <span class="string">`这是第一行，</span></span><br><span class="line"><span class="string">第二行……`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newline);</span><br></pre></td></tr></table></figure><h2 id="Symbol-类型">Symbol 类型</h2><p>Symbol 类型是在ES6中新增的数据类型，Symbol 实例是唯一、不可变的。使用 <code>Symbol()</code> 函数创建一个新的 Symbol。可以选择传入一个描述，用于调试和日志记录目的，但这个描述对 Symbol 的唯一性没有影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;description&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> sym3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;description&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym1); <span class="comment">// Symbol()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym2); <span class="comment">// Symbol(description)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym3); <span class="comment">// Symbol(description)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym2 === sym3); <span class="comment">// false，两个Symbol即使描述相同也不相等</span></span><br></pre></td></tr></table></figure><h2 id="Object-类型">Object 类型</h2><p>Object 类型是一组数据和功能的集合，对象通过执行 new 操作符后跟对象类型的名称来创建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>Object 的每个实例都具有下列的属性和方法：</p><ol><li>constructor：构造函数，保存用于创建当前对象的函数</li><li>hasOwnProperty(propertyName)：用于判断当前对象实例上是否存在给定的属性，属性名必须是字符串或符号</li><li>isPrototypeOf(object)：用于判断当前对象是否为另一个对象的原型。</li><li>propertyIsEnumerable(propertyName)：用于判断给定的属性是否可以使用 for-in 语句枚举，属性名必须是字符串</li><li>toLocaleString()：返回对象的字符串表示，反应对象所在的本地化执行环境。</li><li>toString()：返回对象的字符串表示</li><li>valueOf()：返回对象对应的字符串、数值或布尔值表示</li></ol><h2 id="数据类型检测">数据类型检测</h2><h3 id="typeof">typeof</h3><p><code>typeof</code> 操作符是检测数据类型的最常用方法。它适用于大多数基本数据类型，其中数组、对象、null都会被判断为 Object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>);             <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;hello&#x27;</span>);         <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);            <span class="comment">// &quot;boolean&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);       <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&#x27;sym&#x27;</span>));   <span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123n</span>);            <span class="comment">// &quot;bigint&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;);              <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []);              <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);            <span class="comment">// &quot;object&quot; (特殊情况)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);    <span class="comment">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure><h3 id="instanceof">instanceof</h3><p><code>instanceof</code> 用于检测对象的具体类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>);           <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>);          <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>() <span class="keyword">instanceof</span> <span class="title class_">Date</span>);    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Function</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CustomType</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> customInstance = <span class="keyword">new</span> <span class="title class_">CustomType</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(customInstance <span class="keyword">instanceof</span> <span class="title class_">CustomType</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Object-prototype-toString-call">Object.prototype.toString.call()</h3><p>这是一个通用方法，可以准确检测各种数据类型。通过调用对象的 <code>toString</code> 方法，并返回标准的类型标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">123</span>));            <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;hello&#x27;</span>));        <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>));           <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>));      <span class="comment">// &quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>));           <span class="comment">// &quot;[object Null]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Symbol</span>(<span class="string">&#x27;sym&#x27;</span>)));  <span class="comment">// &quot;[object Symbol]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">123n</span>));           <span class="comment">// &quot;[object BigInt]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;));             <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]));             <span class="comment">// &quot;[object Array]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()));     <span class="comment">// &quot;[object Date]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;));   <span class="comment">// &quot;[object Function]&quot;</span></span><br></pre></td></tr></table></figure><h3 id="constructor">constructor</h3><p>每个对象都有一个 <code>constructor</code> 属性，可以用来检测对象的构造函数。如果一个对象改变其原型，<code>constructor</code>就不能判断数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">123</span>).<span class="property">constructor</span> === <span class="title class_">Number</span>);          <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">&#x27;hello&#x27;</span>).<span class="property">constructor</span> === <span class="title class_">String</span>);      <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="literal">true</span>).<span class="property">constructor</span> === <span class="title class_">Boolean</span>);        <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((&#123;&#125;).<span class="property">constructor</span> === <span class="title class_">Object</span>);           <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(([]).<span class="property">constructor</span> === <span class="title class_">Array</span>);            <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="property">constructor</span> === <span class="title class_">Date</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;).<span class="property">constructor</span> === <span class="title class_">Function</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(2)-变量</title>
    <link href="/2024/07/15/JS%E5%AD%A6%E4%B9%A0(2)-%E5%8F%98%E9%87%8F/"/>
    <url>/2024/07/15/JS%E5%AD%A6%E4%B9%A0(2)-%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>变量，就是一个用于存放数值的容器。这个数值可能是一个用于累加计算的数字，或者是一个句子中的字符串。变量的独特之处在于它存放的数值是可以改变的。</p><span id="more"></span><h1>变量</h1><p>变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有 3 个关键字可以声明变量：<code>var</code>、<code>const </code>和<code>let</code>。<code>var</code>在 ECMAScript 的所有版本中都可以使用，而<code>const</code>和<code>let</code>只能在 ECMAScript 6 及更晚的版本中使用。</p><h2 id="var-声明">var 声明</h2><h3 id="声明变量">声明变量</h3><p>要定义变量，可以使用<code>var</code>关键字，后跟变量名（即标识符）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message;</span><br></pre></td></tr></table></figure><h3 id="变量赋值">变量赋值</h3><p>用 <code>var</code>声明的变量，在变量名之后跟上一个<code>=</code>，然后是变量值，就完成了赋值，如果没有赋值，则变量值为 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myName1 = <span class="string">&quot;zzstriker&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> myName2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName1); <span class="comment">// zzstriker</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName2); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>变量赋值后，也可以更改变量值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">&quot;Chris&quot;</span>;</span><br><span class="line">myName = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">// Bob</span></span><br></pre></td></tr></table></figure><p><code>var</code>可以多次声明同一个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">36</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 36</span></span><br></pre></td></tr></table></figure><p>如果一个变量没有声明，直接赋值，默认是使用了<code>var</code>声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h3 id="声明作用域">声明作用域</h3><p><code>var</code> 声明的变量具有函数作用域或全局作用域</p><p>使用<code>var</code>在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁，该变量是局部变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="string">&quot;hi&quot;</span>; <span class="comment">// 局部变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// ReferenceError: message is not defined</span></span><br></pre></td></tr></table></figure><p>在函数内没有使用<code>var</code>声明的变量或在函数体外使用<code>var</code>声明的变量，该变量是全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数内没有使用var声明变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    message = <span class="string">&quot;hi&quot;</span>; <span class="comment">// 全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// &#x27;hi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数外使用var声明变量</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">// &#x27;hi&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">// &#x27;hi&#x27;</span></span><br></pre></td></tr></table></figure><p>使用<code>var</code>在全局作用域中声明的变量会成为 window 对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>); <span class="comment">// &#x27;Matt&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="声明提升">声明提升</h3><p>使用<code>var</code>声明的变量会自动提升到作用域顶部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myName = <span class="string">&quot;Chris&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> myName;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">// Chris</span></span><br></pre></td></tr></table></figure><h2 id="let-声明">let 声明</h2><h3 id="声明变量-2">声明变量</h3><p>要定义变量，可以使用<code>let</code>关键字，后跟变量名（即标识符）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message;</span><br></pre></td></tr></table></figure><h3 id="变量赋值-2">变量赋值</h3><p>用 <code>let</code>声明的变量，在变量名之后跟上一个<code>=</code>，然后是变量值，就完成了赋值，如果没有赋值，则变量值为 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName1 = <span class="string">&quot;zzstriker&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myName2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName1); <span class="comment">// zzstriker</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName2); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>变量赋值后，也可以更改变量值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName = <span class="string">&quot;Chris&quot;</span>;</span><br><span class="line">myName = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">// Bob</span></span><br></pre></td></tr></table></figure><p><code>let</code><strong>不</strong>可以多次声明同一个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// SyntaxError: Identifier &#x27;age&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><h3 id="声明作用域-2">声明作用域</h3><p><code>let</code> 声明的变量是块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">// &#x27;hi&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">// ReferenceError: msg is not defined</span></span><br></pre></td></tr></table></figure><p><code>let</code> 在全局作用域中声明的变量<strong>不</strong>会成为 window 对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">age</span>); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure><h3 id="暂时性死区">暂时性死区</h3><p><code>let</code> 声明的变量不会在作用域中提升，变量没有声明之前的区域，被称为<strong>暂时性死区</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name 会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// age 不会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// ReferenceError: Cannot access &#x27;age&#x27; before initialization</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br></pre></td></tr></table></figure><h2 id="const-声明">const 声明</h2><p><code>const</code> 创建的是常量。常量标识符的命名规则和变量相同。</p><ol><li><p>常量不可以通过重新赋值改变其值，也不可以在代码运行时重新声明。它必须被初始化为某个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myBirthday = <span class="string">&#x27;18.04.1982&#x27;</span>;</span><br><span class="line">myBirthday = <span class="string">&#x27;01.01.2001&#x27;</span>; <span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure></li><li><p>常量的作用域规则与 <code>let</code> 块级作用域变量相同。若省略 <code>const</code> 关键字，则该标识符将被视为变量。</p></li><li><p>在同一作用域中，不能使用与变量名或函数名相同的名字来命名常量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myBirthday = <span class="string">&#x27;01.01.2001&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> myBirthday = <span class="string">&#x27;18.04.1982&#x27;</span>; <span class="comment">// SyntaxError: Identifier &#x27;myBirthday&#x27; has already been declared</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="字面量">字面量</h2><p>字面量是指在代码中直接写出来的固定值。这些值可以是数字、字符串、布尔值等，直接在代码中使用，而不是通过变量或表达式计算得到的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数字字面量</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>;       <span class="comment">// 整数字面量</span></span><br><span class="line"><span class="keyword">let</span> pi = <span class="number">3.14</span>;      <span class="comment">// 浮点数字面量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串字面量</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Alice&quot;</span>;        <span class="comment">// 双引号字符串字面量</span></span><br><span class="line"><span class="keyword">let</span> greeting = <span class="string">&#x27;Hello&#x27;</span>;    <span class="comment">// 单引号字符串字面量</span></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`Hi <span class="subst">$&#123;name&#125;</span>`</span>; <span class="comment">// 模板字符串字面量（反引号）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔字面量</span></span><br><span class="line"><span class="keyword">let</span> isStudent = <span class="literal">true</span>;  </span><br><span class="line"><span class="keyword">let</span> hasGraduated = <span class="literal">false</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组字面量</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象字面量</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数字面量</span></span><br><span class="line"><span class="keyword">let</span> greet = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则表达式字面量</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/abc/</span>; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(1)-JS介绍</title>
    <link href="/2024/07/14/JS%E5%AD%A6%E4%B9%A0(1)-JS%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/07/14/JS%E5%AD%A6%E4%B9%A0(1)-JS%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 是一种脚本编程语言，它可以在网页上实现复杂的功能，网页展现给你的不再是简单的静态信息，而是实时的内容更新。</p><span id="more"></span><h1>JS</h1><p>JavaScript 是一种编程语言，最初设计用于与网页元素交互。JavaScript 由三个主要部分组成：</p><ul><li>ECMAScript：提供核心功能</li><li>文档对象模型（<strong>DOM</strong>）：提供与网页内容交互的方法和接口</li><li>浏览器对象模型（<strong>BOM</strong>）：提供与浏览器交互的方法和接口</li></ul><h2 id="引用方式">引用方式</h2><p>将 JavaScript 插入 HTML 的主要方法是使用<code>&lt;script&gt;</code>元素</p><h3 id="内部">内部</h3><p>要嵌入行内 JavaScript 代码，直接把代码放在<code>&lt;script&gt;</code>元素中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 在此编写 JavaScript 代码</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外部">外部</h3><p>包含外部文件中的 JavaScript，就必须使用 <strong>src</strong> 属性。这个属性的值是一个 URL，指向包含 JavaScript 代码的文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="执行顺序">执行顺序</h2><p>执行 JavaScript 代码时，通常会按从上往下的顺序执行代码。解释 JavaScript 代码会引起页面阻塞，需要让脚本调用的时机符合预期。</p><ol><li><p>内部调用：监听浏览器的 <code>DOMContentLoaded</code> 事件，标志 HTML 文档完全加载和解析。JavaScript 代码在事件被触发后才会运行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// …</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外部引用：通过在 <code>&lt;script&gt;</code>元素上增加 <strong>async</strong> 和 <strong>defer</strong> 属性，决策脚本何时加载执行</p><ul><li>async：浏览器遇到 <code>async</code> 时不会阻塞页面渲染，而是直接下载，一旦下载完成，脚本就会执行，从而阻止页面渲染。</li><li>defer：<code>defer</code> 属性加载的脚本将按照它们在页面上出现的顺序加载，在页面内容全部加载完毕之后，脚本才会执行。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="区分大小写">区分大小写</h2><p>JavaScript 是<strong>区分大小写</strong>的，无论是变量、函数名还是操作符，都区分大小写，例如：变量名 <code>test</code>和<code>Test</code>分别表示两个不同的变量。</p><h2 id="标识符">标识符</h2><p>所谓<strong>标识符</strong>，就是变量、函数、属性或函数参数的名称，标识符不能使用关键字和保留字。标识符可以由一或多个下列字符组成：</p><ol><li>第一个字符必须是一个字母、下划线或美元符号</li><li>剩下的其他字符可以是字母、下划线、美元符号或数字</li></ol><h2 id="注释">注释</h2><p>JavaScript 代码中也可以添加注释，浏览器会忽略它们。</p><ol><li><p>在双斜杠（//）后添加单行注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这是一个单行注释</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>/*</code> 和 <code>*/</code> 之间添加多行注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">这里是</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">多行注释</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="严格模式">严格模式</h2><p>ECMAScript 5引入了严格模式的概念，严格模式是一种不同的 JavaScript 解析和执行模型，一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。脚本启用严格模式需要在脚本顶部添加<code>&quot;use strict&quot;</code>。</p><h2 id="语句">语句</h2><p>语句是指程序中的一条指令或命令，用于执行某种操作。在 JavaScript 中，如果一条语句独占一行的话，那么分号是可以省略的（不建议这么做），如果一行中有多条语句，那么这些语句必须以分号分开。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> tmp = <span class="string">&quot;语句&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关键字">关键字</h2><p>ECMA 描述了一组具有特定用途的<strong>关键字</strong>，这些关键字可用于表示控制语句的开始或结束，或者是执行特性操作，关键字不能用作标识符</p><table><thead><tr><th>break</th><th>do</th><th>in</th><th>typeof</th></tr></thead><tbody><tr><td>case</td><td>else</td><td>instanceof</td><td>var</td></tr><tr><td>catch</td><td>export</td><td>new</td><td>void</td></tr><tr><td>class</td><td>extends</td><td>return</td><td>while</td></tr><tr><td>const</td><td>finally</td><td>super</td><td>with</td></tr><tr><td>continue</td><td>for</td><td>switch</td><td>yield</td></tr><tr><td>debugger</td><td>function</td><td>this</td><td></td></tr><tr><td>default</td><td>if</td><td>throw</td><td></td></tr><tr><td>delete</td><td>import</td><td>try</td><td></td></tr></tbody></table><h2 id="保留字">保留字</h2><p>ECMA 描述了一组不能用作标识符的<strong>保留字</strong>，保留字暂时还没有特定的用途，有可能在将来被用作关键字</p><table><thead><tr><th>enum</th><th>package</th><th>static</th></tr></thead><tbody><tr><td>implements</td><td>protected</td><td>await</td></tr><tr><td>interface</td><td>private</td><td></td></tr><tr><td>let</td><td>public</td><td></td></tr></tbody></table><h2 id="输出方式">输出方式</h2><h3 id="alert">alert</h3><p><code>alert()</code>弹出警告框，在弹窗里显示一条信息，并等待用户按下确定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;测试文本&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="prompt">prompt</h3><p><code>prompt()</code>就是专门弹出能够让用户输入的对话框。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">prompt</span>(<span class="string">&quot;请输入内容&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="console">console</h3><p><code>console.log()</code>表示在控制台中输出。console 表示“控制台”，log 表示“输出”。括号里可以写字符串、数字、变量。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印了一些内容&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="confirm">confirm</h3><p><code>confirm()</code>弹出一个弹框，弹窗上有“确认”和“取消”两个按钮，点击“确定”返回 <code>true</code>，点击“取消”返回 <code>false</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">confirm</span>(<span class="string">&quot;确定关闭么？&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(22)-BFC</title>
    <link href="/2024/07/13/CSS%E5%AD%A6%E4%B9%A0(22)-BFC/"/>
    <url>/2024/07/13/CSS%E5%AD%A6%E4%B9%A0(22)-BFC/</url>
    
    <content type="html"><![CDATA[<p>在页面开发中，CSS布局是一个至关重要的部分。而块格式化上下文（Block Formatting Context，BFC）作为CSS中的一个核心概念，对于理解和解决许多布局问题至关重要。</p><span id="more"></span><h1>BFC</h1><p>块格式化上下文（BFC）是CSS中的一种布局机制，它为包含的元素创建了一个独立的渲染区域。这个区域内的元素布局不会影响到区域外的元素，反之亦然。简单来说，BFC可以看作是一个隔离盒子，它将内部和外部的布局逻辑分开。</p><h2 id="BFC特性">BFC特性</h2><ol><li>BFC内部，盒子由上至下按顺序进行排列，当<strong>同一个BFC</strong>中的两个盒子同时具有相对方向的外边距时，会产生外边距折叠</li><li>BFC内部，无论是浮动盒子还是普通盒子，其子元素左外边距与包含块的左边界相接触</li><li>BFC 区域<strong>不会</strong>与float box区域相重叠</li><li>BFC内外布局<strong>不会</strong>相互影响</li><li>计算BFC高度的时候，浮动元素的高度也计算在内</li></ol><h2 id="创建BFC">创建BFC</h2><ol><li>根元素默认创建BFC</li><li>设置浮动（即 <strong>float</strong> 值<em>不</em>为 none 的元素）</li><li>绝对或固定定位（即 <strong>position</strong> 值为 <code>absolute</code> 或 <code>fixed</code> 的元素）</li><li>行内块元素（即 <strong>display</strong> 值为 <code>inline-block</code> 的元素）</li><li>设置overflow（即 <strong>overflow</strong> 值<em>不</em>为 <code>visible</code> 或 <code>clip</code> 的元素）</li><li>使用 <code>display: flow-root</code></li></ol><h2 id="BFC解决的问题">BFC解决的问题</h2><h3 id="外边距折叠">外边距折叠</h3><p>当<strong>同一个BFC</strong>中的两个盒子同时具有相对方向的外边距时，外边距会发生<strong>折叠</strong>。解决外边距折叠，可以给子元素加一个父元素，并设置该父元素为 BFC。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.blue</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: transparent;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="清除浮动">清除浮动</h3><p>浮动元素是会脱离文档流（ <strong>position</strong> 值为 <code>absolute</code> 或 <code>fixed</code> 的元素会脱离文档流）。如果一个没有高度或者 <code>height</code> 是 <code>auto</code> 的容器的子元素是浮动元素，则该容器的高度是不会被撑开的。我们通常会利用伪元素（<code>:after</code> 或者 <code>:before</code>）来解决这个问题。BFC 能包含浮动，也能解决容器高度不会被撑开的问题。</p><ol><li><strong>使用 <code>overflow: auto</code></strong></li><li><strong>使用 <code>display: flow-root</code></strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-attr">[style]</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">5px</span> solid steelblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.float</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>我是浮动的盒子！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是容器内的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;overflow:auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>我是浮动的盒子！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是 <span class="tag">&lt;<span class="name">code</span>&gt;</span>overflow:auto<span class="tag">&lt;/<span class="name">code</span>&gt;</span> 容器内部的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:flow-root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>我是浮动的盒子！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是 <span class="tag">&lt;<span class="name">code</span>&gt;</span>display:flow-root<span class="tag">&lt;/<span class="name">code</span>&gt;</span> 容器内部的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自适应布局">自适应布局</h3><p>使用<code>display: flow-root</code>和浮动实现双列布局，正常文档流中建立的 BFC 不得与元素本身所在的块格式化上下文中的浮动元素重叠。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-attr">[style]</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">5px</span> solid steelblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.float</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.75</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>试试重新调整这个外部浮动元素的大小<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>普通<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>试试重新调整这个外部浮动元素的大小<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:flow-root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>display:flow-root<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(21)-常用布局</title>
    <link href="/2024/07/12/CSS%E5%AD%A6%E4%B9%A0(21)-%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80/"/>
    <url>/2024/07/12/CSS%E5%AD%A6%E4%B9%A0(21)-%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p>布局（Layout）在网页设计和开发中指的是将网页内容有序地组织和排列，以便用户能够更容易地阅读和理解。布局决定了页面元素（如文本、图像、导航菜单、侧边栏等）的排列方式和相对位置，直接影响用户体验和页面美观性。</p><span id="more"></span><h1>常用布局</h1><h2 id="双栏布局">双栏布局</h2><p>双栏布局是一种常见的网页布局形式，通常用于创建左右两栏的布局结构，例如导航栏和内容区。</p><h3 id="float-margin">float+margin</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="float-overflow">float+overflow</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="position">position</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex">flex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="grid">grid</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="table">table</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三栏布局">三栏布局</h2><p>三栏布局是一种常见的网页布局形式，通常用于创建左中右三个栏的布局结构，常见于门户网站、博客等页面。</p><h3 id="float">float</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-left&quot;</span>&gt;</span>左侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-right&quot;</span>&gt;</span>右侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="position-2">position</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* margin: 0 200px; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-left&quot;</span>&gt;</span>左侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-right&quot;</span>&gt;</span>右侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex-2">flex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-left&quot;</span>&gt;</span>左侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-right&quot;</span>&gt;</span>右侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="grid-2">grid</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-left&quot;</span>&gt;</span>左侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-right&quot;</span>&gt;</span>右侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="table-2">table</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-left&quot;</span>&gt;</span>左侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-right&quot;</span>&gt;</span>右侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(20)-居中布局</title>
    <link href="/2024/07/11/CSS%E5%AD%A6%E4%B9%A0(20)-%E5%B1%85%E4%B8%AD%E5%B8%83%E5%B1%80/"/>
    <url>/2024/07/11/CSS%E5%AD%A6%E4%B9%A0(20)-%E5%B1%85%E4%B8%AD%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p>居中布局在响应式设计中表现尤为出色，能够自动适应不同屏幕尺寸，确保内容始终居中显示，提升用户在各种设备上的体验。</p><span id="more"></span><h1>居中布局</h1><p>居中布局是指将一个或多个元素在其父容器中进行对齐，使其在水平、垂直或同时在水平和垂直方向上居中显示。这种布局方式常用于使页面内容在视觉上更具吸引力和对称性。</p><h2 id="水平居中">水平居中</h2><p>水平居中是指将一个元素在其父容器内水平方向上居中对齐。</p><h3 id="内联元素">内联元素</h3><p>利用 <code>text-align: center</code> 可以实现块级元素内部的内联元素水平居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inline</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="块级元素">块级元素</h3><p>将 <code>margin-left</code> 和 <code>margin-right</code> 设置为 <code>auto</code> 来实现块联元素水平居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用弹性布局，实现水平居中，其中 <code>justify-content</code> 用于设置弹性盒子元素在主轴方向上的对齐方式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用绝对定位和 <code>left: 50%</code> 及 <code>transform: translateX(-50%)</code>进行偏移来实现块联元素水平居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="垂直居中">垂直居中</h2><p>垂直居中是指将一个元素在其父容器内垂直方向上居中对齐。</p><h3 id="内联元素-2">内联元素</h3><h4 id="单行内联元素">单行内联元素</h4><p>对于单行文本，可以使用 <code>line-height</code> 来实现垂直居中。将 <code>line-height</code> 设置为与元素高度相同。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多行内联元素">多行内联元素</h4><p>对于多行文本，可以使用表格布局的 <code>vertical-align: middle</code> 可以实现子元素的垂直居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inline</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用弹性布局实现垂直居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    或者</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="块级元素-2">块级元素</h3><p>利用弹性布局实现垂直居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用绝对定位和 <code>top: 50%</code> 及 <code>transform: translateY(-50%)</code>进行偏移来实现块联元素垂直居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="垂直水平居中">垂直水平居中</h2><p>垂直水平居中是指将一个元素在其父容器内同时在垂直和水平方向上居中对齐。</p><h3 id="内联元素-3">内联元素</h3><p>通过设置父元素容器 <code>text-align</code> 实现水平居中，设置一致的高度（<code>height</code>）和行高（<code>line-height</code>）实现对子元素的垂直居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inline</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="块级元素-3">块级元素</h3><p>使用绝对定位和 <code>top: 50%</code>、<code>left: 50%</code> 及 <code>transform: translate(-50%, -50%)</code>进行偏移来实现块联元素垂直水平居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用弹性布局，将 <code>justify-content</code> 和 <code>align-items</code> 设置为 <code>center</code> 实现垂直水平居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用网格布局，将 <code>margin</code> 设置为 <code>auto</code> 实现垂直水平居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(19)-动画</title>
    <link href="/2024/07/10/CSS%E5%AD%A6%E4%B9%A0(19)-%E5%8A%A8%E7%94%BB/"/>
    <url>/2024/07/10/CSS%E5%AD%A6%E4%B9%A0(19)-%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<p>在CSS中，<code>transform</code>、<code>transition</code> 和 <code>animation</code> 是用于实现视觉效果和交互动画的关键属性。</p><span id="more"></span><h1>转换</h1><p>CSS 转换可以在不影响正常文档流的情况下改变作用内容的位置。通常使用 <strong>transform</strong> 和 <strong>transform-origin</strong> 属性来定义 CSS 转换。</p><ol><li><strong>transform-origin</strong>：指定原点的位置，默认是元素的中心</li><li><strong>transform</strong>：指定作用在元素上的转换，多个转换使用空格分隔，转换从右到左执行</li></ol><h2 id="transform-style">transform-style</h2><p><strong>transform-style</strong> 属性设置元素是位于 3D 空间中还是平面中。</p><p><strong>属性值</strong>：</p><ol><li><strong>flat</strong>：设置元素位于平面中</li><li><strong>preserve-3d</strong>：设置元素位于 3D 空间中</li></ol><h2 id="translate">translate</h2><p><code>translate()</code>方法将元素从当前位置进行平移</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>translateX(x)</code></td><td>指定对象 X 轴（水平方向）的平移</td></tr><tr><td><code>translateY(y)</code></td><td>指定对象 Y 轴（垂直方向）的平移</td></tr><tr><td><code>translateZ(z)</code></td><td>指定对象 Z 轴的平移</td></tr><tr><td><code>translate(x,y)</code></td><td>指定对象的 2D 平移。两个参数分别对应 X 轴和 Y 轴。如果第二个参数未提供，则默认值为 <code>0</code></td></tr><tr><td><code>translate3d(x,y,z)</code></td><td>指定对象的 3D 位移。三个参数分别对应 X 轴、 Y 轴和 Z 轴，<strong>参数不允许省略</strong></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        place-<span class="attribute">content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: dodgerblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">2rem</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: limegreen;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100%</span>, -<span class="number">2rem</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>demo 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span>demo 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo3&quot;</span>&gt;</span>demo 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="rotate">rotate</h2><p><code>rotate()</code> 方法根据给定的度数顺时针或逆时针旋转元素，元素围绕 <code>transform-origin</code> 属性定义的点旋转。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>rotateX(angle)</code></td><td>指定对象在 X 轴上的旋转角度</td></tr><tr><td><code>rotateY(angle)</code></td><td>指定对象在 Y 轴上的旋转角度</td></tr><tr><td><code>rotateZ(angle)</code></td><td>指定对象在 Z 轴上的旋转角度</td></tr><tr><td><code>rotate(angle)</code></td><td>指定对象的 2D 旋转，需先有 <strong>transform-origin</strong> 属性的定义</td></tr><tr><td><code>rotate3d(x,y,z,angle)</code></td><td>指定对象的 3D 旋转角度，其中前 3 个参数分别表示旋转的方向 X、Y、Z，第 4 个参数表示旋转的角度，<strong>参数不允许省略</strong></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        place-<span class="attribute">content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: dodgerblue;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 可以注释掉transform-origin属性查看区别 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>demo 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="scale">scale</h2><p><code>scale()</code>方法根据给定的参数按比例扩缩元素的大小。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>scaleX(x)</code></td><td>指定对象 X 轴的（水平方向）缩放</td></tr><tr><td><code>scaleY(y)</code></td><td>指定对象 Y 轴的（垂直方向）缩放</td></tr><tr><td><code>scaleZ(z)</code></td><td>指定对象的 Z 轴缩放</td></tr><tr><td><code>scale(x,y)</code></td><td>指定对象的 2D 缩放。两个分别对应 X 轴和 Y 轴。如果第二个参数未提供，则默认取第一个参数的值</td></tr><tr><td><code>scale3d(x,y,z)</code></td><td>指定对象的 3D 缩放。三个参数对应 X 轴、 Y 轴和 Z 轴，<strong>参数不允许省略</strong></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        place-<span class="attribute">content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: dodgerblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: limegreen;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>demo 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span>demo 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo3&quot;</span>&gt;</span>demo 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="skew">skew</h2><p><code>skew()</code>方法按给定的角度沿 X 轴和 Y 轴倾斜元素。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>skewX(angle)</code></td><td>指定对象 X 轴的（水平方向）倾斜</td></tr><tr><td><code>skewY(angle)</code></td><td>指定对象 Y 轴的（水平方向）倾斜</td></tr><tr><td><code>skew(x-angle,y-angle)</code></td><td>指定对象 X、Y 轴的倾斜，两个参数分别对应 X 轴和 Y 轴，如果第二个参数未提供，则默认值为 <code>0</code></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        place-<span class="attribute">content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: dodgerblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">skewX</span>(<span class="number">135deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">skewY</span>(-<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: limegreen;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">45deg</span>, <span class="number">135deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>demo 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span>demo 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo3&quot;</span>&gt;</span>demo 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="matrix">matrix</h2><p><code>matrix(a, b, c, d, e, f)</code>方法通过矩阵进行复杂的2D变换。</p><p><strong>参数解释</strong>：</p><ol><li><strong>a</strong>：水平缩放（scaleX）</li><li><strong>b</strong>：垂直倾斜（skewY）</li><li><strong>c</strong>：水平倾斜（skewX）</li><li><strong>d</strong>：垂直缩放（scaleY）</li><li><strong>e</strong>：水平平移（translateX）</li><li><strong>f</strong>：垂直平移（translateY）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        place-<span class="attribute">content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: dodgerblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">matrix</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.2</span>, <span class="number">10</span>, <span class="number">10</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>demo 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span>demo 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>过渡</h1><p>CSS 过渡通常使用简写属性 <strong>transition</strong> 控制。<strong>transition</strong> 属性可以被指定为一个或多个 CSS 属性的过渡效果，多个属性之间用逗号进行分隔。如果没有指定CSS 属性和过渡效果时长，那么过渡动画是没有效果的。</p><p><strong>transition</strong> 简写属性 CSS 语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: &lt;property&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="transition-property">transition-property</h2><p><strong>transition-property</strong> 用于设定过渡的属性名称，规定设置过渡效果的 CSS 属性的名称。</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：没有过渡动画。</li><li><strong>all</strong>：所有可被动画的属性都表现出过渡动画。</li><li><strong>属性名称</strong>：CSS 属性的名称。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-property</span>: width, height;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="transition-duration">transition-duration</h2><p><strong>transition-duration</strong> 用于设定过渡动画所需的时间，规定完成过渡效果需要多少秒或毫秒，默认为 <code>0s</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-property</span>: width, height;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="transition-delay">transition-delay</h2><p><strong>transition-delay</strong> 用于设定过渡效果开始作用之前需要等待的时间，取值为正时会延迟一段时间来响应过渡效果；取值为负时会导致过渡立即开始。默认为 <code>0s</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-property</span>: width, height;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-delay</span>: <span class="number">0.1s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="transition-timing-function">transition-timing-function</h2><p><strong>transition-timing-function</strong> 用于设定过渡的速度曲线，规定速度效果的速度曲线，默认为 <code>ease</code>。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>linear</code></td><td>线性效果，动画从头到尾的速率是相同的</td></tr><tr><td><code>ease</code></td><td>表示缓动函数 <code>cubic-bezier(0.25, 0.1, 0.25, 1)</code>，动画以低速开始，然后加快，结束前变慢</td></tr><tr><td><code>ease-in</code></td><td>表示缓动函数 <code>cubic-bezier(0.42, 0, 1, 1)</code>，动画以低速开始，然后逐渐加快</td></tr><tr><td><code>ease-out</code></td><td>表示缓动函数 <code>cubic-bezier(0, 0, 0.58, 1)</code>，动画以快速开始，然后逐渐减慢</td></tr><tr><td><code>ease-in-out</code></td><td>表示缓动函数 <code>cubic-bezier(0.42, 0, 0.58, 1)</code>，动画开始类似于<code>ease-in</code>，结束类似于<code>ease-out</code></td></tr><tr><td><code>step-start</code></td><td>马上转跳到动画结束状态</td></tr><tr><td><code>step-end</code></td><td>保持动画开始状态，直到动画执行时间结束，马上转跳到动画结束状态</td></tr><tr><td><code>steps()</code></td><td>函数接受正值，在过渡时间内步进式过渡</td></tr><tr><td><code>cubic-bezier(a,b,c,d)</code></td><td>贝塞尔曲线，接受四个值来做曲线</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-property</span>: width, height;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-delay</span>: <span class="number">0.1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-timing-function</span>: <span class="built_in">steps</span>(<span class="number">4</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>动画</h1><p>CSS 动画通常使用简写属性 <strong>animation</strong> 控制。<strong>animation</strong> 属性包含描述动画的样式规则和用于指定动画开始、结束以及中间点样式的关键帧。</p><p><strong>animation</strong> 简写属性 CSS 语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: &lt;name&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt; &lt;iteration-count&gt; &lt;direction&gt; &lt;fill-mode&gt; &lt;play-state&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="animation-name">animation-name</h2><p><strong>animation-name</strong> 关键帧名称，用于定义 <code>@keyframes</code> 动画的名称，与 <code>@keyframes</code> 定义的动画名称一致。</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：无动画效果</li><li><strong><code>&lt;keyframename&gt;</code></strong>：需要绑定到选择器的 <code>keyframes</code> 的名称</li></ol><h2 id="animation-duration">animation-duration</h2><p><strong>animation-duration</strong> 动画持续时间，规定元素动画播放完成一个周期所需要的时间，以秒或毫秒计量。默认为 0 表示没有动画效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="animation-timing-function">animation-timing-function</h2><p><strong>animation-timing-function</strong> 速度曲线，规定速度效果的速度曲线，默认为 <code>ease</code>。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>linear</code></td><td>线性效果，动画从头到尾的速率是相同的</td></tr><tr><td><code>ease</code></td><td>表示缓动函数 <code>cubic-bezier(0.25, 0.1, 0.25, 1)</code>，动画以低速开始，然后加快，结束前变慢</td></tr><tr><td><code>ease-in</code></td><td>表示缓动函数 <code>cubic-bezier(0.42, 0, 1, 1)</code>，动画以低速开始，然后逐渐加快</td></tr><tr><td><code>ease-out</code></td><td>表示缓动函数 <code>cubic-bezier(0, 0, 0.58, 1)</code>，动画以快速开始，然后逐渐减慢</td></tr><tr><td><code>ease-in-out</code></td><td>表示缓动函数 <code>cubic-bezier(0.42, 0, 0.58, 1)</code>，动画开始类似于<code>ease-in</code>，结束类似于<code>ease-out</code></td></tr><tr><td><code>step-start</code></td><td>马上转跳到动画结束状态</td></tr><tr><td><code>step-end</code></td><td>保持动画开始状态，直到动画执行时间结束，马上转跳到动画结束状态</td></tr><tr><td><code>steps()</code></td><td>函数接受正值，在过渡时间内步进式过渡</td></tr><tr><td><code>cubic-bezier(a,b,c,d)</code></td><td>贝塞尔曲线，接受四个值来做曲线</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-timing-function</span>: <span class="built_in">steps</span>(<span class="number">5</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="animation-delay">animation-delay</h2><p><strong>animation-delay</strong> 属性规定执行动画前的等待时间，以秒或毫秒计量。正值表示动画应在指定的时间量过去后开始，默认值为 <code>0s</code>，表示动画应立即开始，负值会导致动画立即开始，但是从动画循环的某个时间点开始。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-timing-function</span>: ease;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-delay</span>: <span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="animation-iteration-count">animation-iteration-count</h2><p><strong>animation-iteration-count</strong> 属性规定动画的播放次数，可选具体次数或者无限（infinite），默认为 1。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-timing-function</span>: ease;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-delay</span>: <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-iteration-count</span>: <span class="number">5</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="animation-direction">animation-direction</h2><p><strong>animation-direction</strong> 属性规定执行动画前的等待时间，以秒或毫秒计量。正值表示动画应在指定的时间量过去后开始，默认值为 <code>0s</code>，表示动画应立即开始，负值会导致动画立即开始，但是从动画循环的某个时间点开始。</p><p><strong>属性值</strong>：</p><ol><li><strong>normal</strong>：动画在每个循环中正向播放。</li><li><strong>reverse</strong>：动画在每个循环中反向播放。</li><li><strong>alternate</strong>：动画在每个循环中正反交替播放，第一次迭代是正向播放。</li><li><strong>alternate-reverse</strong>：动画在每个循环中正反交替播放，第一次迭代是反向播放。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-timing-function</span>: ease;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-delay</span>: <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-iteration-count</span>: <span class="number">5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-direction</span>: alternate-reverse;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="animation-fill-mode">animation-fill-mode</h2><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：默认值。动画在执行之前或之后不会对元素应用任何样式</li><li><strong>forwards</strong>：元素将保留最后一个关键帧设置的样式值（取决于动画方向和动画迭代次数）</li><li><strong>backwards</strong>：元素将获取第一个关键帧设置的样式值（取决于动画方向），并在动画延迟期间保留该值</li><li><strong>both</strong>：动画将遵循向前和向后的规则，在两个方向上扩展动画属性</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-timing-function</span>: ease;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-delay</span>: <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-iteration-count</span>: <span class="number">5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-direction</span>: alternate;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-fill-mode</span>: both;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="animation-play-state">animation-play-state</h2><p><strong>animation-play-state</strong> 属性规定动画的播放状态，用此来控制动画的暂停和继续。</p><p><strong>属性值</strong>：</p><ol><li><strong>running</strong>：默认值，动画运行</li><li><strong>paused</strong>：动画暂停</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-timing-function</span>: ease;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-delay</span>: <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-iteration-count</span>: <span class="number">5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-direction</span>: alternate;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-fill-mode</span>: both;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-play-state</span>: paused;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="keyframes">@keyframes</h2><p>通过在动画序列中定义关键帧 <strong><code>@keyframes</code></strong> 的样式来控制 CSS 动画序列中的中间步骤。</p><p><strong>属性值</strong>：</p><ol><li><strong>关键帧名称</strong>：名称需符合CSS 标识符命名，关键帧名称需要与动画名称一致</li><li><strong>from</strong>：等价于 <code>0%</code></li><li><strong>to</strong>：等价于 <code>100%</code></li><li><strong>百分数</strong>：动画序列中触发关键帧的时间点，使用百分数来表示</li></ol>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(18)-函数</title>
    <link href="/2024/07/09/CSS%E5%AD%A6%E4%B9%A0(18)-%E5%87%BD%E6%95%B0/"/>
    <url>/2024/07/09/CSS%E5%AD%A6%E4%B9%A0(18)-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>CSS 中提供了大量内置函数，每个 CSS 函数都有特定的用途。</p><span id="more"></span><h1>函数</h1><h2 id="变量">变量</h2><p>CSS 变量可以具有全局或局部范围，变量名必须以两个破折号（–）开头，并且区分大小写。</p><h3 id="var">var()</h3><p><code>var()</code>函数用于插入 CSS 变量的值。</p><h3 id="全局声明">全局声明</h3><p>全局变量可以通过整个文档使用，创建具有全局作用域的变量，需要在<code>:root</code> 选择器内声明它。<code>:root</code>选择器与文档的根元素匹配。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attr">--blue</span>: <span class="number">#1e90ff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attr">--white</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">var</span>(--blue);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">var</span>(--white);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="局部声明">局部声明</h3><p>局部变量只能在声明它的选择器内使用，创建局部变量，在使用它的选择器内声明它。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attr">--blue</span>: <span class="number">#1e90ff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attr">--white</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">var</span>(--blue);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">var</span>(--white);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="颜色函数">颜色函数</h2><h3 id="rgb">rgb()</h3><p><code>rgb()</code> 函数将三个取值范围0-255的数字作为参数，表示颜色的红色、绿色和蓝色，并返回RGB 值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">197</span>, <span class="number">93</span>, <span class="number">161</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="hsl">hsl()</h3><p><code>hsl()</code> 函数有三个参数，色调、饱和度和亮度值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">321</span>, <span class="number">47%</span>, <span class="number">57%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数学表达式">数学表达式</h2><h3 id="calc">calc()</h3><p><code>calc()</code> 函数允许使用加法、减法、乘法和除法来指定 CSS 属性值。通常用于组合计算具有不同单位的两个 CSS 值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: chocolate;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.calc1</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">10px</span> + <span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.calc2</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">2em</span> * <span class="number">5</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.calc3</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">32px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.calc4</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attr">--predefined-width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--predefined-width) - <span class="built_in">calc</span>(<span class="number">16px</span> * <span class="number">2</span>));</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;calc1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: calc(10px + 100px);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;calc2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: calc(2em * 5);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;calc3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: calc(100% - 32px);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;calc4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: calc(var(--predefined-width) - calc(16px * 2));<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="min">min()</h3><p><code>min()</code> 函数将一组逗号分隔的值作为参数，并返回这些值中的最小值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: chocolate;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.min1</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">9999px</span>, <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.min2</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">9999px</span>, <span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.min3</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">120px</span>, <span class="number">150px</span>, <span class="number">90%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.min4</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">80px</span>, <span class="number">90%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;min1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: min(9999px, 50%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;min2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: min(9999px, 100%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;min3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: min(120px, 150px, 90%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;min4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: min(80px, 90%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="max">max()</h3><p><code>max()</code> 函数将一组逗号分隔的值作为参数，并返回这些值中的最大值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: chocolate;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.max1</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">50px</span>, <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.max2</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">50px</span>, <span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.max3</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">20px</span>, <span class="number">50px</span>, <span class="number">90%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.max4</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">80px</span>, <span class="number">80%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;max1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: max(50px, 50%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;max2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: max(50px, 100%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;max3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: max(20px, 50px, 90%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;max4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: max(80px, 80%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="clamp">clamp()</h3><p><code>clamp()</code> 函数组合了<code>min()</code> 和<code>max()</code> 函数，<code>clamp()</code> 函数有三个参数：最小值，限制值和最大值。</p><ol><li>如果要限制的值小于传递的最小值，则函数将返回最小值。</li><li>如果要限制的值大于传递的最大值，则函数将返回最大值。</li><li>如果要限制的值处于最小值与最大值之间，则函数将返回要限制的原始值。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: chocolate;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.clamp1</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">clamp</span>(<span class="number">20%</span>, <span class="number">1px</span>, <span class="number">80%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.clamp2</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">clamp</span>(<span class="number">10%</span>, <span class="number">9999px</span>, <span class="number">90%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.clamp3</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">clamp</span>(<span class="number">125px</span>, <span class="number">1px</span>, <span class="number">250px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.clamp4</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">clamp</span>(<span class="number">25px</span>, <span class="number">9999px</span>, <span class="number">150px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clamp1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: clamp(10%, 1px, 90%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clamp2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: clamp(10%, 9999px, 90%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clamp3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: clamp(125px, 1px, 250px);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clamp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: clamp(25px, 9999px, 150px);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(17)-响应式</title>
    <link href="/2024/07/08/CSS%E5%AD%A6%E4%B9%A0(17)-%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    <url>/2024/07/08/CSS%E5%AD%A6%E4%B9%A0(17)-%E5%93%8D%E5%BA%94%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>早年页面是以适配特定的屏幕大小创建的，如果用户使用更小或者更大的屏幕，会出现滚动条、过长的行，没有合理利用空间。随着屏幕尺寸的种类越来越多，出现了响应式网页设计的概念，即允许 Web 页面适应不同屏幕宽度等因素，进行布局和外观的调整。</p><span id="more"></span><h1>响应式设计</h1><p>响应式设计是一种 Web 设计的方式，用于创建在不同设备和屏幕尺寸上都能良好显示和操作的网站设计方法。响应式设计的核心思想是通过使用灵活的网格布局、弹性图片和CSS媒体查询，使网站能够自动适应和调整到不同设备的屏幕尺寸。</p><h2 id="媒体查询">媒体查询</h2><p>使用媒体查询根据设备的特性（如宽度、高度、分辨率）来应用不同的CSS样式。<code>@media</code>仅当某个条件为真时，它才使用该规则来包含一组 CSS 属性。</p><h3 id="媒体查询语法">媒体查询语法</h3><p>媒体查询由媒体类型组成，可以包含一个或多个媒体功能，这些功能可以解析为真或假。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">not</span>|<span class="keyword">only</span> mediatype <span class="keyword">and</span> (media feature) <span class="keyword">and</span> (media feature) &#123;</span><br><span class="line">CSS-<span class="selector-tag">Code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="媒体类型">媒体类型</h3><p>媒体类型描述设备的一般类别，除非使用 <code>not</code> 或 <code>only</code> 逻辑运算符，否则媒体类型是可选的，并且会（隐式地）应用 <code>all</code> 类型。</p><ol><li><strong>all</strong>：适用于所有设备。</li><li><strong>print</strong>：适用于在打印预览模式下在屏幕上查看的分页材料和文档。</li><li><strong>screen</strong>：主要用于屏幕。</li></ol><h3 id="媒体功能">媒体功能</h3><p>媒体功能描述了具体的设备特征</p><ol><li><strong>orientation</strong>：视口的旋转方向</li><li><strong>height</strong>：视口的高度</li><li><strong>width</strong>：视口的宽度</li><li><strong>aspect-ratio</strong>：视口的宽高比</li></ol><h3 id="逻辑运算符">逻辑运算符</h3><p>逻辑运算符<code>not</code>、<code>and</code>、<code>only</code> 和 <code>or</code> 可用于联合构造复杂的媒体查询，也可以通过用逗号分隔多个媒体查询，将它们组合为一个规则。</p><ol><li><strong>and</strong>：用于将多个媒体查询规则组合成单条媒体查询，当每个查询规则都为<code>true</code>时则该条媒体查询为 <code>true</code>，它还用于将媒体功能与媒体类型结合在一起。</li><li><strong>not</strong>：用于否定媒体查询，使用 <code>not</code> 运算符，必须指定媒体类型。</li><li><strong>only</strong>：仅在整个查询匹配时才应用样式，使用 <code>only</code> 运算符，必须指定媒体类型。</li><li><strong><code>,</code></strong>：将多个媒体查询合并为一个规则，如果列表中的任何查询为 <code>true</code>，则整个媒体查询语句返回 <code>true</code>。</li></ol><h3 id="示例">示例</h3><p>视口宽度大于等于<code>768px</code>背景颜色为<code>lightgreen</code>，否则背景颜色为<code>lightblue</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视口高度大于等于<code>680px</code>且视口为横向旋转（宽度大于高度）背景颜色为<code>lightgreen</code>，否则背景颜色为<code>lightblue</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-height</span>: <span class="number">680px</span>) <span class="keyword">and</span> (<span class="attribute">orientation</span>: landscape) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视口宽度不在<code>768px</code>和<code>1024px</code>之间背景颜色为<code>lightgreen</code>，否则背景颜色为<code>lightblue</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">not</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视口宽度大于等于<code>768px</code>或视口高度大于等于<code>680px背景颜色为</code>lightgreen<code>，否则背景颜色为</code>lightblue``</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>), screen <span class="keyword">and</span>  (<span class="attribute">min-height</span>: <span class="number">680px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(16)-Grid</title>
    <link href="/2024/07/07/CSS%E5%AD%A6%E4%B9%A0(16)-Grid/"/>
    <url>/2024/07/07/CSS%E5%AD%A6%E4%B9%A0(16)-Grid/</url>
    
    <content type="html"><![CDATA[<p>Grid 是一个二维布局系统。利用Grid，可以把内容按照行与列的格式进行排版。</p><span id="more"></span><h1>Grid</h1><p>网格是一组相交的水平线和垂直线，它定义了网格的列和行。</p><h2 id="网格容器">网格容器</h2><p>通过在元素上声明 <code>display：grid</code> 来创建一个<em>网格容器</em>。一旦我们这样做，这个元素的所有<em>子元素</em>将成为<em>网格项</em>。</p><h2 id="网格项">网格项</h2><p><em>网格容器</em>的子元素被称为<em>网格项</em>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="网格轨道">网格轨道</h2><p><em>网格轨道</em>是网格上任意两条相邻线之间的空间，使用 <strong>grid-template-rows</strong> 和 <strong>grid-template-column</strong> 属性定义网格上的行和列。</p><h3 id="固定尺寸">固定尺寸</h3><p>通过设置非负的数值或者百分比，定义网格行和列的尺寸大小。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template</span>-column: <span class="number">200px</span>, <span class="number">200px</span>, <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-rows</span>: <span class="number">200px</span>, <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="弹性尺寸">弹性尺寸</h3><p>使用 <code>fr</code> 单位用于表示轨道尺寸配额，表示按配额比例分配可用空间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template</span>-column: <span class="number">2</span>fr, <span class="number">1</span>fr, <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-rows</span>: <span class="number">200px</span>, <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="混合尺寸">混合尺寸</h3><p><code>fr</code> 和其它长度单位混合使用时，<code>fr</code> 的计算基于其它单位分配后的剩余可用空间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template</span>-column: <span class="number">200px</span>, <span class="number">1</span>fr, <span class="number">2</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-rows</span>: <span class="number">200px</span>, <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="最值">最值</h3><p>函数 <code>minmax()</code> 用于定义轨道最小 / 最大边界值，函数 <code>minmax()</code> 接收两个参数：第一个参数表示最小轨道尺寸，第二个参数表示最大轨道尺寸。长度值可以是 <code>auto</code>，表示轨道尺寸可以根据内容大小进行伸长或收缩。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="built_in">minmax</span>(auto, <span class="number">50%</span>) <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">150px</span>, auto);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="重复">重复</h3><p>函数 <code>repeat()</code> 用于定义重复的网格轨道，函数 <code>repeat()</code> 接收两个参数：第一个参数表示重复的次数，第二个参数表示轨道尺寸。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    等价于</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span></span><br><span class="line"><span class="language-css">    &#125; </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="显式和隐式网格">显式和隐式网格</h3><p>在创建网格时，使用 <strong>grid-template-rows</strong> 和 <strong>grid-template-column</strong> 属性显式定义网格上的行和列。由于内容太多，需要更多的网格轨道，那么网格就会在隐式网格中创建行和列。默认情况下，这些轨道会自动调整大小，因此它们的大小取决于轨道内的内容。可以使用 <strong>grid-auto-rows</strong> 和 <strong>grid-auto-column</strong> 属性为隐式网格中创建的轨道定义大小。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="网格线">网格线</h2><p>定义网格时，定义的是网格轨道，而不是网格线。网格布局会创建编号的网格线来定位每一个网格单元。</p><h3 id="跨越多列">跨越多列</h3><p>通过对 <strong>grid-column-start</strong> 和 <strong>grid-column-end</strong> 属性的设置，使该网格项跨越多列。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="跨越多行">跨越多行</h3><p>通过对 <strong>grid-row-start</strong> 和 <strong>grid-row-end</strong> 属性的设置，使该网格项跨越多行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row-start</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row-end</span>: <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="简写">简写</h3><p>属性 <strong>grid-row</strong> 是 <strong>grid-row-start</strong> 和 <strong>grid-row-end</strong> 的简写形式。</p><p>属性 <strong>grid-column</strong> 是  <strong>grid-column-start</strong> 和 <strong>grid-column-end</strong> 的简写形式。</p><ol><li>如果只指定一个值，它表示 <code>grid-row/column-start</code></li><li>如果两个值都指定，第一个表示 <code>grid-row/column-start</code> ，第二个值表示<code>grid-row/column-end</code>。而且必须用斜杠(<code>/</code>)分隔这两个值</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="span">span</h3><p>关键字 <code>span</code> 用来指定跨越行或列的数量。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    等价于</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column</span>: <span class="number">1</span> / span <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row</span>: <span class="number">2</span> / span <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">    &#125;    </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="反方向计数">反方向计数</h3><p>由 <strong>grid-template-rows</strong> 和 <strong>grid-template-column</strong> 属性显式定义的网格，右端的列线和底端的行线。这些线会被记为 <code>-1</code>，然后你可以从这往前数，所以倒数第 2 条线会被记为 <code>-2</code>。隐式定义的网格不支持反方向计数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column</span>: <span class="number">1</span> / -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;  </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="网格单元格">网格单元格</h2><p><em>网格单元格</em>是网格项中最小的单位，一个父级元素被定义为网格元素，那么它的子级元素将会排列在每个事先定义好的网格单元格中。</p><h2 id="网格间距">网格间距</h2><p>网格单元格之间的<em>横向间距</em>（gutter）或<em>纵向间距</em>（alley）可以使用 <strong>column-gap</strong> 和 <strong>row-gap</strong> 属性或简写 <strong>gap</strong> 来创建。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-gap</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">row-gap</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    等价于</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">gap</span>: <span class="number">1rem</span>; </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* gap: 1rem 1rem; */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="网格区域">网格区域</h2><p>网格项可以按行或列跨越一个或多个单元格，这样就形成了一个<em>网格区域</em>，网格区域必须是矩形。</p><h3 id="网格项区域">网格项区域</h3><p>在前面已经通过 <strong>grid-row</strong> 和 <strong>grid-column</strong>属性实现网格线跨越的简写，可以通过 <strong>grid-area</strong> 属性进一步简写。<strong>grid-area</strong> 值的顺序如下：</p><ol><li><strong>grid-row-start</strong></li><li><strong>grid-column-start</strong></li><li><strong>grid-row-end</strong></li><li><strong>grid-column-end</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">1</span> / <span class="number">1</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: <span class="number">2</span> / <span class="number">1</span> / <span class="number">4</span> / <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;  </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="网格模板区域">网格模板区域</h3><p>上面我们使用 <strong>grid-area</strong> 属性定义了一个网格项区域，也可以先给一个区域命名，然后在 <strong>grid-template-areas</strong> 属性值中指定这个区域的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">9</span>, <span class="number">1</span>fr);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">100px</span>, auto);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-areas</span>:</span></span><br><span class="line"><span class="language-css">            <span class="string">&quot;hd hd hd   hd   hd   hd   hd   hd   hd&quot;</span></span></span><br><span class="line"><span class="language-css">            <span class="string">&quot;sd sd main main main main main main main&quot;</span></span></span><br><span class="line"><span class="language-css">            <span class="string">&quot;ft ft ft   ft   ft   ft   ft   ft   ft&quot;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#ffa94d</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ffd8a8</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#d9480f</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: hd;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: ft;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: main;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: sd;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>sidebar<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="网格布局">网格布局</h2><p>网格布局默认是沿着行放置网格项，可以通过 <strong>grid-auto-flow</strong> 属性来指定网格如何布局。</p><p><strong>属性值</strong>：</p><ol><li><strong>row</strong>：逐行填充来排列元素，在必要时增加新行。</li><li><strong>column</strong>：逐列填充来排列元素，在必要时增加新列。</li><li><strong>dense</strong>：如果使用，在网格中布局元素时，后面出现了稍小的元素，会试图去填充网格中前面留下的空白，这样做会填上稍大元素留下的空白，但同时也可能导致原来出现的次序被打乱。如果省略，后面的元素不会试图填充前面的空白，保证所有的元素按照次序出现。</li></ol><p><strong>形式</strong>：</p><ol><li>单个关键字：<code>row</code>、<code>column</code>，或 <code>dense</code> 中的一个。</li><li>两个关键字：<code>row dense</code> 或 <code>column dense</code>。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* grid-auto-flow: row dense; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-flow</span>: column dense;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">1</span> / <span class="number">1</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: <span class="number">2</span> / <span class="number">1</span> / <span class="number">5</span> / <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;  </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(15)-Flex</title>
    <link href="/2024/07/06/CSS%E5%AD%A6%E4%B9%A0(15)-Flex/"/>
    <url>/2024/07/06/CSS%E5%AD%A6%E4%B9%A0(15)-Flex/</url>
    
    <content type="html"><![CDATA[<p>Flex是Flexible Box的缩写，是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。</p><span id="more"></span><h1>Flex</h1><p>Flexible Box 模型，通常被称为 flexbox，弹性布局的目的是提供一种更加高效的方式来对容器中的条目进行布局、对齐和分配空间。创建 flex 容器需要把容器的 <strong>display</strong> 属性设置为 <code>flex</code>。</p><p><img src="./imgs/CSS/flex.png" alt=""></p><ol><li><strong>主轴</strong>（main axis）：是沿着 flex 元素放置的方向延伸的轴，该轴的开始和结束被称为 <strong>main start</strong> 和 <strong>main end</strong>。</li><li><strong>交叉轴</strong>（cross axis）：是垂直于 flex 元素放置方向的轴。该轴的开始和结束被称为 <strong>cross start</strong> 和 <strong>cross end</strong>。</li><li>设置了 <code>display: flex</code> 的父元素，被称之为 <strong>flex 容器（flex container）。</strong></li><li>在 flex 容器中表现为弹性的盒子的元素被称之为 <strong>flex 项</strong>（<strong>flex item</strong>）。</li></ol><h2 id="主轴方向">主轴方向</h2><p>在 flex 容器中添加 <strong>flex-direction</strong> 属性可以让我们更改 flex 元素的排列方向。</p><p><strong>属性值</strong>：</p><ol><li><strong>row</strong>：表示flex 项从左向右排列。此时<strong>水平方向轴</strong>为主轴。</li><li><strong>row-reverse</strong>：表示flex 项从右向左排列。</li><li><strong>column</strong>：表示flex 项从上向下排列。此时<strong>垂直方向轴</strong>为主轴。</li><li><strong>column-reverse</strong>：表示flex 项从下向上排列。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="换行">换行</h2><p>在 flex 容器中添加 <strong>flex-wrap</strong> 属性用于指定弹性布局中flex 项是否换行。</p><p><strong>属性值</strong>：</p><ol><li><strong>nowrap</strong>：表示不换行，所有flex 项单行排列，flex 项可能会溢出。</li><li><strong>wrap</strong>：表示换行，所有flex 项目多行排列，溢出的flex 项会被放到下一行，按从上向下顺序排列。</li><li><strong>wrap-reverse</strong>：所有flex 项多行排列，按从下向上顺序排列。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex-flow">flex-flow</h2><p>可以将两个属性 <strong>flex-direction</strong> 和 <strong>flex-wrap</strong> 组合为简写属性 <strong>flex-flow</strong>。第一个指定的值为 <strong>flex-direction</strong> ，第二个指定的值为 <strong>flex-wrap</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-flow</span>: row wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对齐方式">对齐方式</h2><h3 id="主轴方向对齐">主轴方向对齐</h3><p><strong>justify-content</strong> 属性定义了flex 项在 <strong>主轴</strong>上的对齐方式。</p><p><strong>属性值</strong>：</p><ol><li><strong>flex-start</strong>：默认值，表示弹性容器flex 项按主轴起点线对齐</li><li><strong>flex-end</strong>：表示弹性容器flex 项按主轴终点线对齐</li><li><strong>center</strong>：居中排列</li><li><strong>space-between</strong>：弹性容器flex 项均匀分布，第一项紧贴主轴起点线，最后一项紧贴主轴终点线，flex 项之间的间隔都相等。要注意特殊情况，当剩余空间为负数或者只有一个项时，效果等同于 <strong>flex-start</strong>。</li><li><strong>space-around</strong>：弹性容器flex 项均匀分布，每个项目两侧的间隔相等，相邻项目之间的距离是两个项目之间留白的和。所以，项目之间的间隔比项目与边框的间隔大一倍。要注意特殊情况，当剩余空间为负数或者只有一个项时，效果等同于 <strong>center</strong>。</li><li><strong>space-evenly</strong>：弹性容器flex 项均匀分布，所有项目之间及项目与边框之间的距离相等。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-flow</span>: row wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="交叉轴方向对齐">交叉轴方向对齐</h3><p><strong>align-items</strong> 属性定义了flex 项在 <strong>交叉轴</strong>上的对齐方式。</p><p><strong>属性值</strong>：</p><ol><li><strong>stretch</strong>：默认值，当flex 项未设置高度或者高度为 <code>atuo</code> 时，会使所有flex 项沿着交叉轴的方向拉伸以填充父容器。如果父容器在交叉轴方向上没有固定高度，则所有flex 项的高度将与最高的flex 项一样。</li><li><strong>flex-start</strong>：表示弹性容器flex 项按交叉轴起点线对齐。</li><li><strong>flex-end</strong>：表示弹性容器flex 项按交叉轴终点线对齐。</li><li><strong>center</strong>：表示与交叉轴的中线对齐。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-flow</span>: row wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多交叉轴方向对齐">多交叉轴方向对齐</h3><p><strong>align-content</strong> 属性定义了flex 项在 <strong>多根交叉轴</strong>上的对齐方式。如果只有一根交叉轴，该属性不起作用。针对盒子内部的元素超过了盒子的宽度出现了换行，flex 项是多行。</p><p><strong>属性值</strong>：</p><ol><li><strong>stretch</strong>：默认值，当flex 项未设置高度或者高度为 <code>atuo</code> 时，会使所有flex 项沿着交叉轴的方向拉伸以填充父容器。如果父容器在交叉轴方向上没有固定高度，则所有flex 项的高度将与最高的flex 项一样。</li><li><strong>flex-start</strong>：表示弹性容器flex 项按交叉轴起点线对齐。</li><li><strong>flex-end</strong>：表示弹性容器flex 项按交叉轴终点线对齐。</li><li><strong>center</strong>：表示与交叉轴的中线对齐。</li><li><strong>space-between</strong>：弹性容器flex 项均匀分布，第一项紧贴主轴起点线，最后一项紧贴主轴终点线，flex 项之间的间隔都相等。要注意特殊情况，当剩余空间为负数或者只有一个项时，效果等同于 <strong>flex-start</strong>。</li><li><strong>space-around</strong>：弹性容器flex 项均匀分布，每个项目两侧的间隔相等，相邻项目之间的距离是两个项目之间留白的和。所以，项目之间的间隔比项目与边框的间隔大一倍。要注意特殊情况，当剩余空间为负数或者只有一个项时，效果等同于 <strong>center</strong>。</li><li><strong>space-evenly</strong>：弹性容器flex 项均匀分布，所有项目之间及项目与边框之间的距离相等。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-flow</span>: row wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-content</span>: flex-end;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex-项排序">flex 项排序</h2><p>弹性盒子可以通过<strong>order</strong>改变 flex 项的布局位置的功能，而不会影响到源顺序（即 dom 树里元素的顺序）。</p><ol><li>所有的 flex 项默认的 <strong>order</strong> 值是0</li><li><strong>order</strong> 值大的 flex 项比 order 值小的在显示顺序中更靠后。</li><li>拥有相同 <strong>order</strong> 值的元素按照它们在源代码中出现的顺序进行布局。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.order</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">order</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item order&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex-项动态尺寸">flex 项动态尺寸</h2><h3 id="flex-grow">flex-grow</h3><p><strong>flex-grow</strong> 属性定义flex 项的<strong>扩展比例</strong>，表示放大的比例，取值必须是正整数，负值无效，默认为 0。Flex 容器会根据flex 项设置的扩展比例作为比率来分配剩余空间，如果所有flex 项的 <strong>flex-grow</strong> 属性都为 1，则它们将等分剩余空间。如果一个flex 项的 <strong>flex-grow</strong> 属性为 2，其他为 1，则前者占据的剩余空间将比其他项多一倍。</p><p><strong>计算方式</strong>：</p><ol><li>假设剩余空间 <code>x</code>（弹性容器宽度与所有flex 项宽度总和之差）</li><li>假设有三个flex 项元素，<code>flex-grow</code> 设定值分别为 <code>a</code>、<code>b</code> 和 <code>c</code></li><li>每个flex 项元素可以扩展的空间为：<code>a/(a+b+c) * x</code>、<code>b/(a+b+c) * x</code> 和 <code>c/(a+b+c) * x</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex-shrink">flex-shrink</h3><p><strong>flex-shrink</strong> 属性定义flex 项的<strong>缩小比例</strong>，表示缩小的比例，取值必须是正整数，负值无效，默认为 1。如果flex 项宽度之和超过Flex 容器宽度，Flex 容器会根据flex 项设置的缩小比例作为比率来压缩flex 项宽度，以保证不溢出。</p><p><strong>计算方式</strong>：</p><ol><li>假设三个flex 项的 <code>width</code> 为：<code>w1</code>、<code>w2</code>、<code>w3</code></li><li>假设三个flex 项的 <code>flex-shrink</code> 为：<code>a</code>、<code>b</code>、<code>c</code></li><li>计算总压缩权重：<code>sum = a * w1 + b * w2 + c * w3</code></li><li>计算每个元素压缩率：<code>s1 = a * w1 / sum</code>、<code>s2 = b * w2 / sum</code>、<code>s3 = c * w3 / sum</code></li><li>计算每个元素宽度：<code>width - 压缩率 * 溢出空间</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex-basis">flex-basis</h3><p><strong>flex-basis</strong> 属性指定flex 项在主轴方向上的初始长度。</p><p><strong>注意</strong>：</p><p>设置 <code>flex-grow</code> 进行分配剩余空间，或者使用 <code>flex-shrink</code> 进行收缩都是在 <code>flex-basis</code> 的基础上进行的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-basis</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex">flex</h3><p><strong>flex</strong> 属性是 <code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 的简写，默认值为 <code>0 1 auto</code>。后两个属性可选。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex-项对齐">flex 项对齐</h2><p><strong>align-self</strong> 属性用于指定flex 项的对齐方式，可覆盖 <strong>align-items</strong> 属性。</p><p><strong>属性值</strong>：</p><ol><li><strong>auto</strong>：默认值，表示继承父元素的 <strong>align-items</strong> 属性，如果没有父元素，则等同于 <strong>stretch</strong>。</li><li><strong>flex-start</strong>：表示弹性容器flex 项按交叉轴起点线对齐。</li><li><strong>flex-end</strong>：表示弹性容器flex 项按交叉轴终点线对齐。</li><li><strong>center</strong>：表示与交叉轴的中线对齐。</li><li><strong>stretch</strong>：当flex 项未设置高度或者高度为 <code>atuo</code> 时，会使所有flex 项沿着交叉轴的方向拉伸以填充父容器。如果父容器在交叉轴方向上没有固定高度，则所有flex 项的高度将与最高的flex 项一样。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-self</span>: flex-end;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(14)-多列布局</title>
    <link href="/2024/07/05/CSS%E5%AD%A6%E4%B9%A0(14)-%E5%A4%9A%E5%88%97%E5%B8%83%E5%B1%80/"/>
    <url>/2024/07/05/CSS%E5%AD%A6%E4%B9%A0(14)-%E5%A4%9A%E5%88%97%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p>多列布局声明提供了一种多列组织内容的方式。</p><span id="more"></span><h1>Columns</h1><h2 id="column">column</h2><p><strong>column</strong>属性用来设置元素的列宽和列数，是一个简写属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">columns</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="column-count">column-count</h2><p><strong>column-count</strong>属性将一个元素的内容分成指定数量的列。</p><p><strong>属性值</strong>：</p><ol><li><strong>auto</strong>：用来表示列的数量由其他 CSS 属性指定</li><li>正整数，用来描述元素内容被划分的理想列数</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-count</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="column-width">column-width</h2><p><strong>column-width</strong>属性设置多列布局中的理想列宽。容器将包含尽可能多的列，但其中任何列的宽度都不会小于设置的宽度。如果容器的宽度小于指定值，则单个列的宽度将小于声明的列宽。</p><p><strong>属性值</strong>：</p><ol><li><strong>auto</strong>：列的宽度由其他 CSS 属性决定</li><li>表示最佳列宽。实际列宽可能与指定值不同：当需要填充可用空间时，列宽可能更宽；当可用空间太小时，列宽可能更窄。该值必须严格为正数，否则声明无效。百分比值也无效。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="column-gap">column-gap</h2><p><strong>column-gap</strong>属性用来设置元素列之间的间隔大小。</p><p><strong>属性值</strong>：</p><ol><li><strong>normal</strong>：表示列之间的间隔宽度。在 <code>多列布局</code> 时默认间隔为 <code>1em</code>，其他类型布局默认间隔为 0。</li><li>正整数，定义列之间的间隔大小。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-count</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-gap</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="column-rule">column-rule</h2><p><strong>column-rule</strong>属性在多列布局中设定分割线的宽度、样式和颜色。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-count</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-gap</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-rule</span>: <span class="number">2px</span> dotted <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="column-span">column-span</h2><p><strong>column-rule</strong>属性可以设置一个元素是否跨越所有的列。</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：元素不跨越多个列</li><li><strong>all</strong>：元素横跨所有列</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-count</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-gap</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-rule</span>: <span class="number">2px</span> dotted <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-span</span>: all;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(13)-定位</title>
    <link href="/2024/07/04/CSS%E5%AD%A6%E4%B9%A0(13)-%E5%AE%9A%E4%BD%8D/"/>
    <url>/2024/07/04/CSS%E5%AD%A6%E4%B9%A0(13)-%E5%AE%9A%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<p>定位允许从正常的文档流布局中取出元素，改变布局中一些盒子的位置。</p><span id="more"></span><h1>定位</h1><p><strong>position</strong> 属性用于指定一个元素在文档中的定位方式。<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>属性则决定了该元素的最终位置。</p><h2 id="static">static</h2><p>HTML 元素默认定位是<strong>static</strong>，<strong>static</strong>不受<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>属性影响，<strong>static</strong>只是将元素放入它在文档布局流中的正常位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">200vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">75vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.static</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: static;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box static&quot;</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="relative">relative</h2><p>相对定位与静态定位非常相似，占据在正常的文档流中，可以通过<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>属性修改该元素的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">200vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">75vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.relative</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box relative&quot;</span>&gt;</span>relative<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="absolute">absolute</h2><p>绝对定位的元素脱离了文档流，没有设置<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>属性的时候，绝对定位会显示在正常文档流的上面，后面的元素会占据他的位置，如果设置<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>属性，绝对定位元素相对于最近的非<strong>static</strong>祖先元素定位，如果没有这个祖先元素，将相对于<code>&lt;html&gt;</code>元素定位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">200vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">75vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.absolute</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box absolute&quot;</span>&gt;</span>absolute<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="fixed">fixed</h2><p>元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。可以通过<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>属性决定该元素的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">200vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">75vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fix</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#0f0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box fix&quot;</span>&gt;</span>fix<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="sticky">sticky</h2><p>粘性定位可以被认为是相对定位和固定定位的混合，须指定<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>任一属性粘性定位才会生效，否则其行为与相对定位相同。在视口滚动到某个阈值之前，元素为相对定位。之后，元素将固定在与顶部距离的阈值位置。当父元素逐渐消失在视口时，粘性定位的元素也逐渐消失在视口。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">200vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">75vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sticky</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: sticky;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box sticky&quot;</span>&gt;</span>sticky<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="z-index">z-index</h2><p>HTML 页面通常被认为是二维的，但前面的浮动和定位会使元素产生重叠。当元素开始重叠，可以通过<strong>z-index</strong>来决定哪个元素在顶部。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">200vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">75vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.relative</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.absolute</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">40vw</span> - <span class="number">2rem</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">10%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box relative&quot;</span>&gt;</span>relative<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box absolute&quot;</span>&gt;</span>absolute<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box relative&quot;</span>&gt;</span>relative<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(12)-浮动</title>
    <link href="/2024/07/03/CSS%E5%AD%A6%E4%B9%A0(12)-%E6%B5%AE%E5%8A%A8/"/>
    <url>/2024/07/03/CSS%E5%AD%A6%E4%B9%A0(12)-%E6%B5%AE%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>浮动最初只用于在块级文本内浮动图像，但是现在它已成为在网页上创建多列布局的常用工具之一。</p><span id="more"></span><h1>常规流布局</h1><p>常规流布局是指在不对页面进行任何布局控制时，浏览器默认的 HTML 布局方式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>常规流布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个块级元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个块级元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个块级元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>浮动</h1><p>浮动可以被用来实现整个网站页面的布局，通过设置浮动使元素横向排列</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：表明元素不进行浮动</li><li><strong>left</strong>：表明元素必须浮动在其所在的块容器左侧</li><li><strong>right</strong>：表明元素必须浮动在其所在的块容器右侧</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">90%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.special</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;special&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="浮动特点">浮动特点</h2><ol><li>浮动元素会脱离正常的文档布局流，当元素浮动之后，它会被移出正常的文档流，然后向左或者向右平移，一直平移直到碰到了父容器的边框，或者碰到另外一个浮动元素。</li><li>浮动元素只会影响后面的元素，不影响之前的元素</li><li>浮动元素会覆盖正常的文档布局流之上</li></ol><h2 id="清除浮动">清除浮动</h2><h3 id="clear">clear</h3><p>一个浮动元素被移出正常文档流，其他元素会受到浮动元素的影响，可以通过<strong>clear</strong>属性来清除浮动影响</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：元素不会清除浮动</li><li><strong>left</strong>：元素会清除左浮动并向下移动</li><li><strong>right</strong>：元素会清除右浮动并向下移动</li><li><strong>both</strong>：元素会清除左右浮动并向下移动</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">90%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.special</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cleared</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;special&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;cleared&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果存在一个盒子同时包含了一个浮动元素和其他元素，可以通过下面三种方式清除浮动</p><h3 id="clearfix">clearfix</h3><p>向包含浮动内容及其本身的盒子后方插入一些生成的内容，并将生成的内容清除浮动。这与在浮动盒子后手动添加诸如<code>&lt;div&gt;</code>元素，并设置其样式为 <code>clear:both</code> 是等效的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Simple float example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="overflow">overflow</h3><p>将包裹元素的<strong>overflow</strong>属性设置为除 <code>visible</code> 外的其他值。这样设置相当于创建了<strong>BFC</strong>，让浮动元素包含在 BFC 及其背景之内。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Simple float example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="display：flow-root">display：flow-root</h3><p>将包裹元素的<strong>display</strong>属性设置为 <code>flow-root</code>。这样设置相当于创建了<strong>BFC</strong>，定义格式化上下文的根元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flow-root;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Simple float example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(11)-Display</title>
    <link href="/2024/07/02/CSS%E5%AD%A6%E4%B9%A0(11)-Display/"/>
    <url>/2024/07/02/CSS%E5%AD%A6%E4%B9%A0(11)-Display/</url>
    
    <content type="html"><![CDATA[<p>每个 HTML 元素都有一个默认的 <strong>display</strong> 值，具体取决于元素类型，大多数默认值为 <strong>block</strong> 和 <strong>inline</strong>。</p><span id="more"></span><h1>display</h1><p><strong>display</strong>属性用于指定 HTML 元素在网页上的显示方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element &#123;</span><br><span class="line">    <span class="attribute">display</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="inline">inline</h2><p><strong>display</strong>属性设置为<code>inline</code>的元素不会从新行开始，它将占用剩余可用的屏幕宽度，因此不能设置<code>inline</code>元素的<strong>width</strong>和<strong>height</strong>，垂直方向的<strong>margin</strong>、<strong>padding</strong>、<strong>border</strong>也不会生效，水平方向的<strong>margin</strong>、<strong>padding</strong>、<strong>border</strong>会被应用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素，<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个inline元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，里面包含一个inline元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="block">block</h2><p><strong>display</strong>属性设置为<code>block</code>的元素会从新行开始，它将占用新行可用的屏幕宽度，，设置<code>block</code>元素的<strong>width</strong>和<strong>height</strong>决定占用屏幕的宽度和高度，<strong>margin</strong>、<strong>padding</strong>、<strong>border</strong>会被应用，如果没有指定<strong>width</strong>，<code>block</code>元素默认占用一整行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素，<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个inline元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，里面包含一个inline元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="inline-block">inline-block</h2><p><strong>display</strong>属性设置为<code>inline-block</code>的元素，表现形式和<code>inline</code>元素一样，但是可以设置<strong>width</strong>和<strong>height</strong>，也可以设置垂直方向的<strong>margin</strong>、<strong>padding</strong>、<strong>border</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素，<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个inline元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，里面包含一个inline元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="table">table</h2><p>将<strong>display</strong>属性设置为<code>table</code>使元素的行为类似于表格，因此可以不使用 HTML 的<code>table</code>元素和相应的元素创建一个表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.row</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-row;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cell</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>班级<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>18<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>1班<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>19<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>2班<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>3班<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex">flex</h2><p><strong>display</strong>属性设置为<code>flex</code>用于创建横向或纵向的一维页面布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="grid">grid</h2><p><strong>display</strong>属性设置为<code>grid</code>用于同时在两个维度上把元素按行和列排列整齐</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="inherit">inherit</h2><p>将<strong>display</strong>属性设置为<code>inherit</code>使元素继承其父元素的<strong>display</strong>属性，如果在<code>&lt;div&gt;</code>元素中有一个<code>&lt;span&gt;</code>元素，给<code>&lt;span&gt;</code>元素一个<code>inherit</code>属性值，它将从<code>inline</code>变成<code>block</code>元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inherit;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素，<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个inline元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，里面包含一个inline元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="none">none</h2><p>当<strong>display</strong>属性设置为<code>none</code>时，元素在页面中仍存在，但是不显示出来，也不占据页面空间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素，<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个inline元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，里面包含一个inline元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>visibility</h1><p><strong>visibility</strong>属性可以显示或隐藏 HTML 元素，作用和<code>display: none</code>相似，但是不会更改页面布局</p><p><strong>属性值</strong>：</p><ol><li><strong>visible</strong>：元素可见</li><li><strong>hidden</strong>：元素不可见，但会影响页面布局</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素，<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个inline元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，里面包含一个inline元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>overflow</h1><p>在盒子无法容纳下太多的内容的时候会发生溢出，<strong>overflow</strong>属性是控制溢出的一种方式，它告诉浏览器你想怎样处理溢出。</p><p><strong>属性值</strong>：</p><ol><li><strong>visible</strong>：内容不被裁剪，有可能会渲染到盒子内边距外面</li><li><strong>hidden</strong>：内容被裁剪到适应盒子内边距，不提供滚动条，也不支持用户滚动，但是内容可以通过<code>js</code>控制滚动，盒子本质还是一个可以滚动的容器</li><li><strong>clip</strong>：内容被裁剪到适应盒子内边距，禁止所有滚动，该盒子不是一个可以滚动的容器</li><li><strong>scroll</strong>：内容被裁剪到适应盒子内边距，无论是否裁剪了内容，浏览器总是显示滚动条</li><li><strong>auto</strong>：如果内容在盒子内边距内正好显示，它看起来和<code>visible</code>相同，如果内容溢出，则浏览器提供滚动条</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: visible;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(10)-盒子模型</title>
    <link href="/2024/07/01/CSS%E5%AD%A6%E4%B9%A0(10)-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/07/01/CSS%E5%AD%A6%E4%B9%A0(10)-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>在 CSS 中，所有的元素都被一个个的“盒子”包围着，理解这些“盒子”的基本原理，是我们使用 CSS 实现准确布局、处理元素排列的关键。</p><span id="more"></span><h1>盒模型</h1><h2 id="块盒子和内联盒子">块盒子和内联盒子</h2><p>在 CSS 中，我们有几种类型的盒子，一般分为<strong>块盒子</strong>（block boxes）和<strong>内联盒子</strong>（inline boxes）。类型指的是盒子在页面流中的行为方式以及与页面上其他盒子的关系。</p><h2 id="盒子显示类型">盒子显示类型</h2><p>盒子有<strong>内部显示</strong>（inner display type）和<strong>外部显示</strong>（outer display type）两种类型。</p><h3 id="外部显示类型">外部显示类型</h3><p>一个<strong>块盒子</strong>在外部显示类型中会表现出以下行为：</p><ol><li>盒子会产生换行</li><li><strong>width</strong>和<strong>height</strong>属性可以发挥作用</li><li><strong>margin</strong>、<strong>padding</strong>、<strong>border</strong>会将其他元素从当前盒子周围”推开“</li><li>如果没有指定<strong>width</strong>，盒子将填充容器中的空间</li></ol><p>一个<strong>内联盒子</strong>在外部显示类型中会表现出以下行为：</p><ol><li>盒子不会产生换行</li><li><strong>width</strong>和<strong>height</strong>属性将不起作用</li><li>垂直方向的<strong>margin</strong>、<strong>padding</strong>、<strong>border</strong>会被应用但是不会把其他<strong>内联盒子</strong>推开。</li><li>水平方向的<strong>margin</strong>、<strong>padding</strong>、<strong>border</strong>会被应用且会把其他<strong>内联盒子</strong>推开。</li></ol><h3 id="内部显示类型">内部显示类型</h3><p>决定了盒子内元素的布局方式。</p><h2 id="CSS盒模型">CSS盒模型</h2><p>CSS 盒模型整体上适用于块盒子，它定义了盒子的不同部分（外边距、边框、内边距和内容）如何协同工作，以创建一个在页面上可以看到的盒子。内联盒子使用的只是盒模型中定义的部分行为。</p><p>CSS 中组成一个块盒子需要：</p><ol><li><strong>内容盒子</strong>：显示内容的区域</li><li><strong>内边距盒子</strong>：填充位于内容周围的空白处</li><li><strong>边框盒子</strong>：边框盒子包住内容和任何填充</li><li><strong>外边距盒子</strong>：外边距是最外层，其包裹内容、内边距和边框，作为该盒子与其他元素之间的空白</li></ol><h3 id="标准盒模型">标准盒模型</h3><p>在标准模型中，如果给盒子设置<strong>width</strong>和<strong>height</strong>，实际设置的是Content box。<strong>padding</strong> 和 <strong>border</strong> 再加上设置的宽高一起决定整个盒子的大小。</p><h3 id="IE盒模型">IE盒模型</h3><p>在IE盒模型中，所有宽度都是可见宽度，所以内容宽度是该宽度减去<strong>border</strong> 和 <strong>padding</strong>。</p><p><strong>注意</strong>：默认情况下，浏览器使用标准盒模型。</p><h3 id="box-sizing">box-sizing</h3><ol><li><strong>content-box</strong>：默认值，标准盒子模型。<strong>width</strong>和<strong>height</strong>只包括内容的宽和高，不包括<strong>border</strong>、<strong>padding</strong>、<strong>margin</strong></li><li><strong>border-box</strong>：IE盒子模型。<strong>width</strong>和<strong>height</strong>包括内容的宽高和 <strong>border</strong>、<strong>padding</strong>，不包括<strong>margin</strong></li></ol><h2 id="外边距">外边距</h2><p>外边距是盒子周围的空间，它会把其他元素从盒子旁边推开，无论使用标准模型还是替代模型，外边距总是在计算可见部分后额外添加。</p><p>我们可以使用<strong>margin</strong>属性控制元素的所有边距，<strong>margin</strong> 属性是 <strong>margin-top</strong>、<strong>margin-right</strong>、<strong>margin-bottom</strong> 和 <strong>margin-left</strong> 的简写形式。</p><p><strong>margin</strong> 简写形式以特定顺序应用属性：上、右、下、左，具体应用方式如下：</p><ol><li>一个值：所有面都会应用。(margin: 20px)</li><li>两个值：第一个值将应用于 top 和 bottom，第二个值将应用于 left 和 right。(margin: 20px 40px)</li><li>三个值：第一个值为 top，第二个值为 left 和 right，第三个值为 bottom。(margin: 20px 40px 30px)</li><li>四个值：第一个值为 top，第二个值为 right，第三个值为 bottom，第四个值为 left。(margin: 20px 40px 30px 40px)</li></ol><h3 id="负外边距">负外边距</h3><p>外边距属性值可以为正也可以为负。在盒子一侧设置负值会导致盒子和页面上的其他内容重叠。</p><h3 id="外边距折叠">外边距折叠</h3><p>根据外边距相接触的两个元素是正边距还是负边距，结果会有所不同：</p><ol><li>两个正外边距将合并为一个外边距。其大小等于最大的单个外边距</li><li>两个负外边距会折叠，并使用最小（离零最远）的值</li><li>如果其中一个外边距为负值，其值将从总值中减去</li></ol><p><strong>注意</strong>：外边距何时折叠，何时不折叠，由许多规则决定。需要记住的主要一点是，外边距折叠是指在使用外边距创建空间时，如果没有获得预期的空间，就会发生外边距折叠。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="边框">边框</h2><p>元素外边距内就是边框，元素的边框就是围绕元素内容和内边距的一条或多条线。</p><p>可以使用<strong>border</strong>属性一次设置所有四个边框的宽度、颜色和样式。<strong>border</strong> 属性是 <strong>border-top</strong>、<strong>border-right</strong>、<strong>border-bottom</strong> 和 <strong>border-left</strong> 的简写形式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="边框样式">边框样式</h3><p>如需显示边框，就必须定义<strong>border-style</strong></p><ol><li><strong>none</strong>：默认值，不显示边框</li><li><strong>hidden</strong>：与none关键字类似，隐藏边框，如果存在其他的重叠边框，边框不会显示</li><li><strong>dotted</strong>：显示为一系列圆点，圆点半径是<strong>border-width</strong>值的一半</li><li><strong>dashed</strong>：显示为一系列短的方形虚线</li><li><strong>solid</strong>：显示为一条实线</li><li><strong>double</strong>：显示为一条双实线</li><li><strong>groove</strong>：显示为有雕刻效果的边框，样式与<strong>ridge</strong>相反</li><li><strong>ridge</strong>：显示为有浮雕效果的边框，样式与<strong>groove</strong>相反</li><li><strong>inset</strong>：显示为有陷入效果的边框，样式与<strong>outset</strong>相反</li><li><strong>outset</strong>：显示为有突出效果的边框，样式与<strong>inset</strong>相反</li></ol><h3 id="边框宽度">边框宽度</h3><p>边框的宽度是线条的粗细，由 <strong>border-width</strong> 控制。</p><ol><li><strong>thin</strong>：细边线</li><li><strong>medium</strong>：默认值，中等边线</li><li><strong>thick</strong>：宽边线</li><li>长度值设置边框宽度（px、em、rem、%）</li></ol><h3 id="边框颜色">边框颜色</h3><p>可以使用 <strong>border-color</strong> 设置框的各侧或每一侧的颜色。默认情况下，它会使用框的当前文本颜色</p><h3 id="边框圆角">边框圆角</h3><p>使用<strong>border-radius</strong>属性设置边框的圆角，在简写形式中指定每个角的半径，遵循顺序：左上角、右上角、右下角、左下角。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内边距">内边距</h2><p>内边距位于边框和内容区域之间，用于将内容推离边框。与外边距不同，内边距不能为负数。任何应用于元素的背景都会显示在内边距后面。</p><p><strong>padding</strong> 属性是<strong>padding-top</strong>、<strong>padding-right</strong>、<strong>padding-bottom</strong> 和 <strong>padding-left</strong> 的简写形式。</p><h2 id="阴影">阴影</h2><h3 id="块阴影">块阴影</h3><p><strong>box-shadow</strong> 属性用于向 HTML 元素的框添加阴影。它适用于块元素和内联元素。</p><p><strong>box-shadow</strong> 的值顺序如下：</p><ol><li>inset（可选）：如果没有指定<code>inset</code>，默认阴影在边框外，即阴影向外扩散。</li><li>水平偏移：正数表示阴影位于元素右边，负数表示阴影位于元素左边。</li><li>垂直偏移：正数表示阴影位于元素下方，负数表示阴影位于元素上方。</li><li>模糊半径（可选）：值越大，模糊面积越大，阴影就越大越淡。不能为负值。默认为 0</li><li>扩散半径（可选）：取正值时，阴影扩大；取负值时，阴影收缩。默认为 0，此时阴影与元素同样大。</li><li>颜色（可选）：任何有效的颜色值。 如果未定义，将使用计算出的文本颜色。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">20px</span> <span class="number">5px</span> <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文字阴影">文字阴影</h3><p><strong>text-shadow</strong> 属性用于为文字添加阴影。</p><p><strong>text-shadow</strong> 的值顺序如下：</p><ol><li>水平偏移：正数表示阴影位于元素右边，负数表示阴影位于元素左边。</li><li>垂直偏移：正数表示阴影位于元素下方，负数表示阴影位于元素上方。</li><li>模糊半径（可选）：值越大，模糊面积越大，阴影就越大越淡。不能为负值。默认为 0</li><li>颜色（可选）：任何有效的颜色值。 如果未定义，将使用计算出的文本颜色。</li></ol><h3 id="曲线阴影">曲线阴影</h3><p>如果需要实现沿着图片任何可能曲线的阴影，可以使用<strong>drop-shadow</strong>过滤器</p><p><strong>drop-shadow</strong> 的值顺序如下：</p><ol><li>水平偏移：正数表示阴影位于元素右边，负数表示阴影位于元素左边。</li><li>垂直偏移：正数表示阴影位于元素下方，负数表示阴影位于元素上方。</li><li>模糊半径（可选）：值越大，模糊面积越大，阴影就越大越淡。不能为负值。默认为 0</li><li>扩散半径（可选）：取正值时，阴影扩大；取负值时，阴影收缩。默认为 0，此时阴影与元素同样大。</li><li>颜色（可选）：任何有效的颜色值。 如果未定义，将使用计算出的文本颜色。</li></ol>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(9)-背景</title>
    <link href="/2024/06/30/CSS%E5%AD%A6%E4%B9%A0(9)-%E8%83%8C%E6%99%AF/"/>
    <url>/2024/06/30/CSS%E5%AD%A6%E4%B9%A0(9)-%E8%83%8C%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<p>可以用 CSS 背景做一些创造性事情，添加背景图片或者渐变，背景可以解决 CSS 中的很多样式问题。</p><span id="more"></span><h1>背景</h1><p><strong>background</strong> 属性是背景属性的简写，用于为元素添加背景效果。</p><h2 id="背景颜色">背景颜色</h2><p><strong>background-color</strong> 属性定义了 CSS 中任何元素的背景颜色。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Background<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="背景图像">背景图像</h2><p><strong>background-image</strong> 属性可以在一个元素的背景中显示一个图像。支持多背景图像设置，背景之间用逗号(<code>,</code>)隔开。</p><ol><li>使用<code>url()</code>函数的图片地址</li><li>渐变函数</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>-<span class="selector-tag">img</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/demo.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Background<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="背景平铺">背景平铺</h2><p><strong>background-repeat</strong> 属性用于控制图像的平铺行为。</p><p><strong>属性值</strong>：</p><ol><li><strong>repeat</strong>：默认值，图像会按需重复来覆盖整个背景图片所在的区域。最后一个图像会被裁剪，如果它的大小不合适的话。</li><li><strong>repeat-x</strong>：仅水平方向上重复平铺</li><li><strong>repeat-y</strong>：仅垂直方向上重复平铺</li><li><strong>no-repeat</strong>：图像不会被重复</li><li><strong>space</strong>：图像会重复，但是不会裁剪。第一个和最后一个图像会被固定在元素相应的边上，同时空白会均匀地分布在图像之间。</li><li><strong>round</strong>：剩余的空间不够放置下一个图片的时候，重复的图片会伸展填充满空间。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>-<span class="selector-tag">img</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/demo.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Background<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="背景定位">背景定位</h2><p><strong>background-position</strong> 属性允许选择背景图片出现在它所应用的盒子上的位置。<strong>background-position</strong> 属性可以使用<code>top</code>、<code>bottom</code>、<code>center</code>、<code>left</code> 和 <code>right</code> 关键字，或者使用长度或百分比值。<strong>background-position</strong> 属性可以被指定一个或多个值。</p><ol><li><strong>一个值</strong>：<ul><li>center：居中背景图片</li><li>top、bottom、left、right：指定背景图片放在哪个边，另一个维度被设置为50%</li><li>长度、百分比：相对于左边的<code>x</code>坐标，<code>y</code>坐标被设置为50%</li></ul></li><li><strong>两个值</strong>：<ul><li>top、bottom、left、right、center：一个定义<code>x</code>坐标，另一个定义<code>y</code>坐标，同垂直或水平方向的关键字使用两个是无效的，例如：<code>top top</code> 或 <code>left right</code></li><li>长度、百分比：如果第一个值是关键字，那么定义该关键字另一方向的位置，如果两个值都是长度和百分比，则第一个定义<code>x</code>坐标，第二个定义<code>y</code>坐标</li></ul></li><li><strong>三个值</strong>：<ul><li>第一个值是关键字 <code>top</code>、<code>left</code>、<code>bottom</code>、<code>right</code>，或者 <code>center</code>。</li><li>如果第二个值是长度或百分比，则是第一个值的偏移量。如果是第三个值，则是第二个值的偏移量。</li></ul></li><li><strong>四个值</strong>：第一个和第三个值是定义<code>x</code>和<code>y</code>的关键字值。第二个和第四个值是前面<code>x</code>和<code>y</code>关键字值的偏移量</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>-<span class="selector-tag">img</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/demo.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-position: top; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-position: left 30%; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-position: top left 30%; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-position: top 30% left; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-position: top 30% left 30%; */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Background<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="背景大小">背景大小</h2><p><strong>background-size</strong> 属性设置背景图片大小。图片可以保有其原有的尺寸，或者拉伸到新的尺寸，或者在保持其原有比例的同时缩放到元素的可用空间的尺寸。设置背景图片的大小只能通过关键字或者设置宽高来实现。通过宽度和高度值来设定尺寸时，可以提供一个或两个数值，如果仅有一个数值，该数值将作为宽度大小，高度被设定为 <code>auto</code>，如果有两个数值，第一个作为宽度大小，第二个作为高度大小。</p><p><strong>属性值</strong>：</p><ol><li><strong>auto</strong>：以背景图片的比例缩放背景图片。</li><li><strong>contain</strong>：缩放背景图片以完全装入背景区，可能背景区部分空白。</li><li><strong>cover</strong>：缩放背景图片以完全覆盖背景区，可能背景图片部分看不见。</li><li><strong>长度</strong>：指定背景图片大小，不能为负值。</li><li><strong>百分比</strong>：指定背景图片相对盒子的百分比。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>-<span class="selector-tag">img</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/demo.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-size: contain; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-size: cover; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-size: 30%; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-size: 30% 30%; */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Background<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>渐变</h1><p>渐变是由<code>gradient()</code>函数创建的，渐变是一种图片，由至少两种或多种颜色之间的渐变过渡构成。</p><h2 id="线性渐变">线性渐变</h2><p>线性渐变创建了一条沿直线前进的颜色带。</p><h3 id="基础渐变">基础渐变</h3><p>最基本的渐变类型，只需指定两种颜色即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(blue, pink);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渐变方向">渐变方向</h3><p>默认情况下，线性渐变的方向是从上到下，可以指定一个值来改变渐变的方向。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to top, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to bottom, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to left, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to right, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to top left, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to top right, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to bottom left, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to bottom right, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渐变角度">渐变角度</h3><p>如果想要更精确地控制渐变的方向，可以给渐变设置一个具体的角度。在使用角度的时候，<code>0deg</code> 代表渐变方向为从下到上，<code>90deg</code> 代表渐变方向为从左到右，诸如此类正角度都属于顺时针方向。而负角度意味着逆时针方向。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">70deg</span>, blue, pink);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义渐变">自定义渐变</h3><p>默认情况下，无论设置多少颜色，所设置颜色会均匀分布在渐变路径中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red, orange, yellow, green, blue, indigo, violet);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渐变会平滑地从一种颜色过渡到另一种颜色，可以通过设置一个值在颜色之间达到控制渐变进程的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(blue, <span class="number">10%</span>, pink);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渐变还支持透明度，可用于创建淡入淡出效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>));</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="叠加渐变">叠加渐变</h3><p>可以将多个背景叠加起来以实现一些非常好看的效果。背景是从顶部到底部堆叠的，指定的第一个就是顶部。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)), <span class="built_in">url</span>(<span class="string">&quot;/img/demo.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="径向渐变">径向渐变</h2><p>径向渐变是从一个中心点向外辐射的，可以指定中心点的位置，还可以使其为圆形或者是椭圆形。</p><h3 id="基础渐变-2">基础渐变</h3><p>最基本的渐变类型，只需指定两种颜色即可。默认情况下，渐变的中心点是 <code>50% 50%</code> 的位置，径向渐变是匹配盒子的比例显示是圆形还是椭圆形。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(red, blue);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渐变位置">渐变位置</h3><p>可以用百分比或者绝对长度指定每个径向渐变颜色的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(red <span class="number">10px</span>, yellow <span class="number">30%</span>, <span class="number">#1e90ff</span> <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渐变中心">渐变中心</h3><p>可以使用关键字、百分比或者绝对长度、长度以指定渐变的中心。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(at <span class="number">0%</span> <span class="number">30%</span>, red <span class="number">10px</span>, yellow <span class="number">30%</span>, <span class="number">#1e90ff</span> <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渐变大小">渐变大小</h3><p>径向渐变可以指定渐变的大小，通过 <code>closest-corner</code>、<code>closest-side</code>、<code>farthest-corner</code> 和 <code>farthest-side</code>，其中 <code>farthest-corner</code> 是默认值。圆的大小为长度，椭圆则是长度和百分比。</p><ol><li><strong>closest-side</strong>：渐变结束形状如果是圆形，与容器距离渐变中心点最近的一边相切，如果是椭圆，则与距离渐变中心点最近的垂直或水平边相切。</li><li><strong>closest-corner</strong>：渐变结束形状与容器距离渐变中心点最近的一个角相交。</li><li><strong>farthest-side</strong>：渐变结束形状与容器距离渐变中心点最远的一个角相交。</li><li><strong>farthest-corner</strong>：默认值，渐变的结束形状与容器距离渐变中心点最远的一个角相交。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle closest-side, red <span class="number">10px</span>, yellow <span class="number">30%</span>, <span class="number">#1e90ff</span> <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(8)-表格</title>
    <link href="/2024/06/29/CSS%E5%AD%A6%E4%B9%A0(8)-%E8%A1%A8%E6%A0%BC/"/>
    <url>/2024/06/29/CSS%E5%AD%A6%E4%B9%A0(8)-%E8%A1%A8%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<p>利用 HTML <code>table</code>元素创建的表格，虽然易于使用和访问，但是在屏幕上的呈现并不太好</p><span id="more"></span><h1>表格</h1><h2 id="表格布局">表格布局</h2><p>默认的表格样式看起来很拥挤，很难阅读，我们可以通过 <strong>table-layout</strong> 属性来设置布局，它使表的表现形式更好预测</p><p><strong>属性值</strong>：</p><ol><li><strong>auto</strong>：默认情况下，大多数浏览器使用自动表格布局算法。表格及其单元格的宽度会根据内容自动调整大小</li><li><strong>fixed</strong>：表格和列的宽度是由 <code>table</code> 和 <code>col</code> 元素的宽度或第一行单元格的宽度来设置的。后续行中的单元格不会影响列的宽度</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">table-layout</span>: fixed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格边框">表格边框</h2><p><strong>border-collapse</strong> 属性用来决定表格的边框是分开的还是合并的。在分隔模式下，相邻的单元格都拥有独立的边框。在合并模式下，相邻单元格共享边框。</p><p><strong>属性值</strong>：</p><ol><li><strong>collapse</strong>：相邻的单元格共用同一条边框</li><li><strong>separate</strong>：默认值。每个单元格拥有独立的边框</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">table-layout</span>: fixed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="样式化表格">样式化表格</h2><h3 id="标题">标题</h3><p>我们可以通过<strong>caption-side</strong>属性设置标题在表格的放置位置</p><p><strong>属性值</strong>：</p><ol><li><strong>top</strong>：标题置于表格上方</li><li><strong>bottom</strong>：标题置于表格下方</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">table-layout</span>: fixed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">caption-side</span>: bottom</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>title<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="斑马纹">斑马纹</h3><p><code>:nth-child</code>选择器用于选择特定的子元素。它也可以用一个公式作为参数，来选择一个元素序列。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">table-layout</span>: fixed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">caption-side</span>: bottom</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ff33cc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#e495e4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>title<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(7)-列表</title>
    <link href="/2024/06/28/CSS%E5%AD%A6%E4%B9%A0(7)-%E5%88%97%E8%A1%A8/"/>
    <url>/2024/06/28/CSS%E5%AD%A6%E4%B9%A0(7)-%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>列表的行为表现跟其他任何文本其实差不多，但需要了解一些专门用于列表的 CSS 样式</p><span id="more"></span><h1>列表</h1><p>无序、有序和描述列表，它们都具有相似的样式特性，而某些特性却又各不相同。</p><ol><li><code>&lt;ul&gt;</code>和<code>&lt;ol&gt;</code>元素含有 <code>16px</code> 的顶部和底部的<strong>margin</strong>和 <code>40px</code> 的<strong>padding-left</strong></li><li><code>&lt;li&gt;</code>元素默认是没有设置间距的</li><li><code>&lt;dl&gt;</code>元素含有 <code>16px</code> 的顶部和底部的<strong>margin</strong>，但不含内边距</li><li><code>&lt;dd&gt;</code>元素含有 <code>40px</code> 的<strong>margin-left</strong></li></ol><h2 id="列表间距">列表间距</h2><p>通过 <strong>line-height</strong> 属性设置列表项之间的垂直间距</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表符号">列表符号</h2><h3 id="符号样式">符号样式</h3><p>通过 <strong>list-style-type</strong> 属性设置列表符号的类型</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：不显示列表项的标记</li><li><strong>disc</strong>：实心圆点</li><li><strong>circle</strong>：空心圆点</li><li><strong>square</strong>：实心方块</li><li><strong>decimal</strong>：十进制阿拉伯数字</li><li><strong>lower-roman</strong>：小写罗马数字</li><li><strong>upper-roman</strong>：大写罗马数字</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ol</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style-type</span>: disc;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="符号位置">符号位置</h3><p><strong>list-style-position</strong>属性设置在每个列表项开始之前，列表符号是出现在列表项内，还是出现在其外</p><p><strong>属性值</strong>：</p><ol><li><strong>inside</strong>：使项目符号位于列表项内</li><li><strong>outside</strong>：使项目符号位于列表项之外</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.in</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style-position</span>: inside;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.out</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style-position</span>: outside;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;in&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;out&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义符号">自定义符号</h3><p><strong>list-style-image</strong>属性允许对于列表符号使用自定义图片</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line"><span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">star.svg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="列表样式简写">列表样式简写</h2><p>通过简写属性<strong>list-style</strong>来设置上面的三个属性，属性值可以任意顺序排列，你可以设置一个，两个或者所有三个值。如果指定了 <code>type</code> 和 <code>image</code>，如果由于某种原因导致图像无法加载，则 <code>type</code> 将用作回退。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: square;</span><br><span class="line">    <span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">example.png</span>);</span><br><span class="line">    <span class="attribute">list-style-position</span>: inside;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line"><span class="attribute">list-style</span>: square <span class="built_in">url</span>(<span class="string">example.png</span>) inside;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="管理计数">管理计数</h2><p>可以为<code>&lt;ol&gt;</code>有序列表设置计数规则</p><p><strong>属性</strong>：</p><ol><li><strong>start</strong>：一个整数值属性，指定了列表编号的起始值。此属性的值应为阿拉伯数字，不管<strong>list-style-type</strong>设置的是什么类型</li><li><strong>reversed</strong>：使列表反向计数</li></ol><p>也可以为<code>&lt;ol&gt;</code>元素中的<code>&lt;li&gt;</code>元素指定数值</p><p><strong>属性</strong>：</p><ol><li><strong>value</strong>：设置列表项指定数值</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">“3”</span> <span class="attr">reversed</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(6)-链接</title>
    <link href="/2024/06/27/CSS%E5%AD%A6%E4%B9%A0(6)-%E9%93%BE%E6%8E%A5/"/>
    <url>/2024/06/27/CSS%E5%AD%A6%E4%B9%A0(6)-%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>有效地使用伪类去修饰链接的状态，为链接添加样式来实现常用的功能（如导航菜单和选项卡）。</p><span id="more"></span><h1>链接</h1><h2 id="链接状态">链接状态</h2><p>链接存在不同的状态，每一个状态都可以用对应的伪类来应用样式：</p><ol><li><strong>hover</strong>：元素在其鼠标悬停时，使用<code>:hover()</code>伪类来应用样式</li><li><strong>focus</strong>：被选中的链接（比如通过键盘<code>Tab</code>键移动到这个链接），使用<code>:focus()</code>伪类来应用样式</li><li><strong>link</strong>：未被访问的链接，使用<code>:link()</code>伪类来应用样式</li><li><strong>visited</strong>：以访问过的链接，使用<code>:visited()</code>伪类来应用样式</li><li><strong>active</strong>：被激活时的链接，使用<code>:active()</code>伪类来应用样式</li></ol><h2 id="默认样式">默认样式</h2><ol><li>链接以下划线表示</li><li>未访问链接为蓝色</li><li>已访问链接为紫色</li><li>悬停链接时，鼠标指针会变成一个小手图标</li><li>聚焦链接的周围有一个轮廓</li></ol><h2 id="修改样式">修改样式</h2><h3 id="链接下划线">链接下划线</h3><p>通过<strong>text-decoration</strong>属性可以删除或修改链接的下划线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链接颜色">链接颜色</h3><p>通过<strong>color</strong>属性改变链接文字的颜色，通过<strong>background-color</strong>属性改变链接的背景颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#6900ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#6900ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#a5c300</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#bae498</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#cdfeaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#6900ff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#cdfeaa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="光标类型">光标类型</h3><p>通过<strong>cursor</strong>属性改变鼠标光标悬停在元素上时的样式</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：无指针渲染</li><li><strong>default</strong>：默认指针，通常是箭头</li><li><strong>help</strong>：指示帮助</li><li><strong>pointer</strong>：悬浮于连接上时，通常为手</li><li><strong>not-allowed</strong>：不能执行</li><li><strong>grab</strong>：可抓取</li><li><strong>zoom-in</strong>：放大</li><li><strong>zoom-out</strong>：缩小</li></ol><h3 id="文字轮廓">文字轮廓</h3><p>通过<strong>outline</strong>属性改变文字的轮廓，轮廓有点像边框，唯一的区别是边框占用了盒模型的空间，而轮廓没有</p><p><strong>属性值</strong>：</p><ol><li><strong>color</strong>：轮廓的颜色</li><li><strong>style</strong>：轮廓的样式，和<strong>border</strong>一致</li><li><strong>width</strong>：轮廓的宽度</li></ol><h2 id="样式应用">样式应用</h2><p>链接的样式规则需要按照顺序书写，因为链接的样式是建立在另一个样式之上的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(5)-文本和字体</title>
    <link href="/2024/06/26/CSS%E5%AD%A6%E4%B9%A0(5)-%E6%96%87%E6%9C%AC%E5%92%8C%E5%AD%97%E4%BD%93/"/>
    <url>/2024/06/26/CSS%E5%AD%A6%E4%B9%A0(5)-%E6%96%87%E6%9C%AC%E5%92%8C%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<p>元素中的文本是布置在元素的内容框中，通过使用 CSS 设置文本样式和字体。</p><span id="more"></span><h1>文本和字体</h1><p>用于样式文本的 CSS 属性通常可以分为两类</p><ol><li><strong>字体样式</strong>:：作用于字体的属性，会直接应用到文本中，比如使用哪种字体，字体的大小是怎样的，字体是粗体还是斜体等等。</li><li><strong>文本布局风格</strong>: 作用于文本的间距以及其他布局功能的属性，比如，允许操纵行与字之间的空间，以及在内容框中，文本如何对齐。</li></ol><h2 id="字体">字体</h2><p>字体的属性可以通过 <strong>font</strong> 的简写方式来设置</p><h3 id="font-family">font-family</h3><p>使用<strong>font-family</strong>属性设置文本的字体</p><h4 id="默认字体">默认字体</h4><ol><li>serif：衬线字体</li><li>sans-serif：无衬线字体</li><li>monospace：等宽字体，指包含的全部字符的宽度相同的字体</li><li>cursive：手写字体</li><li>fantasy：装饰字体</li></ol><h4 id="字体栈">字体栈</h4><p>由于无法保证在网页上使用的字体的可用性，可以提供一个<strong>字体栈</strong>，这样的话，浏览器就有多种字体可以选择了。只需包含一个 <strong>font-family</strong> 属性，其值由几个用逗号分离的字体名称组成。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="font-size">font-size</h3><p>使用 <strong>font-size</strong>属性来控制文本元素的大小</p><ol><li><strong>px</strong>：将像素的值赋予给文本，这是一个绝对单位</li><li><strong>em</strong>：当前元素的父元素上设置的字体大小</li><li><strong>rem</strong>：HTML 中的根元素的字体大小</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2.6rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.4rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="font-style">font-style</h3><p>使用 <strong>font-style</strong> 属性设置文本是否应采用斜体。</p><ol><li><strong>normal</strong>：将文本设置为普通字体</li><li><strong>italic</strong>：文本设置为斜体版本</li><li><strong>oblique</strong>：将普通文本倾斜的样式应用到文本中</li></ol><h3 id="font-weight">font-weight</h3><p>利用<strong>font-weight</strong>属性，设置文字的粗体大小。此属性接受关键字值（normal、bold）、相对关键字值（lighter、bolder）和数值（100 到 900）。</p><ol><li><strong>normal</strong>和<strong>bold</strong>分别等同于数值 400 和 700。</li><li><strong>lighter</strong>和<strong>bolder</strong>将当前元素的粗体设置为比其父元素粗体更细或更粗一步。</li></ol><h2 id="文本">文本</h2><h3 id="行高">行高</h3><p><strong>line-height</strong>属性是指文本行基线之间的距离，指定<strong>line-height</strong>可以用来增加文本行之间的垂直间隔</p><h3 id="水平对齐">水平对齐</h3><p><strong>text-align</strong>影响文本的水平对齐方式，只应用于块级元素，默认值为left。</p><ol><li><strong>left</strong>：左对齐文本</li><li><strong>right</strong>：右对齐文本</li><li><strong>center</strong>：居中文字</li><li><strong>justify</strong>：两端对齐，使文本展开，改变单词之间的差距，使所有文本行的宽度相同。</li></ol><h3 id="垂直对齐">垂直对齐</h3><p><strong>vertical-align</strong>属性只应用于行内元素，影响文本垂直方向对齐。</p><ol><li><strong>baseline</strong>：基线对齐，默认元素的基线与其父元素的基线对齐</li><li><strong>sub</strong>：下标对齐，元素的基线与其父元素的下标基线对齐</li><li><strong>super</strong>：上标对齐，元素的基线与其父元素的上标基线对齐</li><li><strong>top</strong>：顶端对齐，将元素的顶部与整行的顶部对齐</li><li><strong>text-top</strong>：文字顶端对齐，将元素的顶部与父元素的字体顶部对齐</li><li><strong>middle</strong>：居中对齐，将元素的中点与父元素基线对齐再加上x-height/2</li><li><strong>bottom</strong>：底端对齐，将元素的底部与整行的底部对齐</li><li><strong>text-bottom</strong>：文字底端对齐，将元素的底部与父元素的字体底部对齐</li></ol><h3 id="字母和单词间距">字母和单词间距</h3><h4 id="单词间距">单词间距</h4><p><strong>word-spacing</strong> 属性设置文本中的单词与单词之间的间距。</p><h4 id="字母间距">字母间距</h4><p><strong>letter-spacing</strong> 属性设置文本中的字母与字母之间的间距。</p><h3 id="文本转换">文本转换</h3><p>使用 <strong>text-transform</strong> 属性来处理文本的大小写</p><ol><li><strong>none</strong>：对文本不做任何改动</li><li><strong>uppercase</strong>：将文本转换为全部大写字符</li><li><strong>lowercase</strong>：将文本转换为全部小写字符</li><li><strong>capitalize</strong>：只对每个单词的首字母大写</li></ol><h3 id="文本装饰">文本装饰</h3><p>使用 <strong>text-decoration</strong> 属性来处理文本的装饰</p><ol><li><strong>none</strong>：取消已经存在的任何文本装饰</li><li><strong>underline</strong>：文本下划线</li><li><strong>overline</strong>：文本上划线</li><li><strong>line-through</strong>：穿过文本的线</li></ol><p><strong>text-decoration</strong>属性有更具体的详细写法：</p><ol><li><strong>text-decoration-line</strong>：指定在文本何方增加装饰线</li><li><strong>text-decoration-color</strong>：用于设置text-decoration-line中所有装饰的颜色</li><li><strong>text-decoration-style</strong>：接受 <strong>solid、double、dotted、dashed和wavy</strong>关键字，用于描述装饰线的类型</li><li><strong>text-decoration-thickness</strong>：接受长度值，描述装饰线的宽度</li></ol><h3 id="文本缩进">文本缩进</h3><p>使用 <strong>text-indent</strong> 向文本块添加缩进，属性采用长度或所在块宽度的百分比。</p><h3 id="文本溢出">文本溢出</h3><p>使用 <strong>text-overflow</strong> 指定隐藏内容的呈现方式。</p><ol><li><strong>clip</strong>：在溢出点截断文本</li><li><strong>ellipsis</strong>：在溢出点显示省略号</li></ol><h3 id="空格换行">空格换行</h3><p>使用<strong>white-space</strong>属性处理元素中的空白和换行。</p><ol><li><strong>normal</strong>：空格合并，换行会被当作空格来处理，允许自动换行</li><li><strong>nowrap</strong>：空格合并，换行会被当作空格来处理，不允许自动换行</li><li><strong>pre</strong>：空格保留，换行保留，不允许自动换行</li><li><strong>pre-wrap</strong>：空格保留，换行保留，允许自动换行</li><li><strong>pre-line</strong>：空格合并，换行保留，允许自动换行</li><li><strong>break-spaces</strong>：空格保留，换行保留，允许自动换行</li></ol><h3 id="单词拆分">单词拆分</h3><p>使用<strong>word-break</strong>更改文本在溢出时如何换行</p><ol><li><strong>normal</strong>：整个单词不拆分，直接换行</li><li><strong>break-all</strong>：将单词拆分，直到行尾再换行</li></ol><h3 id="文本方向">文本方向</h3><p>使用<strong>direction</strong>设置文本方向，<strong>ltr</strong>（从左到右）或 <strong>rtl</strong>（从右到左）</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(4)-值与单位</title>
    <link href="/2024/06/25/CSS%E5%AD%A6%E4%B9%A0(4)-%E5%80%BC%E4%B8%8E%E5%8D%95%E4%BD%8D/"/>
    <url>/2024/06/25/CSS%E5%AD%A6%E4%B9%A0(4)-%E5%80%BC%E4%B8%8E%E5%8D%95%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<p>CSS 中使用的每个属性都允许拥有一个或一组值。</p><span id="more"></span><h1>值与单位</h1><p>CSS 中的值类型是一种定义了一些可使用的值的集合的方式。</p><h2 id="数字、长度、百分比">数字、长度、百分比</h2><h3 id="数字">数字</h3><p>css中有两类数字，整数和小数，这些数字可以作为其他值类型的基础，在某些情况下也可以直接作为属性的值。</p><h3 id="长度">长度</h3><p>CSS 中有两种类型的长度——相对长度和绝对长度。</p><h4 id="绝对长度单位">绝对长度单位</h4><p>它们与其他任何东西都没有关系，通常被认为总是相同的大小。</p><table><thead><tr><th>单位</th><th>名称</th><th>等价换算</th></tr></thead><tbody><tr><td>cm</td><td>厘米</td><td>1cm = 37.8px = 25.2/64in</td></tr><tr><td>mm</td><td>毫米</td><td>1mm = 0.1cm</td></tr><tr><td>Q</td><td>四分之一毫米</td><td>1Q = 0.25mm = 0.025cm</td></tr><tr><td>in</td><td>英寸</td><td>1in = 2.54cm = 96px</td></tr><tr><td>pc</td><td>派卡</td><td>1pc = 1/6 in = 16px</td></tr><tr><td>pt</td><td>点</td><td>1pt = 1/72 in</td></tr><tr><td>px</td><td>像素</td><td>1px = 1/96 in</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="相对长度单位">相对长度单位</h4><p>相对长度单位是相对于其他某些东西的。例如：</p><ul><li><code>em</code> 和 <code>rem</code> 分别相对于父元素和根元素的字体大小。</li><li><code>vh</code> 和 <code>vw</code> 分别相对于视口的高度和宽度。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">article</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>第二段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="百分比">百分比</h3><p>百分比是相对于其他值设置的。可以是从父元素继承的值，也可以是祖先元素的一个值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.px</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: sienna;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.percent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;px&quot;</span>&gt;</span>px box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;percent&quot;</span>&gt;</span>percent box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="颜色">颜色</h2><p>在 CSS 中，相同的颜色值可以在任何地方使用，无论你指定的是文本颜色、背景颜色还是其他颜色。</p><h3 id="颜色关键字">颜色关键字</h3><p>假如只需要从很小的基本颜色集中选择就足够，可以通过使用你想要的颜色名即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="十六进制颜色">十六进制颜色</h3><p>由#和6个十六进制的数字组成，每个十六进制数字都可以取 0 到 f（代表 15）之间的 16 个值中的一个，每对值表示一个通道（红色、绿色、蓝色），每个通道指定 256 个可用值中的任意一个（16 x 16 = 256）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#c55da1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RGB">RGB</h3><p>RGB 值是一个函数<code>rgb()</code>，他有三个参数，表示颜色的红色、绿色和蓝色，与十六进制相似，但是他的取值范围是由0-255的十进制数字表示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">197</span>, <span class="number">93</span>, <span class="number">161</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以向 <code>rgb()</code> 传递第四个参数，它代表颜色的 alpha 通道，控制不透明度。如果你把这个值设置为 <code>0</code>，它将使颜色完全透明，而 <code>1</code> 将使它完全不透明。介于两者之间的值会给你带来不同级别的透明度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">197</span>, <span class="number">93</span>, <span class="number">161</span>, <span class="number">0.8</span>);</span><br></pre></td></tr></table></figure><h3 id="HSL">HSL</h3><p>HSL值是一个函数<code>hsl()</code>，他有三个参数，色调、饱和度和亮度值</p><ol><li><strong>色调</strong>：颜色的底色，这个值在 0 和 360 之间</li><li><strong>饱和度</strong>：它的值为 0–100%，其中 0 为无颜色（它将显示为灰色阴影），100% 为全色饱和度</li><li><strong>亮度</strong>：它的值为 0–100%，其中 0 表示没有光（它将完全显示为黑色），100% 表示完全亮（它将完全显示为白色）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">321</span>, <span class="number">47%</span>, <span class="number">57%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就像 <code>rgb()</code> 一样，你可以向 <code>hsl()</code> 传递一个 alpha 参数来指定不透明度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">321</span>, <span class="number">47%</span>, <span class="number">57%</span>, <span class="number">0.8</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(3)-层叠和继承</title>
    <link href="/2024/06/24/CSS%E5%AD%A6%E4%B9%A0(3)-%E5%B1%82%E5%8F%A0%E5%92%8C%E7%BB%A7%E6%89%BF/"/>
    <url>/2024/06/24/CSS%E5%AD%A6%E4%B9%A0(3)-%E5%B1%82%E5%8F%A0%E5%92%8C%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<p>层叠和继承——这些概念决定着如何将 CSS 应用到 HTML 中，以及如何解决冲突。</p><span id="more"></span><h1>层叠和继承</h1><h2 id="层叠">层叠</h2><p>层叠简单来说，就是 CSS 规则的顺序很重要，用于解决CSS规则产生的冲突。有三个因素需要考虑：</p><ol><li><strong>资源顺序</strong></li><li><strong>优先级</strong></li><li><strong>重要程度</strong></li></ol><h3 id="资源顺序">资源顺序</h3><p>如果你有超过一条规则，而且都是相同的权重，那么最后面的规则会应用。可以理解为后面的规则覆盖前面的规则，直到最后一个开始设置样式。资源顺序仅在规则的优先级相同时才体现出来。</p><h3 id="优先级">优先级</h3><p>有些规则在最后出现，但是却应用了前面的具有冲突的规则，这是因为前面的有更高的<strong>优先级</strong>。优先级用于决定当多个规则匹配同一个元素时，哪一个规则应用于该元素。优先级是根据选择器的类型计算的。</p><p>我们使用0-0-0-0来表示千，百，十，个位；</p><ul><li><p>通配选择器，个位得0分；</p></li><li><p>元素和伪元素选择器，个位得1分；</p></li><li><p>类、伪类和属性选择器，十位得1分；</p></li><li><p>ID选择器，百位得1分；</p></li></ul><p>否定（<code>:not()</code>）和任意匹配（<code>:is()</code>）伪类本身对优先级没有影响，但它们的参数则会带来影响。参数中，对优先级算法有贡献的参数的优先级的最大值将作为该伪类选择器的优先级。</p><h3 id="重要程度">重要程度</h3><ol><li><strong>内联样式</strong>：即 <strong>style</strong> 属性内的样式声明，优先于所有普通的样式，无论其优先级如何。这样的声明没有选择器，它的优先级可以理解为 1-0-0-0；即无论选择器中有多少个 ID，它总是比其他任何优先级的权重都要高。</li><li><strong>!important</strong>：可以覆盖所有上面所有优先级计算，需要很小心的使用。</li></ol><h2 id="继承">继承</h2><p>继承需要在上下文中去理解，一些设置在父元素上的 CSS 属性是可以被子元素继承的，有些则不能。CSS 为控制继承提供了五个特殊的通用属性值。每个 CSS 属性都接收这些值。</p><ol><li><strong>inherit</strong>：使子元素属性和父元素相同，实际上就是“开启继承”</li><li><strong>initial</strong>：将元素的属性值设置为该属性的初始值</li><li><strong>revert</strong>：将元素的属性值设置为浏览器的默认样式</li><li><strong>unset</strong>：将属性重置为自然值，也就是如果属性是自然继承那么就是 <strong>inherit</strong>，否则和 <strong>initial</strong> 一样</li></ol><h3 id="重置所有属性值">重置所有属性值</h3><p>CSS 的简写属性 <strong>all</strong> ，它的值是（inherit、initial、unset、revert）中的任意一个，将元素继承属性的值重置</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(2)-选择器</title>
    <link href="/2024/06/23/CSS%E5%AD%A6%E4%B9%A0(2)-%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2024/06/23/CSS%E5%AD%A6%E4%B9%A0(2)-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>CSS 选择器用来指定网页上我们想要样式化的 HTML 元素，通过 CSS 选择器可以很精细的处理需要样式化的元素。</p><span id="more"></span><h1>选择器</h1><p>CSS 选择器是 CSS 规则的第一部分。它是元素和其他部分组合起来告诉浏览器哪个 HTML 元素应当是被选为应用规则中的 CSS 属性值的方式。选择器所选择的元素，叫做“选择器的对象”。</p><h2 id="通配选择器">通配选择器</h2><p>显示为一个星号，这个选择器可以与任何元素匹配，就像是一个通配符。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="元素选择器">元素选择器</h2><p>元素选择器也叫做标签选择器或者是类型选择器，HTML 元素的名字就是元素选择器的名字</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类选择器">类选择器</h2><p>类选择器以一个句点（.）开头，会选择文档中应用了这个类的所有元素。</p><p><strong>特点</strong>：</p><ol><li>一个元素可以应用多个类选择器</li><li>一个类选择器也可以在多个元素中应用</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">backgournd-<span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ID选择器">ID选择器</h2><p>ID选择器以<code>#</code>开头，在一个HTML文档中，ID选择器的id有且仅能使用一次</p><p><strong>特点</strong>：</p><ol><li>一个元素只有一个<strong>id</strong>属性</li><li><strong>id</strong>属性的值在一个 HTML 文档中唯一</li></ol><h2 id="属性选择器">属性选择器</h2><p>属性选择器查找具有特定 HTML 属性或具有特定 HTML 属性值的元素。 用方括号 (<code>[ ]</code>) 将选择器括起来，指示 CSS 查找属性。</p><table><thead><tr><th style="text-align:left"><span style="display:inline-block; width: 160px">选择器</span></th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">[attribute]</td><td style="text-align:left">匹配带有一个名为<em>attribute</em>的属性的元素——方括号里的值。</td></tr><tr><td style="text-align:left">[attribute = value]</td><td style="text-align:left">匹配带有一个名为<em>attribute</em>的属性的元素，其值为<em>value</em>——引号中的字符串。</td></tr><tr><td style="text-align:left">[attribute ~= value]</td><td style="text-align:left">匹配带有一个名为<em>attribute</em>的属性的元素，其值有一个或者更多，至少有一个和<em>value</em>匹配。</td></tr><tr><td style="text-align:left">[attribute ^= value]</td><td style="text-align:left">匹配带有一个名为<em>attribute</em>属性的元素，其值开头为<em>value</em>子字符串。</td></tr><tr><td style="text-align:left">[attribute $= value]</td><td style="text-align:left">匹配带有一个名为<em>attribute</em>属性的元素，其值结尾为<em>value</em>子字符串</td></tr><tr><td style="text-align:left">[attribute *= value]</td><td style="text-align:left">匹配带有一个名为<em>attribute</em>属性的元素，其值的字符串中的任何地方，至少出现了一次<em>value</em>子字符串。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//demo [attribute] [attribute = value] [attribute ~= value]</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;a b&quot;</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-attr">[class]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-attr">[class=<span class="string">&quot;a&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-attr">[class~=<span class="string">&quot;a&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//demo [attribute ^= value] [attribute $= value] [attribute *= value]</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;ab&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;ba&quot;</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bcab&quot;</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-attr">[class^=<span class="string">&quot;a&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-attr">[class$=<span class="string">&quot;a&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-attr">[class*=<span class="string">&quot;a&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="伪类">伪类</h2><p>伪类是选择器的一种，伪类选择器始终以一个冒号(<code>:</code>)开始。它用于选择处于特定状态的元素。</p><h3 id="用户行为伪类">用户行为伪类</h3><ol><li><code>:hover</code>：设置元素在其鼠标悬停时的 CSS 样式</li><li><code>:focus</code>：设置元素在其拥有输入焦点时的 CSS 样式</li><li><code>:link</code>：设置 a 元素在未被访问前的 CSS 样式</li><li><code>:visited</code>：设置 a 元素在其链接地址已被访问过时的 CSS 样式</li><li><code>:active</code>：设置元素在被用户激活时的 CSS 样式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Hover over me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: rebeccapurple;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:hotpink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文档结构伪类">文档结构伪类</h3><ol><li><code>:first-child</code>：第一个子元素</li><li><code>:last-child</code>：最后一个子元素</li><li><code>:nth-child(n)</code>：正着数第几个子元素，n可以是数字，也可以是关键字（odd 奇数，even 偶数），或者是公式</li><li><code>:nth-last-child</code>(n)：倒着数第几个子元素，n可以是数字，也可以是关键字（odd 奇数，even 偶数），或者是公式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第二段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="伪元素">伪元素</h2><p>伪元素表现得是像往标记文本中加入全新的 HTML 元素一样，而不是向现有的元素上应用类。伪元素开头为双冒号（<code>::</code>）。</p><ol><li><code>::first-letter</code>：元素的第一个字母。</li><li><code>::first-line</code>：包含此伪元素的元素的第一行。</li><li><code>::before</code>：出现在原有元素的实际内容之前</li><li><code>::after</code>：出现在原有元素的实际内容之后</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;text&quot;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: goldenrod;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关系选择器">关系选择器</h2><h3 id="后代选择器">后代选择器</h3><p>用单个空格（&quot; &quot;）字符组合两个选择器，匹配的目标元素是其他元素的后代，只要是后代即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第二段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子代选择器">子代选择器</h3><p>子代关系选择器是个大于号（<code>&gt;</code>），只会在选择器选中直接子元素的时候匹配。继承关系上更远的后代则不会匹配。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第二段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第三段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &gt; <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="相邻兄弟选择器">相邻兄弟选择器</h3><p>相邻兄弟选择器是个加号（<code>+</code>），匹配的目标元素紧跟在其他元素后面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第二段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通用兄弟选择器">通用兄弟选择器</h3><p>如果想选中一个元素的兄弟元素，即使它们不直接相邻，可以使用通用兄弟关系选择器（<code>~</code>）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>分隔文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第二段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> ~ <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(1)-CSS介绍</title>
    <link href="/2024/06/22/CSS%E5%AD%A6%E4%B9%A0(1)-CSS%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/06/22/CSS%E5%AD%A6%E4%B9%A0(1)-CSS%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p>层叠样式表-----<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets，CSS用来指定文档如何展示给用户的一门语言——如网页的样式、布局、等等。</p><span id="more"></span><h1>CSS语法</h1><p>CSS 是一门基于规则的语言，你能定义用于你的网页中特定元素样式的一组规则。CSS由2个部分组成：</p><ol><li><strong>属性</strong>：可读的标识符，指示想要更改的样式特征。</li><li><strong>值</strong>：每个指定的属性都有一个值，这个值表示如何对属性施加样式。</li></ol><p>当一个属性与一个值配对时，这种配对被称为 <em>CSS 声明</em>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: blue;</span><br></pre></td></tr></table></figure><p>CSS 声明可以在 <em>CSS 声明块</em>中找到。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS 声明块与选择器配对，生成 <em>CSS 规则集</em>（或称 <em>CSS 规则</em>）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>CSS引用方式</h1><h2 id="外部样式表">外部样式表</h2><p>外部样式表在一个单独的扩展名为 .css 的文件中包含 CSS。这是将 CSS 应用到文档中最常见和最有用的方法。你可以将一个 CSS 文件链接到多个网页上，用同一个 CSS 样式表为所有网页确定样式。使用 HTML <code>&lt;link&gt; </code>元素来链接外部样式表文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的 CSS 测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是我的第一个 CSS 示例<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内部样式表">内部样式表</h2><p>内部样式表在 HTML 文档内。创建一个内部样式表，要把 CSS 放置在包含在 HTML <code>&lt;head&gt;</code> 元素中的 <code>&lt;style&gt;</code> 元素内。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的 CSS 测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是我的第一个 CSS 示例<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内联样式">内联样式</h2><p>内联样式是影响单个 HTML 元素的 CSS 声明，包含在元素的 style 属性中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的 CSS 测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;background-color: yellow;border: 1px solid black;&quot;</span>&gt;</span></span><br><span class="line">        Hello World!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>这是我的第一个 CSS 示例<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>注释</h1><p>CSS 中的注释以 <code>/*</code> 开头，以 <code>*/</code> 结尾。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* .special &#123;</span></span><br><span class="line"><span class="comment">    color: red;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(16)-Web Worker</title>
    <link href="/2024/06/21/HTML%E5%AD%A6%E4%B9%A0(16)-Web%20Worker/"/>
    <url>/2024/06/21/HTML%E5%AD%A6%E4%B9%A0(16)-Web%20Worker/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。</p><span id="more"></span><h1>Web Worker</h1><p>Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p><h2 id="主线程阻塞">主线程阻塞</h2><p>当页面中有JavaScript代码在执行且耗时过长，会阻塞UI更新</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">fib</span>(n - <span class="number">1</span>) + <span class="title function_">fib</span>(n - <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fib</span>(<span class="number">45</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    el.<span class="property">innerHTML</span> = <span class="string">&#x27;Hello Web Worker&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">appendChild</span>(el);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Worker创建">Worker创建</h2><p>主线程采用<code>new</code>命令，调用<code>Worker()</code>构造函数，新建一个 Worker 线程。</p><p><strong>注意</strong>：</p><ol><li><strong>同源策略</strong>：Worker线程运行的脚本必须和主线程的脚本文件同源</li><li><strong>DOM限制</strong>：Worker无法读取主线程所在页面的DOM对象，也无法使用document、window、parent对象，可以使用navigator、location对象</li><li><strong>文件限制</strong>：Worker线程无法读取本地文件（file://）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(aURL, options);</span><br></pre></td></tr></table></figure><p><strong>属性</strong>：</p><ol><li><strong>aURL</strong>：Worker将执行的脚本的URL</li><li><strong>options</strong>：创建对象实例时设置的选项属性的对象</li></ol><h2 id="Worker通信">Worker通信</h2><p>主线程与 Worker 之间通信采用的是消息传递机制。</p><h3 id="主线程">主线程</h3><p>主线程调用<code>worker.postMessage()</code>方法，向 Worker 发消息，<code>worker.postMessage()</code>方法的参数，就是主线程传给 Worker 的数据。主线程通过<code>worker.onmessage</code>指定监听函数，接收子线程发回来的消息，也可以通过<code>worker.addEventListener()</code>监听。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;worker.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">worker.<span class="title function_">postMessage</span>(<span class="string">&quot;Hello Worker!&quot;</span>);</span><br><span class="line"></span><br><span class="line">worker.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">worker.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Worker线程">Worker线程</h3><p><code>self</code>代表子线程自身，即子线程的全局对象。与主线程基本一致，worker线程调用<code>postMessage()</code>方法，向 Main 发消息，通过<code>onmessage</code>或<code>addEventListener()</code>指定监听函数，接收主线程发回来的消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="title function_">postMessage</span>(<span class="string">&quot;Hello Main!&quot;</span>);</span><br><span class="line"></span><br><span class="line">self.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="错误处理">错误处理</h2><p>主线程可以监听 Worker 是否发生错误。如果发生错误，Worker 会触发主线程的<code>error</code>事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">worker.<span class="title function_">onerror</span>(<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">worker.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Worker销毁">Worker销毁</h2><p><code>worker.terminate() </code>是在主线程中调用的方法，用于立即终止 Worker 线程。当你调用<code>terminate()</code>时，<strong>Worker 线程会被强制停止，它不会有机会完成当前正在执行的任务或进行清理工作</strong>。这是主线程对 Worker 线程的一种单向控制。</p><p><code>self.close() </code>是在 Worker 线程内部调用的方法，用于优雅地关闭 Worker 线程。当你从 Worker 线程内部调用<code>close()</code>时，<strong>Worker 线程会完成当前正在执行的任务，然后关闭自己</strong>。这种方式允许 Worker 线程在关闭前进行必要的清理工作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主线程</span></span><br><span class="line">worker.<span class="title function_">terminate</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Worker 线程</span></span><br><span class="line">self.<span class="title function_">close</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(15)-Canvas</title>
    <link href="/2024/06/20/HTML%E5%AD%A6%E4%B9%A0(15)-Canvas/"/>
    <url>/2024/06/20/HTML%E5%AD%A6%E4%B9%A0(15)-Canvas/</url>
    
    <content type="html"><![CDATA[<p>除了使用SVG绘制矢量图形，我们也可以使用canvas在浏览器绘制2D图形。</p><span id="more"></span><h1>Canvas</h1><p><code>&lt;canvas&gt;</code>元素用于在浏览器上绘制图形，但<code>&lt;canvas&gt;</code>元素只是图形的容器，我们需要使用<strong>JavaScript</strong>才能真正绘制图形。</p><p><strong>属性</strong>：</p><ol><li><strong>width</strong>：<code>&lt;canvas&gt;</code>元素占用空间的宽度，以像素表示，默认300px。</li><li><strong>height</strong>：<code>&lt;canvas&gt;</code>元素占用空间的高度，以像素表示，默认150px。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="坐标定位">坐标定位</h2><p>canvas使用的坐标系统与SVG一致，以页面的左上角为(0, 0)坐标点为顶点，坐标以像素为单位，x 轴正方向是向右，y 轴正方向是向下。</p><p><img src="./imgs/HTML/canvas.png" alt=""></p><h2 id="基本用法">基本用法</h2><p><code>&lt;canvas&gt;</code>元素创造了一个固定大小的画布，可以用来绘制和处理要展示的内容。<code>&lt;canvas&gt;</code>起初是空白的。为了展示，首先脚本需要找到渲染上下文，然后在它的上面绘制。<code>&lt;canvas&gt;</code>元素通过<code>getContext()</code>方法获得渲染上下文和它的绘画功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="矩形">矩形</h2><h3 id="fillRect">fillRect</h3><p><code>fillRect()</code>方法绘制一个填充了内容的矩形，填充样式由当前的<code>fillStyle</code> 决定。</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：矩形起始点的x、y轴坐标</li><li><strong>width、height</strong>：矩形的宽度和高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><h3 id="strokeRect">strokeRect</h3><p><code>strokeRect()</code>方法绘制一个一个描边（轮廓）矩形，边框样式由当前的<code>strokeStyle</code> 决定。</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：矩形起始点的x、y轴坐标</li><li><strong>width、height</strong>：矩形的宽度和高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">strokeRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><h3 id="clearRect">clearRect</h3><p><code>clearRect()</code>方法用于清除画布上的一个矩形区域，清除后的矩形是透明的。</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：矩形起始点的x、y轴坐标</li><li><strong>width、height</strong>：矩形的宽度和高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">clearRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">280</span>, <span class="number">280</span>)</span><br></pre></td></tr></table></figure><h2 id="路径">路径</h2><p>图形的基本元素是路径。路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。</p><h3 id="beginPath">beginPath</h3><p>创建一个新的路径。</p><h3 id="closePath">closePath</h3><p>从当前点回到起始点，如果图形已经是封闭的或者只有一个点，那么此方法不会做任何操作。</p><h3 id="stroke">stroke</h3><p>根据当前的画线样式，绘制当前或已经存在的路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="fill">fill</h3><p>根据当前的填充样式，填充当前或已存在的路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure><h3 id="clip">clip</h3><p>将当前正在构建的路径转换为当前的裁剪路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">100</span>, <span class="number">75</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>);</span><br><span class="line">ctx.<span class="title function_">clip</span>();</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;orange&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h3 id="moveTo">moveTo</h3><p>将起始点移动到 (x，y) 坐标。</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：起始点的x轴和y轴的坐标。</li></ol><h3 id="lineTo">lineTo</h3><p>使用直线连接子路径的最后的点到 x，y 坐标。</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：终点的x轴和y轴的坐标。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">125</span>, <span class="number">125</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">125</span>, <span class="number">45</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">45</span>, <span class="number">125</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="arc">arc</h3><p>绘制圆弧路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">arc</span>(x, y, radius, startAngle, endAngle, anticlockwise);</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：圆弧中心的x轴和y轴的坐标。</li><li><strong>radius</strong>：圆弧的半径</li><li><strong>startAngle</strong>：圆弧的起始点，单位以弧度表示</li><li><strong>endAngle</strong>：圆弧的终点，单位以弧度表示</li><li><strong>anticlockwise</strong>：如果为 <code>true</code>，逆时针绘制圆弧，反之，顺时针绘制。</li></ol><p>圆弧起止点示意图如下：</p><p><img src="./imgs/HTML/canvas_arc.gif" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="rect">rect</h3><p>创建矩形路径</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：矩形起点的x、y轴坐标</li><li><strong>width、height</strong>：矩形的宽度和高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure><h3 id="quadraticCurveTo">quadraticCurveTo</h3><p>创建二次贝塞尔曲线路径</p><p><strong>参数</strong>：</p><ol><li><strong>cpx、cpy</strong>：控制点的x、y轴坐标</li><li><strong>x、y</strong>：终点的x、y轴坐标</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">20</span>, <span class="number">110</span>);</span><br><span class="line">ctx.<span class="title function_">quadraticCurveTo</span>(<span class="number">230</span>, <span class="number">150</span>, <span class="number">250</span>, <span class="number">20</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="bezierCurveTo">bezierCurveTo</h3><p>创建三次贝塞尔曲线路径</p><p><strong>参数</strong>：</p><ol><li><strong>cp1x、cp1y</strong>：第一个控制点的x、y轴坐标</li><li><strong>cp2x、cp2y</strong>：第二个控制点的x、y轴坐标</li><li><strong>x、y</strong>：终点的x、y轴坐标</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">50</span>, <span class="number">20</span>);</span><br><span class="line">ctx.<span class="title function_">bezierCurveTo</span>(<span class="number">230</span>, <span class="number">30</span>, <span class="number">150</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h2 id="颜色和应用样式">颜色和应用样式</h2><h3 id="颜色">颜色</h3><h4 id="fillStyle">fillStyle</h4><p>设置图形的填充颜色。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure><h4 id="strokeStyle">strokeStyle</h4><p>设置图形轮廓的颜色。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="线条">线条</h3><h4 id="lineWidth">lineWidth</h4><p>设置线段宽度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">10</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h4 id="lineCap">lineCap</h4><p>设置线段末端的属性</p><p><strong>属性值</strong>：</p><ol><li><strong>butt</strong>：线段末端以方形结束</li><li><strong>round</strong>：线段末端以圆形结束</li><li><strong>square</strong>：线段末端以方形结束，增加了一个线段宽度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">15</span>;</span><br><span class="line">ctx.<span class="property">lineCap</span> = <span class="string">&quot;square&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h4 id="lineJoin">lineJoin</h4><p>定义两线相交拐点的类型</p><p><strong>属性值</strong>：</p><ol><li><strong>round</strong>：填充一个额外的，圆心在相连部分末端的扇形，绘制拐角的形状。圆角的半径是线段的宽度。</li><li><strong>bevel</strong>：在相连部分的末端填充一个额外的以三角形为底的区域。</li><li><strong>miter</strong>：通过延伸相连部分的外边缘，使其相交于一点，形成一个额外的菱形区域。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">20</span>;</span><br><span class="line">ctx.<span class="property">lineJoin</span> = <span class="string">&quot;round&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">200</span>, <span class="number">20</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">20</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h4 id="getLineDash">getLineDash</h4><p>获取当前的线段样式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">setLineDash</span>([<span class="number">5</span>, <span class="number">15</span>]);</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="title function_">getLineDash</span>());</span><br></pre></td></tr></table></figure><h4 id="setLieDash">setLieDash</h4><p>设置当前的线段样式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">setLineDash</span>([<span class="number">5</span>, <span class="number">15</span>]);</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h4 id="lineDashOffset">lineDashOffset</h4><p>设置虚线偏移量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">setLineDash</span>([<span class="number">4</span>, <span class="number">16</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dashed line with no offset</span></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dashed line with offset of 4</span></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="property">lineDashOffset</span> = <span class="number">4</span>;</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="渐变">渐变</h3><h4 id="线性渐变">线性渐变</h4><p>根据两个给定的坐标值所构成的线段创建一个线性渐变。</p><p><strong>参数</strong>：</p><ol><li><strong>x0、y0</strong>：起点的x、y轴坐标</li><li><strong>x1、y1</strong>：终点的x、y轴坐标</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gradient = ctx.<span class="title function_">createLinearGradient</span>(<span class="number">20</span>, <span class="number">0</span>, <span class="number">220</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">0</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">0.5</span>, <span class="string">&quot;cyan&quot;</span>);</span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">1</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = gradient;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">200</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h4 id="径向渐变">径向渐变</h4><p>根据参数确定两个圆的坐标，绘制放射性渐变</p><p><strong>参数</strong>：</p><ol><li><strong>x0、y0</strong>：开始圆形的x、y轴坐标</li><li><strong>r0</strong>：开始圆形的半径</li><li><strong>x1、y1</strong>：结束圆形的x、y轴坐标</li><li><strong>r1</strong>：结束圆形的半径</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gradient = ctx.<span class="title function_">createRadialGradient</span>(<span class="number">110</span>, <span class="number">90</span>, <span class="number">30</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">70</span>);</span><br><span class="line"></span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">0</span>, <span class="string">&quot;pink&quot;</span>);</span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">0.9</span>, <span class="string">&quot;white&quot;</span>);</span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">1</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = gradient;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">160</span>, <span class="number">160</span>);</span><br></pre></td></tr></table></figure><h4 id="addColorStop">addColorStop</h4><p>指定渐变对象中的颜色和位置。</p><p><strong>参数</strong>：</p><ol><li><strong>offset</strong>：0-1之间的值</li><li><strong>color</strong>：颜色</li></ol><h3 id="图案">图案</h3><p>通过<code>createPattern()</code>方法来实现图案的效果</p><p><strong>参数</strong>：</p><ol><li><strong>image</strong>：重复图像的来源</li><li><strong>repetition</strong>：指定如何重复图像<ul><li><strong>repeat</strong>：沿 x、y 轴平铺</li><li><strong>repeat-x</strong>：沿 x 轴平铺</li><li><strong>repeat-y</strong>：沿 y 轴平铺</li><li><strong>no-repeat</strong>：不平铺</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&quot;canvas_createpattern.png&quot;</span>;</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ptrn = ctx.<span class="title function_">createPattern</span>(img, <span class="string">&quot;repeat&quot;</span>);</span><br><span class="line">    ctx.<span class="property">fillStyle</span> = ptrn;</span><br><span class="line">    ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="阴影">阴影</h3><h4 id="shadowColor">shadowColor</h4><p>设置阴影的颜色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">shadowColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><h4 id="shadowBlur">shadowBlur</h4><p>设置阴影的模糊效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">shadowColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="property">shadowBlur</span> = <span class="number">15</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><h4 id="shadowOffsetX">shadowOffsetX</h4><p>阴影水平方向的偏移量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">shadowColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="property">shadowOffsetX</span> = <span class="number">25</span>;</span><br><span class="line">ctx.<span class="property">shadowBlur</span> = <span class="number">10</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><h4 id="shadowOffsetY">shadowOffsetY</h4><p>阴影垂直方向的偏移量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">shadowColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="property">shadowOffsetY</span> = <span class="number">25</span>;</span><br><span class="line">ctx.<span class="property">shadowBlur</span> = <span class="number">10</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><h2 id="文本">文本</h2><h3 id="fillText">fillText</h3><p>在指定的坐标上绘制文本字符串，并使用当前的<strong>fillStyle</strong>对其进行填充。</p><p><strong>参数</strong>：</p><ol><li><strong>text</strong>：渲染上下文的文本字符串</li><li><strong>x</strong>：绘制文本的点的x轴坐标</li><li><strong>y</strong>：绘制文本的基线的y轴坐标</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&quot;Hello world&quot;</span>, <span class="number">50</span>, <span class="number">90</span>);</span><br></pre></td></tr></table></figure><h3 id="strokeText">strokeText</h3><p>在指定的坐标上绘制文本轮廓</p><p><strong>参数</strong>：</p><ol><li><strong>text</strong>：渲染上下文的文本字符串</li><li><strong>x</strong>：绘制文本的点的x轴坐标</li><li><strong>y</strong>：绘制文本的基线的y轴坐标</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">strokeText</span>(<span class="string">&quot;Hello world&quot;</span>, <span class="number">50</span>, <span class="number">90</span>);</span><br></pre></td></tr></table></figure><h3 id="font">font</h3><p>绘制文字时，当前字体样式的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;50px serif&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&quot;Hello world&quot;</span>, <span class="number">50</span>, <span class="number">90</span>);</span><br></pre></td></tr></table></figure><h3 id="textAlign">textAlign</h3><p>绘制文本时，文本水平方向的对齐方式。</p><p><strong>属性值</strong>：</p><ol><li><strong>left</strong>：文本左对齐</li><li><strong>right</strong>：文本右对齐</li><li><strong>center</strong>：文本居中对齐</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;30px serif&quot;</span>;</span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&quot;center&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">strokeRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&quot;Hello world&quot;</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br></pre></td></tr></table></figure><h3 id="textBaseline">textBaseline</h3><p>绘制文本时，文本垂直方向的对齐方式。</p><p><strong>属性值</strong>：</p><ol><li><strong>top</strong>：文本基线在文本块的顶部</li><li><strong>hanging</strong>：文本基线是悬挂基线</li><li><strong>middle</strong>：文本基线在文本块的中间</li><li><strong>alphabetic</strong>：文本基线是标准的字母基线</li><li><strong>ideographic</strong>：文本基线是字符本身的底部</li><li><strong>bottom</strong>：文本基线在文本块的底部</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> baselines = [</span><br><span class="line">    <span class="string">&quot;top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hanging&quot;</span>,</span><br><span class="line">    <span class="string">&quot;middle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;alphabetic&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ideographic&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bottom&quot;</span>,</span><br><span class="line">];</span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;36px serif&quot;</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"></span><br><span class="line">baselines.<span class="title function_">forEach</span>(<span class="function">(<span class="params">baseline, index</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">textBaseline</span> = baseline;</span><br><span class="line">    <span class="keyword">const</span> y = <span class="number">75</span> + index * <span class="number">75</span>;</span><br><span class="line">    ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">    ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, y + <span class="number">0.5</span>);</span><br><span class="line">    ctx.<span class="title function_">lineTo</span>(<span class="number">550</span>, y + <span class="number">0.5</span>);</span><br><span class="line">    ctx.<span class="title function_">stroke</span>();</span><br><span class="line">    ctx.<span class="title function_">fillText</span>(<span class="string">`Abcdefghijklmnop (<span class="subst">$&#123;baseline&#125;</span>)`</span>, <span class="number">0</span>, y);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="direction">direction</h3><p>绘制文本时，描述文本方向。</p><p><strong>属性值</strong>：</p><ol><li><strong>ltr</strong>：文本方向从左向右</li><li><strong>rtl</strong>：文本方向从右向左</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;48px serif&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&quot;Hi!&quot;</span>, <span class="number">150</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="property">direction</span> = <span class="string">&quot;rtl&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&quot;Hi!&quot;</span>, <span class="number">150</span>, <span class="number">130</span>);</span><br></pre></td></tr></table></figure><h2 id="图像">图像</h2><p>canvas 具有图像操控能力，可以用于动态图像合成或者成为图形的背景。引入图像到 canvas 里需要以下两步基本操作：</p><ol><li>获取一个图片</li><li>使用<code>drawImage()</code>函数将图片绘制到画布上</li></ol><p><strong>参数</strong>：</p><ol><li><strong>image</strong>：绘制到上下文的元素。允许任何的画布图像源</li><li><strong>dx、dy</strong>：<code>image</code>的左上角在目标画布上的 x、y轴坐标</li><li><strong>dWidth、dHeight</strong>：<code>image</code>在目标画布上绘制的宽度和高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">    ctx.<span class="title function_">moveTo</span>(<span class="number">30</span>, <span class="number">96</span>);</span><br><span class="line">    ctx.<span class="title function_">lineTo</span>(<span class="number">70</span>, <span class="number">66</span>);</span><br><span class="line">    ctx.<span class="title function_">lineTo</span>(<span class="number">103</span>, <span class="number">76</span>);</span><br><span class="line">    ctx.<span class="title function_">lineTo</span>(<span class="number">170</span>, <span class="number">15</span>);</span><br><span class="line">    ctx.<span class="title function_">stroke</span>();</span><br><span class="line">&#125;;</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&quot;demo.png&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="状态">状态</h2><h3 id="save">save</h3><p>保存canvas的所有状态，canvas状态存储在栈中，当<code>save()</code>方法被调用后，当前的状态就被推送到栈中保存</p><h3 id="restore">restore</h3><p>恢复canvas到最近保存的状态，如果没有使用<code>save()</code>方法保存状态，就不会生效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">150</span>, <span class="number">150</span>); <span class="comment">// 使用默认设置绘制一个矩形</span></span><br><span class="line">ctx.<span class="title function_">save</span>(); <span class="comment">// 保存默认状态</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#09F&quot;</span>; <span class="comment">// 在原有配置基础上对颜色做改变</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">15</span>, <span class="number">15</span>, <span class="number">120</span>, <span class="number">120</span>); <span class="comment">// 使用新的设置绘制一个矩形</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">save</span>(); <span class="comment">// 保存当前状态</span></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#FFF&quot;</span>; <span class="comment">// 再次改变颜色配置</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">30</span>, <span class="number">30</span>, <span class="number">90</span>, <span class="number">90</span>); <span class="comment">// 使用新的配置绘制一个矩形</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">restore</span>(); <span class="comment">// 重新加载之前的颜色状态</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">45</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">60</span>); <span class="comment">// 使用上一次的配置绘制一个矩形</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">restore</span>(); <span class="comment">// 加载默认颜色配置</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">30</span>, <span class="number">30</span>); <span class="comment">// 使用加载的配置绘制一个矩形</span></span><br></pre></td></tr></table></figure><h2 id="变形">变形</h2><h3 id="translate">translate</h3><p>将 canvas 按原始 x 点的水平方向、原始 y 点的垂直方向进行<strong>平移变换</strong></p><p><img src="./imgs/HTML/canvas_translate.png" alt=""></p><p><strong>参数</strong>：</p><ol><li><strong>x</strong>：水平方向的移动距离</li><li><strong>y</strong>：垂直方向的移动距离</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;grey&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">80</span>);</span><br><span class="line">ctx.<span class="title function_">translate</span>(<span class="number">110</span>, <span class="number">30</span>);</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">80</span>);</span><br></pre></td></tr></table></figure><h3 id="rotate">rotate</h3><p>将 canvas 按其起始点旋转</p><p><img src="./imgs/HTML/canvas_rotate.png" alt=""></p><p><strong>参数</strong>：</p><ol><li><strong>angle</strong>：顺时针旋转的弧度，可以使用公式：<code>degree * Math.PI / 180</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;gray&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">100</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">rotate</span>((<span class="number">45</span> * <span class="title class_">Math</span>.<span class="property">PI</span>) / <span class="number">180</span>);</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">100</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="scale">scale</h3><p>将 canvas 缩放</p><p><strong>参数</strong>：</p><ol><li><strong>x</strong>：水平方向的缩放因子</li><li><strong>y</strong>：垂直方向的缩放因子</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">scale</span>(<span class="number">0.1</span>, <span class="number">0.1</span>);</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><h3 id="transform">transform</h3><p>可以缩放、旋转、移动和倾斜上下文</p><p><strong>参数</strong>：</p><ol><li><strong>a</strong>：水平方向的缩放因子</li><li><strong>b</strong>：垂直方向的倾斜距离</li><li><strong>c</strong>：水平方向的倾斜距离</li><li><strong>d</strong>：垂直方向的缩放因子</li><li><strong>e</strong>：水平方向的移动距离</li><li><strong>f</strong>：垂直方向的移动距离</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">transform</span>(<span class="number">1</span>, <span class="number">0.2</span>, <span class="number">0.8</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h3 id="setTransform">setTransform</h3><p>重新设置当前的变形为初始值，并使用同样的变量调用 <code>transform() </code>方法。</p><h3 id="resetTransform">resetTransform</h3><p>设置当前的变形为初始值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">setTransform</span>(<span class="number">1</span>, <span class="number">0.2</span>, <span class="number">0.8</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">resetTransform</span>();</span><br></pre></td></tr></table></figure><h2 id="合成">合成</h2><p>在 canvas 中不仅可以在已有图形后面再画新图形，还可以用来遮盖指定区域，清除画布中的某些部分，通过<strong>globalCompositeOperation</strong>属性设置遮盖策略</p><p><strong>属性值</strong>：</p><ol><li><strong>source-over</strong>：在现有画布上绘制新图形</li><li><strong>source-in</strong>：在新形状和目标画布重叠的地方绘制新形状。其他的都是透明的。</li><li><strong>source-out</strong>：在不与现有画布内容重叠的地方绘制新图形</li><li><strong>source-atop</strong>：只在与现有画布内容重叠的地方绘制新图形。</li><li><strong>destination-over</strong>：在现有画布内容的后面绘制新的图形。</li><li><strong>destination-in</strong>：仅保留现有画布内容和新形状重叠的部分。其他的都是透明的。</li><li><strong>destination-out</strong>：仅保留现有画布内容和新形状不重叠的部分。</li><li><strong>destination-atop</strong>：仅保留现有画布内容和新形状重叠的部分。新形状是在现有画布内容的后面绘制的。</li><li><strong>lighter</strong>：两个重叠图形的颜色是通过颜色值相加来确定</li><li><strong>copy</strong>：只显示新图形</li><li><strong>xor</strong>：重叠处图形变为透明，其他地方正常绘制</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">globalCompositeOperation</span> = <span class="string">&quot;xor&quot;</span>;</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(14)-SVG</title>
    <link href="/2024/06/19/HTML%E5%AD%A6%E4%B9%A0(14)-SVG/"/>
    <url>/2024/06/19/HTML%E5%AD%A6%E4%B9%A0(14)-SVG/</url>
    
    <content type="html"><![CDATA[<p>矢量图形在很多情况下非常有用——它们拥有较小的文件尺寸，却高度可缩放，所以它们不会在镜头拉近或者放大图像时像素化。</p><span id="more"></span><h1>矢量图形</h1><p>在Web中，我们常和两种类型的图片打交道</p><ol><li><strong>位图</strong>：使用像素网格定义，位图文件精确包含每个像素的位置和色彩信息（bmp、png、jpg、gif）</li><li><strong>矢量图</strong>：使用算法来定义，矢量文件包含了图形和路径的定义（svg）</li></ol><h1>SVG</h1><p><strong>SVG</strong>是用于描述矢量图像的语言，它基于<strong>XML</strong>。它提供了许多不同的元素来定义要显示在图像中的形状。</p><p><strong>注意</strong>：</p><ol><li>绘制矢量图，需要从<code>&lt;svg&gt;</code>根元素开始</li><li>SVG文件规则是“后来居上”，越后面的元素越可见</li><li>可以使用<code>&lt;img&gt;</code>、<code>&lt;object&gt;</code>等元素引用</li></ol><h2 id="坐标定位">坐标定位</h2><p>SVG使用的坐标系统，以页面的左上角为(0, 0)坐标点为顶点，坐标以像素为单位，x 轴正方向是向右，y 轴正方向是向下。</p><p><img src="./imgs/HTML/svg.png" alt="svg"></p><h2 id="基本形状">基本形状</h2><h3 id="矩形">矩形</h3><p><code>rect</code>元素会在屏幕上绘制一个矩形</p><p><strong>属性</strong>：</p><ol><li><strong>x</strong>：矩形左上角的 x 坐标</li><li><strong>y</strong>：矩形左上角的 y 坐标</li><li><strong>width</strong>：矩形的宽度</li><li><strong>height</strong>：矩形的高度</li><li><strong>rx</strong>：圆角的 x 方位的半径</li><li><strong>ry</strong>：圆角的 y 方位的半径</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;60&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;10&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30&quot;</span> <span class="attr">height</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="圆形">圆形</h3><p><code>circle</code>元素会在屏幕上绘制一个圆形</p><p><strong>属性</strong>：</p><ol><li><strong>r</strong>：圆的半径</li><li><strong>cx</strong>：圆心的 x 坐标</li><li><strong>cy</strong>：圆心的 y 坐标</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;25&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;75&quot;</span> <span class="attr">r</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="椭圆">椭圆</h3><p><code>ellipse</code>元素会在屏幕上绘制一个椭圆</p><p><strong>属性</strong>：</p><ol><li><strong>rx</strong>：椭圆的 x 半径</li><li><strong>ry</strong>：椭圆的 y 半径</li><li><strong>cx</strong>：椭圆中心的 x 坐标</li><li><strong>cy</strong>：椭圆中心的 y 坐标</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">&quot;75&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;75&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;20&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="线条">线条</h3><p><code>line</code>元素会在屏幕上绘制一个直线</p><p><strong>属性</strong>：</p><ol><li><strong>x1</strong>：起点的 x 坐标</li><li><strong>y1</strong>：起点的 y 坐标</li><li><strong>x2</strong>：终点的 x 坐标</li><li><strong>y2</strong>：终点的 y 坐标</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;110&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;150&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="折线">折线</h3><p><code>polyline</code>元素会在屏幕上绘制一组连接在一起的直线</p><p><strong>属性</strong>：</p><ol><li><strong>points</strong>：点集数列，每个点必须包含2个数字，一个是x坐标，一个是y坐标，用逗号隔开，每个点的坐标用空白隔开</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;60, 110 65, 120 70, 115 75, 130 80, 125 85, 140 90, 135 95, 150 100, 145&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多边形">多边形</h3><p><code>polygon</code>元素会在屏幕上绘制一组连接在一起的直线，看起来与折线很像，但是<code>&lt;polygon&gt;</code>元素会在最后一个点自动回到第一个点，构成一个多边形。</p><p><strong>属性</strong>：</p><ol><li><strong>points</strong>：点集数列，每个点必须包含2个数字，一个是x坐标，一个是y坐标，用逗号隔开，每个点的坐标用空白隔开</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">&quot;50, 160 55, 180 70, 180 60, 190 65, 205 50, 195 35, 205 40, 190 30, 180 45, 180&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路径">路径</h2><p><code>&lt;path&gt;</code>元素是SVG形状中最强大的一个，他可以构建线条、曲线、弧形等等。</p><p><strong>属性</strong>：</p><ol><li><strong>d</strong>：一个“命令 + 参数”的序列</li></ol><h3 id="直线命令">直线命令</h3><h4 id="Move-To">Move To</h4><p>“Move To”命令。简称M，需要两个参数，分别是需要移动的点的x轴和y轴的坐标。M命令经常出现在路径的开始处，指明从何处开始画。</p><h4 id="Line-To">Line To</h4><p>“Line To”命令。简称L，需要两个参数，分别一个点的x轴和y轴的坐标。L 命令将会在当前位置和新位置之间画一条线段。</p><h4 id="H-V">H&amp;V</h4><p>H 绘制水平线。V 绘制垂直线。这两个命令都只带一个参数，标明在 x 轴或 y 轴移动到的坐标，因为它们都只在坐标轴的一个方向上移动。</p><h4 id="Z">Z</h4><p>Z 命令会从当前点画一条直线到路径的起点，尽管我们不总是需要闭合路径，但是它还是经常被放到路径的最后。另外，Z 命令不用区分大小写。</p><p><strong>注意</strong>：</p><ol><li>大写命令的参数指定明确的坐标点，小写命令的参数是相对于当前点需要移动多少的距离（反方向的距离是负数）</li><li>m命令是当前位置坐标加上参数的坐标，即为新起点的坐标</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 10 H 90 V 90 H 10 L 10 10&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 10 H 90 V 90 H 10 Z&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 10 h 80 v 80 h -80 Z&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="曲线命令">曲线命令</h3><h4 id="C">C</h4><p><strong>C</strong>命令会创建一个三次贝塞尔曲线，三次贝塞尔曲线需要4个坐标点位置，我们通过M命令设置了曲线的起点，因此还需要设置3组坐标参数</p><p><strong>参数</strong>：</p><ol><li><strong>x1、y1</strong>：起点的控制点</li><li><strong>x2、y2</strong>：终点的控制点</li><li><strong>x、y</strong>：曲线的终点</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 10 C 20 20, 40 20, 50 10&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="S">S</h4><p><strong>S</strong>命令也可以用来创建三次贝塞尔曲线，如果<strong>S</strong>命令跟在<strong>C</strong>或<strong>S</strong>命令后面，<strong>S</strong>命令曲线的起点是上一命令曲线的终点，<strong>S</strong>命令起点的控制点是上一命令终点控制点的中心对称点；如果<strong>S</strong>命令单独使用，前面没有<strong>C</strong>或<strong>S</strong>命令，那当前点（可能是曲线的起点）将作为起点的控制点。</p><p><strong>参数</strong>：</p><ol><li><strong>x2、y2</strong>：终点的控制点</li><li><strong>x、y</strong>：曲线的终点</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Q">Q</h4><p><strong>Q</strong>命令会创建一个二次贝塞尔曲线，二次贝塞尔曲线需要3个坐标点位置，我们通过M命令设置了曲线的起点，因此还需要设置2组坐标参数</p><p><strong>参数</strong>：</p><ol><li><strong>x1、y1</strong>：控制点</li><li><strong>x、y</strong>：曲线的终点</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 80 Q 95 10 180 80&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="T">T</h4><p><strong>T</strong>命令也可以用来创建二次贝塞尔曲线，如果<strong>T</strong>命令跟在<strong>Q</strong>或<strong>T</strong>命令后面，<strong>T</strong>命令曲线的起点是上一命令曲线的终点，<strong>T</strong>命令控制点是上一命令控制点的中心对称点；如果<strong>T</strong>命令单独使用，前面没有<strong>Q</strong>或<strong>T</strong>命令，那么控制点就会被认为和终点是同一个点，画出来的将是一条直线。</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：曲线的终点</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 80 Q 52.5 10, 95 80 T 180 80&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="A">A</h4><p><strong>A</strong>命令是创建弧形的命令，弧形可以视为圆形或椭圆形的一部分</p><p><strong>参数</strong>：</p><ol><li><strong>rx、ry</strong>：弧形的x轴和y轴半径</li><li><strong>x-axis-rotation</strong>：x轴旋转角度</li><li><strong>large-arc-flag</strong>：决定弧线是大于还是小于 180 度，0 表示小角度弧，1 表示大角度弧。</li><li><strong>sweep-flag</strong>：表示弧线的方向，0 表示从起点到终点沿逆时针画弧，1 表示从起点到终点沿顺时针画弧。</li><li><strong>x、y</strong>：弧形终点的x、y轴坐标</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;325&quot;</span> <span class="attr">height</span>=<span class="string">&quot;325&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 80 80</span></span></span><br><span class="line"><span class="string"><span class="tag">        A 45 45, 0, 0, 0, 125 125</span></span></span><br><span class="line"><span class="string"><span class="tag">        L 125 80 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 230 80</span></span></span><br><span class="line"><span class="string"><span class="tag">        A 45 45, 0, 1, 0, 275 125</span></span></span><br><span class="line"><span class="string"><span class="tag">        L 275 80 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 80 230</span></span></span><br><span class="line"><span class="string"><span class="tag">        A 45 45, 0, 0, 1, 125 275</span></span></span><br><span class="line"><span class="string"><span class="tag">        L 125 230 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;purple&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 230 230</span></span></span><br><span class="line"><span class="string"><span class="tag">        A 45 45, 0, 1, 1, 275 275</span></span></span><br><span class="line"><span class="string"><span class="tag">        L 275 230 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="填充和边框">填充和边框</h2><h3 id="填充">填充</h3><p><strong>fill</strong>属性设置对象内部的颜色</p><p><strong>fill-opacity</strong>属性控制填充色的不透明度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;purple&quot;</span> <span class="attr">fill-opacity</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="边框">边框</h3><p><strong>stroke</strong>属性设置绘制对象的线条的颜色</p><p><strong>stroke-opacity</strong>属性控制描边的不透明度</p><p><strong>stroke-width</strong>属性定义了描边的宽度</p><p><strong>stroke-linecap</strong>属性控制边框的形状（butt：直角，round：圆角）</p><p><strong>stroke-linejoin</strong>属性控制两条边框之间，用什么方式连接（miter：直角，round：圆角，bevel：折角）</p><p><strong>stroke-dasharray</strong>属性的参数是一组用逗号分隔的数字，每一组数字中，第一个表示填色区域的长度，第二个表示非填色区域的长度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke-opacity</span>=<span class="string">&quot;0.8&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;butt&quot;</span> <span class="attr">stroke-dasharray</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="渐变">渐变</h2><p>使用渐变需要给渐变内容指定一个<strong>id</strong>属性，否则文档内的其他元素就不能引用它，为了让渐变能重复使用，渐变内容需要定义在<code>&lt;defs&gt;</code>元素内，而不是定义在形状上面。</p><h3 id="线性渐变">线性渐变</h3><p>线性渐变沿着直线改变颜色，要插入一个线性渐变，需要在 SVG 文件的<code>&lt;defs&gt;</code>元素内部，创建一个<code>&lt;linearGradient&gt;</code>元素</p><p><strong>属性</strong>：</p><ol><li><strong>x1、x2、y1、y2</strong>：这些属性定义了渐变路线走向。渐变色默认是水平方向的，但是通过修改这些属性，就可以旋转该方向。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;Gradient1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">&quot;black&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">offset</span>=<span class="string">&quot;50%&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;15&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;15&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#Gradient1)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="径向渐变">径向渐变</h3><p>径向渐变与线性渐变相似，只是它是从一个点开始发散绘制渐变。创建径向渐变需要在文档的<code>&lt;defs&gt;</code>元素中添加一个<code>&lt;radiaGradient&gt;</code>元素</p><p><strong>属性</strong>：</p><ol><li><strong>fx、fy</strong>：径向渐变的起点圆的X、Y坐标</li><li><strong>cx、cy</strong>：径向渐变的终点圆的X、Y坐标</li><li><strong>r</strong>：径向渐变的终点圆的半径</li><li><strong>spreadMethod</strong>：表示渐变在边缘之外的表现<ul><li><strong>pad</strong>：渐变的最终颜色填充边缘以外的形状</li><li><strong>reflect</strong>：渐变在边缘以外反向重复</li><li><strong>repeat</strong>：渐变在边缘以外按原始顺序重复</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">&quot;RadialGradient1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">&quot;RadialGradient2&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;0.25&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;0.25&quot;</span> <span class="attr">r</span>=<span class="string">&quot;0.25&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rx</span>=<span class="string">&quot;15&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ry</span>=<span class="string">&quot;15&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">fill</span>=<span class="string">&quot;url(#RadialGradient1)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rx</span>=<span class="string">&quot;15&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ry</span>=<span class="string">&quot;15&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">fill</span>=<span class="string">&quot;url(#RadialGradient2)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渐变节点">渐变节点</h3><p>通过<code>&lt;stop&gt;</code>元素的<strong>offset</strong>和<strong>stop-color</strong>属性，可以说明在渐变的特定位置上应该是什么颜色，通过<strong>stop-opacity</strong>属性设置透明度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;yellow&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="遮罩">遮罩</h3><p>利用遮罩效果也能实现线性渐变效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;Gradient&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;white&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;white&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span> <span class="attr">id</span>=<span class="string">&quot;Mask&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#Gradient)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> <span class="attr">mask</span>=<span class="string">&quot;url(#Mask)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文本">文本</h2><p>利用<code>&lt;text&gt;</code>元素可以在图像中放置一些文本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="变形">变形</h2><p>通过<strong>transform</strong>属性可以实现变形操作</p><h3 id="平移">平移</h3><p><code>translate()</code>方法能把元素移动一段距离</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;10&quot;</span> <span class="attr">height</span>=<span class="string">&quot;10&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(30,40)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="旋转">旋转</h3><p><code>rotate()</code>方法能把元素旋转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;20&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;rotate(45)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="缩放">缩放</h3><p><code>scale()</code>方法能把元素缩放一定比例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;20&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;scale(.5)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="剪切">剪切</h2><p>使用<code>&lt;clipPath&gt;</code>元素能够实现剪切的效果，<code>&lt;clipPath&gt;</code>元素经常放在一个<code>&lt;defs&gt;</code>元素内。需要<strong>id</strong>属性和<strong>clip-path</strong>匹配，确定剪切元素的路径和被剪切元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">clipPath</span> <span class="attr">id</span>=<span class="string">&quot;cut-off-bottom&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">clipPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;100&quot;</span> <span class="attr">r</span>=<span class="string">&quot;100&quot;</span> <span class="attr">clip-path</span>=<span class="string">&quot;url(#cut-off-bottom)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(13)-嵌入</title>
    <link href="/2024/06/18/HTML%E5%AD%A6%E4%B9%A0(13)-%E5%B5%8C%E5%85%A5/"/>
    <url>/2024/06/18/HTML%E5%AD%A6%E4%B9%A0(13)-%E5%B5%8C%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>图片、多媒体等内容丰富了HTML页面，如何在HTML页面展示其他类型的内容。</p><span id="more"></span><h1>嵌入</h1><p>使用嵌入元素可以在网页上嵌入各种类型的内容，<code>&lt;iframe&gt;</code>元素用于嵌入其他网页，<code>&lt;embed&gt;</code>和<code>&lt;object&gt;</code>元素用于嵌入外部资源。</p><h2 id="iframe">iframe</h2><p><code>&lt;iframe&gt;</code>元素表示嵌套的浏览上下文，它能够将另一个HTML页面嵌入到当前页面中。</p><p><strong>属性</strong>：</p><ol><li><strong>src</strong>：被嵌套的页面的URL地址</li><li><strong>width</strong>和<strong>height</strong>：iframe的宽度和高度，默认是300*150</li><li><strong>allowfullscreen</strong>：设置为true时，通过调用**requestFullScreen()**方法激活全屏模式</li><li><strong>name</strong>：嵌入的浏览上下文的名称</li><li><strong>sandbox</strong>：控制应用于嵌入在 <code>&lt;iframe&gt;</code> 中的内容的限制（沙盒）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;https://example.org&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">&quot;iframe Example 1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="embed-和-object"><code>&lt;embed&gt;</code>和<code>&lt;object&gt;</code></h2><p><code>&lt;embed&gt;</code>和<code>&lt;object&gt;</code>元素用于嵌入外部资源。</p><h3 id="embed"><code>&lt;embed&gt;</code></h3><p><strong>属性</strong>：</p><ol><li><strong>src</strong>：被嵌套的资源的 URL。</li><li><strong>type</strong>：MIME 类型。</li><li><strong>width</strong>和<strong>height</strong>：资源显示的宽度和高度</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">type</span>=<span class="string">&quot;video/quicktime&quot;</span> <span class="attr">src</span>=<span class="string">&quot;movie.mov&quot;</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">height</span>=<span class="string">&quot;480&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="object"><code>&lt;object&gt;</code></h3><p><strong>属性</strong>：</p><ol><li><strong>data</strong>：一个合法的 URL 作为资源的地址，需要为 <strong>data</strong> 和 <strong>type</strong> 中至少一个设置值。</li><li><strong>type</strong>：<strong>data</strong> 指定的资源的 MIME 类型，需要为 <strong>data</strong> 和 <strong>type</strong> 中至少一个设置值。</li><li><strong>width</strong>和<strong>height</strong>：资源显示的宽度和高度</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">&quot;application/pdf&quot;</span> <span class="attr">data</span>=<span class="string">&quot;/media/examples/In-CC0.pdf&quot;</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(12)-拖放</title>
    <link href="/2024/06/17/HTML%E5%AD%A6%E4%B9%A0(12)-%E6%8B%96%E6%94%BE/"/>
    <url>/2024/06/17/HTML%E5%AD%A6%E4%B9%A0(12)-%E6%8B%96%E6%94%BE/</url>
    
    <content type="html"><![CDATA[<p><strong>HTML 拖放</strong>（Drag and Drop）接口使应用程序能够在浏览器中使用拖放功能。</p><span id="more"></span><h1>拖放</h1><p>用户可使用鼠标选择可拖拽（<em>draggable</em>）元素，将元素拖拽到可放置（<em>droppable</em>）元素，并释放鼠标按钮以放置这些元素。拖拽操作期间，会有一个可拖拽元素的半透明快照跟随着鼠标指针。</p><h2 id="拖放事件">拖放事件</h2><p>用户在拖拽操作期间，会触发一些拖放事件。</p><h3 id="选中">选中</h3><p>在HTML5标准中，为了使元素可拖动，需要把<strong>draggable</strong>属性设置为<strong>true</strong>。</p><p><strong>draggable</strong>属性：</p><ol><li><strong>true</strong>：可以拖动</li><li><strong>false</strong>：禁止拖动</li><li><strong>auto</strong>：跟随浏览器定义是否可以拖动</li></ol><h3 id="拖动和释放">拖动和释放</h3><p>用户操作拖放元素时，可以在<code>addEventListener()</code>方法中使用事件名称，也可以设置事件处理器属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&quot;drag&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line">ondrag = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>事件</th><th>on事件</th><th>触发时刻</th></tr></thead><tbody><tr><td>dragstart</td><td>ondragstart</td><td>当用户开始拖动一个元素时触发</td></tr><tr><td>drag</td><td>ondrag</td><td>当拖动元素时触发（可多次触发）</td></tr><tr><td>dragend</td><td>ondragend</td><td>当拖动操作结束时触发</td></tr><tr><td>dragenter</td><td>ondragenter</td><td>当拖拽元素到一个可释放目标时触发</td></tr><tr><td>dragover</td><td>ondragover</td><td>当元素被拖到一个可释放目标上时触发（可多次触发）</td></tr><tr><td>dragleave</td><td>ondragleave</td><td>当拖拽元素离开一个可释放目标时触发</td></tr><tr><td>drop</td><td>ondrop</td><td>当元素在可释放目标上被释放时触发</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropzone&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;draggable&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>这个 div 可以拖动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropzone&quot;</span> <span class="attr">id</span>=<span class="string">&quot;droptarget&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        user-select: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-id">#draggable</span> &#123;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">background</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.dropzone</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">background</span>: blueviolet;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.dropzone</span><span class="selector-class">.dragover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: purple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.dragging</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dragged;</span><br><span class="line"><span class="keyword">const</span> source = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;draggable&quot;</span>);</span><br><span class="line">source.<span class="title function_">addEventListener</span>(<span class="string">&quot;drag&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dragging&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">source.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragstart&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 保存被拖动元素的引用</span></span><br><span class="line">    dragged = event.<span class="property">target</span>;</span><br><span class="line">    <span class="comment">// 设置为半透明</span></span><br><span class="line">    event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;dragging&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">source.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragend&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 拖动结束，重置透明度</span></span><br><span class="line">    event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;dragging&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在放置目标上触发的事件 */</span></span><br><span class="line"><span class="keyword">const</span> target = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;droptarget&quot;</span>);</span><br><span class="line">target.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragover&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 阻止默认行为以允许放置</span></span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;, <span class="literal">false</span>,);</span><br><span class="line"></span><br><span class="line">target.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragenter&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在可拖动元素进入潜在的放置目标时高亮显示该目标</span></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;dropzone&quot;</span>)) &#123;</span><br><span class="line">    event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;dragover&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">target.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragleave&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在可拖动元素离开潜在放置目标元素时重置该目标的背景</span></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;dropzone&quot;</span>)) &#123;</span><br><span class="line">    event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;dragover&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">target.<span class="title function_">addEventListener</span>(<span class="string">&quot;drop&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 阻止默认行为（会作为某些元素的链接打开）</span></span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="comment">// 将被拖动元素移动到选定的目标元素中</span></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;dropzone&quot;</span>)) &#123;</span><br><span class="line">        event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;dragover&quot;</span>);</span><br><span class="line">        dragged.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(dragged);</span><br><span class="line">        event.<span class="property">target</span>.<span class="title function_">appendChild</span>(dragged);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Drag-Event">Drag Event</h2><p>当触发拖拽事件时候，会得到一个<strong>Event</strong>对象，这个<strong>Event</strong>对象其中包含这一些常用的属性：</p><ol><li><strong>target</strong>：为拖拽中的元素的指向</li><li><strong>clientX</strong>：当前鼠标的x点坐标</li><li><strong>clientY</strong>：当前鼠标的y点坐标</li><li><strong>dataTransfer</strong>：当一次拖拽开始发生的时候，会产生一个<strong>DataTransfer</strong>对象，这个<strong>DataTransfer</strong>对象于整个拖拽过程触发的事件共享。当这一次的拖拽行为<strong>结束之后</strong>，这个对象会被<strong>销毁</strong></li></ol><h2 id="DataTransfer">DataTransfer</h2><p><strong>DataTransfer</strong>对象用于保存拖动过程中的数据。它可以保存一项或多项数据，存放在<strong>Drag Event</strong>下的<strong>dataTransfer</strong>中。</p><h3 id="方法">方法</h3><ol><li><strong>setData</strong>：将拖动操作的拖动数据设置为指定的数据和类型</li><li><strong>getData</strong>：返回指定格式的数据，<strong>setData</strong>中数据格式一致</li><li><strong>clearData</strong>：删除给定类型的拖动操作的数据。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">drag</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    event.<span class="property">dataTransfer</span>.<span class="title function_">setData</span>(<span class="string">&quot;text&quot;</span>, event.<span class="property">target</span>.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drop</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="keyword">var</span> data = event.<span class="property">dataTransfer</span>.<span class="title function_">getData</span>(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">    event.<span class="property">target</span>.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性">属性</h3><ol><li><strong>dropEffect</strong>：获取当前选定的拖放操作的类型或将操作设置为新类型。</li><li><strong>effectAllowed</strong>： 指定拖放操作所允许的效果。<ul><li><em>none</em>：不允许放下</li><li><em>copy</em>：复制项出现在新位置</li><li><em>move</em>：被移动到新位置</li><li><em>all</em>：允许所有的操作</li></ul></li><li><strong>types</strong>：返回在dragstart事件中设置的拖动数据格式的数组。 格式顺序与拖动操作中包含的数据顺序相同。</li><li><strong>files</strong>：返回拖动操作中的文件列表。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">drag</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    event.<span class="property">dataTransfer</span>.<span class="property">effectAllowed</span> = <span class="string">&quot;move&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drop</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">dataTransfer</span>.<span class="property">dropEffect</span>)</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    event.<span class="property">dataTransfer</span>.<span class="property">dropEffect</span> = <span class="string">&quot;move&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(11)-Storage</title>
    <link href="/2024/06/16/HTML%E5%AD%A6%E4%B9%A0(11)-Storage/"/>
    <url>/2024/06/16/HTML%E5%AD%A6%E4%B9%A0(11)-Storage/</url>
    
    <content type="html"><![CDATA[<p>通过网络存储，网络应用程序可以在用户的浏览器中本地存储数据。</p><span id="more"></span><h1>Web Storage</h1><p>提供了浏览器可以存储键/值对的机制，其方式比使用<strong>cookie</strong>更直观。应用数据存储在本地，不会影响网站性能。</p><h2 id="sessionStorage">sessionStorage</h2><p>sessionStorage为每一个给定的源维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。</p><ol><li>sessionStorage仅为会话存储数据，这意味着数据将一直存储到浏览器（或选项卡）关闭。</li><li>数据不会被传输到服务器。</li><li>存储限额最大5MB</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据到 sessionStorage</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 获取数据</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 删除保存的数据</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 删除所有保存的数据</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><h2 id="localStorage">localStorage</h2><p>localStorage和sessionStorage一致，不同的是浏览器关闭并重新打开数据也仍然存在。</p><ol><li>存储的数据没有过期日期，只能通过 JavaScript、清除浏览器缓存或本地存储的数据来清除。</li><li>存储限额最大5MB</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据到 localStorage</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 localStorage 获取数据</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 localStorage 删除保存的数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 localStorage 删除所有保存的数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(10)-多媒体</title>
    <link href="/2024/06/15/HTML%E5%AD%A6%E4%B9%A0(10)-%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    <url>/2024/06/15/HTML%E5%AD%A6%E4%B9%A0(10)-%E5%A4%9A%E5%AA%92%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<p>多媒体有多种格式。它几乎可以是任何你能听到或看到的东西，如图像、音乐、声音、视频、唱片、电影、动画等等。</p><span id="more"></span><h1>多媒体</h1><h2 id="视频">视频</h2><p>借助<code>&lt;video&gt;</code>元素可以在HTML文档中嵌入一段视频。</p><p><strong>属性</strong>：</p><ol><li><strong>src</strong>：指向需要嵌入到网页中的视频资源</li><li><strong>controls</strong>：用户使用<strong>controls</strong>属性可以控制浏览器自带的视频控制界面</li><li><strong>width</strong>和<strong>height</strong>：视频的尺寸，无论怎么设置，视频都会保持自身原始纵横比，如果保持不住原始纵横比，视频边框会拉伸，未填充视频内容的部分，将会显示默认的背景颜色</li><li><strong>autoplay</strong>：视频自动播放</li><li><strong>loop</strong>：视频文件播放结束后再次开始播放</li><li><strong>muted</strong>：视频播放时，默认关闭声音</li><li><strong>poster</strong>：指向一个图片的URL，用于在视频播放前显示，当做预览或是广告</li><li><strong>preload</strong>：缓存文件<ul><li><strong>none</strong>：不缓存文件</li><li><strong>auto</strong>：页面加载后缓存文件</li><li><strong>metadata</strong>：仅缓存文件的元数据</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每种浏览器支持的文件格式和编解码器都有所不同，为了确保视频能在用户的浏览器上正常播放，需要提供多种格式的媒体文件。如果没有提供用户浏览器支持的视频格式，那么视频内容将无法播放。</p><p>将 <strong>src</strong> 属性从 <code>&lt;video&gt;</code> 元素中移除，将不同视频文件资源放在<code>&lt;source&gt;</code>元素中。每个<code>&lt;source&gt;</code>元素都含有<strong>type</strong>属性，这个属性是包含了<code>&lt;source&gt;</code>指定的<strong>MIME</strong>类型，浏览器通过检查这个属性来迅速找到支持的格式。如果没有添加<strong>type</strong>属性，浏览器会尝试加载每一个文件，直到找到一个能正确播放的格式，这样会消耗掉大量的时间和资源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video.webm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="视频文本">视频文本</h3><p>通过<code>&lt;track&gt;</code>元素加载一个<strong>vtt</strong>文件，可以做到给视频显示出字幕。</p><p><strong>属性</strong>：</p><ol><li><strong>kind</strong>：定义track应该如何使用，默认是subtitles<ul><li><strong>subtitles</strong>：字幕给看不懂的内容提供翻译（背景信息）</li><li><strong>captions</strong>：字幕提供音频的转录或翻译（静音场景）</li><li><strong>descriptions</strong>：视频内容的文本描述</li><li><strong>chapters</strong>：章节标题</li><li><strong>metadata</strong>：脚本使用，对用户不可见</li></ul></li><li><strong>label</strong>：给浏览器使用的track文本标题</li><li><strong>src</strong>：track文本资源的URL</li><li><strong>srclang</strong>：track文本数据的语言，如果<strong>kind</strong>属性被设置为<strong>subtitles</strong>，那么<strong>srclang</strong>必须定义</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video.webm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">track</span> <span class="attr">kind</span>=<span class="string">&quot;subtitles&quot;</span> <span class="attr">src</span>=<span class="string">&quot;video.vtt&quot;</span> <span class="attr">srclang</span>=<span class="string">&quot;zh&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Chinese&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="音频">音频</h2><p>借助<code>&lt;audio&gt;</code>元素可以在HTML文档中嵌入一段音频。</p><p><strong>属性</strong>：</p><ol><li><strong>src</strong>：指向需要嵌入到网页中的音频资源</li><li><strong>controls</strong>：用户使用<strong>controls</strong>属性可以控制浏览器自带的音频控制界面</li><li><strong>autoplay</strong>：音频自动播放</li><li><strong>loop</strong>：音频文件播放结束后再次开始播放</li><li><strong>muted</strong>：音频播放时，默认关闭声音</li><li><strong>preload</strong>：缓存文件<ul><li><strong>none</strong>：不缓存文件</li><li><strong>auto</strong>：页面加载后缓存文件</li><li><strong>metadata</strong>：仅缓存文件的元数据</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;audio&gt;</code>元素除了不能设置<strong>width</strong>和<strong>height</strong>，以及<strong>poster</strong>，其他与<code>&lt;video&gt;</code>元素几乎一致，<code>&lt;audio&gt;</code>元素也可以用<code>&lt;source&gt;</code>元素加载多个资源文件，便于浏览器选择其支持的格式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;audio.opus&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg; codecs=opus&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;audio.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg; codecs=vorbis&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(9)-表单</title>
    <link href="/2024/06/14/HTML%E5%AD%A6%E4%B9%A0(9)-%E8%A1%A8%E5%8D%95/"/>
    <url>/2024/06/14/HTML%E5%AD%A6%E4%B9%A0(9)-%E8%A1%A8%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<p>表单是用户和服务器之间交互的主要内容之一，表单允许用户输入数据，大多数情况下会将数据发送到web服务器进行处理和存储。</p><span id="more"></span><h1>表单</h1><p>表单是由一个或多个表单控件组成，这些控件可以是文本字段、选择框、按钮、复选框或单选按钮等等。</p><h2 id="form-元素"><code>&lt;form&gt;</code>元素</h2><p>创建一个HTML表单都必须从<code>&lt;form&gt;</code>元素开始，<code>&lt;form&gt;</code>元素包含各个表单控件，用于向 Web 服务器提交信息。</p><p><strong>属性</strong>：</p><ol><li><strong>action</strong>：表单提交的 URL</li><li><strong>method</strong>：浏览器使用哪种HTTP方法来提交表单</li></ol><h3 id="fieldset-和-legend-元素"><code>&lt;fieldset&gt;</code>和<code>&lt;legend&gt;</code>元素</h3><p>出于样式和语义的目的，<code>&lt;fieldset&gt;</code>元素用于对表单中的控件进行分组。</p><p><code>&lt;legend&gt;</code>元素用于表示父元素<code>&lt;fieldset&gt;</code>内容的标题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="label-元素"><code>&lt;label&gt;</code>元素</h3><p><code>&lt;label&gt;</code>元素用于表示表单中某个控件的说明。</p><p><strong>属性</strong></p><ol><li><strong>for</strong>：用于关联表单控件id属性的值，或者使用<code>&lt;label&gt;</code>元素直接包裹表单元素，也可以达到<strong>for</strong>属性的作用。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstName&quot;</span> <span class="attr">id</span>=<span class="string">&quot;firstName&quot;</span> /&gt;</span></span><br><span class="line">        or</span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            Last Name</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="input-元素"><code>&lt;input&gt;</code>元素</h3><p><code>&lt;input&gt;</code>元素可以让用户输入任何类型的数据，在<code>&lt;input&gt;</code>元素中，最重要的属性是<strong>type</strong>属性，<strong>type</strong>属性定义了<code>&lt;input&gt;</code>元素各种使用方式。</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>all</td><td>表单控件的类型</td></tr><tr><td>name</td><td>all</td><td>表单控件的名称</td></tr><tr><td>value</td><td>all</td><td>表单控件的初始值</td></tr><tr><td>disabled</td><td>all</td><td>表单控件是否禁用</td></tr><tr><td>autocomplete</td><td>除checkbox、radio、button、file、hidden以外均有效</td><td>自动补全</td></tr><tr><td>checked</td><td>checkbox、radio</td><td>控件是否选中</td></tr><tr><td>accept</td><td>file</td><td>可选择文件类型的列表</td></tr><tr><td>max</td><td>time、number、range</td><td>最大值</td></tr><tr><td>min</td><td>time、number、range</td><td>最小值</td></tr><tr><td>maxlength</td><td>text、search、url、tel、email、password</td><td>value的最大长度（字符数）</td></tr><tr><td>minlength</td><td>text、search、url、tel、email、password</td><td>value的最小长度（字符数）</td></tr><tr><td>multiple</td><td>email、file</td><td>是否多选</td></tr><tr><td>pattern</td><td>text、search、url、tel、email、password</td><td>为了使得 <code>value</code> 有效，必须符合的模式</td></tr><tr><td>placeholder</td><td>text、search、url、tel、email、password、number</td><td>当没有值设定时，出现在表单控件上的文字</td></tr><tr><td>readonly</td><td>除checkbox、radio、button、hidden、range、color以外均有效</td><td>如果存在，其中的值将不可编辑。</td></tr><tr><td>required</td><td>除button、hidden、range、color以外均有效</td><td>如果存在，一个值是必需的，或者必须勾选该值才能提交表格。</td></tr><tr><td>size</td><td>text、search、url、tel、email、password</td><td>控件的尺寸</td></tr><tr><td>step</td><td>time、number、range</td><td>有效的增量值</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单行文本框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 密码框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 隐藏框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;other-data&quot;</span> <span class="attr">value</span>=<span class="string">&quot;用户不可见数据&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单选框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 复选框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vegetable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;carrots&quot;</span> <span class="attr">checked</span> /&gt;</span>Carrots</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vegetable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;peas&quot;</span>  /&gt;</span>Peas</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 上传文件 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 邮箱输入框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">multiple</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 搜索框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;搜索&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 电话号码 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- URL字段 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数字输入框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;只能输入数字&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 滑块 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">id</span>=<span class="string">&quot;price&quot;</span> <span class="attr">min</span>=<span class="string">&quot;50000&quot;</span> <span class="attr">max</span>=<span class="string">&quot;500000&quot;</span> <span class="attr">step</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;250000&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 日期选择框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;datetime&quot;</span> <span class="attr">id</span>=<span class="string">&quot;datetime&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span> <span class="attr">id</span>=<span class="string">&quot;month&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span> <span class="attr">name</span>=<span class="string">&quot;week&quot;</span> <span class="attr">id</span>=<span class="string">&quot;week&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 颜色选择框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">id</span>=<span class="string">&quot;color&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="button-元素"><code>&lt;button&gt;</code>元素</h3><p><code>&lt;button&gt;</code>元素表示一个可点击的按钮。</p><p><strong>属性</strong>：</p><ol><li><strong>type</strong>：button 的类型<ul><li><strong>submit</strong>：按钮提交表单数据给服务器</li><li><strong>reset</strong>：按钮重置所有表单组件至初始值</li></ul></li><li><strong>formaction</strong>：按钮提交表单信息的URI，如果使用了该属性，将覆盖<code>&lt;form&gt;</code>元素的<strong>action</strong>属性</li><li><strong>formmethod</strong>：按钮提交表单使用的HTTP方法，，如果使用了该属性，将覆盖<code>&lt;form&gt;</code>元素的<strong>method</strong>属性</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>submit button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>reset button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本域">文本域</h3><p><code>&lt;textarea&gt;</code>元素表示文本域，文本域与单行文本框的区别在于，用户可以在要提交的数据中使用换行。</p><p><strong>属性</strong>：</p><ol><li><strong>rows</strong>：文本域指定的可见文本的行数，值为正整数，默认为2</li><li><strong>cols</strong>：文本域的可见宽度，以平均字符宽度为单位，值为正整数，默认为20</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="下拉框">下拉框</h3><p>下拉菜单是一种简单地让用户从许多不同选项中进行选择的控件，不占用用户界面太多空间。HTML 有两种下拉内容：一种是<strong>选择框</strong>、另外一种是<strong>自动补全框</strong>。</p><h4 id="选择框">选择框</h4><p>选择框是由<code>&lt;select&gt;</code>元素及一个或多个<code>&lt;option&gt;</code>子元素构成的，每个子元素指定了选择框的可能取值。</p><p><strong>属性</strong>：</p><ol><li><strong>multiple</strong>：在<code>&lt;select&gt;</code>元素设置<strong>multiple</strong>属性，选择框就允许用户选择多个选项</li><li><strong>size</strong>：控件中同时可见的行数</li><li><strong>value</strong>：在<code>&lt;option&gt;</code>元素设置<strong>value</strong>属性，当表单提交时也会提交这个选项对应的值，如果省略了<strong>value</strong>属性，<code>&lt;option&gt;</code>元素的内容会作为提交的值。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;banana&quot;</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;cherry&quot;</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;lemon&quot;</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;option&gt;</code>元素可以嵌套在<code>&lt;optgroup&gt;</code>元素中，从视觉上给选项做分组。在<code>&lt;optgroup&gt;</code>元素中，<strong>label</strong>属性的值在嵌套选项前显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;groups&quot;</span> <span class="attr">name</span>=<span class="string">&quot;groups&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;fruits&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;banana&quot;</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;cherry&quot;</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;lemon&quot;</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;vegetables&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;carrot&quot;</span>&gt;</span>Carrot<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;eggplant&quot;</span>&gt;</span>Eggplant<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;potato&quot;</span>&gt;</span>Potato<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自动补全框">自动补全框</h4><p>通过<code>&lt;datalist&gt;</code>元素以及<code>&lt;option&gt;</code>子元素为表单项提供推荐的自动补全值。<code>&lt;datalist&gt;</code> 元素需要指定一个<strong>id</strong>。<code>&lt;datalist&gt;</code>元素的<strong>id</strong>会绑定<code>&lt;input&gt;</code>元素的<strong>list</strong>属性，绑定之后<code>&lt;datalist&gt;</code>元素的选项就会被用来自动补全用户输入的文本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span>What&#x27;s your favorite fruit?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">list</span>=<span class="string">&quot;fruitOptions&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;fruitOptions&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(8)-表格</title>
    <link href="/2024/06/13/HTML%E5%AD%A6%E4%B9%A0(8)-%E8%A1%A8%E6%A0%BC/"/>
    <url>/2024/06/13/HTML%E5%AD%A6%E4%B9%A0(8)-%E8%A1%A8%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<p>表格是由行和列组成的结构化数据集（表格数据），它让你快速简单地查找某个表示不同类型数据之间的某种关系的值。</p><span id="more"></span><h1>表格</h1><p>在页面中展示一个包含数据的行和列组成的二维表格需要使用<code>&lt;table&gt;</code>元素。</p><h2 id="单元格">单元格</h2><p>在表格中，最小的内容容器是单元格，是通过<code>&lt;td&gt;</code>元素创建的（“td”即“table data”）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>first cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格行">表格行</h2><p>假设我们需要一行放置4个单元格，第5个单元格放置在第二行，就需要通过<code>&lt;tr&gt;</code>元素创建的（“tr”即“table row”）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>first cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>second cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>third cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>fourth cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表头单元格">表头单元格</h2><p>表格中的标题是特殊的单元格，通常在行或列的开始处。通常使用<code>&lt;th&gt;</code>元素创建（“th”即“table header”），<code>&lt;th&gt;</code>的用法和<code>&lt;td&gt;</code>一样，只是视觉和语义上做了区分。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="单元格合并">单元格合并</h2><p>将多个单元格合并成一个单元格，可以通过<strong>colspan</strong>和<strong>rowspan</strong>属性实现。<strong>colspan</strong>属性用于合并单行中的两个或多个相邻单元格，<strong>rowspan</strong>属性用于跨行合并单元格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>class<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>student<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义列样式">定义列样式</h2><p>如果我们需要给某一列数据增加一些样式表示数据重要性，可以通过使用<code>&lt;colgroup&gt;</code>和<code>&lt;col&gt;</code>元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">colgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> <span class="attr">style</span>=<span class="string">&quot;background-color: yellow&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格标题">表格标题</h2><p>通过<code>&lt;caption&gt;</code>元素可以给表格增加一个标题，标题包含对表格内容的描述。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>成绩表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格结构">表格结构</h2><p>当表格的结构很复杂时，我们可以通过<code>&lt;thead&gt;</code>、<code>&lt;tbody&gt;</code>、<code>&lt;tfoot&gt;</code>元素将表中的内容标记为表头、表体、表尾三部分。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>年龄表<span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(7)-图片</title>
    <link href="/2024/06/12/HTML%E5%AD%A6%E4%B9%A0(7)-%E5%9B%BE%E7%89%87/"/>
    <url>/2024/06/12/HTML%E5%AD%A6%E4%B9%A0(7)-%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>如果只使用文本，网页就会变得非常无聊，在HTML文档中插入图片可以改善网页的设计和外观。</p><span id="more"></span><h1>图片</h1><p>在网页上添加图片，需要使用<code>&lt;img&gt;</code>元素，这个元素是空元素。</p><h2 id="src属性">src属性</h2><p>图片的URL，这个属性对<code>&lt;img&gt;</code>元素来说是必需的。</p><h2 id="alt属性">alt属性</h2><p>图片的文字描述，用于在图片无法显示或不能被看到的情况。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;demo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;这是一个示例图片&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="图片尺寸">图片尺寸</h2><p>用<strong>width</strong>和<strong>height</strong>属性来指定你的图片的宽度和高度。它们的值是不带单位的整数，以像素为单位表示图像的宽度和高度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;demo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;这是一个示例图片&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="图片标题">图片标题</h2><p>提供图片更多的信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;demo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是一个示例图片&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="延迟加载">延迟加载</h2><p><strong>loading</strong>属性告知浏览器应当如何加载该图片，默认<code>loading='eager'</code>表示图片会在HTML解析后立即加载，设置<code>loading='lazy'</code>，浏览器会延迟加载图片，直到图片有可能进入视图窗口位置才会加载。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;demo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;这是一个示例图片&quot;</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="响应式图片">响应式图片</h2><p>在不同的屏幕尺寸、分辨率或具有其他类似特性的设备上都呈现良好的图片。</p><h3 id="sizes属性">sizes属性</h3><p>定义了一组媒体条件（例如屏幕宽度）并且指明当某些媒体条件为真时，什么样的图片尺寸是最佳选择，如果没有设置<strong>secret</strong>属性，那么<strong>sizes</strong>属性也不起作用。</p><ol><li>媒体条件</li><li>当媒体条件为真，图片的宽度</li></ol><h3 id="secret属性">secret属性</h3><p>定义了浏览器可选择的图片集合以及每个图片的大小，每张图片信息的设置和前一个用逗号隔开，每个设置要写两个值</p><ol><li>指向图片的URL</li><li>可选项<ul><li>图片固有宽度（正整数，后面跟<code>w</code>符号），宽度除以<strong>sizes</strong>属性给出的宽度大小来计算得到有效的像素密度，即<code>x</code>符号等价的值</li><li>像素密度（正浮点数，后面跟<code>x</code>符号）</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">srcset</span>=<span class="string">&quot;demo-480w.jpg 480w, demo-800w.jpg 800w&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">&quot;(max-width: 600px) 480px,</span></span></span><br><span class="line"><span class="string"><span class="tag">         800px&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;demo-800w.jpg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">&quot;这是一个示例图片&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(6)-链接</title>
    <link href="/2024/06/11/HTML%E5%AD%A6%E4%B9%A0(6)-%E9%93%BE%E6%8E%A5/"/>
    <url>/2024/06/11/HTML%E5%AD%A6%E4%B9%A0(6)-%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>超链接使我们能够将我们的文档链接到任何其他文档（或其他资源），也可以链接到文档的指定部分，我们可以在一个简单的网址上提供应用程序。几乎任何网络内容都可以转换为链接，点击（或激活）超链接将使网络浏览器转到另一个网址。</p><span id="more"></span><h1>链接</h1><p>通过将文本或其他内容包裹在<code>&lt;a&gt;</code>元素内，并给它一个包含网址的<strong>href</strong>属性就可以创建一个基本链接。</p><h2 id="href属性">href属性</h2><p>链接所指向的URL，链接不限于基于 HTTP 的 URL，可以使用浏览器支持的任何 URL 协议。</p><h3 id="链接绝对地址">链接绝对地址</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mozilla.com&quot;</span>&gt;</span> Mozilla <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接相对地址">链接相对地址</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;//example.com&quot;</span>&gt;</span>相对于协议的URL<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/zh-CN/docs/Web/HTML&quot;</span>&gt;</span>相对于同源的URL<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./p&quot;</span>&gt;</span>相对路径的URL<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接文档某一段">链接文档某一段</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//链接相同页面</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span>&gt;</span>邮寄地址<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    请将信件邮寄至</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#address&quot;</span>&gt;</span>我们的地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//链接不同页面</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span>&gt;</span>邮寄地址<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    请将信件邮寄至</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;contacts.html#address&quot;</span>&gt;</span>我们的地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//链接到顶部</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>back top<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">or</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>back top<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接邮箱地址">链接邮箱地址</h3><p><strong>href</strong>属性可以以<code>mailto:</code>开头，用于发送电子邮件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:nowhere@mozilla.org&quot;</span>&gt;</span>Send email to nowhere<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接电话号码">链接电话号码</h3><p><strong>href</strong>属性可以以<code>tel:</code>开头，用于拨打电话</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:12345678910&quot;</span>&gt;</span>phone number<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="title属性">title属性</h2><p>包含关于链接的补充信息，例如页面包含什么样的信息或需要注意的事情。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  我创建了一个指向</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mozilla.org/zh-CN/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;了解 Mozilla 使命以及如何参与贡献的最佳站点。&quot;</span>&gt;</span></span><br><span class="line">    Mozilla主页</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  的超链接。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="download属性">download属性</h2><p>浏览器将链接的URL视为下载资源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://download.mozilla.org/?product=firefox-latest-ssl&amp;os=win64&amp;lang=zh-CN&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">download</span>=<span class="string">&quot;firefox-latest-64bit-installer.exe&quot;</span>&gt;</span></span><br><span class="line">  下载最新的 Firefox 中文版 - Windows（64 位）</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="target属性">target属性</h2><p>指定在何处显示链接的URL。</p><ol><li><strong>_self</strong>：当前页面加载</li><li><strong>_blank</strong>：新标签页打开</li><li><strong>_parent</strong>：当前浏览环境的父级浏览上下文，如果没有父级，等同于 <strong><code>_self</code></strong></li><li><strong>_top</strong>：最高的浏览上下文，如果没有祖先，等同于 <strong><code>_self</code></strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mozilla.org/zh-CN/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    Mozilla主页</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(5)-列表</title>
    <link href="/2024/06/10/HTML%E5%AD%A6%E4%B9%A0(5)-%E5%88%97%E8%A1%A8/"/>
    <url>/2024/06/10/HTML%E5%AD%A6%E4%B9%A0(5)-%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>HTML为我们提供了多种标记列表的不同方法。有序列表 (<code>&lt;ol&gt;</code>)、无序列表 (<code>&lt;ul&gt;</code>) 和描述列表 (<code>&lt;dl&gt;</code>)。</p><span id="more"></span><h1>列表</h1><h2 id="有序列表">有序列表</h2><p>有序列表需要按照项目的顺序列出来，<code>&lt;ol&gt;</code>元素通常表示有序列表，<code>&lt;ol&gt;</code>的唯一子级是一个或多个<code>&lt;li&gt;</code>元素。</p><p><strong>属性：</strong></p><ol><li><strong>type</strong>：用于设置编号类型<ul><li><code>a</code> 表示小写英文字母编号</li><li><code>A</code> 表示大写英文字母编号</li><li><code>i</code> 表示小写罗马数字编号</li><li><code>I</code> 表示大写罗马数字编号</li><li><code>1</code> 表示数字编号（默认）</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Blender<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Toaster<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Vacuum<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="无序列表">无序列表</h2><p>无序列表用于标记列表项目顺序无关紧要的列表，<code>&lt;ul&gt;</code>元素通常表示有序列表，<code>&lt;ul&gt;</code>的唯一子级是一个或多个<code>&lt;li&gt;</code>元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Blender<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Toaster<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Vacuum<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表项">列表项</h2><p><code>&lt;li&gt;</code>元素用于表示列表中的项目。它必须包含在一个父元素中：有序列表(<code>&lt;ol&gt;</code>)、无序列表(<code>&lt;ul&gt;</code>)或菜单(<code>&lt;menu&gt;</code>)。</p><h2 id="描述列表">描述列表</h2><p>描述列表用于描述一个术语和术语详情，<code>&lt;dl&gt;</code>元素通常表示描述列表，<code>&lt;dl&gt;</code>的子级是<code>&lt;dt&gt;</code>元素和<code>&lt;dd&gt;</code>元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>描述名词<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述详情<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="嵌套列表">嵌套列表</h2><p>将一个列表嵌入到另一个列表称之为嵌套列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Blender<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Toaster<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        Vacuum</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(4)-文本</title>
    <link href="/2024/06/09/HTML%E5%AD%A6%E4%B9%A0(4)-%E6%96%87%E6%9C%AC/"/>
    <url>/2024/06/09/HTML%E5%AD%A6%E4%B9%A0(4)-%E6%96%87%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>HTML 的主要工作之一是赋予文本结构，使浏览器能够按照开发者的意图显示 HTML 文档。</p><span id="more"></span><h1>标题</h1><p>每个标题必须被包裹在一个标题元素中，一共有 <strong>h1、h2、h3、h4、h5、h6</strong> 六种标题元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最佳实践：</strong></p><ol><li>最好只对每个页面使用一次 <code>&lt;h1&gt;</code></li><li>确保在层次结构中顺序使用标题</li><li>在深层次文件中，尽量使用不超过三个标题元素，避免难以浏览</li></ol><h1>段落</h1><p>每个段落是通过<code>&lt;p&gt;</code>元素标签进行定义的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>粗体字</h1><p>为了强调重要的词，在口语方面我们往往用重音强调，在书面用语中则是用粗体字来达到强调的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>就指望你了，千万<span class="tag">&lt;<span class="name">strong</span>&gt;</span>不要<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>迟到！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>斜体字</h1><p>在口语表达中，我们有时会强调某些字，用来改变这句话的意思。同样地，在书面用语中，我们可以使用斜体字来达到同样的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我很<span class="tag">&lt;<span class="name">em</span>&gt;</span>庆幸<span class="tag">&lt;/<span class="name">em</span>&gt;</span>你没有<span class="tag">&lt;<span class="name">em</span>&gt;</span>迟到<span class="tag">&lt;/<span class="name">em</span>&gt;</span>。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>缩略语</h1><p>通过<code>&lt;abbr&gt;</code>用来包裹一个缩略语或缩写，并且提供缩写的解释。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  第 33 届<span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;夏季奥林匹克运动会&quot;</span>&gt;</span>奥运会<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span>将于 2024 年 8</span><br><span class="line">  月在法国巴黎举行。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>联系方式</h1><p>通过<code>&lt;address&gt;</code>标记联系方式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Chris Mills<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    Manchester<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    The Grim North<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    UK</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>上标和下标</h1><p>通过 <code>&lt;sup&gt;</code> 和 <code>&lt;sub&gt;</code> 来表示化学方程式或数学公式的上标或下标。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  咖啡因的化学方程式是 C<span class="tag">&lt;<span class="name">sub</span>&gt;</span>8<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>H<span class="tag">&lt;<span class="name">sub</span>&gt;</span>10<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>N<span class="tag">&lt;<span class="name">sub</span>&gt;</span>4<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>O<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>如果 x<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span> 的值为 9，那么 x 的值必为 3 或 -3。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>代码</h1><p>通过以下HMTL元素可以来标记计算机代码</p><p><code>&lt;code&gt;</code>：用于标记计算机通用代码。</p><p><code>&lt;pre&gt;</code>：用于保留空白字符（通常用于代码块）</p><p><code>&lt;var&gt;</code>：用于标记具体变量名</p><p><code>&lt;kbd&gt;</code>：用于标记输入电脑的键盘（或其他类型）输入。</p><p><code>&lt;samp&gt;</code>：用于标记计算机程序的输出。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">const para = document.querySelector(&#x27;p&#x27;);</span><br><span class="line"></span><br><span class="line">para.onclick = function() &#123;</span><br><span class="line">  alert(&#x27;噢，噢，噢，别点我了。&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  请不要使用 <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>font<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span>、<span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>center<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> 等表象元素。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>在上述的 JavaScript 示例中，<span class="tag">&lt;<span class="name">var</span>&gt;</span>para<span class="tag">&lt;/<span class="name">var</span>&gt;</span> 表示一个段落元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按 <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>/<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Cmd<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> + <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>A<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> 选择全部内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>$ <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>ping mozilla.org<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>PING mozilla.org (63.245.215.20): 56 data bytes</span><br><span class="line">64 bytes from 63.245.215.20: icmp_seq=0 ttl=40 time=158.233 ms<span class="tag">&lt;/<span class="name">samp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>时间和日期</h1><p>使用<code>&lt;time&gt;</code>元素将时间和日期标记为可供机器识别的格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标准简单日期 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-01-20&quot;</span>&gt;</span>20 January 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只包含年份和月份--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-01&quot;</span>&gt;</span>January 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只包含月份和日期 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;01-20&quot;</span>&gt;</span>20 January<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只包含时间，小时和分钟数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;19:30&quot;</span>&gt;</span>19:30<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 还可包含秒和毫秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;19:30:01.856&quot;</span>&gt;</span>19:30:01.856<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日期和时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-01-20T19:30&quot;</span>&gt;</span>7.30pm, 20 January 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 含有时区偏移值的日期时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-01-20T19:30+01:00&quot;</span>&gt;</span>7.30pm, 20 January 2016 is 8.30pm in France<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提及特定周 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-W04&quot;</span>&gt;</span>The fourth week of 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>引用</h1><h2 id="块引用">块引用</h2><p>如果一个块级内容（一个段落、多个段落、一个列表等）从其他地方被引用，你应该把它用<code>&lt;blockquote&gt;</code>元素包裹起来表示，并且在<strong>cite</strong>属性里用URL来指向引用的资源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Here is a blockquote:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">cite</span>=<span class="string">&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/blockquote&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    The <span class="tag">&lt;<span class="name">strong</span>&gt;</span>HTML <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>blockquote<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> Element<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> (or <span class="tag">&lt;<span class="name">em</span>&gt;</span>HTML Block Quotation Element<span class="tag">&lt;/<span class="name">em</span>&gt;</span>) indicates that the enclosed text is an extended quotation.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="行内引用">行内引用</h2><p>如果一个行级内容从其他地方被引用，你应该把它用<code>&lt;q&gt;</code>元素包裹起来表示，并且在<strong>cite</strong>属性里用URL来指向引用的资源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  The quote element — <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>q<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> — is</span><br><span class="line">  <span class="tag">&lt;<span class="name">q</span> <span class="attr">cite</span>=<span class="string">&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/q&quot;</span>&gt;</span></span><br><span class="line">    intended for short quotations that don&#x27;t require paragraph breaks.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(3)-语义化</title>
    <link href="/2024/06/08/HTML%E5%AD%A6%E4%B9%A0(3)-%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
    <url>/2024/06/08/HTML%E5%AD%A6%E4%B9%A0(3)-%E8%AF%AD%E4%B9%89%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>HTML标签的语义化，简单来说，就是用正确的标签做正确的事情，给某块内容用上一个最恰当最合适的标签，使页面有良好的结构，页面元素有含义，无论是谁都能看懂这块内容是什么。</p><span id="more"></span><h1>语义化</h1><p>语义是指“与含义相关”。编写语义HTML是指使用HTML元素根据每个元素的含义来构建内容。使用语义化标签有以下优点：</p><ol><li>在没有CSS样式情况下也能够让页面呈现出清晰的结构</li><li>有利于SEO和搜索引擎建立良好的沟通，有助于爬虫抓取更多的有效信息，爬虫是依赖于标签来确定上下文和各个关键字的权重</li><li>方便团队开发和维护，语义化更具可读性，可以减少差异化</li></ol><h2 id="语义元素">语义元素</h2><h3 id="页眉">页眉</h3><p><code>&lt;header&gt;</code>元素横跨于整个页面顶部，通常用于包含导航、标题、logo、搜索框等内容。</p><h3 id="导航">导航</h3><p><code>&lt;nav&gt;</code>元素是页面的主导航功能。</p><h3 id="主内容">主内容</h3><p><code>&lt;main&gt;</code>元素存放页面的内容。每个页面上只能用一次 <code>&lt;main&gt;</code>，位于<code>&lt;body&gt;</code>元素中。最好不要把它嵌套进其他元素。</p><h4 id="section">section</h4><p><code>&lt;section&gt;</code>元素适用于将页面按功能分块，就像是新闻有不同的板块（国内新闻、国外新闻），在<code>&lt;main&gt;</code>元素中可以有一个或多个<code>&lt;section&gt;</code>元素，每个<code>&lt;section&gt;</code>元素都有一个标题，里面可以放置若干个<code>&lt;article&gt;</code>元素。</p><h4 id="article">article</h4><p><code>&lt;article&gt;</code>元素表示页面的文章，就像是新闻的文章或是一篇博客，<code>&lt;article&gt;</code>元素里面也可以含有多个<code>&lt;section&gt;</code>元素。</p><h3 id="侧边栏">侧边栏</h3><p><code>&lt;aside&gt;</code>元素通常嵌套在<code>&lt;main&gt;</code>元素中，<code>&lt;aside&gt;</code>元素包含一些页面的相关信息，例如术语条目、作者简介、相关链接等。</p><h3 id="页脚">页脚</h3><p><code>&lt;footer&gt;</code>元素是网站的页脚，通常放置版权声明、联系信息等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML学习<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>文档结构<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>语义元素<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>语义化<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;<span class="name">section</span>&gt;</span>...<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">section</span>&gt;</span>...<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>参考文献链接<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://developer.mozilla.org/&quot;</span>&gt;</span>MDN<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>zzstriker blogs<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="无语义元素">无语义元素</h2><p>有些时候，HTML文档中的内容并没有什么含义，现有的语义元素并不好表达，可以用无语义元素来说明。</p><h3 id="行级无语义元素">行级无语义元素</h3><p><code>&lt;span&gt;</code>元素是一个行级无语义元素，用于无法找到更好的语义元素来包含内容时，或者不想增加特定的含义时。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>行级无语义元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="块级无语义元素">块级无语义元素</h3><p><code>&lt;div&gt;</code>元素是一个块级无语义元素，应仅用于找不到更好的块级元素时，或者不想增加特定的意义时。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    块级无语义元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="换行元素">换行元素</h2><p><code>&lt;br&gt;</code>元素可以在文本中进行换行，能够生成多个短行结构。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    第一段文本<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    第二段文本<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="中断元素">中断元素</h2><p><code>&lt;hr&gt;</code>元素在文档中生成一条水平分割线，表示文本中主题的变化。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>主题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    主题1的描述</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>主题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    主题2的描述</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(2)-文档结构</title>
    <link href="/2024/06/07/HTML%E5%AD%A6%E4%B9%A0(2)-%E6%96%87%E6%A1%A3%E7%BB%93%E6%9E%84/"/>
    <url>/2024/06/07/HTML%E5%AD%A6%E4%B9%A0(2)-%E6%96%87%E6%A1%A3%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>HTML 文档包含一个文档类型声明和 <code>&lt;html&gt;</code> 根元素，<code>&lt;html&gt;</code> 元素中嵌套的是<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>元素。页面在浏览器加载后<code>&lt;head&gt;</code>元素内的内容不会在浏览器中显示，它的作用是保存页面的一些元数据。</p><span id="more"></span><h1>HTML文档结构</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>页面内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DOCTYPE-html"><code>&lt;!DOCTYPE html&gt;</code></h2><p>Doctype是HTML5的文档声明，通过它可以告诉浏览器，使用哪一个HTML版本标准解析文档。在浏览器发展的过程中，HTML出现过很多版本，不同的版本之间格式书写上略有差异。如果没有事先告诉浏览器，那么浏览器就不知道文档解析标准是什么？此时，大部分浏览器将开启最大兼容模式来解析网页，我们一般称为<strong>怪异模式</strong>，这不仅会降低解析效率，而且会在解析过程中产生一些难以预知的<strong>bug</strong>，所以文档声明是必须的。</p><h2 id="html"><code>&lt;html&gt;</code></h2><p><code>&lt;html&gt;</code> 元素是 HTML 文档的根元素。它是 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 的父级，其中包含 HTML 文档中除 DOCTYPE 之外的所有内容。</p><p><strong>lang属性</strong></p><p>用于定义文档的主要语言，<strong>lang</strong>属性的值是两个或三个字母的<code>ISO</code>语言代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    …</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>lang</strong>属性不限于 <code>&lt;html&gt;</code> 标记。如果网页中有文本使用的语言与主文档的语言不同，则应使用<strong>lang</strong>属性标识文档中主要语言。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Japanese example: <span class="tag">&lt;<span class="name">span</span> <span class="attr">lang</span>=<span class="string">&quot;ja&quot;</span>&gt;</span>ご飯が熱い。<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="head-元素"><code>&lt;head&gt;</code>元素</h3><p>包含文档的所有元数据，其中必须包含标题、字符集、视口设置。</p><h4 id="title"><code>&lt;title&gt;</code></h4><p>设置页面的标题，显示在浏览器标签页上，也作为收藏网页的描述文字。</p><h4 id="meta"><code>&lt;meta&gt;</code></h4><p>用于提供关于HTML文档的元数据。</p><p><strong>属性</strong>：</p><ol><li><p><strong>charset</strong>：指定文档中的字符编码</p></li><li><p><strong>content</strong>：是<strong>http-equiv</strong>或<strong>name</strong>属性的值</p></li><li><p><strong>http-equiv</strong>：定义了一个编译指示指令，所允许的值都是特定 HTTP 标头的名称，例如：content-type、refresh</p></li><li><p><strong>name</strong>：用于描述网页，例如：keywords、description、viewport、robots、author</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="link"><code>&lt;link&gt;</code></h4><p>设置HTML文档与外部资源的关系，常用于链接样式表，也可以创建站点图标。</p><p><strong>属性</strong>：</p><ol><li><p><strong>rel</strong>：命名链接文档与当前文档的关系，例如：icon、stylesheet</p></li><li><p><strong>href</strong>：指定被链接资源的URL。URL可以是绝对的，也可以是相对的</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;main.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="style"><code>&lt;style&gt;</code></h4><p>包含文档的样式信息或文档的部分内容。其中的 CSS 会应用于包含 <code>&lt;style&gt;</code> 元素的文档内容。</p><h4 id="script"><code>&lt;script&gt;</code></h4><p>用于嵌入可执行代码或数据，通常用作嵌入或者引用 JavaScript 代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;javascript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性</strong>：</p><ol><li><p><strong>type</strong>：表示所代表的脚本类型</p></li><li><p><strong>async</strong>：脚本并行加载，加载完成之后立即执行，执行时机不确定，有可能阻塞HTML解析</p></li><li><p><strong>defer</strong>：脚本并行加载，等待HTML解析完成之后，按照加载顺序执行脚本</p></li><li><p><strong>src</strong>：定义引用外部脚本的 URI，直接在文档中嵌入脚本</p></li></ol><h4 id="noscript"><code>&lt;noscript&gt;</code></h4><p>定义了一段HTML，如果页面上的脚本类型不受支持，或者浏览器当前关闭了脚本，则插入该HTML。</p><h4 id="base"><code>&lt;base&gt;</code></h4><p>一个文档中只能有一个<code>&lt;base&gt;</code>元素。指定用于一个文档中包含的所有相对URL的根URL，类似提供一个指定的默认目标地址。</p><p><strong>属性</strong>：</p><ol><li><p><strong>href</strong>：设置文档中相对URL地址的基准URL，在链接中设置相对的访问目标，浏览器便会自动解析出一个完整的链接地址进行访问，倘若链接的访问目标为空，浏览器也会根据<code>&lt;base&gt;</code>所给的URL进行访问。值得注意的是，<code>&lt;base&gt;</code>标签需放在所有包含URL地址的语句前面。</p></li><li><p><strong>target</strong>：网页窗口的打开方式</p><ul><li><p><strong>_blank</strong>：在新窗口打开链接页面。</p></li><li><p><strong>_parent</strong>：在上一级窗口中打开链接。</p></li><li><p><strong>_self</strong>：在当前窗口打开链接,此为默认值，可以省略。</p></li><li><p><strong>_top</strong>：在浏览器的整个窗口打开链接，忽略任何框架。</p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(1)-HTML介绍</title>
    <link href="/2024/06/06/HTML%E5%AD%A6%E4%B9%A0(1)-HTML%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/06/06/HTML%E5%AD%A6%E4%B9%A0(1)-HTML%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p>超文本标记语言-----<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage，HTML 不是一门编程语言，而是一种用于定义内容结构的标记语言。HTML 由一系列的元素组成，这些元素可以用来包围不同部分的内容，使其以某种方式呈现或者工作。</p><span id="more"></span><h1>HTML</h1><h2 id="元素">元素</h2><ol><li>开始标签（Opening tag）：包含元素的名称，被大于号、小于号所包围。表示元素从这里开始或者开始起作用 。</li><li>结束标签（Closing tag）：与开始标签相似，只是其在元素名之前包含了一个斜杠。这表示着元素的结尾。</li><li>内容（Content）：元素的内容。</li></ol><h3 id="嵌套元素">嵌套元素</h3><p>将一个元素置于其他元素之中称作嵌套。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>My cat is <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> grumpy.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="块级元素">块级元素</h3><p>块级元素在页面中以块的形式展现。一个块级元素出现在它前面的内容之后的新行上。任何跟在块级元素后面的内容也会出现在新的行上。块级元素通常是页面上的结构元素。一个块级元素不会嵌套在一个内联元素里面，但它可能嵌套在另一个块级元素里面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="行级元素">行级元素</h3><p>行级元素通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="空元素">空元素</h3><p>不是所有元素都拥有开始标签、内容和结束标签。在HTML中空元素不能存在子元素，只有开始标签且没有结束标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/firefox-icon.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性">属性</h2><p><img src="./imgs/HTML/attribute.png" alt=""></p><ol><li>属性只会显示在开始标签中；</li><li>在属性与元素名称（或上一个属性，如果有超过一个属性的话）之间需要一个空格符隔开；</li><li>属性的名称与值之间用等号连接；</li><li>属性值由引号所包围。</li></ol><h3 id="布尔属性">布尔属性</h3><p>没有值的属性被称为布尔属性，布尔属性只能有一个值，这个值一般与属性名称相同。</p><h3 id="全局属性">全局属性</h3><p>全局属性是指可对任何 HTML 元素设置的属性。</p><h4 id="id">id</h4><p>用于定义元素的唯一标识符。</p><h4 id="class">class</h4><p>用来设置元素的一个或多个类名。</p><ol><li><p>类名不能以数字开头</p></li><li><p>类名可以设置多个值，以空格分开</p></li><li><p>不同的元素可以有相同的类名</p></li></ol><h4 id="style">style</h4><p>用于设置元素的行内样式。</p><h4 id="tabindex">tabindex</h4><p>在元素中添加tabindex属性，使其能够获得焦点，定义添加到Tab键顺序</p><h2 id="特殊字符">特殊字符</h2><table><thead><tr><th>原义字符</th><th>等价字符引用</th></tr></thead><tbody><tr><td>&lt;</td><td>&amp;lt;</td></tr><tr><td>&gt;</td><td>&amp;gt;</td></tr><tr><td>&quot;</td><td>&amp;quot;</td></tr><tr><td>’</td><td>&amp;apos;</td></tr><tr><td>&amp;</td><td>&amp;amp;</td></tr></tbody></table><h2 id="注释">注释</h2><p>HTML 拥有在代码中写注释的机制。浏览器会忽略注释，有效地使注释对用户来说不可见。注释的目的是让你在代码中加入注释，以解释你的逻辑或编码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我在注释外！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;p&gt;我在注释内！&lt;/p&gt; --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
