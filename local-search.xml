<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Node学习-数据库访问</title>
    <link href="/2024/12/10/Node%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BF%E9%97%AE/"/>
    <url>/2024/12/10/Node%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<p>数据库访问是现代Web开发中必不可少的一部分，而Node.js凭借其异步I/O特性，使得数据库操作更加高效。</p><span id="more"></span><h1>数据库访问</h1><p>数据库是应用程序数据存储和管理的核心组件。Node.js通过丰富的第三方库和驱动程序，与各类数据库进行高效交互。以下是两类数据库的特点：</p><ol><li><strong>MongoDB</strong>：一种NoSQL数据库，采用文档型存储，数据以JSON格式保存，支持灵活的动态结构。</li><li><strong>MySQL</strong>：一种关系型数据库，使用表格结构存储数据，支持复杂的SQL查询。</li></ol><h2 id="MongoDB数据库">MongoDB数据库</h2><p>MongoDB 是一个 NoSQL 类型的文档型数据库，以其灵活的架构和高性能著称。Node.js 提供了官方的 <code>mongodb</code> 模块，帮助开发者与 MongoDB 数据库交互。</p><h3 id="安装-MongoDB-模块">安装 MongoDB 模块</h3><p>在项目中使用 MongoDB 模块之前，需要通过 npm 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongodb</span><br></pre></td></tr></table></figure><p>安装完成后，就可以在代码中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">MongoClient</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="连接-MongoDB">连接 MongoDB</h3><p><code>MongoClient</code> 是 MongoDB 模块的主要接口，用于连接数据库。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">MongoClient</span>(uri, options);</span><br></pre></td></tr></table></figure><ol><li><code>uri</code>：数据库连接字符串，例如：<code>mongodb://localhost:27017</code>。</li><li><code>options</code>：可选参数，用于配置连接行为，如超时、池大小等。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">MongoClient</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> uri = <span class="string">&#x27;mongodb://localhost:27017&#x27;</span>; <span class="comment">// 本地 MongoDB 地址</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> <span class="title class_">MongoClient</span>(uri);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">connectDB</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> client.<span class="title function_">connect</span>(); <span class="comment">// 连接到数据库</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to MongoDB&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Connection failed:&#x27;</span>, err);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> client.<span class="title function_">close</span>(); <span class="comment">// 关闭连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">connectDB</span>();</span><br></pre></td></tr></table></figure><h3 id="常用操作">常用操作</h3><p>在 MongoDB 中，数据以 JSON 样式的文档存储在集合（collection）中，集合属于一个数据库（database）。</p><h4 id="选择数据库">选择数据库</h4><p>使用 <code>client.db(databaseName)</code> 方法选择数据库。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> db = client.<span class="title function_">db</span>(<span class="string">&#x27;myDatabase&#x27;</span>); <span class="comment">// 选择或创建数据库</span></span><br></pre></td></tr></table></figure><h4 id="选择集合-表">选择集合(表)</h4><p>使用 <code>db.collection(collectionName)</code> 方法选择集合(表)。如果集合(表)不存在，将自动创建。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> collection = db.<span class="title function_">collection</span>(<span class="string">&#x27;users&#x27;</span>); <span class="comment">// 选择或创建名为 &quot;users&quot; 的集合</span></span><br></pre></td></tr></table></figure><h4 id="插入数据">插入数据</h4><p><strong><code>insertOne()</code></strong> 和 <strong><code>insertMany()</code></strong> 方法用于向集合中插入文档。</p><ol><li><code>insertOne()</code>：插入单个文档。</li><li><code>insertMany()</code>：插入多个文档。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入单个文档</span></span><br><span class="line"><span class="keyword">await</span> collection.<span class="title function_">insertOne</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入多个文档</span></span><br><span class="line"><span class="keyword">await</span> collection.<span class="title function_">insertMany</span>([</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h4 id="查询数据">查询数据</h4><p>使用 <strong><code>find()</code></strong> 和 <strong><code>findOne()</code></strong> 方法查询文档。</p><ol><li><code>findOne()</code>：返回匹配的第一条文档。</li><li><code>find()</code>：返回所有匹配的文档（需使用游标处理）。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询单个文档</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">await</span> collection.<span class="title function_">findOne</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询多个文档</span></span><br><span class="line"><span class="keyword">const</span> users = <span class="keyword">await</span> collection.<span class="title function_">find</span>(&#123; <span class="attr">age</span>: &#123; <span class="attr">$gt</span>: <span class="number">25</span> &#125; &#125;).<span class="title function_">toArray</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(users);</span><br></pre></td></tr></table></figure><h4 id="更新数据">更新数据</h4><p><strong><code>updateOne()</code></strong> 和 <strong><code>updateMany()</code></strong> 用于更新文档。</p><ol><li><code>$set</code>：设置或更新字段的值。</li><li><code>$inc</code>：对字段值递增。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新单个文档</span></span><br><span class="line"><span class="keyword">await</span> collection.<span class="title function_">updateOne</span>(</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;, </span><br><span class="line">    &#123; <span class="attr">$set</span>: &#123; <span class="attr">age</span>: <span class="number">26</span> &#125; &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新多个文档</span></span><br><span class="line"><span class="keyword">await</span> collection.<span class="title function_">updateMany</span>(</span><br><span class="line">    &#123; <span class="attr">age</span>: &#123; <span class="attr">$lt</span>: <span class="number">30</span> &#125; &#125;, </span><br><span class="line">    &#123; <span class="attr">$inc</span>: &#123; <span class="attr">age</span>: <span class="number">1</span> &#125; &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="删除数据">删除数据</h4><p><strong><code>deleteOne()</code></strong> 和 <strong><code>deleteMany()</code></strong> 用于删除文档。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除单个文档</span></span><br><span class="line"><span class="keyword">await</span> collection.<span class="title function_">deleteOne</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除多个文档</span></span><br><span class="line"><span class="keyword">await</span> collection.<span class="title function_">deleteMany</span>(&#123; <span class="attr">age</span>: &#123; <span class="attr">$lt</span>: <span class="number">30</span> &#125; &#125;);</span><br></pre></td></tr></table></figure><h4 id="索引管理">索引管理</h4><p>索引可以提高查询效率。使用 <strong><code>createIndex()</code></strong> 方法创建索引。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> collection.<span class="title function_">createIndex</span>(&#123; <span class="attr">name</span>: <span class="number">1</span> &#125;); <span class="comment">// 为 &quot;name&quot; 字段创建升序索引</span></span><br></pre></td></tr></table></figure><h4 id="聚合操作">聚合操作</h4><p>MongoDB 提供了强大的聚合框架，用于对文档进行复杂的数据处理和分析。</p><p><strong><code>aggregate()</code></strong> 方法接受一个管道数组，其中每个阶段执行特定的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pipeline = [</span><br><span class="line">    &#123; <span class="attr">$match</span>: &#123; <span class="attr">age</span>: &#123; <span class="attr">$gt</span>: <span class="number">25</span> &#125; &#125; &#125;, <span class="comment">// 筛选</span></span><br><span class="line">    &#123; <span class="attr">$group</span>: &#123; <span class="attr">_id</span>: <span class="string">&#x27;$age&#x27;</span>, <span class="attr">count</span>: &#123; <span class="attr">$sum</span>: <span class="number">1</span> &#125; &#125; &#125; <span class="comment">// 分组并计数</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> collection.<span class="title function_">aggregate</span>(pipeline).<span class="title function_">toArray</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h4 id="事务管理">事务管理</h4><p>MongoDB 支持多文档事务操作，适用于具有严格一致性要求的场景。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = client.<span class="title function_">startSession</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> session.<span class="title function_">withTransaction</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> collection = db.<span class="title function_">collection</span>(<span class="string">&#x27;users&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> collection.<span class="title function_">insertOne</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;, &#123; session &#125;);</span><br><span class="line">        <span class="keyword">await</span> collection.<span class="title function_">updateOne</span>(</span><br><span class="line">            &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">$set</span>: &#123; <span class="attr">age</span>: <span class="number">26</span> &#125; &#125;,</span><br><span class="line">            &#123; session &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Transaction failed:&#x27;</span>, err);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">await</span> session.<span class="title function_">endSession</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MySQL-数据库">MySQL 数据库</h2><p>MySQL 是一种流行的关系型数据库管理系统，在 Web 应用开发中广泛使用。Node.js 提供了多种与 MySQL 交互的模块，其中最常用的是 <strong><code>mysql</code></strong> 和 <strong><code>mysql2</code></strong> 模块。</p><h3 id="安装-MySQL-模块">安装 MySQL 模块</h3><h4 id="安装-mysql-模块">安装 <code>mysql</code> 模块</h4><p><code>mysql</code> 是一个轻量级模块，支持基础的 MySQL 功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure><h4 id="安装-mysql2-模块">安装 <code>mysql2</code> 模块</h4><p><code>mysql2</code> 是 <code>mysql</code> 的增强版本，支持现代化功能（如 Promise 和 Prepared Statements）。<strong>推荐使用</strong> <code>mysql2</code>，因其性能优化和更好的 Promise 支持。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql2</span><br></pre></td></tr></table></figure><h3 id="连接-MySQL">连接 MySQL</h3><h4 id="使用单次连接">使用单次连接</h4><p>可以使用单个数据库连接完成查询任务。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;test_db&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">connect</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error connecting:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connected to MySQL!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">end</span>(); <span class="comment">// 关闭连接</span></span><br></pre></td></tr></table></figure><h4 id="使用连接池">使用连接池</h4><p>连接池可以复用连接，适合高并发场景，性能更佳。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pool = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">    <span class="attr">database</span>: <span class="string">&#x27;test_db&#x27;</span>,</span><br><span class="line">    <span class="attr">connectionLimit</span>: <span class="number">10</span> <span class="comment">// 最大连接数</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pool.<span class="title function_">query</span>(<span class="string">&#x27;SELECT 1 + 1 AS solution&#x27;</span>, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The solution is:&#x27;</span>, results[<span class="number">0</span>].<span class="property">solution</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pool.<span class="title function_">end</span>(); <span class="comment">// 关闭连接池</span></span><br></pre></td></tr></table></figure><h4 id="使用-mysql2-的-Promise-接口">使用 <code>mysql2</code> 的 Promise 接口</h4><p><code>mysql2</code> 支持 Promise，可以更方便地使用现代的异步/等待语法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql2/promise&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">connectDB</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> connection = <span class="keyword">await</span> mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">        <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">        <span class="attr">database</span>: <span class="string">&#x27;test_db&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [rows] = <span class="keyword">await</span> connection.<span class="title function_">execute</span>(<span class="string">&#x27;SELECT 1 + 1 AS solution&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The solution is:&#x27;</span>, rows[<span class="number">0</span>].<span class="property">solution</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> connection.<span class="title function_">end</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">connectDB</span>();</span><br></pre></td></tr></table></figure><h3 id="常用操作-2">常用操作</h3><h4 id="创建数据库和表">创建数据库和表</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> createDatabase = <span class="string">`</span></span><br><span class="line"><span class="string">CREATE DATABASE IF NOT EXISTS test_db;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createTable = <span class="string">`</span></span><br><span class="line"><span class="string">    CREATE TABLE IF NOT EXISTS users (</span></span><br><span class="line"><span class="string">        id INT AUTO_INCREMENT PRIMARY KEY,</span></span><br><span class="line"><span class="string">        name VARCHAR(255) NOT NULL,</span></span><br><span class="line"><span class="string">        age INT NOT NULL</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">query</span>(createDatabase, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Database created!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">query</span>(createTable, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Table created!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="插入数据-2">插入数据</h4><ol><li><p>插入单条数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> insertQuery = <span class="string">`INSERT INTO users (name, age) VALUES (&#x27;Alice&#x27;, 30)`</span>;</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">query</span>(insertQuery, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Inserted:&#x27;</span>, results.<span class="property">insertId</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>插入多条数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">    [<span class="string">&#x27;Bob&#x27;</span>, <span class="number">25</span>],</span><br><span class="line">    [<span class="string">&#x27;Charlie&#x27;</span>, <span class="number">35</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> insertManyQuery = <span class="string">`INSERT INTO users (name, age) VALUES ?`</span>;</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">query</span>(insertManyQuery, [users], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Inserted rows:&#x27;</span>, results.<span class="property">affectedRows</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h4 id="查询数据-2">查询数据</h4><ol><li><p>查询数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> selectQuery = <span class="string">`SELECT * FROM users`</span>;</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">query</span>(selectQuery, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Results:&#x27;</span>, results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>使用条件查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> selectWithCondition = <span class="string">`SELECT * FROM users WHERE age &gt; 30`</span>;</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">query</span>(selectWithCondition, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Results:&#x27;</span>, results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h4 id="更新数据-2">更新数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> updateQuery = <span class="string">`UPDATE users SET age = 28 WHERE name = &#x27;Alice&#x27;`</span>;</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">query</span>(updateQuery, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Updated rows:&#x27;</span>, results.<span class="property">affectedRows</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="删除数据-2">删除数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deleteQuery = <span class="string">`DELETE FROM users WHERE name = &#x27;Alice&#x27;`</span>;</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">query</span>(deleteQuery, <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Deleted rows:&#x27;</span>, results.<span class="property">affectedRows</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="预处理语句">预处理语句</h4><p>为了避免 SQL 注入攻击，推荐使用预处理语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> query = <span class="string">&#x27;SELECT * FROM users WHERE name = ? AND age = ?&#x27;</span>;</span><br><span class="line"></span><br><span class="line">connection.<span class="title function_">query</span>(query, [<span class="string">&#x27;Alice&#x27;</span>, <span class="number">30</span>], <span class="function">(<span class="params">err, results</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Results:&#x27;</span>, results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="事务管理-2">事务管理</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">connection.<span class="title function_">beginTransaction</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">    connection.<span class="title function_">query</span>(<span class="string">&#x27;UPDATE accounts SET balance = balance - 100 WHERE id = 1&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.<span class="title function_">rollback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> err;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        connection.<span class="title function_">query</span>(<span class="string">&#x27;UPDATE accounts SET balance = balance + 100 WHERE id = 2&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="keyword">return</span> connection.<span class="title function_">rollback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> err;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            connection.<span class="title function_">commit</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                    <span class="keyword">return</span> connection.<span class="title function_">rollback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> err;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Transaction Completed!&#x27;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node学习-其他模块</title>
    <link href="/2024/12/09/Node%E5%AD%A6%E4%B9%A0-%E5%85%B6%E4%BB%96%E6%A8%A1%E5%9D%97/"/>
    <url>/2024/12/09/Node%E5%AD%A6%E4%B9%A0-%E5%85%B6%E4%BB%96%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>在Node.js中有一些重要的实用模块，这些模块虽然不如核心模块常见，但在特定场景下发挥着不可或缺的作用，为Node.js应用提供了更丰富的功能和更高的开发效率。</p><span id="more"></span><h1>其他模块</h1><h2 id="dns">dns</h2><p><code>dns</code>模块用于处理域名系统（DNS）的解析，包括将域名解析为IP地址、反向解析IP地址等功能。</p><p><code>dns</code> 模块提供两种模式：</p><ol><li><strong>底层操作模式</strong>：通过 <code>libuv</code> 提供的 DNS 协议直接查询，跨平台，通常推荐使用，例如 <code>dns.resolve()</code>；</li><li><strong>系统操作模式</strong>：通过操作系统的 DNS 解析功能查询结果，受限于系统缓存。</li></ol><h3 id="dns-resolve"><code>dns.resolve</code></h3><p><strong><code>dns.resolve</code></strong>：是底层模式的主要方法，将域名解析为指定类型的DNS记录。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dns.<span class="title function_">resolve</span>(<span class="string">&#x27;google.com&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="function">(<span class="params">err, addresses</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error resolving A record:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;IPv4 addresses:&#x27;</span>, addresses);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>支持的记录类型</strong>：</p><ul><li><code>A</code>：IPv4 地址。</li><li><code>AAAA</code>：IPv6 地址。</li><li><code>MX</code>：邮件交换记录。</li><li><code>CNAME</code>：规范名称记录。</li><li><code>TXT</code>：文本记录。</li><li><code>SRV</code>：服务记录。</li><li><code>PTR</code>：指针记录（反向解析）。</li><li><code>NS</code>：名称服务器记录。</li><li><code>SOA</code>：起始授权机构记录</li></ul><h3 id="dns-lookup"><code>dns.lookup</code></h3><p><strong><code>dns.lookup</code></strong>：使用操作系统解析域名，将域名解析为IP地址，返回 IPv4 和 IPv6 地址。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dns.<span class="title function_">lookup</span>(<span class="string">&#x27;google.com&#x27;</span>, <span class="function">(<span class="params">err, address, family</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error looking up address:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Address: <span class="subst">$&#123;address&#125;</span>, Family: IPv<span class="subst">$&#123;family&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>family</code> 指定地址类型：<code>4</code>（IPv4）或 <code>6</code>（IPv6）。</li><li>与 <code>resolve()</code> 不同，<code>lookup()</code> 通过操作系统的 DNS 缓存处理。</li></ul><h3 id="dns-reverse"><code>dns.reverse</code></h3><p><strong><code>dns.reverse</code></strong>：反向解析，将IP地址解析为域名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dns.<span class="title function_">reverse</span>(<span class="string">&#x27;93.184.216.34&#x27;</span>, <span class="function">(<span class="params">err, hostnames</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error in reverse lookup:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hostnames:&#x27;</span>, hostnames);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="dns-promises"><code>dns.promises</code></h3><p><strong><code>dns.promises</code></strong>：使用 <code>async/await</code> 简化异步操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve, lookup &#125; = <span class="built_in">require</span>(<span class="string">&#x27;dns&#x27;</span>).<span class="property">promises</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> addresses = <span class="keyword">await</span> <span class="title function_">resolve</span>(<span class="string">&#x27;google.com&#x27;</span>, <span class="string">&#x27;A&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Resolved addresses:&#x27;</span>, addresses);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; address, family &#125; = <span class="keyword">await</span> <span class="title function_">lookup</span>(<span class="string">&#x27;google.com&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Lookup address: <span class="subst">$&#123;address&#125;</span>, Family: IPv<span class="subst">$&#123;family&#125;</span>`</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="自定义DNS服务器">自定义DNS服务器</h3><p><code>dns.setServers()</code> 可设置自定义的 DNS 服务器列表，<code>dns.getServers()</code> 可获取当前的服务器列表。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dns.<span class="title function_">setServers</span>([<span class="string">&#x27;8.8.8.8&#x27;</span>, <span class="string">&#x27;8.8.4.4&#x27;</span>]); <span class="comment">// 使用 Google 公共 DNS</span></span><br><span class="line"></span><br><span class="line">dns.<span class="title function_">resolve</span>(<span class="string">&#x27;example.com&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="function">(<span class="params">err, addresses</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error with custom DNS servers:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Resolved using custom DNS:&#x27;</span>, addresses);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="os">os</h2><p><code>os</code>模块提供了与操作系统相关的信息和实用方法，例如获取CPU、内存、网络接口等。</p><h3 id="获取操作系统信息">获取操作系统信息</h3><ol><li><code>os.platform()</code>: 返回操作系统平台。</li><li><code>os.release()</code>: 返回操作系统版本。</li><li><code>os.arch()</code>: 返回操作系统的 CPU 架构。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Platform:&#x27;</span>, os.<span class="title function_">platform</span>()); <span class="comment">// &#x27;win32&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;OS Release:&#x27;</span>, os.<span class="title function_">release</span>()); <span class="comment">// &#x27;10.0.22631&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Architecture:&#x27;</span>, os.<span class="title function_">arch</span>()); <span class="comment">// &#x27;x64&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="获取系统资源信息">获取系统资源信息</h3><ol><li><code>os.cpus()</code>: 返回每个逻辑 CPU 内核的信息，包括型号、速度等。</li><li><code>os.totalmem()</code>: 返回系统总内存（单位：字节）。</li><li><code>os.freemem()</code>: 返回系统空闲内存（单位：字节）。</li><li><code>os.loadavg()</code>: 返回过去 1、5、15 分钟的系统平均负载（仅 Linux 和 macOS 支持）。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CPU Info:&#x27;</span>, os.<span class="title function_">cpus</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;CPU Core Count:&#x27;</span>, os.<span class="title function_">cpus</span>().<span class="property">length</span>); <span class="comment">// CPU 核心数</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Total Memory:&#x27;</span>, (os.<span class="title function_">totalmem</span>() / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="string">&#x27;GB&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Free Memory:&#x27;</span>, (os.<span class="title function_">freemem</span>() / <span class="number">1024</span> / <span class="number">1024</span> / <span class="number">1024</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="string">&#x27;GB&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Load Average:&#x27;</span>, os.<span class="title function_">loadavg</span>()); <span class="comment">// [1分钟, 5分钟, 15分钟的负载]</span></span><br></pre></td></tr></table></figure><h3 id="用户信息">用户信息</h3><ol><li><code>os.userInfo()</code>: 返回当前用户的信息，包括用户名、主目录路径等。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;User Info:&#x27;</span>, os.<span class="title function_">userInfo</span>());</span><br></pre></td></tr></table></figure><h3 id="系统运行时间">系统运行时间</h3><ol><li><code>os.uptime()</code>: 返回系统运行时间（单位：秒）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;System Uptime:&#x27;</span>, (os.<span class="title function_">uptime</span>() / <span class="number">3600</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>), <span class="string">&#x27;hours&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="网络接口信息">网络接口信息</h3><ol><li><code>os.networkInterfaces()</code>: 返回系统的网络接口信息。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Network Interfaces:&#x27;</span>, os.<span class="title function_">networkInterfaces</span>());</span><br></pre></td></tr></table></figure><h3 id="临时目录路径">临时目录路径</h3><ol><li><code>os.tmpdir()</code>: 返回操作系统的默认临时文件目录。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Temporary Directory:&#x27;</span>, os.<span class="title function_">tmpdir</span>());</span><br></pre></td></tr></table></figure><h3 id="系统行尾标识">系统行尾标识</h3><ol><li><code>os.EOL</code>: 返回操作系统的行尾标识（如 <code>\n</code> 在 Linux/macOS，<code>\r\n</code> 在 Windows）。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;End of Line:&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(os.<span class="property">EOL</span>)); <span class="comment">// e.g., &#x27;\n&#x27; or &#x27;\r\n&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="readline">readline</h2><p><code>readline</code>模块专门用于从可读流（如 <code>process.stdin</code>）逐行读取输入，并对输入进行处理。它在构建交互式命令行应用程序、处理逐行输入的文件时非常有用。</p><h3 id="创建接口">创建接口</h3><p>使用 <code>readline.createInterface()</code> 方法创建一个 <code>readline.Interface</code> 实例，用于管理输入输出流。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: process.<span class="property">stdin</span>, <span class="comment">// 输入流</span></span><br><span class="line">    <span class="attr">output</span>: process.<span class="property">stdout</span>, <span class="comment">// 输出流</span></span><br><span class="line">    <span class="attr">prompt</span>: <span class="string">&#x27;&gt;&gt; &#x27;</span> <span class="comment">// 可选，自定义提示符</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><code>input</code>：必需，可读流，例如 <code>process.stdin</code>。</li><li><code>output</code>：可选，可写流，用于输出提示信息，例如 <code>process.stdout</code>。</li><li><code>prompt</code>：可选，自定义提示符。</li></ol><h3 id="核心方法">核心方法</h3><h4 id="question"><code>question()</code></h4><p>用于向用户显示问题，并读取用户的输入。</p><ol><li>回调函数的参数 <code>answer</code> 是用户输入的内容。</li><li><code>rl.close()</code> 用于关闭接口，释放资源。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">    <span class="attr">output</span>: process.<span class="property">stdout</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">question</span>(<span class="string">&#x27;What is your name? &#x27;</span>, <span class="function">(<span class="params">answer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;answer&#125;</span>!`</span>);</span><br><span class="line">    rl.<span class="title function_">close</span>(); <span class="comment">// 关闭接口</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="on-事件监听"><code>on()</code> 事件监听</h4><p><code>readline.Interface</code> 支持多种事件监听，例如：</p><ol><li><code>line</code>：当用户输入一行并按下回车时触发。</li><li><code>close</code>：当接口关闭时触发。</li><li><code>SIGINT</code>：用户按下 <code>Ctrl+C</code> 时触发。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">    <span class="attr">output</span>: process.<span class="property">stdout</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Enter lines of text (type &quot;exit&quot; to quit):&#x27;</span>);</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;line&#x27;</span>, <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;exit&#x27;</span>) &#123;</span><br><span class="line">    rl.<span class="title function_">close</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`You entered: <span class="subst">$&#123;input&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Goodbye!&#x27;</span>);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">0</span>); <span class="comment">// 退出程序</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="setPrompt-和prompt">setPrompt()和prompt()</h4><ol><li><code>setPrompt()</code>：设置或更改提示符。</li><li><code>prompt()</code>：显示提示符。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">    <span class="attr">output</span>: process.<span class="property">stdout</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">setPrompt</span>(<span class="string">&#x27;Enter a command: &#x27;</span>);</span><br><span class="line">rl.<span class="title function_">prompt</span>();</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;line&#x27;</span>, <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Command received: <span class="subst">$&#123;input&#125;</span>`</span>);</span><br><span class="line">    rl.<span class="title function_">prompt</span>(); <span class="comment">// 再次显示提示符</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Session ended.&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="pause-和-resume"><code>pause()</code> 和 <code>resume()</code></h4><ol><li><code>pause()</code>：暂停 <code>input</code> 流。</li><li><code>resume()</code>：恢复 <code>input</code> 流。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: process.<span class="property">stdin</span>,</span><br><span class="line">    <span class="attr">output</span>: process.<span class="property">stdout</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;line&#x27;</span>, <span class="function">(<span class="params">input</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Input: <span class="subst">$&#123;input&#125;</span>`</span>);</span><br><span class="line">    rl.<span class="title function_">pause</span>(); <span class="comment">// 暂停输入流</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Resuming input...&#x27;</span>);</span><br><span class="line">        rl.<span class="title function_">resume</span>(); <span class="comment">// 恢复输入流</span></span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="逐行读取文件">逐行读取文件</h3><p><code>readline</code> 可以配合 <code>fs</code> 模块，用于逐行读取文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fileStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;example.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rl = readline.<span class="title function_">createInterface</span>(&#123;</span><br><span class="line">    <span class="attr">input</span>: fileStream,</span><br><span class="line">    <span class="attr">crlfDelay</span>: <span class="title class_">Infinity</span> <span class="comment">// 支持 CR 和 LF 换行符</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;line&#x27;</span>, <span class="function">(<span class="params">line</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Line: <span class="subst">$&#123;line&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rl.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File reading completed.&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="util">util</h2><p><code>util</code>模块提供了一组常用的实用函数，主要用于调试、继承、类型判断和格式化操作。</p><h3 id="格式化输出">格式化输出</h3><p><code>util.format()</code>将格式化字符串与占位符结合，生成格式化的字符串。支持的占位符包括：</p><ol><li><code>%s</code>：字符串</li><li><code>%d</code>：数字</li><li><code>%j</code>：JSON</li><li><code>%%</code>：单个百分号</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> message = util.<span class="title function_">format</span>(<span class="string">&#x27;Name: %s, Age: %d&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// 输出: Name: Alice, Age: 30</span></span><br></pre></td></tr></table></figure><h3 id="调试日志">调试日志</h3><p><code>util.debuglog()</code>生成一个调试日志函数，仅当环境变量 <code>NODE_DEBUG</code> 中包含指定的标识时，日志才会输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debug = util.<span class="title function_">debuglog</span>(<span class="string">&#x27;server&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">debug</span>(<span class="string">&#x27;This is a debug message.&#x27;</span>); <span class="comment">// 仅当 NODE_DEBUG 包含 &quot;server&quot; 时输出</span></span><br></pre></td></tr></table></figure><p>运行时设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NODE_DEBUG=server node app.js</span><br></pre></td></tr></table></figure><h3 id="类型判断">类型判断</h3><p><code>util.types</code> 提供了一组函数用于精确判断变量类型，例如：</p><ol><li><code>util.types.isPromise(value)</code>：判断是否是 Promise。</li><li><code>util.types.isRegExp(value)</code>：判断是否是正则表达式。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="property">types</span>.<span class="title function_">isPromise</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>())); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="property">types</span>.<span class="title function_">isRegExp</span>(<span class="regexp">/abc/</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="继承与类的扩展">继承与类的扩展</h3><p><code>util.inherits()</code>用于实现面向原型的继承，主要适用于 ES5 的代码。对于现代代码，更推荐使用 <code>class</code> 和 <code>extends</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello from parent!&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>); <span class="comment">// 调用父类构造函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">util.<span class="title function_">inherits</span>(<span class="title class_">Child</span>, <span class="title class_">Parent</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">child.<span class="title function_">sayHello</span>(); <span class="comment">// 输出: Hello from parent!</span></span><br></pre></td></tr></table></figure><h3 id="自定义对象的字符串表示">自定义对象的字符串表示</h3><p><code>util.inspect()</code>将对象转为字符串表示，常用于调试和日志记录。</p><ul><li><code>depth</code>：指定对象递归展开的层级。</li><li><code>colors</code>：是否为输出添加颜色。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">details</span>: &#123; <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">city</span>: <span class="string">&#x27;New York&#x27;</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(obj, &#123; <span class="attr">depth</span>: <span class="number">1</span>, <span class="attr">colors</span>: <span class="literal">true</span> &#125;));</span><br></pre></td></tr></table></figure><p>如果对象定义了 <code>inspect</code> 方法，<code>util.inspect()</code> 会调用该方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="attr">inspect</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Custom Inspect: <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(util.<span class="title function_">inspect</span>(obj)); <span class="comment">// 输出: Custom Inspect: Alice</span></span><br></pre></td></tr></table></figure><h3 id="回调转-Promise">回调转 Promise</h3><p><code>util.promisify()</code>将基于回调的函数转换为返回 Promise 的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = util.<span class="title function_">promisify</span>(fs.<span class="property">readFile</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">readFile</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure><h3 id="生成异步函数">生成异步函数</h3><p><code>util.callbackify()</code>将返回 Promise 的异步函数转换为使用回调的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Data fetched!&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> callbackFetchData = util.<span class="title function_">callbackify</span>(fetchData);</span><br><span class="line"></span><br><span class="line"><span class="title function_">callbackFetchData</span>(<span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 输出: Data fetched!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node学习-加密与压缩</title>
    <link href="/2024/12/06/Node%E5%AD%A6%E4%B9%A0-%E5%8A%A0%E5%AF%86%E4%B8%8E%E5%8E%8B%E7%BC%A9/"/>
    <url>/2024/12/06/Node%E5%AD%A6%E4%B9%A0-%E5%8A%A0%E5%AF%86%E4%B8%8E%E5%8E%8B%E7%BC%A9/</url>
    
    <content type="html"><![CDATA[<p>随着网络安全性和数据处理需求的日益增加，安全的加密算法和高效的压缩方法在现代应用中扮演着越来越重要的角色。</p><span id="more"></span><h1>加密与压缩</h1><p><strong>加密的重要性</strong></p><p>加密是确保数据安全性的关键技术之一，它保护数据在传输和存储过程中不被窃取或篡改。常见的加密应用包括HTTPS协议、文件加密、消息加密等。加密和解密的过程使用了各种算法来保护数据的完整性与机密性。</p><p><strong>压缩的重要性</strong></p><p>压缩是指将数据以较小的体积进行存储或传输，从而节省带宽和存储空间。压缩技术常用于大数据传输、日志文件存储、图片和视频压缩等场景。</p><h2 id="加密与解密">加密与解密</h2><p><code>crypto</code> 是 Node.js 中用于加密功能的核心模块，提供了加密、解密、哈希、数字签名等功能。它基于 OpenSSL，能够满足大多数安全需求，适用于身份验证、数据保护以及密码操作。</p><h3 id="哈希算法">哈希算法</h3><p>哈希是一种将任意长度的数据转换为固定长度字符串的算法，常用于数据完整性验证。常见的哈希算法有<code>md5</code>、<code>sha1</code>、<code>sha256</code>、<code>sha512</code> 等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hash = crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;sha256&#x27;</span>);  <span class="comment">// 创建SHA-256哈希实例</span></span><br><span class="line">hash.<span class="title function_">update</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);  <span class="comment">// 更新数据</span></span><br><span class="line"><span class="keyword">const</span> result = hash.<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>);  <span class="comment">// 获取哈希结果，以十六进制形式返回</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">// 打印哈希值</span></span><br></pre></td></tr></table></figure><h3 id="HMAC-基于密钥的哈希">HMAC (基于密钥的哈希)</h3><p>HMAC是一种基于哈希算法的加密方式，结合了密钥进行验证，常用于数据的完整性和认证。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hmac = crypto.<span class="title function_">createHmac</span>(<span class="string">&#x27;sha256&#x27;</span>, <span class="string">&#x27;secret-key&#x27;</span>);</span><br><span class="line">hmac.<span class="title function_">update</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = hmac.<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h3 id="对称加密">对称加密</h3><p>加密和解密使用相同的密钥。常见的对称加密算法包括AES（高级加密标准）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; randomBytes, createCipheriv, createDecipheriv &#125; = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成随机密钥和初始化向量</span></span><br><span class="line"><span class="keyword">const</span> key = <span class="title function_">randomBytes</span>(<span class="number">32</span>);  <span class="comment">// 32字节密钥</span></span><br><span class="line"><span class="keyword">const</span> iv = <span class="title function_">randomBytes</span>(<span class="number">16</span>);  <span class="comment">// 16字节初始化向量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line"><span class="keyword">const</span> cipher = <span class="title function_">createCipheriv</span>(<span class="string">&#x27;aes-256-cbc&#x27;</span>, key, iv);</span><br><span class="line"><span class="keyword">let</span> encrypted = cipher.<span class="title function_">update</span>(<span class="string">&#x27;Hello, World!&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line">encrypted += cipher.<span class="title function_">final</span>(<span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line"><span class="keyword">const</span> decipher = <span class="title function_">createDecipheriv</span>(<span class="string">&#x27;aes-256-cbc&#x27;</span>, key, iv);</span><br><span class="line"><span class="keyword">let</span> decrypted = decipher.<span class="title function_">update</span>(encrypted, <span class="string">&#x27;hex&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">decrypted += decipher.<span class="title function_">final</span>(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Encrypted:&#x27;</span>, encrypted);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Decrypted:&#x27;</span>, decrypted);</span><br></pre></td></tr></table></figure><h3 id="非对称加密">非对称加密</h3><p>使用一对公钥和私钥。公钥加密，私钥解密，常见的非对称加密算法包括RSA、DSA等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; generateKeyPairSync, publicEncrypt, privateDecrypt &#125; = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成RSA公钥和私钥</span></span><br><span class="line"><span class="keyword">const</span> &#123; publicKey, privateKey &#125; = <span class="title function_">generateKeyPairSync</span>(<span class="string">&#x27;rsa&#x27;</span>, &#123;</span><br><span class="line"><span class="attr">modulusLength</span>: <span class="number">2048</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用公钥加密</span></span><br><span class="line"><span class="keyword">const</span> encrypted = <span class="title function_">publicEncrypt</span>(publicKey, <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;Hello, World!&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用私钥解密</span></span><br><span class="line"><span class="keyword">const</span> decrypted = <span class="title function_">privateDecrypt</span>(privateKey, encrypted);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Encrypted:&#x27;</span>, encrypted.<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Decrypted:&#x27;</span>, decrypted.<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure><h3 id="数字签名与验证">数字签名与验证</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sign = crypto.<span class="title function_">createSign</span>(<span class="string">&#x27;SHA256&#x27;</span>);</span><br><span class="line">sign.<span class="title function_">update</span>(<span class="string">&#x27;Message to be signed&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> signature = sign.<span class="title function_">sign</span>(privateKey, <span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Signature:&#x27;</span>, signature);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> verify = crypto.<span class="title function_">createVerify</span>(<span class="string">&#x27;SHA256&#x27;</span>);</span><br><span class="line">verify.<span class="title function_">update</span>(<span class="string">&#x27;Message to be signed&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> isVerified = verify.<span class="title function_">verify</span>(publicKey, signature, <span class="string">&#x27;hex&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Verified:&#x27;</span>, isVerified); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="压缩与解压缩">压缩与解压缩</h2><p><code>zlib</code> 是 Node.js 中的一个核心模块，提供了压缩和解压缩的功能。它基于 zlib 库和 gzip、deflate 等算法，能够处理各种压缩格式的数据。<code>zlib</code> 模块在数据传输和存储优化方面非常有用，常用于 HTTP 请求和响应的压缩、文件压缩等场景。</p><h3 id="压缩数据">压缩数据</h3><p><code>zlib</code>提供了<code>gzip</code>、<code>deflate</code>和<code>brotliCompress</code>等压缩算法，常用于文件或数据的压缩。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> input = <span class="string">&#x27;Hello, Node.js! Compress me!&#x27;</span>;</span><br><span class="line">zlib.<span class="title function_">gzip</span>(input, <span class="function">(<span class="params">err, buffer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error compressing data:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Compressed data:&#x27;</span>, buffer.<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="解压缩数据">解压缩数据</h3><p><code>zlib</code>提供了<code>gunzip</code>、<code>inflate</code>和<code>brotliDecompress</code>等压缩算法，可以恢复压缩后的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compressedData = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;H4sIAAAAAAAAC... (省略)&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">zlib.<span class="title function_">gunzip</span>(compressedData, <span class="function">(<span class="params">err, buffer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error decompressing data:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Decompressed data:&#x27;</span>, buffer.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="压缩和解压文件流">压缩和解压文件流</h3><p>Node.js 提供了流（stream）接口，使得 <code>zlib</code> 模块可以处理大文件或流式数据，避免内存不足的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 压缩文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">&#x27;zlib&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> input = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;example.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> output = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;example.txt.gz&#x27;</span>);</span><br><span class="line"></span><br><span class="line">input.<span class="title function_">pipe</span>(zlib.<span class="title function_">createGzip</span>()).<span class="title function_">pipe</span>(output);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解压文件</span></span><br><span class="line"><span class="keyword">const</span> input = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;example.txt.gz&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> output = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;example_unzipped.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">input.<span class="title function_">pipe</span>(zlib.<span class="title function_">createGunzip</span>()).<span class="title function_">pipe</span>(output);</span><br></pre></td></tr></table></figure><h3 id="同步和异步API">同步和异步API</h3><p><code>zlib</code> 提供了两种 API：</p><ol><li><strong>异步 API</strong>：基于回调函数的非阻塞方式（推荐）。</li><li><strong>同步 API</strong>：阻塞调用，适合简单、快速的操作。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步压缩</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> buffer = zlib.<span class="title function_">gzipSync</span>(<span class="string">&#x27;Hello, Sync!&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Compressed data (sync):&#x27;</span>, buffer.<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步解压</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> buffer = zlib.<span class="title function_">gunzipSync</span>(compressedData);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Decompressed data (sync):&#x27;</span>, buffer.<span class="title function_">toString</span>());</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常见选项">常见选项</h3><p><code>zlib</code> 支持通过选项调整压缩性能和效率：</p><ol><li><code>level</code>：压缩级别，范围从 0（无压缩）到 9（最高压缩）。</li><li><code>strategy</code>：压缩策略，例如 <code>zlib.constants.Z_DEFAULT_STRATEGY</code>。</li><li><code>chunkSize</code>：处理数据块的大小（默认 16 KB）。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zlib.<span class="title function_">gzip</span>(<span class="string">&#x27;Custom options example&#x27;</span>, &#123; <span class="attr">level</span>: <span class="number">9</span> &#125;, <span class="function">(<span class="params">err, buffer</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Compressed with custom options:&#x27;</span>, buffer.<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node学习-错误与断言处理</title>
    <link href="/2024/12/05/Node%E5%AD%A6%E4%B9%A0-%E9%94%99%E8%AF%AF%E4%B8%8E%E6%96%AD%E8%A8%80%E5%A4%84%E7%90%86/"/>
    <url>/2024/12/05/Node%E5%AD%A6%E4%B9%A0-%E9%94%99%E8%AF%AF%E4%B8%8E%E6%96%AD%E8%A8%80%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>Node.js的错误处理和断言处理机制是确保应用程序稳定性和可靠性的核心。</p><span id="more"></span><h1>错误与断言处理</h1><h2 id="错误处理">错误处理</h2><p>在 Node.js 中，错误处理是开发者必须掌握的重要技能，因为它直接影响到应用的稳定性和用户体验。</p><h3 id="错误类型">错误类型</h3><p>在 Node.js 中，错误通常分为以下几类：</p><ol><li><strong>编程错误 (Programming Errors)</strong>：语法错误 (<code>SyntaxError</code>)、未捕获的异常 (<code>ReferenceError</code>)。</li><li><strong>操作错误 (Operational Errors)</strong>：文件未找到、数据库连接失败、网络超时。这些通常是可以预见且可恢复的错误。</li><li><strong>第三方错误</strong>：来自依赖的库或模块的不正确使用。</li></ol><h3 id="错误处理的重要性">错误处理的重要性</h3><ol><li><strong>提升应用稳定性</strong>：通过良好的错误处理机制，可以避免小问题导致整个系统崩溃。</li><li><strong>提高代码可维护性</strong>：清晰的错误处理逻辑有助于快速定位问题。</li><li><strong>增强用户体验</strong>：通过捕获错误并返回友好的信息，可以减少用户操作的挫败感。</li></ol><h3 id="错误处理机制">错误处理机制</h3><p>在Node.js中，错误处理贯穿整个应用的生命周期，从捕获同步和异步代码中的错误，到处理未捕获的异常。Node.js提供了多种方法来处理错误，避免应用崩溃。</p><h4 id="回调函数中的错误处理">回调函数中的错误处理</h4><p>回调函数通常是早期 Node.js 应用中处理异步操作的主要方式。约定俗成，第一个参数为 <code>err</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error reading file:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File content:&#x27;</span>, data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="使用-try-catch">使用 <code>try...catch</code></h4><p><code>try...catch</code> 用于捕获同步代码中的错误。对于异步代码，<code>try...catch</code> 需要与 <code>async/await</code> 配合使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步代码</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">const</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;invalid json&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;JSON parse error:&#x27;</span>, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步代码</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">readFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> fs.<span class="property">promises</span>.<span class="title function_">readFile</span>(<span class="string">&#x27;example.txt&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File content:&#x27;</span>, data.<span class="title function_">toString</span>());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error reading file:&#x27;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Promise与-catch">使用<code>Promise</code>与<code>.catch()</code></h4><p>对于基于Promise的异步操作，错误处理可以通过<code>.catch()</code>方法实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs/promises&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;file.txt&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File content:&#x27;</span>, data.<span class="title function_">toString</span>()))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error reading file:&#x27;</span>, err));</span><br></pre></td></tr></table></figure><h4 id="使用事件监听器处理错误">使用事件监听器处理错误</h4><p>某些核心模块和第三方库会通过事件发射器 (<code>EventEmitter</code>) 发出错误事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"></span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;An error occurred:&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发错误</span></span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Something went wrong&#x27;</span>));</span><br></pre></td></tr></table></figure><h4 id="全局错误捕获">全局错误捕获</h4><p>全局错误处理应仅用于记录未捕获的异常，避免生产环境崩溃。</p><ol><li><p>捕获未处理的异常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Uncaught exception:&#x27;</span>, err);</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">1</span>); <span class="comment">// 强制退出</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>捕获未处理的 Promise 拒绝</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;unhandledRejection&#x27;</span>, <span class="function">(<span class="params">reason, promise</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Unhandled Rejection at:&#x27;</span>, promise, <span class="string">&#x27;reason:&#x27;</span>, reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="断言处理">断言处理</h2><p>在开发过程中，<strong>断言 (Assertion)</strong> 是一种重要的调试工具。它允许开发者在运行时验证程序是否符合预期，如果不符合则抛出错误。在 Node.js 中，<code>assert</code> 模块提供了一组基础工具，用于实现这些验证逻辑。</p><h3 id="基本用法">基本用法</h3><p>Node.js通过<code>assert</code>模块提供了简单而强大的断言功能。<code>assert</code>模块的核心方法是<code>assert()</code>，它用于测试一个表达式是否为真。如果测试失败，则抛出一个错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 condition 为 false，断言会抛出错误，message 为错误提示信息。</span></span><br><span class="line"><span class="title function_">assert</span>(condition, message);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">5</span>;</span><br><span class="line"><span class="title function_">assert</span>(x === y, <span class="string">&#x27;x and y should be equal&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="常用方法">常用方法</h3><ol><li><p><code>assert.equal(actual, expected, message)</code>：验证 <code>actual</code> 和 <code>expected</code> 是否相等（使用 <code>==</code>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宽松相等</span></span><br><span class="line">assert.<span class="title function_">equal</span>(<span class="number">2</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Values are not loosely equal&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br><span class="line">assert.<span class="title function_">equal</span>(<span class="literal">true</span>, <span class="number">1</span>, <span class="string">&#x27;Values are not loosely equal&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 严格不相等</span></span><br><span class="line">assert.<span class="title function_">equal</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Values are not loosely equal&#x27;</span>); <span class="comment">// 抛出错误</span></span><br></pre></td></tr></table></figure></li><li><p><code>assert.notEqual(actual, expected, message)</code>：验证 <code>actual</code> 和 <code>expected</code> 是否不相等（使用 <code>!=</code>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宽松不相等</span></span><br><span class="line">assert.<span class="title function_">notEqual</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Values are loosely equal&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br><span class="line">assert.<span class="title function_">notEqual</span>(<span class="literal">true</span>, <span class="number">0</span>, <span class="string">&#x27;Values are loosely equal&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 宽松相等</span></span><br><span class="line">assert.<span class="title function_">notEqual</span>(<span class="number">2</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Values are loosely equal&#x27;</span>); <span class="comment">// 抛出错误</span></span><br></pre></td></tr></table></figure></li><li><p><code>assert.strictEqual(actual, expected, message)</code>：验证 <code>actual</code> 和 <code>expected</code> 是否严格相等（使用 <code>===</code>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assert.<span class="title function_">strictEqual</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;Values are not strictly equal&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br><span class="line">assert.<span class="title function_">strictEqual</span>(<span class="number">2</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;Values are not strictly equal&#x27;</span>); <span class="comment">// 抛出错误</span></span><br></pre></td></tr></table></figure></li><li><p><code>assert.notStrictEqual(actual, expected, message)</code>：验证 <code>actual</code> 和 <code>expected</code> 是否严格不相等（使用 <code>!==</code>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assert.<span class="title function_">notStrictEqual</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;Values are strictly equal&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br><span class="line">assert.<span class="title function_">notStrictEqual</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;Values are strictly equal&#x27;</span>); <span class="comment">// 抛出错误</span></span><br></pre></td></tr></table></figure></li><li><p><code>assert.deepEqual(actual, expected, message)</code>：递归检查对象或数组是否相等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: [<span class="number">2</span>, <span class="number">3</span>] &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">a</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">b</span>: [<span class="number">2</span>, <span class="number">3</span>] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 宽松相等比较</span></span><br><span class="line">assert.<span class="title function_">deepEqual</span>(obj1, obj2, <span class="string">&#x27;Objects are not equal&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj3 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: [<span class="number">2</span>, <span class="number">4</span>] &#125;;</span><br><span class="line">assert.<span class="title function_">deepEqual</span>(obj1, obj3, <span class="string">&#x27;Objects are not equal&#x27;</span>); <span class="comment">// 抛出错误</span></span><br></pre></td></tr></table></figure></li><li><p><code>assert.notDeepEqual(actual, expected, message)</code>：递归检查对象或数组是否不相等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例 1: 对象不同（属性值不同）</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: [<span class="number">2</span>, <span class="number">3</span>] &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: [<span class="number">2</span>, <span class="number">4</span>] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于 obj1 和 obj2 中 b 的值不同，断言通过</span></span><br><span class="line">assert.<span class="title function_">notDeepEqual</span>(obj1, obj2, <span class="string">&#x27;Objects are equal&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例 2: 对象相等（宽松比较）</span></span><br><span class="line"><span class="keyword">const</span> obj3 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: [<span class="number">2</span>, <span class="number">3</span>] &#125;;</span><br><span class="line"><span class="keyword">const</span> obj4 = &#123; <span class="attr">a</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">b</span>: [<span class="number">2</span>, <span class="number">3</span>] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于 obj3 和 obj4 在宽松比较下是相等的，断言失败</span></span><br><span class="line">assert.<span class="title function_">notDeepEqual</span>(obj3, obj4, <span class="string">&#x27;Objects are not equal&#x27;</span>); <span class="comment">// 抛出错误</span></span><br></pre></td></tr></table></figure></li><li><p><code>assert.deepStrictEqual(actual, expected, message)</code>：递归检查对象或数组是否严格相等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assert.<span class="title function_">deepStrictEqual</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, <span class="string">&#x27;Objects are not deeply equal&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br><span class="line">assert.<span class="title function_">deepStrictEqual</span>([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;Arrays are not deeply equal&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br><span class="line">assert.<span class="title function_">deepStrictEqual</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">a</span>: <span class="string">&#x27;1&#x27;</span> &#125;, <span class="string">&#x27;Objects are not deeply equal&#x27;</span>); <span class="comment">// 抛出错误</span></span><br></pre></td></tr></table></figure></li><li><p><code>assert.notDeepStrictEqual(actual, expected, message)</code>：递归检查对象或数组是否严格不相等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assert.<span class="title function_">notDeepStrictEqual</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">a</span>: <span class="number">2</span> &#125;, <span class="string">&#x27;Objects are deeply equal&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br><span class="line">assert.<span class="title function_">notDeepStrictEqual</span>([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">3</span>], <span class="string">&#x27;Arrays are deeply equal&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br><span class="line">assert.<span class="title function_">notDeepStrictEqual</span>(&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, <span class="string">&#x27;Objects are deeply equal&#x27;</span>); <span class="comment">// 抛出错误</span></span><br></pre></td></tr></table></figure></li><li><p><code>assert.ok(value, message)</code>：验证值是否为真值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assert.<span class="title function_">ok</span>(<span class="number">1</span>, <span class="string">&#x27;Value is not truthy&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br><span class="line">assert.<span class="title function_">ok</span>(<span class="literal">false</span>, <span class="string">&#x27;Value is not truthy&#x27;</span>); <span class="comment">// 抛出错误</span></span><br><span class="line">assert.<span class="title function_">ok</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;Value is not truthy&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br></pre></td></tr></table></figure></li><li><p><code>assert.fail(message)</code>：强制触发错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assert.<span class="title function_">fail</span>(<span class="string">&#x27;This is a forced failure&#x27;</span>); <span class="comment">// 始终抛出错误</span></span><br></pre></td></tr></table></figure></li><li><p><code>assert.throws(fn, error, message)</code>：验证函数 <code>fn</code> 是否抛出了指定的错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throwError</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Test error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assert.<span class="title function_">throws</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title function_">throwError</span>(),</span><br><span class="line">    <span class="regexp">/Test error/</span>, <span class="comment">// 匹配错误信息</span></span><br><span class="line">    <span class="string">&#x27;Function did not throw the expected error&#x27;</span></span><br><span class="line">); <span class="comment">// 不会抛出错误</span></span><br></pre></td></tr></table></figure></li><li><p><code>assert.doesNotThrow(fn, message)</code>：验证函数是否未抛出错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">noError</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;All good&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">assert.<span class="title function_">doesNotThrow</span>(<span class="function">() =&gt;</span> <span class="title function_">noError</span>(), <span class="string">&#x27;Function threw an unexpected error&#x27;</span>); <span class="comment">// 不会抛出错误</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="常用场景">常用场景</h3><h4 id="单元测试">单元测试</h4><p>使用断言验证函数输出是否符合预期。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line">assert.<span class="title function_">strictEqual</span>(<span class="title function_">sum</span>(<span class="number">2</span>, <span class="number">3</span>), <span class="number">5</span>, <span class="string">&#x27;Sum function failed&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="输入校验">输入校验</h4><p>在函数开始时使用断言验证输入参数是否有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">divide</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    assert.<span class="title function_">strictEqual</span>(<span class="keyword">typeof</span> a, <span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;a must be a number&#x27;</span>);</span><br><span class="line">    assert.<span class="title function_">strictEqual</span>(<span class="keyword">typeof</span> b, <span class="string">&#x27;number&#x27;</span>, <span class="string">&#x27;b must be a number&#x27;</span>);</span><br><span class="line">    assert.<span class="title function_">ok</span>(b !== <span class="number">0</span>, <span class="string">&#x27;Division by zero&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> a / b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调试代码逻辑">调试代码逻辑</h4><p>检查代码中关键变量的状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line">assert.<span class="title function_">ok</span>(user.<span class="property">name</span>, <span class="string">&#x27;User must have a name&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="测试异步代码">测试异步代码</h4><p>验证异步操作的结果是否正确。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123; <span class="attr">data</span>: <span class="string">&#x27;Hello&#x27;</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">assert.<span class="title function_">deepStrictEqual</span>(result, &#123; <span class="attr">data</span>: <span class="string">&#x27;Hello&#x27;</span> &#125;, <span class="string">&#x27;Fetched data mismatch&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node学习-进程</title>
    <link href="/2024/12/04/Node%E5%AD%A6%E4%B9%A0-%E8%BF%9B%E7%A8%8B/"/>
    <url>/2024/12/04/Node%E5%AD%A6%E4%B9%A0-%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Node.js 作为一种单线程、事件驱动的异步框架，在高并发和高性能的场景下表现出色。然而，Node.js 在处理 CPU 密集型任务时会遇到瓶颈，因为它只有一个主线程来执行所有任务。为了解决这个问题，Node.js 提供了多进程的机制，使得我们能够充分利用多核 CPU 的优势，提升应用程序的处理能力和性能。</p><span id="more"></span><h1>进程</h1><p>Node.js 的运行机制本质上是单线程的，它使用事件循环来处理异步任务，这种模式使得 Node.js 在 I/O 密集型应用中表现非常出色。但是，Node.js 在处理 CPU 密集型任务时，单线程会遇到性能瓶颈，无法有效利用多核 CPU 资源。</p><h2 id="多进程架构的必要性">多进程架构的必要性</h2><ol><li><strong>单核问题</strong>：Node.js 只有一个主线程，所有的任务（包括 I/O 和计算密集型任务）都在这个线程中处理。如果执行了一个复杂的计算任务，事件循环会被阻塞，导致系统无法响应其他请求。</li><li><strong>多核优势</strong>：现代 CPU 大多数都是多核的，利用多进程可以将任务分配到多个 CPU 核心上，从而提升处理能力。</li></ol><h2 id="Node进程对象">Node进程对象</h2><p>Node.js通过全局对象<code>process</code>提供了对当前进程的管理功能。在 Node.js 中，<code>process</code> 对象是一个全局对象，无需 <code>require</code> 即可使用，它提供了一组用于与当前 Node.js 进程交互的方法和属性。</p><p><strong>常用的<code>process</code>属性：</strong></p><ol><li><code>process.pid</code>：当前进程的进程ID。</li><li><code>process.argv</code>：一个数组，包含了启动Node.js进程时传递给程序的命令行参数。<ul><li>第一个元素是 Node.js 可执行文件路径。</li><li>第二个元素是当前脚本文件路径。</li><li>第三个元素开始是用户传递的参数。</li></ul></li><li><code>process.env</code>：获取与当前进程相关的环境变量。</li><li><code>process.cwd()</code>：获取当前工作目录。</li><li><code>process.chdir(path)</code>：改变当前工作目录。</li><li><code>rocess.memoryUsage()</code>：返回一个对象，表示进程的内存使用情况<ul><li><code>rss</code>：驻留集大小。</li><li><code>heapTotal</code>：V8 堆中总的内存量。</li><li><code>heapUsed</code>：V8 堆中已使用的内存量。</li><li><code>external</code>：绑定到 JavaScript 的 C++ 对象占用的内存量。</li></ul></li><li><code>process.uptime()</code>：返回 Node.js 进程已运行的秒数。</li></ol><p><strong>常用的<code>process</code>方法：</strong></p><ol><li><code>process.exit()</code>：用于退出当前进程，通常传入参数<code>0</code>表示正常退出，非0表示异常退出。</li><li><code>process.kill(pid, [signal])</code>：向指定 PID 的进程发送信号（默认 <code>SIGTERM</code>）。</li><li><code>process.nextTick(callback)</code>：将一个回调函数放入下一次事件循环的顶部，而不是底部。它优先于异步任务（如 <code>setTimeout</code>、<code>Promise</code>）。</li><li><code>process.stdout</code>：标准输出流，用于输出信息。</li><li><code>process.stderr</code>：标准错误流，用于输出错误信息。</li></ol><p><strong>进程生命周期</strong>：</p><p><code>process</code> 是 <code>EventEmitter</code> 的实例，Node.js的进程从启动到退出，都有一个生命周期。通过监听<code>process</code>的事件，可以对进程的生命周期进行管理。</p><ol><li><strong><code>exit</code>事件</strong>：当进程退出时触发。</li><li><strong><code>uncaughtException</code>事件</strong>：捕获未处理的异常。</li><li><strong><code>SIGINT</code> 事件</strong>：当用户按下 <code>Ctrl+C</code> 时触发</li><li><strong><code>beforeExit</code> 事件</strong>：当事件循环为空、程序即将退出时触发。不同于 <code>exit</code>，可以在 <code>beforeExit</code> 中执行异步操作。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;exit&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`进程退出，退出码: <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;uncaughtException&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;未捕获的异常:&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;测试异常&#x27;</span>);</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;SIGINT&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;捕获到 SIGINT 信号，进程即将退出&#x27;</span>);</span><br><span class="line">process.<span class="title function_">exit</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;beforeExit&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`beforeExit: 退出码 <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="子进程的使用">子进程的使用</h2><p>尽管主进程是单线程的，Node.js 提供了创建子进程的能力，以处理 CPU 密集型任务或运行独立的脚本。</p><h3 id="child-process-模块"><code>child_process</code> 模块</h3><p><code>child_process</code>模块提供了创建和管理子进程的API。常用的子进程创建方法包括：</p><ol><li><p><strong><code>spawn</code></strong>：适用于启动子进程并与之交互，返回子进程的流对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 spawn 启动子进程</span></span><br><span class="line"><span class="keyword">const</span> ls = <span class="title function_">spawn</span>(<span class="string">&#x27;ls&#x27;</span>, [<span class="string">&#x27;-lh&#x27;</span>, <span class="string">&#x27;/usr&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">ls.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`输出: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ls.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`错误: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ls.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子进程退出，退出码: <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong><code>fork</code></strong>：创建一个新的Node.js进程，适用于Node.js应用之间的通信。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; fork &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="title function_">fork</span>(<span class="string">&#x27;child.js&#x27;</span>);  <span class="comment">// fork创建一个新的Node.js进程</span></span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Received from child: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">send</span>(&#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;);  <span class="comment">// 向子进程发送消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// child.js文件可以是一个简单的Node.js脚本，接收和发送消息。</span></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Received from parent: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(msg)&#125;</span>`</span>);</span><br><span class="line">process.<span class="title function_">send</span>(<span class="string">&#x27;Hello from child&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong><code>exec</code></strong>：执行一个shell命令并返回结果，适合一次性任务。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">exec</span>(<span class="string">&#x27;ls -lh&#x27;</span>, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`exec error: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><strong><code>execFile</code></strong>：直接执行一个可执行文件，避免shell的干扰，适合执行外部程序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; execFile &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">execFile</span>(<span class="string">&#x27;ls&#x27;</span>, [<span class="string">&#x27;-lh&#x27;</span>], <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`execFile error: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="cluster-模块"><code>cluster</code> 模块</h3><p><code>cluster</code> 模块是 Node.js 提供的一种多进程实现方式，它允许我们创建一个主进程和多个工作进程，从而将 HTTP 请求负载均衡地分配给多个进程，充分利用多核 CPU。</p><ol><li><strong>主进程和工作进程</strong>：主进程负责创建工作进程并管理它们，工作进程则负责处理具体的请求。每个工作进程都是独立的，它们共享同一个端口，但处理的请求是独立的。</li><li><strong>工作进程的创建</strong>：通过 <code>cluster.fork()</code> 方法创建多个子进程，每个进程监听相同的端口。</li><li><strong>进程通信</strong>：主进程和工作进程之间可以通过 <code>process.send()</code> 和 <code>worker.on('message', ...)</code> 方法进行通信。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cluster = <span class="built_in">require</span>(<span class="string">&#x27;cluster&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cluster.<span class="property">isMaster</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> numCPUs = os.<span class="title function_">cpus</span>().<span class="property">length</span>;  <span class="comment">// 获取 CPU 核心数</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Master <span class="subst">$&#123;process.pid&#125;</span> is running`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建子进程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class="line">        cluster.<span class="title function_">fork</span>();  <span class="comment">// 启动工作进程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cluster.<span class="title function_">on</span>(<span class="string">&#x27;exit&#x27;</span>, <span class="function">(<span class="params">worker, code, signal</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;worker.process.pid&#125;</span> died`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 每个工作进程都创建 HTTP 服务器</span></span><br><span class="line">    http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.<span class="title function_">writeHead</span>(<span class="number">200</span>);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;Hello, Node.js!&#x27;</span>);</span><br><span class="line">    &#125;).<span class="title function_">listen</span>(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Worker <span class="subst">$&#123;process.pid&#125;</span> started`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进程间的消息传递">进程间的消息传递</h2><p>进程间通信（IPC）是指在不同进程间传递数据，主进程和子进程之间需要通过 IPC（进程间通信）进行数据交换。</p><h3 id="child-process-模块-2"><code>child_process</code> 模块</h3><ol><li>使用<code>fork</code>创建的子进程有一个内建的消息通道，可以通过<code>process.send()</code>发送消息，主进程通过<code>message</code>事件接收消息。</li><li><code>spawn</code>也可以与子进程进行通信，但需要通过标准输入输出（stdin/stdout）来交换数据。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主进程</span></span><br><span class="line"><span class="keyword">const</span> &#123; fork &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> child = <span class="title function_">fork</span>(<span class="string">&#x27;./child.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到子进程消息:&#x27;</span>, msg);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">send</span>(&#123; <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子进程 (child.js)</span></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;收到主进程消息:&#x27;</span>, msg);</span><br><span class="line">    process.<span class="title function_">send</span>(&#123; <span class="attr">reply</span>: <span class="string">&#x27;hello from child&#x27;</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="cluster-模块-2"><code>cluster</code> 模块</h3><p>在 <code>cluster</code> 模块中，主进程和工作进程之间可以使用 <code>process.send()</code> 来发送消息，工作进程通过监听 <code>message</code> 事件来接收消息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主进程</span></span><br><span class="line"><span class="keyword">if</span> (cluster.<span class="property">isMaster</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> worker = cluster.<span class="title function_">fork</span>();</span><br><span class="line">    worker.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received message from worker:&#x27;</span>, msg);</span><br><span class="line">    &#125;);</span><br><span class="line">    worker.<span class="title function_">send</span>(<span class="string">&#x27;Hello Worker!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工作进程</span></span><br><span class="line"><span class="keyword">if</span> (cluster.<span class="property">isWorker</span>) &#123;</span><br><span class="line">    process.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Received message from master:&#x27;</span>, msg);</span><br><span class="line">        process.<span class="title function_">send</span>(<span class="string">&#x27;Hello Master!&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进程管理工具">进程管理工具</h2><p>Node.js 提供了多种工具来管理和监控进程：</p><ol><li><strong>PM2</strong>：PM2 是 Node.js 的进程管理器，它可以帮助你管理 Node.js 的多进程应用，进行自动重启、日志记录、负载均衡等操作。</li><li><strong><code>process</code> 模块</strong>：<code>process</code> 模块提供了有关当前进程的信息。</li><li><strong>Docker</strong>：结合容器技术，将 Node.js 应用与其依赖封装起来，便于部署和扩展。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node学习-网络编程</title>
    <link href="/2024/12/03/Node%E5%AD%A6%E4%B9%A0-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/12/03/Node%E5%AD%A6%E4%B9%A0-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>网络编程是 Node.js 的核心应用场景之一，其事件驱动和非阻塞 I/O 特性，使其在构建高性能网络服务时表现出色。</p><span id="more"></span><h1>网络编程</h1><h2 id="TCP">TCP</h2><p>TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的协议。它保证数据在网络中的顺序和完整性，在数据传输前需要建立连接，适合用于需要高可靠性的通信场景（如网页浏览、文件传输等）。Node.js提供了<code>net</code>模块来处理TCP协议。该模块允许我们创建TCP服务器和客户端，进行基于TCP的通信。</p><h3 id="创建TCP服务器">创建TCP服务器</h3><p><code>net.createServer</code>方法用于创建一个TCP服务器，接收来自客户端的连接请求，并为每个连接创建一个Socket对象，通过该对象进行数据交换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 net 模块</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 TCP 服务器</span></span><br><span class="line"><span class="keyword">const</span> server = net.<span class="title function_">createServer</span>(<span class="function">(<span class="params">socket</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;客户端已连接&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置客户端连接时的数据编码</span></span><br><span class="line">    socket.<span class="title function_">setEncoding</span>(<span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听客户端发送的数据</span></span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收到数据:&#x27;</span>, data);</span><br><span class="line">        <span class="comment">// 向客户端发送数据</span></span><br><span class="line">        socket.<span class="title function_">write</span>(<span class="string">&#x27;Hello from server!&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听客户端连接关闭事件</span></span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;客户端断开连接&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错误处理</span></span><br><span class="line">    socket.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;发生错误:&#x27;</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义服务器监听的端口和地址</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">8080</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HOST</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器监听端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="variable constant_">HOST</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`服务器正在运行, 监听 <span class="subst">$&#123;HOST&#125;</span>:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><code>net.createServer()</code> 用于创建一个 TCP 服务器，它的回调函数会在每次有客户端连接时被调用，回调函数的参数 <code>socket</code> 表示与客户端的连接。</li><li><code>socket.setEncoding('utf8')</code> 设置传输的数据的编码格式为 <code>utf8</code>，这样你就可以直接以字符串的形式处理传输的数据。</li><li><code>socket.on('data', callback)</code> 用于监听客户端发送的数据，每次客户端发送数据时，都会触发这个事件。</li><li><code>socket.write()</code> 用于向客户端发送数据。</li><li><code>socket.on('end', callback)</code> 当客户端关闭连接时触发此事件。</li><li><code>socket.on('error', callback)</code> 用于监听连接中的错误。</li></ol><h3 id="创建TCP客户端">创建TCP客户端</h3><p><code>net.connect</code> 和 <code>net.createConnection</code> 方法用于创建一个TCP客户端，用于连接TCP服务器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 net 模块</span></span><br><span class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">&#x27;net&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 TCP 客户端</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> net.<span class="title class_">Socket</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接到服务器</span></span><br><span class="line">client.<span class="title function_">connect</span>(<span class="number">8080</span>, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;连接到服务器&#x27;</span>);</span><br><span class="line">    <span class="comment">// 向服务器发送数据</span></span><br><span class="line">    client.<span class="title function_">write</span>(<span class="string">&#x27;Hello from client!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听服务器发送的数据</span></span><br><span class="line">client.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收到服务器的数据:&#x27;</span>, data.<span class="title function_">toString</span>());</span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    client.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听连接关闭事件</span></span><br><span class="line">client.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;与服务器的连接已关闭&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理</span></span><br><span class="line">client.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;发生错误:&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><code>client.connect(port, host, callback)</code> 用于连接到指定的服务器端口和地址。在这个例子中，它连接到 <code>127.0.0.1:8080</code>。</li><li><code>client.write()</code> 用于向服务器发送数据。</li><li><code>client.on('data', callback)</code> 用于监听从服务器接收到的数据。</li><li><code>client.end()</code> 关闭与服务器的连接。</li><li><code>client.on('end', callback)</code> 用于监听连接关闭事件。</li></ol><h2 id="UDP">UDP</h2><p>UDP（User Datagram Protocol，用户数据报协议）是一种无连接、不可靠的协议。与TCP不同，UDP不会建立连接，它直接将数据报发送到目标地址，适合用于传输不需要高可靠性的短小数据包（如视频流、实时游戏通信等）。Node.js 使用 <code>dgram</code> 模块支持 UDP 编程。</p><h3 id="创建UDP服务器">创建UDP服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dgram = <span class="built_in">require</span>(<span class="string">&#x27;dgram&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 UDP 服务器</span></span><br><span class="line"><span class="keyword">const</span> server = dgram.<span class="title function_">createSocket</span>(<span class="string">&#x27;udp4&#x27;</span>); <span class="comment">// &#x27;udp4&#x27; 表示使用 IPv4，&#x27;udp6&#x27; 表示使用 IPv6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听客户端发送的数据</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">msg, rinfo</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`收到来自 <span class="subst">$&#123;rinfo.address&#125;</span>:<span class="subst">$&#123;rinfo.port&#125;</span> 的消息: <span class="subst">$&#123;msg&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送响应数据给客户端</span></span><br><span class="line">    <span class="keyword">const</span> responseMessage = <span class="string">&#x27;Hello from UDP server!&#x27;</span>;</span><br><span class="line">    server.<span class="title function_">send</span>(responseMessage, <span class="number">0</span>, responseMessage.<span class="property">length</span>, rinfo.<span class="property">port</span>, rinfo.<span class="property">address</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;发送消息时发生错误:&#x27;</span>, err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应消息已发送&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听错误事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`服务器发生错误: <span class="subst">$&#123;err.stack&#125;</span>`</span>);</span><br><span class="line">    server.<span class="title function_">close</span>(); <span class="comment">// 关闭服务器</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听服务器绑定事件</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;listening&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> address = server.<span class="title function_">address</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`UDP 服务器正在监听 <span class="subst">$&#123;address.address&#125;</span>:<span class="subst">$&#123;address.port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器绑定端口</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HOST</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line">server.<span class="title function_">bind</span>(<span class="variable constant_">PORT</span>, <span class="variable constant_">HOST</span>);</span><br></pre></td></tr></table></figure><ol><li><code>dgram.createSocket('udp4')</code>：创建一个 UDP 套接字，<code>'udp4'</code> 表示使用 IPv4 协议，如果你想使用 IPv6，可以选择 <code>'udp6'</code>。</li><li><code>server.on('message', callback)</code>：监听客户端发送的消息，每次接收到消息时，都会调用这个回调函数，<code>msg</code> 是消息内容，<code>rinfo</code> 包含客户端的 IP 地址和端口信息。</li><li><code>server.send()</code>：向客户端发送数据。<code>rinfo.address</code> 和 <code>rinfo.port</code> 获取客户端的 IP 和端口信息，以便将响应消息发回客户端。</li><li><code>server.on('listening', callback)</code>：监听服务器启动并绑定端口后的事件，这时可以获得服务器的地址信息。</li><li><code>server.bind(PORT, HOST)</code>：绑定服务器监听的端口和主机地址，在这个例子中是 <code>127.0.0.1:12345</code>。</li></ol><h3 id="创建UDP客户端">创建UDP客户端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dgram = <span class="built_in">require</span>(<span class="string">&#x27;dgram&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 UDP 客户端</span></span><br><span class="line"><span class="keyword">const</span> client = dgram.<span class="title function_">createSocket</span>(<span class="string">&#x27;udp4&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息到 UDP 服务器</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;Hello from UDP client!&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">12345</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HOST</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向服务器发送消息</span></span><br><span class="line">client.<span class="title function_">send</span>(message, <span class="number">0</span>, message.<span class="property">length</span>, <span class="variable constant_">PORT</span>, <span class="variable constant_">HOST</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;发送消息时发生错误:&#x27;</span>, err);</span><br><span class="line">        client.<span class="title function_">close</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;消息已发送到服务器&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听从服务器接收到的数据</span></span><br><span class="line">client.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">msg, rinfo</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`收到来自 <span class="subst">$&#123;rinfo.address&#125;</span>:<span class="subst">$&#123;rinfo.port&#125;</span> 的响应: <span class="subst">$&#123;msg&#125;</span>`</span>);</span><br><span class="line">    client.<span class="title function_">close</span>(); <span class="comment">// 接收到响应后关闭客户端</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听错误事件</span></span><br><span class="line">client.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`客户端发生错误: <span class="subst">$&#123;err.stack&#125;</span>`</span>);</span><br><span class="line">    client.<span class="title function_">close</span>(); <span class="comment">// 关闭客户端</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><code>dgram.createSocket('udp4')</code>：创建一个 UDP 客户端，<code>'udp4'</code> 使用 IPv4 协议。</li><li><code>client.send()</code>：发送数据到服务器，<code>Buffer.from()</code> 用于将消息转化为 <code>Buffer</code> 类型，这样可以发送到网络上。</li><li><code>client.on('message', callback)</code>：监听从服务器接收到的响应消息。</li><li><code>client.on('error', callback)</code>：监听错误事件，处理连接过程中的错误。</li></ol><h2 id="HTTP">HTTP</h2><p>HTTP（HyperText Transfer Protocol，超文本传输协议）是Web通信的基础协议，主要用于客户端与服务器之间的请求和响应。HTTP是无状态的协议，每个请求都是独立的，不依赖于先前的请求或后续的请求。Node.js提供了<code>http</code>模块来实现HTTP服务器。</p><h3 id="创建HTTP服务器">创建HTTP服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 HTTP 服务器</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应的内容</span></span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">200</span>; <span class="comment">// 设置 HTTP 状态码为 200（成功）</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h1&gt;Hello, Node.js HTTP Server!&lt;/h1&gt;&#x27;</span>); <span class="comment">// 响应数据内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 完成响应</span></span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义服务器监听的端口和地址</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HOST</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 HTTP 服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="variable constant_">HOST</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`HTTP 服务器正在运行，监听 <span class="subst">$&#123;HOST&#125;</span>:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><code>http.createServer()</code>：创建一个 HTTP 服务器。这个方法的回调函数会在每次有请求到达时被调用，<code>req</code> 是请求对象，<code>res</code> 是响应对象。</li><li><code>res.setHeader('Content-Type', 'text/html')</code>：设置响应头，这里我们设置了 <code>Content-Type</code> 为 <code>text/html</code>，表示响应的内容是 HTML 格式。</li><li><code>res.statusCode = 200</code>：设置响应的状态码为 200，表示请求成功。</li><li><code>res.write()</code>：向客户端发送响应的主体部分，这里发送了一个简单的 HTML <code>&lt;h1&gt;</code> 标签。</li><li><code>res.end()</code>：结束响应并将响应发送回客户端。</li><li><code>server.listen(PORT, HOST)</code>：指定服务器监听的主机和端口，这里我们指定了 <code>127.0.0.1</code> 和端口 <code>3000</code>。</li></ol><h3 id="HTTP请求处理">HTTP请求处理</h3><p>HTTP 协议支持多种请求方法（如 GET、POST、PUT、DELETE 等），可以根据请求方法来处理不同的请求。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 HTTP 服务器</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理 GET 请求</span></span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">        res.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h1&gt;GET 请求接收成功!&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理 POST 请求</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">method</span> === <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">        res.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h1&gt;POST 请求接收成功!&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他请求方法</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="property">statusCode</span> = <span class="number">405</span>; <span class="comment">// 405 方法不允许</span></span><br><span class="line">        res.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h1&gt;不支持此请求方法!&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 完成响应</span></span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义服务器监听的端口和地址</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HOST</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 HTTP 服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="variable constant_">HOST</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`HTTP 服务器正在运行，监听 <span class="subst">$&#123;HOST&#125;</span>:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="处理URL和查询参数">处理URL和查询参数</h3><p>Node.js通过<code>url</code>模块提供了对URL的解析与处理能力。使用<code>url.parse()</code>方法可以解析URL，获取路径和查询字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> reqUrl = url.<span class="title function_">parse</span>(<span class="string">&#x27;http://localhost:3000/?name=John&amp;age=30&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reqUrl.<span class="property">query</span>);  <span class="comment">// 输出：&#123; name: &#x27;John&#x27;, age: &#x27;30&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="发送HTTP响应">发送HTTP响应</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 HTTP 服务器</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应头为 JSON 格式</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应 JSON 数据</span></span><br><span class="line">    <span class="keyword">const</span> responseData = &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&#x27;Hello, this is a JSON response!&#x27;</span>,</span><br><span class="line">        <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">200</span>;</span><br><span class="line">    res.<span class="title function_">write</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(responseData)); <span class="comment">// 将对象转换为 JSON 字符串</span></span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义服务器监听的端口和地址</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HOST</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 HTTP 服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="variable constant_">HOST</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`HTTP 服务器正在运行，监听 <span class="subst">$&#123;HOST&#125;</span>:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="HTTPS">HTTPS</h2><p>HTTPS（HTTP Secure）则是在HTTP的基础上通过SSL/TLS协议加密，确保数据传输的安全性。Node.js通过<code>https</code>模块提供HTTPS支持。</p><h3 id="创建HTTPS服务器">创建HTTPS服务器</h3><p>与 <code>http</code> 模块类似，<code>https</code> 模块提供了一个 <code>createServer()</code> 方法来创建服务器。与 <code>http</code> 模块不同，使用 <code>https</code> 创建的服务器需要提供 SSL/TLS 证书文件。证书文件通常包括私钥（<code>key</code>）、证书（<code>cert</code>）和可能的证书链文件（<code>ca</code>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取证书文件</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">key</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;server-key.pem&#x27;</span>),  <span class="comment">// 私钥文件</span></span><br><span class="line">    <span class="attr">cert</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;server-cert.pem&#x27;</span>) <span class="comment">// 证书文件</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 HTTPS 服务器</span></span><br><span class="line"><span class="keyword">const</span> server = https.<span class="title function_">createServer</span>(options, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应的内容</span></span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">200</span>;  <span class="comment">// 设置 HTTP 状态码为 200（成功）</span></span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&#x27;&lt;h1&gt;Hello, Node.js HTTPS Server!&lt;/h1&gt;&#x27;</span>);  <span class="comment">// 响应数据内容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 完成响应</span></span><br><span class="line">    res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义服务器监听的端口和地址</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PORT</span> = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HOST</span> = <span class="string">&#x27;127.0.0.1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 HTTPS 服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="variable constant_">PORT</span>, <span class="variable constant_">HOST</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`HTTPS 服务器正在运行，监听 <span class="subst">$&#123;HOST&#125;</span>:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="WebSocket">WebSocket</h2><p>WebSocket 是一种基于 TCP 的协议，它在客户端和服务器之间建立一个持久的双向通信通道。与 HTTP 协议不同，WebSocket 允许客户端和服务器之间进行全双工通信，即可以随时发送数据而不需要等待对方的请求。</p><h3 id="创建-WebSocket-服务器">创建 WebSocket 服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 WebSocket 服务器，监听指定端口</span></span><br><span class="line"><span class="keyword">const</span> wss = <span class="keyword">new</span> <span class="title class_">WebSocket</span>.<span class="title class_">Server</span>(&#123; <span class="attr">port</span>: <span class="number">8080</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当有客户端连接时</span></span><br><span class="line">wss.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>, <span class="function">(<span class="params">ws</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;客户端已连接&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听客户端消息</span></span><br><span class="line">    ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`收到客户端消息: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向客户端发送回应</span></span><br><span class="line">        ws.<span class="title function_">send</span>(<span class="string">`服务器收到你的消息: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向客户端发送欢迎消息</span></span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">&#x27;欢迎连接到 WebSocket 服务器！&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket 服务器正在运行，监听端口 8080&#x27;</span>);</span><br></pre></td></tr></table></figure><ol><li><code>const wss = new WebSocket.Server(&#123; port: 8080 &#125;)</code>：创建一个 WebSocket 服务器，监听 8080 端口。此服务器会接收客户端连接。</li><li><code>wss.on('connection', callback)</code>：每当一个客户端连接到服务器时，会触发 <code>connection</code> 事件，<code>ws</code> 是 WebSocket 客户端实例。</li><li><code>ws.on('message', callback)</code>：监听从客户端发送的消息，每当客户端发送消息时，会触发 <code>message</code> 事件。</li><li><code>ws.send(message)</code>：向客户端发送消息。</li></ol><h3 id="创建-WebSocket-客户端">创建 WebSocket 客户端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">WebSocket</span> = <span class="built_in">require</span>(<span class="string">&#x27;ws&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 WebSocket 客户端并连接到服务器</span></span><br><span class="line"><span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:8080&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接成功时的回调函数</span></span><br><span class="line">ws.<span class="title function_">on</span>(<span class="string">&#x27;open&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已连接到 WebSocket 服务器&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向服务器发送消息</span></span><br><span class="line">    ws.<span class="title function_">send</span>(<span class="string">&#x27;Hello, Server!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收从服务器发送的消息</span></span><br><span class="line">ws.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`收到服务器消息: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接关闭时的回调函数</span></span><br><span class="line">ws.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket 连接已关闭&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><code>new WebSocket('ws://localhost:8080')</code>：创建一个 WebSocket 客户端并连接到 <code>ws://localhost:8080</code> 地址。</li><li><code>ws.on('open', callback)</code>：连接成功时会触发 <code>open</code> 事件。在这个回调中，我们发送一条消息到服务器。</li><li><code>ws.on('message', callback)</code>：监听从服务器发送的消息。每当服务器发送消息时，触发 <code>message</code> 事件。</li><li><code>ws.on('close', callback)</code>：监听 WebSocket 连接关闭的事件。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node学习-文件系统操作</title>
    <link href="/2024/12/02/Node%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/12/02/Node%E5%AD%A6%E4%B9%A0-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>Node.js 提供了强大的文件系统 (File System, FS) 模块，用于对文件和目录进行操作。它既支持同步操作，也支持异步操作，能够很好地满足不同场景下的需求。</p><span id="more"></span><h1>文件系统操作</h1><h2 id="引入文件系统模块">引入文件系统模块</h2><p>在使用文件系统功能之前，需要引入 <code>fs</code> 模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>); <span class="comment">// 通常配合使用 path 模块处理路径</span></span><br></pre></td></tr></table></figure><h2 id="同步与异步方法">同步与异步方法</h2><p>Node.js中的文件系统操作大多同时提供了同步和异步两种实现方式：</p><ol><li><strong>同步方法</strong>（<code>fs.readFileSync</code>等）会阻塞线程，适合需要严格执行顺序的任务。</li><li><strong>异步方法</strong>（<code>fs.readFile</code>等）通过回调函数处理结果，利用Node.js的事件驱动特性避免阻塞，适用于性能要求较高的场景。</li></ol><h2 id="文件统计信息">文件统计信息</h2><h3 id="异步获取文件统计信息">异步获取文件统计信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">stat</span>(<span class="string">&#x27;./test.txt&#x27;</span>, <span class="function">(<span class="params">err, stats</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="title function_">isFile</span>());<span class="comment">// 判断是否是一个文件</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="title function_">isDirectory</span>());<span class="comment">// 判断是否是一个目录</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="title function_">isSymbolicLink</span>());<span class="comment">// 判断文件是否使用符号链接</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="property">size</span>);<span class="comment">// 获取文件大小，以字节为单位</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="同步获取文件统计信息">同步获取文件统计信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> stats = fs.<span class="title function_">statSync</span>(<span class="string">&#x27;./test.txt&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="title function_">isFile</span>());<span class="comment">// 判断是否是一个文件</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="title function_">isDirectory</span>());<span class="comment">// 判断是否是一个目录</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="title function_">isSymbolicLink</span>());<span class="comment">// 判断文件是否使用符号链接</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="property">size</span>);<span class="comment">// 获取文件大小，以字节为单位</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于Promise的获取文件统计信息">基于Promise的获取文件统计信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;node:fs/promises&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> stats = <span class="keyword">await</span> fs.<span class="title function_">stat</span>(<span class="string">&#x27;./test.txt&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="title function_">isFile</span>());<span class="comment">// 判断是否是一个文件</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="title function_">isDirectory</span>());<span class="comment">// 判断是否是一个目录</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="title function_">isSymbolicLink</span>());<span class="comment">// 判断文件是否使用符号链接</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="property">size</span>);<span class="comment">// 获取文件大小，以字节为单位</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">example</span>();</span><br></pre></td></tr></table></figure><h2 id="文件路径">文件路径</h2><h3 id="从路径获取信息">从路径获取信息</h3><ol><li><code>dirname</code>：获取文件的父文件夹</li><li><code>basename</code>：获取文件名部分</li><li><code>extname</code>：获取文件扩展名</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> notes = <span class="string">&#x27;/users/joe/notes.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(notes));   <span class="comment">// /users/joe</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(notes));  <span class="comment">// notes.txt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(notes));   <span class="comment">// .txt</span></span><br></pre></td></tr></table></figure><h3 id="使用路径">使用路径</h3><ol><li><p>使用 <code>path.join()</code> 连接路径的两个或多个部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;joe&#x27;</span>;</span><br><span class="line">path.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;users&#x27;</span>, name, <span class="string">&#x27;notes.txt&#x27;</span>); <span class="comment">// &#x27;/users/joe/notes.txt&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>使用 <code>path.resolve()</code> 获取相对路径的绝对路径计算</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.<span class="title function_">resolve</span>(<span class="string">&#x27;joe.txt&#x27;</span>); <span class="comment">// &#x27;/Users/joe/joe.txt&#x27; if run from my home folder</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="文件读写操作">文件读写操作</h2><h3 id="文件的完整读写">文件的完整读写</h3><h4 id="读取文件">读取文件</h4><ol><li><p>异步读取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;读取文件失败：&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件内容：&#x27;</span>, data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>同步读取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件内容：&#x27;</span>, data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;读取文件失败：&#x27;</span>, err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于Promise的读取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fsPromises = fs.<span class="property">promises</span>;</span><br><span class="line"></span><br><span class="line">fsPromises.<span class="title function_">readFile</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件内容：&#x27;</span>, data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;读取文件失败：&#x27;</span>, err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><h4 id="写入文件">写入文件</h4><ol><li><p>异步写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;Hello, Node.js!&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;写入文件失败：&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件写入成功！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>同步写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fs.<span class="title function_">writeFileSync</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;Hello, Node.js!&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件写入成功！&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;写入文件失败：&#x27;</span>, err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>追加写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">appendFile</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;\nAppend content.&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;追加写入失败：&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;追加写入成功！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="指定位置文件读写">指定位置文件读写</h3><p>实现从指定位置处开始读写文件，需要使用<code>open()</code>或<code>openSync()</code>方法打开文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">open</span>(path, flags, [mode], callback)</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">fs.<span class="title function_">openSync</span>(path, flags, [mode])</span><br></pre></td></tr></table></figure><ol><li><code>path</code>：文件路径。</li><li><code>flags</code>：打开文件的模式，如 <code>'r'</code>（读取）、<code>'w'</code>（写入）、<code>'a'</code>（追加）。</li><li><code>mode</code>：文件权限（可选），如 <code>0o666</code>。</li><li><code>callback</code>：包含 <code>(err, fd)</code> 的回调，其中 <code>fd</code> 是文件描述符。</li></ol><h4 id="读取文件-2">读取文件</h4><p>使用 <code>fs.read</code> 方法可以从文件的指定位置读取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">read</span>(fd, buffer, offset, length, position, callback)</span><br></pre></td></tr></table></figure><ol><li><strong><code>fd</code></strong>：文件描述符。</li><li><strong><code>buffer</code></strong>：数据将被写入的缓冲区（Buffer 对象）。</li><li><strong><code>offset</code></strong>：缓冲区的起始位置（从缓冲区的第几个字节开始写入）。</li><li><strong><code>length</code></strong>：要读取的字节数。</li><li><strong><code>position</code></strong>：文件中的起始读取位置，若为 <code>null</code> 则从当前位置读取。</li><li><strong><code>callback</code></strong>：回调函数，参数 <code>(err, bytesRead, buffer)</code>：<ul><li><code>bytesRead</code> 表示实际读取的字节数。</li><li><code>buffer</code> 是写入数据后的缓冲区。</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">open</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="function">(<span class="params">err, fd</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> buffer = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>); <span class="comment">// 创建一个大小为10字节的缓冲区</span></span><br><span class="line">    fs.<span class="title function_">read</span>(fd, buffer, <span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="function">(<span class="params">err, bytesRead, buffer</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`读取了 <span class="subst">$&#123;bytesRead&#125;</span> 字节数据：`</span>, buffer.<span class="title function_">toString</span>());</span><br><span class="line">        fs.<span class="title function_">close</span>(fd, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件关闭成功&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用 <code>fs.readSync</code> 方法可以实现同步方式指定位置读取文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fd = fs.<span class="title function_">openSync</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> buffer = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> bytesRead = fs.<span class="title function_">readSync</span>(fd, buffer, <span class="number">0</span>, <span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`同步读取了 <span class="subst">$&#123;bytesRead&#125;</span> 字节数据：`</span>, buffer.<span class="title function_">toString</span>());</span><br><span class="line">fs.<span class="title function_">closeSync</span>(fd);</span><br></pre></td></tr></table></figure><h4 id="写入文件-2">写入文件</h4><p>使用 <code>fs.write</code> 方法可以从文件的指定位置开始写入数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">write</span>(fd, buffer, [offset], [length], [position], callback)</span><br><span class="line">fs.<span class="title function_">write</span>(fd, string, [position], [encoding], callback)</span><br></pre></td></tr></table></figure><ol><li><strong><code>fd</code></strong>：文件描述符。</li><li><strong><code>buffer</code></strong>：要写入的数据（Buffer 对象）。</li><li><strong><code>offset</code></strong>：缓冲区的起始位置（从缓冲区的第几个字节开始读取数据写入文件）。</li><li><strong><code>length</code></strong>：要写入的字节数。</li><li><strong><code>position</code></strong>：文件中的起始写入位置，若为 <code>null</code> 则从当前位置写入。</li><li><strong><code>callback</code></strong>：回调函数，参数 <code>(err, bytesWritten, buffer)</code>：<ul><li><code>bytesWritten</code> 表示实际写入的字节数。</li><li><code>buffer</code> 是被写入的缓冲区。</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">open</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>, <span class="function">(<span class="params">err, fd</span>) =&gt;</span> &#123; <span class="comment">// &#x27;r+&#x27; 允许读写</span></span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> buffer = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">    fs.<span class="title function_">write</span>(fd, buffer, <span class="number">0</span>, buffer.<span class="property">length</span>, <span class="number">5</span>, <span class="function">(<span class="params">err, bytesWritten, buffer</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`写入了 <span class="subst">$&#123;bytesWritten&#125;</span> 字节数据：`</span>, buffer.<span class="title function_">toString</span>());</span><br><span class="line">        fs.<span class="title function_">close</span>(fd, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件关闭成功&#x27;</span>));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用 <code>fs.writeSync</code> 方法可以实现同步方式指定位置写入文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fd = fs.<span class="title function_">openSync</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> buffer = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;World&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bytesWritten = fs.<span class="title function_">writeSync</span>(fd, buffer, <span class="number">0</span>, buffer.<span class="property">length</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`同步写入了 <span class="subst">$&#123;bytesWritten&#125;</span> 字节数据`</span>);</span><br><span class="line">fs.<span class="title function_">closeSync</span>(fd);</span><br></pre></td></tr></table></figure><p>当对文件的读写操作执行完毕后，需要使用<code>close()</code>或<code>closeSync()</code>方法关闭文件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">close</span>(fd, [callback])</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">fs.<span class="title function_">closeSync</span>(fd)</span><br></pre></td></tr></table></figure><ol><li><code>fd</code>：文件描述符。</li><li><code>callback</code>：包含 <code>(err)</code> 的回调。</li></ol><h3 id="删除文件">删除文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;删除文件失败：&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件删除成功！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="重命名文件">重命名文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;oldName.txt&#x27;</span>, <span class="string">&#x27;newName.txt&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;重命名文件失败：&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件重命名成功！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="检查文件是否存在">检查文件是否存在</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">access</span>(<span class="string">&#x27;example.txt&#x27;</span>, fs.<span class="property">constants</span>.<span class="property">F_OK</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err ? <span class="string">&#x27;文件不存在&#x27;</span> : <span class="string">&#x27;文件存在&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="目录操作">目录操作</h2><h3 id="创建目录">创建目录</h3><h4 id="异步创建">异步创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;newDir&#x27;</span>, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;创建目录失败：&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;目录创建成功！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="同步创建">同步创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fs.<span class="title function_">mkdirSync</span>(<span class="string">&#x27;newDir&#x27;</span>, &#123; <span class="attr">recursive</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;目录创建成功！&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;创建目录失败：&#x27;</span>, err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取目录">读取目录</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;.&#x27;</span>, <span class="function">(<span class="params">err, files</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;读取目录失败：&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;目录内容：&#x27;</span>, files);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="删除目录">删除目录</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;newDir&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;删除目录失败：&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;目录删除成功！&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="文件流操作">文件流操作</h2><p>Node.js 提供了强大的流 (Stream) 模型，用于处理大文件或者数据流的读取和写入。与传统的读写文件方法（如 <code>fs.readFile</code> 和 <code>fs.writeFile</code>）不同，流操作允许我们在不将整个文件加载到内存中的情况下处理数据，非常适合大文件的处理，能够显著提高性能。</p><h3 id="读取文件流">读取文件流</h3><p><code>fs.createReadStream</code> 用于创建一个可读流，从文件中按需读取数据。它适用于处理大文件，因为它可以分块读取文件数据，而不需要将整个文件加载到内存中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;example.txt&#x27;</span>, &#123; <span class="attr">encoding</span>: <span class="string">&#x27;utf8&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 &#x27;data&#x27; 事件，按块读取数据</span></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取到的数据块：&#x27;</span>, chunk);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 &#x27;end&#x27; 事件，表示文件读取完毕</span></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取完成&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 &#x27;error&#x27; 事件，处理读取过程中的错误</span></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;读取文件时出错：&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><p><code>path</code>：文件路径。</p></li><li><p><code>options</code>：可选的配置项：</p><ul><li><p><code>encoding</code>：指定编码格式，默认为 <code>null</code>，即返回 <code>Buffer</code> 对象。</p></li><li><p><code>start</code>：从文件的指定位置开始读取，单位是字节。</p></li><li><p><code>end</code>：读取的结束位置，单位是字节（包括此位置）。</p></li></ul></li></ol><h3 id="写入文件流">写入文件流</h3><p><code>fs.createWriteStream</code> 用于创建一个可写流，向文件中按需写入数据。类似于读取流，写入流允许数据分块写入，避免一次性将所有数据加载到内存中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> writeStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;output.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入数据到文件</span></span><br><span class="line">writeStream.<span class="title function_">write</span>(<span class="string">&#x27;Hello, Node.js!\n&#x27;</span>);</span><br><span class="line">writeStream.<span class="title function_">write</span>(<span class="string">&#x27;这是第二行数据。&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完成写入</span></span><br><span class="line">writeStream.<span class="title function_">end</span>(<span class="string">&#x27;写入结束！&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 &#x27;finish&#x27; 事件，表示写入已完成</span></span><br><span class="line">writeStream.<span class="title function_">on</span>(<span class="string">&#x27;finish&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件写入完成&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 &#x27;error&#x27; 事件，处理写入过程中的错误</span></span><br><span class="line">writeStream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;写入文件时出错：&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol><li><p><code>path</code>：文件路径。</p></li><li><p><code>options</code>：可选配置项：</p><ul><li><p><code>flags</code>：文件操作标志（默认 <code>'w'</code>，写入模式）。</p></li><li><p><code>encoding</code>：编码格式，默认为 <code>'utf8'</code>。</p></li><li><p><code>mode</code>：文件权限，默认为 <code>0o666</code>。</p></li><li><p><code>fd</code>：文件描述符（如果已经打开文件）。</p></li></ul></li></ol><h3 id="管道流">管道流</h3><p><code>pipe</code> 是 Node.js 中流操作的核心方法之一，它将一个流的输出直接传递给另一个流作为输入。这种方式通常用于将读取流的内容直接写入到写入流中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;source.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> writeStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;destination.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用管道将读取流的内容写入到目标文件</span></span><br><span class="line">readStream.<span class="title function_">pipe</span>(writeStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听 &#x27;finish&#x27; 事件，表示写入已完成</span></span><br><span class="line">writeStream.<span class="title function_">on</span>(<span class="string">&#x27;finish&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件复制完成&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="转换流">转换流</h3><p>转换流（<code>Transform</code>）是一个特殊的流类型，可以在数据从可读流传输到可写流的过程中，对数据进行修改或转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Transform</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;stream&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个转换流，转换为大写字母</span></span><br><span class="line"><span class="keyword">const</span> upperCaseStream = <span class="keyword">new</span> <span class="title class_">Transform</span>(&#123;</span><br><span class="line">    <span class="title function_">transform</span>(<span class="params">chunk, encoding, callback</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">push</span>(chunk.<span class="title function_">toString</span>().<span class="title function_">toUpperCase</span>());</span><br><span class="line">        <span class="title function_">callback</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;input.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> writeStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;output.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用管道将读取流的内容传递给转换流，然后再传给写入流</span></span><br><span class="line">readStream.<span class="title function_">pipe</span>(upperCaseStream).<span class="title function_">pipe</span>(writeStream);</span><br><span class="line"></span><br><span class="line">writeStream.<span class="title function_">on</span>(<span class="string">&#x27;finish&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件处理完成，所有内容已转换为大写&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node学习-Buffer</title>
    <link href="/2024/11/29/Node%E5%AD%A6%E4%B9%A0-Buffer/"/>
    <url>/2024/11/29/Node%E5%AD%A6%E4%B9%A0-Buffer/</url>
    
    <content type="html"><![CDATA[<p>在 Node.js 中，<code>Buffer</code> 是一个非常核心的概念，它帮助开发者高效地处理二进制数据。<code>Buffer</code> 作为 Node.js 原生提供的一个类，主要用于与 I/O 操作相关的内存管理，尤其是在处理文件、网络请求、数据库查询等二进制数据时非常重要。</p><span id="more"></span><h1>Buffer</h1><p><code>Buffer</code> 是 Node.js 提供的一种数据结构，它专门用于存储和操作原始的二进制数据。由于 JavaScript 原生的字符串是以 UTF-16 编码处理的，而 <code>Buffer</code> 允许处理任何类型的二进制数据，因此它特别适用于与外部系统（如文件、网络和数据库）进行交互。</p><h2 id="Buffer-的特点">Buffer 的特点</h2><ol><li><strong>固定大小</strong>：一旦创建，<code>Buffer</code> 的大小不能改变。这意味着你可以确保数据不会超出预期的内存限制。</li><li><strong>不进行编码转换</strong>：<code>Buffer</code> 存储的是原始的二进制数据，而不是编码后的文本数据。</li></ol><h2 id="Buffer-的结构与内存分配">Buffer 的结构与内存分配</h2><p><code>Buffer</code> 是通过 C++ 代码实现的，并且直接操作内存，通常用来避免在 Node.js 中频繁进行内存拷贝。Buffer 的内存分配有两种方式：</p><ol><li><strong>分配固定大小的内存块</strong>：通过 <code>Buffer.alloc()</code> 或 <code>Buffer.from()</code> 方法分配。</li><li><strong>通过引用现有的内存空间</strong>：如通过 <code>Buffer.allocUnsafe()</code> 或 <code>Buffer.from(arrayBuffer)</code>。</li></ol><h3 id="Buffer-alloc-和-Buffer-from"><code>Buffer.alloc()</code> 和 <code>Buffer.from()</code></h3><ol><li><p><strong><code>Buffer.alloc(size)</code></strong>：用于创建一个指定大小的 <code>Buffer</code>，其中 <code>size</code> 是字节数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>); <span class="comment">// 创建一个包含 10 个字节的 Buffer，默认填充 0</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>Buffer.from(array)</code></strong>：从现有的数组或字符串创建一个 <code>Buffer</code>，该方法会将传入的数据复制到新创建的 <code>Buffer</code> 中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;Hello&#x27;</span>); <span class="comment">// 创建一个包含 &quot;Hello&quot; 字符串字节的 Buffer</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="内存分配与回收">内存分配与回收</h3><ol><li><p><strong><code>Buffer.allocUnsafe()</code></strong>：分配一个不初始化的 <code>Buffer</code>，速度更快，不建议在生产环境中使用，它可能会泄漏内存中的垃圾数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">10</span>); <span class="comment">// 速度较快，但内存不初始化</span></span><br></pre></td></tr></table></figure></li><li><p><strong>内存分配方式的差异</strong>：通过 <code>Buffer.alloc()</code> 分配的内存会自动初始化为零，而 <code>Buffer.allocUnsafe()</code> 和 <code>Buffer.from()</code> 则不会，因此需要小心使用，避免不必要的内存泄漏或错误。</p></li></ol><h2 id="Buffer-的常用操作">Buffer 的常用操作</h2><h3 id="访问与修改数据">访问与修改数据</h3><p>可以通过索引来读取和修改 <code>Buffer</code> 中的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf[<span class="number">0</span>]); <span class="comment">// 输出 72，即 &#x27;H&#x27; 的 ASCII 值</span></span><br><span class="line">buf[<span class="number">0</span>] = <span class="number">74</span>; <span class="comment">// 修改第一个字节</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>()); <span class="comment">// 输出 &#x27;Jello&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="数据转换">数据转换</h3><p><code>Buffer</code> 提供了多种方式来将二进制数据转换为字符串或从字符串转换为二进制数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="title function_">toString</span>(<span class="string">&#x27;utf-8&#x27;</span>)); <span class="comment">// 输出 &#x27;Hello, World!&#x27;</span></span><br><span class="line"><span class="keyword">const</span> buf2 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;48656c6c6f&#x27;</span>, <span class="string">&#x27;hex&#x27;</span>); <span class="comment">// 从十六进制字符串创建 Buffer</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf2.<span class="title function_">toString</span>()); <span class="comment">// 输出 &#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="拼接和切割">拼接和切割</h3><ol><li><p><strong><code>Buffer.concat()</code></strong>：用于拼接多个 <code>Buffer</code> 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf1 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;Hello &#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> buf2 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;World!&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>([buf1, buf2]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">toString</span>()); <span class="comment">// 输出 &#x27;Hello World!&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><code>slice()</code></strong>：用于切割 <code>Buffer</code> 的一部分，返回一个新的 <code>Buffer</code> 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;Hello, World!&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> slicedBuf = buf.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(slicedBuf.<span class="title function_">toString</span>()); <span class="comment">// 输出 &#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Buffer-性能优化">Buffer 性能优化</h2><p><code>Buffer</code> 在 Node.js 中的一个重要应用场景是文件和流的处理，在处理大文件时，<code>Buffer</code> 可以帮助避免内存溢出和频繁的内存拷贝。</p><h3 id="避免频繁的内存分配">避免频繁的内存分配</h3><p>创建 <code>Buffer</code> 时，要选择合适的内存分配方式。对于小文件，使用 <code>Buffer.alloc()</code> 是安全且便捷的。而对于较大文件，可以使用 <code>Buffer.allocUnsafe()</code> 来提高性能，但要确保数据不会泄漏。</p><h3 id="数据流处理中的-Buffer">数据流处理中的 <code>Buffer</code></h3><p>Node.js 中的流（<code>Stream</code>）通常与 <code>Buffer</code> 配合使用，尤其是文件流和网络流。由于流会分段传输数据，因此使用 <code>Buffer</code> 来处理每一段数据可以有效降低内存占用，并提升 I/O 性能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> readStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;largeFile.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> writeStream = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;output.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理每一段数据（Buffer）</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Received <span class="subst">$&#123;chunk.length&#125;</span> bytes of data.`</span>);</span><br><span class="line">    writeStream.<span class="title function_">write</span>(chunk);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="二进制数据和字符编码">二进制数据和字符编码</h3><p>在与外部系统交互时（例如数据库或 HTTP 请求），<code>Buffer</code> 可以作为数据传输的媒介。通过控制字符编码，可以确保二进制数据与字符串之间的正确转换。</p><ol><li>使用 UTF-8 编码转换文本数据；</li><li>使用 HEX 或 BASE64 编码在网络上传输二进制数据。</li></ol><h2 id="Buffer-常见问题">Buffer 常见问题</h2><ol><li><strong>内存泄漏</strong>：使用 <code>Buffer.allocUnsafe()</code> 时，必须确保数据在使用前被正确清除，否则可能会发生内存泄漏。</li><li><strong>Buffer 与性能的权衡</strong>：在处理大量数据时，使用合适的内存分配和数据转换方式是非常重要的。过度的内存拷贝和转换会导致性能下降。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node学习-异步编程</title>
    <link href="/2024/11/28/Node%E5%AD%A6%E4%B9%A0-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <url>/2024/11/28/Node%E5%AD%A6%E4%B9%A0-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>Node.js 的异步编程是其核心特性之一，支撑着高并发的应用程序。</p><span id="more"></span><h1>异步编程</h1><h2 id="函数式编程">函数式编程</h2><p>在开始异步编程之前，我们先来了解一下JavaScript的回调函数和深层嵌套。在JavaScript中，函数作为一等公民，使用上非常自由，无论是调用它，或者作为参数，或者作为返回值均可。</p><h3 id="高阶函数">高阶函数</h3><p>在通常的语言中，函数的参数只接受基本的数据类型或是对象引用，返回值也只是基本数据类型和对象引用。高阶函数则是可以把函数作为参数，或是将函数作为返回值的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高阶函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="偏函数">偏函数</h3><p>偏函数是指创建一个调用另一个参数或变量已经预置的函数的函数。指的是将一个多参数函数的部分参数固定住，从而生成一个新的函数，简化调用过程。这种方式可以提升代码的复用性和可读性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="keyword">var</span> toString = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>;</span><br><span class="line"><span class="keyword">var</span> isString = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> toString.<span class="title function_">call</span>(obj) == <span class="string">&#x27;[object String]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> isFunction = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> toString.<span class="title function_">call</span>(obj) == <span class="string">&#x27;[object Function]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在上面的例子中，虽然只有两个函数的定义，但是需要重复定义一个类似的函数，通过偏函数可以提高代码的复用性</span></span><br><span class="line"><span class="keyword">var</span> isType = <span class="keyword">function</span> (<span class="params">type</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> toString.<span class="title function_">call</span>(obj) == <span class="string">&#x27;[object &#x27;</span> + type + <span class="string">&#x27;]&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> isString = <span class="title function_">isType</span>(<span class="string">&#x27;String&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> isFunction = <span class="title function_">isType</span>(<span class="string">&#x27;Function&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="异步编程的优势与难点">异步编程的优势与难点</h2><p>在单线程模型中，同步 I/O 的性能是一个很大的问题。后来使用多线程的方式来提升性能，但是多线程的引入在业务逻辑方面也制造了不少的麻烦，从操作系统调度多线程的上下文切换开销，到实际编程里的锁、同步等问题。Node 利用JavaScript 及其内部异步库，将异步直接提升到业务层面。</p><h3 id="优势">优势</h3><ol><li>避免阻塞：通过回调函数处理结果，线程可以持续运行。</li><li>提升并发能力：支持大量 I/O 操作同时进行。</li></ol><h3 id="难点">难点</h3><ol><li>回调地狱：嵌套的回调函数增加了代码复杂度。</li><li>错误处理困难：异步代码中错误传播机制与同步代码不同，增加了调试难度。</li><li>阻塞代码：JavaScript 没有<code>sleep()</code>这样的线程沉睡功能，只能使用<code>setInterval()</code>和<code>setTimeout()</code>函数延时操作，不能阻塞后续代码的持续执行。</li><li>多线程编程：如果服务器是多核 CPU，单个 Node 进程实质上是没有充分利用多核 CPU的。</li><li>异步转同步：Node 提供了绝大部分的异步 API 和少量的同步 API，偶尔出现的同步需求会因为没有同步 API 难以实现。</li></ol><h2 id="异步编程解决方案">异步编程解决方案</h2><p>异步编程的主要解决方案有以下3种：</p><ol><li>事件发布/订阅模式</li><li>Promise</li><li>Async</li></ol><h3 id="事件发布-订阅模式">事件发布/订阅模式</h3><p>事件监听器模式是一种广泛用于异步编程的模式，是回调函数的事件化，又称发布/订阅模式。Node 自身提供的<code>events</code>模块是发布/订阅模式的一个简单实现，它具有<code>addListener()</code>、<code>on()</code>、<code>once()</code>、<code>removeListener()</code>、<code>removeAllListener()</code>、<code>emit()</code>等基本的事件监听模式的方法实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">&#x27;events&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> emitter = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;taskCompleted&#x27;</span>, <span class="function">(<span class="params">taskName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;taskName&#125;</span> completed`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布事件</span></span><br><span class="line">emitter.<span class="title function_">emit</span>(<span class="string">&#x27;taskCompleted&#x27;</span>, <span class="string">&#x27;Task 1&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="Promise">Promise</h3><p>Promise 操作只会处在三种状态之一：<code>Pending</code>、<code>Resolved</code> 和 <code>Rejected</code>。Promise 的状态只会出现从未完成态向完成态或失败态转变，不能反向，完成态和失败态不能互相转化。Promise 的状态一旦转化，将不能被更改。</p><p>一个 Promise 对象只要具备<code>then()</code>方法即可，对于<code>then()</code>方法有一些要求：</p><ol><li>接受完成态、失败态的回调方法，在操作完成或出现错误时会调用相应方法。</li><li>可选支持 progress 事件回调作为第三个方法</li><li><code>then()</code>方法只接受 function 对象，其余对象将被忽略</li><li><code>then()</code>方法继续返回 Promise 对象，以实现链式调用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="property">promises</span>;</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;file1.txt&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data1</span>) =&gt;</span> fs.<span class="title function_">readFile</span>(<span class="string">&#x27;file2.txt&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">data2</span>) =&gt;</span> [data1, data2]))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">[data1, data2]</span>) =&gt;</span> fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;output.txt&#x27;</span>, data1 + data2))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File written successfully&#x27;</span>))</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span><br></pre></td></tr></table></figure><h3 id="Async">Async</h3><p>Async/Await 是基于 Promise 的语法糖，通过同步代码风格处理异步操作，使代码更易读。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="property">promises</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">processFiles</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data1 = <span class="keyword">await</span> fs.<span class="title function_">readFile</span>(<span class="string">&#x27;file1.txt&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> data2 = <span class="keyword">await</span> fs.<span class="title function_">readFile</span>(<span class="string">&#x27;file2.txt&#x27;</span>);</span><br><span class="line">        <span class="keyword">await</span> fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;output.txt&#x27;</span>, data1 + data2);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File written successfully&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">processFiles</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node学习-异步I/O</title>
    <link href="/2024/11/27/Node%E5%AD%A6%E4%B9%A0-%E5%BC%82%E6%AD%A5IO/"/>
    <url>/2024/11/27/Node%E5%AD%A6%E4%B9%A0-%E5%BC%82%E6%AD%A5IO/</url>
    
    <content type="html"><![CDATA[<p>Node.js 作为高性能的非阻塞框架，其核心优势在于异步 I/O 和高效的事件驱动架构。这些特性赋予了 Node.js 高并发处理能力，并广泛应用于 I/O 密集型场景。</p><span id="more"></span><h1>异步I/O</h1><h2 id="为什么需要异步-I-O">为什么需要异步 I/O</h2><p>Node.js 中，异步 I/O 是基于以下关键问题设计的：</p><ol><li><strong>用户体验</strong>：传统阻塞式操作会导致整个线程卡顿，降低用户的交互流畅性。</li><li><strong>资源利用</strong>：异步 I/O 通过非阻塞模式释放 CPU 时间，允许并行处理多个 I/O 请求，从而提升资源利用率。</li></ol><h2 id="阻塞与非阻塞-I-O">阻塞与非阻塞  I/O</h2><p>在介绍 Node 的时候，我们一直提到异步、非阻塞这些名词，其中异步与非阻塞听起来似乎是一回事。从实际效果而言。异步与非阻塞都达到了并行 I/O 的目的。但从计算机内核 I/O 来说是两回事。</p><p>操作系统内核 I/O 主要分为两种方式：</p><ol><li>阻塞：调用之后一定要等到系统内核层面完成所有操作后，调用才结束。阻塞 I/O 造成 CPU 等待 I/O，浪费等待时间，CPU 的处理能力不能得到充分利用。</li><li>非阻塞：调用之后会立即返回，非阻塞 I/O返回之后，CPU 的时间可以用来处理其他事务。非阻塞 I/O 也存在一些问题，由于完整的 I/O 并没有完成，立即返回的并不是期望的数据，而是当前调用的状态。为了获取完整的数据，应用程序需要重复调用 I/O 操作来确认是否完成—<strong>轮询</strong>。</li></ol><h2 id="异步-I-O-的现状与分类">异步 I/O 的现状与分类</h2><p>异步 I/O 主要分为两种方式：</p><ol><li><strong>非阻塞 I/O</strong>：操作立即返回状态，实际数据处理在后台完成。</li><li><strong>回调式异步 I/O</strong>：操作结果通过回调函数通知。</li></ol><h2 id="Node的异步-I-O">Node的异步 I/O</h2><p>Node.js 的异步 I/O 基于事件循环机制实现</p><h3 id="事件循环">事件循环</h3><p>Node.js 单线程运行，通过事件循环协调异步 I/O 的执行。所有 I/O 操作会注册到事件队列中，待完成后触发相应的回调。</p><h3 id="观察者">观察者</h3><p>每个事件循环中有一个或多个观察者，观察者用于监控不同类别的 I/O 事件。</p><h3 id="请求对象">请求对象</h3><p>每个 I/O 操作都对应一个请求对象，记录操作状态与回调信息。</p><h3 id="执行回调">执行回调</h3><p>组装好请求对象、送入 I/O 线程池等待执行，实际上完成了异步 I/O 的第一部分，回调通知是第二部分。线程池中的 I/O 操作调用完毕之后，会将线程归还线程池，并通知事件循环的 I/O 观察者。 I/O 观察者会取出请求对象的属性，执行回调。</p><h2 id="非-I-O-的异步API">非 I/O 的异步API</h2><p>Node 中存在一些与 I/O 无关的异步 API。</p><h3 id="定时器">定时器</h3><p><code>setTimeout()</code>和<code>setInterval()</code>与浏览器中的API一致，分别用于单次和多次定时执行任务。实现原理与异步 I/O 类似，只是不需要 I/O 线程池的参与。调用<code>setTimeout()</code>和<code>setInterval()</code>创建的定时器会被插入到定时器观察者内部，每次循环都会取出定时器对象，检查是否超过定时时间，如果超过，就形成一个事件，它的回调函数将立即执行。</p><h3 id="process-nextTick">process.nextTick()</h3><p>由于事件循环自身的特点，定时器的精确度不足。采用定时器需要创建定时器对象和迭代操作，定时器的方式比较浪费性能<code>process.nextTick()</code>方法的操作比较轻量，每次调用<code>process.nextTick()</code>方法，只会将回调函数放入队列中，在下一次循环时取出执行，时间复杂度低。</p><h3 id="setImmediate">setImmediate()</h3><p><code>setImmediate()</code>方法与<code>process.nextTick()</code>方法类似，都是将回调函数延迟执行。但是<code>process.nextTick()</code>方法的优先级高于<code>setImmediate()</code>方法。</p>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node学习-模块</title>
    <link href="/2024/11/26/Node%E5%AD%A6%E4%B9%A0-%E6%A8%A1%E5%9D%97/"/>
    <url>/2024/11/26/Node%E5%AD%A6%E4%B9%A0-%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>在 Node.js 中，以模块为单位划分所有功能，并且提供了一个完整的模块加载机制，这使得我们可以将应用划分为各个不同的部分，并且对这些部分进行很好的协同管理。通过将各种可复用代码编写在模块中的方法，可以极大地减少应用的代码量，提高开发的效率以及代码可读性。通过模块加载机制，也可以将各种第三方模块引入到我们的应用中。</p><span id="more"></span><h1>模块</h1><h2 id="模块规范">模块规范</h2><p>在 JavaScript 的发展历程中，它主要在浏览器端发光发热。由于官方规范（ECMAScript）规范化的时间较早，规范涵盖的范畴非常小。这些规范中包含词法、类型、上下文、表达式、声明、方法、对象等语言的基本要素。在 Web 应用的时代，浏览器中出现了更多、更强大的 API 供 JavaScript 调用，但在服务端 JavaScript 的规范却远远落后，缺陷在于：</p><ol><li>没有模块系统</li><li>标准库较少，ECMAScript 仅定义了部分核心库，对于文件系统，I/O 流等常见需求却没有标准的 API</li><li>没有标准接口，比如 Web 服务器或数据库之类的标准统一接口</li><li>缺乏包管理系统，JavaScript 应用中基本没有自动加载和安装依赖的能力</li></ol><h3 id="CommonJS规范">CommonJS规范</h3><p>CommonJS 对模块的定义十分简单，主要分为模块引用、模块定义和模块标识3个部分。</p><h4 id="模块引用">模块引用</h4><p>在 CommonJS 规范中，存在<code>require()</code>方法，这个方法接受模块标识，以此引入一个模块的 API 到当前上下文中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&#x27;math&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="模块定义">模块定义</h4><p>在模块中，上下文提供<code>require()</code>方法来引入外部模块。对应引入的功能，上下文提供了<strong>exports</strong>对象用于导出当前模块的方法或者变量，并且它是唯一导出的出口。在模块中，还存在一个<strong>module</strong>对象，它代表模块自身，而<strong>exports</strong>是<strong>module</strong>的属性。在 Node 中，一个文件就是一个模块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> greet = <span class="built_in">require</span>(<span class="string">&#x27;./hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&#x27;Alice&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// calc.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">add</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">subtract</span> = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">subtract</span> = (<span class="params">a, b</span>) =&gt; a - b;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    add,</span><br><span class="line">    subtract</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&#x27;./calc&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">5</span>, <span class="number">3</span>));  <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="模块标识">模块标识</h4><p>模块标识其实就是传递给<code>require()</code>方法的参数，它必须是符合小驼峰命名的字符串，或者以<code>.</code>、<code>..</code>开头的相对路径，或者绝对路径。</p><h2 id="模块实现">模块实现</h2><p>Node 在实现中并非完全按照规范实现，而是对模块规范进行了一定的取舍。在 Node 中引入模块，需要经历3个步骤：</p><ol><li>路径分析</li><li>文件定位</li><li>编译执行</li></ol><p>在 Node 中，模块分为两类：一类是 Node 提供的模块，成为核心模块；另一类是用户编写的模块，称为文件模块。</p><ol><li>核心模块部分在 Node 源代码的编译过程中，编译进了二进制执行文件。在 Node 进程启动时，部分核心模块就被直接加载进内存中，所以这部分核心模块引入时，文件定位和编译执行这两个步骤可以省略掉，并且在路径分析中优先判断，所以它的加载速度是最快的。</li><li>文件模块则是在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程，速度比核心模块慢。</li></ol><h3 id="模块缓存">模块缓存</h3><p>Node 对引入过的模块都会进行缓存，以减少二次引入时的开销。Node 缓存的是编译和执行之后的对象。不论是核心模块还是文件模块，<code>require()</code>方法对相同模块的二次加载都一律采用缓存优先的方式，不同之处在于核心模块的缓存检查先于文件模块的缓存检查。</p><h3 id="路径分析">路径分析</h3><p>因为标识符有几种形式，对于不同的标识符，模块的查找和定位有不同程度上的差异。</p><h4 id="模块标识符分析">模块标识符分析</h4><p><code>require()</code>方法接受一个标识符作为参数，在 Node 实现中，正是基于这样一个标识符进行模块查找的。模块标识符在 Node 中主要分为以下几类：</p><ul><li>核心模块，如http、fs、path等</li><li><code>.</code>或<code>..</code>开始的相对路径文件模块</li><li>以<code>/</code>开始的绝对路径文件模块</li><li>非路径形式的文件模块，如自定义的connect模块</li></ul><ol><li><p>核心模块</p><p>核心模块的优先级仅次于缓存加载，它在 Node 的源代码编译过程中已经编译为二进制代码，其加载过程最快。如果试图加载一个与核心模块标识符相同的自定义模块，是不会成功的，想要加载成功，必须选择一个不同的标识符或者换用路径的方式。</p></li><li><p>路径形式的文件模块</p><p>以<code>.</code>、<code>..</code>和<code>/</code>开始的标识符，都会被当做文件模块来处理，在分析路径模块时，<code>require()</code>方法会将路径转为真实路径，并以真实路径作为索引，将编译执行后的结果存放到缓存中，使二次加载时更快。由于文件模块给 Node 指明了确切的文件位置，所以在查找过程中可以节约大量时间，其加载速度慢于核心模块。</p></li><li><p>自定义模块</p><p>自定义模块指的是非核心模块，也不是路径形式的标识符。它是一种特殊的文件模块，可能是一个文件或者包的形式。这类模块的查找是最费时的，也是所有方式中最慢的一种。</p></li></ol><h3 id="文件定位">文件定位</h3><p>从缓存加载的优化策略使得二次引入时不需要路径分析、文件定位和编译执行的过程，大大提高了再次加载模块时的效率。但在文件的定位过程中，还有一些细节需要注意，这主要包括文件拓展名的分析、目录或包的处理。</p><h4 id="文件拓展名分析">文件拓展名分析</h4><p><code>require()</code>在分析标识符的过程中，会出现标识符中不包含文件拓展名的情况。CommonJS 模块规范也允许在标识符中不包含文件拓展名，这种情况下，Node 会按<code>.js</code>、<code>.json</code>、<code>.node</code>的次序补足拓展名，依次尝试。在尝试的过程中。需要调用 fs 模块同步阻塞式的判断文件是否存在。因为 Node 是单线程，这里是一个会引起性能问题的地方。所以，如果是<code>.json</code>和<code>.node</code>文件，在传递给<code>require()</code>的标识符中带上拓展名，会加快一点速度。</p><h4 id="目录分析和包">目录分析和包</h4><p>在分析标识符的过程中，<code>require()</code>通过分析文件拓展名之后，可能没有查找到对应文件，但却得到一个目录，这在引入自定义模块和逐个模块路径进行查找时经常会出现，此时 Node 会将目录当做一个包来处理。</p><p>Node 对 CommonJS 包规范进行了一定程度的支持。首先，Node 在当前目录下查找<code>package.json</code>，通过<code>JSON.parse()</code>解析出包描述对象，从中取出 main 属性指定的文件名进行定位。如果文件缺少拓展名，将会进入拓展名分析的步骤。如果 main 属性指定的文件名错误，或者没有 package.json 文件，Node 会将 index 当做默认文件名，然后依次查找 index.js、index.json、index.node。如果在目录分析的过程中没有定位成功任何文件，则自定义模块进入下一个模块路径进行查找。如果模块路径数组都被遍历完毕，依旧没有查找到目标文件，则会抛出查找失败的异常。</p><h3 id="模块编译">模块编译</h3><p>在 Node 中，每个文件模块都是一个对象，它的定义如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Module</span>(<span class="params">id, parent</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> =id;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">exports</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parent</span> = parent;</span><br><span class="line">    <span class="keyword">if</span> (parent &amp;&amp; parent,children) &#123;</span><br><span class="line">        parent.<span class="property">childern</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">filename</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span> = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译和执行时引入文件模块的最后一个阶段。定位到具体的文件后，Node 会新建一个模块对象，然后根据路径载入并编译。对于不同的文件拓展名，其载入方法也不同</p><ol><li><strong>.js文件</strong>：通过 fs 模块同步读取文件后编译执行</li><li><strong>.node文件</strong>：这是用C/C++编写的拓展文件，通过<code>dlopen()</code>方法加载最后编译生成的文件</li><li><strong>.json文件</strong>：通过 fs 模块同步读取文件后，用<code>JSON.parse()</code>解析返回结果</li><li><strong>其余拓展名文件</strong>：被当做<code>.js</code>文件载入</li></ol><h2 id="包与NPM">包与NPM</h2><p>Node 组织了自身的核心模块，也使得第三方文件模块可以有序的编写和使用。但是在第三方模块中，模块与模块之间仍然是散列在各地的，相互之间不能直接引用。而在模块之外，包和NPM则是将模块联系起来的一种机制。</p><h3 id="包结构">包结构</h3><p>包实际上是一个存档文件，即一个目录直接打包为<code>.zip</code>或<code>tar.gz</code>格式的文件，安装后解压还原为目录。</p><ol><li>package.json：包描述文件</li><li>bin：用于存放可执行二进制文件的目录</li><li>lib：用于存放JavaScript代码的目录</li><li>doc：用于存放文档的目录</li><li>test：用于存放单元测试用例的代码</li></ol><h4 id="包描述文件">包描述文件</h4><p>包描述文件用于表达非代码相关的信息，它是一个JSON格式的文件–package.json，位于包的根目录下，是包的重要组成部分。</p><ol><li>name：包名，需要由小写的字母或数字组成，可以包含<code>.</code>、<code>_</code>和<code>-</code>，但不允许出现空格，包名必须是唯一的。</li><li>description：包简介。</li><li>version：版本号。</li><li>keywords：关键词数组，在NPM中主要用来做分类搜索。</li><li>maintainers：包维护者列表。每个维护者由 name、email、web这3个属性组成。</li><li>contributors：贡献者列表，格式与维护者列表相同</li><li>bugs：一个可以反馈bug的网页地址或邮件地址</li><li>licenses：当前包所使用的许可证列表</li><li>repositories：托管源代码的位置列表</li><li>dependencies：使用当前包所需要依赖的包列表</li></ol><h3 id="NPM">NPM</h3><p>包规范的定义可以帮助 Node 解决依赖安装的问题，而NPM正是基于该规范进行了实现。在包描述文件的规范中，NPM实际需要的字段主要有 name、version、description、keywords、repositories、author、bin、main、scripts、engines、dependencies。</p><ol><li>author：包作者</li><li>bin：配置 bin 字段后，通过 <code>npm install package_name -g</code>命令可以将脚本添加到执行路径中，之后可以在命令行中直接执行</li><li>main：模块引入方法<code>require()</code>在引入包时，会优先检查这个字段，并将其作为包中其余模块的入口。如果不存在这个字段，<code>require()</code>方法会查找包目录下的index.js、index.node、index.json文件作为默认入口。</li><li>devDependencies：一些模块只在开发时需要依赖。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node学习-Node简介</title>
    <link href="/2024/11/25/Node%E5%AD%A6%E4%B9%A0-Node%E7%AE%80%E4%BB%8B/"/>
    <url>/2024/11/25/Node%E5%AD%A6%E4%B9%A0-Node%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>Node.js 是一个基于 <strong>Chrome V8 引擎</strong>的 JavaScript 运行环境。Node.js 使用了一个<strong>事件驱动</strong>、<strong>非阻塞式 I/O</strong>的模型，使其轻量又高效。Node.js 的包管理工具 npm 是全球最大的开源库生态系统。</p><span id="more"></span><h1>Node简介</h1><p>Node.js 不是一门语言，也不是 JavaScript 的框架，也不是像Nginx一样的Web服务器 ，<strong>Node.js 是 JavaScript 在服务器端的运行环境（平台）</strong>。</p><h2 id="Node组成">Node组成</h2><p>在 Node.js 里运行 JavaScript，跟在 Chrome 里运行 JavaScript 有什么不同？</p><p>二者采用的是同样的 JS 引擎。在 Node.js 里写 JS，和在前端写 JS，几乎没有不同。在写法上的区别在于：Node.js 没有浏览器、页面标签相关的 API，但是新增了一些 Node.js 相关的 API。通俗来说，对于开发者而言，在前端写 JS 是用于控制浏览器；而 Node.js 环境写 JS 可以控制整个计算机。</p><p>我们知道，JavaScript 的组成分为三个部分：</p><ol><li>ECMAScript</li><li>DOM：标签元素相关的API</li><li>BOM：浏览器相关的API</li></ol><p>ECMAScript 是 JS 的语法；DOM 和 BOM 浏览器端为 JS 提供的 API。</p><p>而 Node.js 的组成分为：</p><ol><li><strong>ECMAScript</strong>。ECMAScript 的所有语法在 Node 环境中都可以使用。</li><li><strong>Node 环境</strong>提供的一些<strong>附加 API</strong>(包括文件、网络等相关的 API)。</li></ol><p><img src="/imgs/Node/node_composition.png" alt=""></p><h2 id="Node架构">Node架构</h2><p><img src="/imgs/Node/node_architecture.png" alt=""></p><p>Node.js 内部采用 Google Chrome 的 V8 引擎，作为 JavaScript 语言解释器；同时结合自行开发的 libuv 库，<strong>扩展了 JS 在后端的能力（比如 I/O 操作、文件读写、数据库操作等）</strong>。使得 JS 既可以在前端进行 DOM 操作（浏览器前端），又可以在后端调用操作系统资源，是目前最简单的全栈式语言。</p><h3 id="Node运行环境的核心">Node运行环境的核心</h3><p>Node.js 是 JavaScript 在服务器端的运行环境，在这个意义上，Node.js 的地位其实就是 JavaScript 在服务器端的虚拟机，类似于 Java 语言中的 Java 虚拟机。</p><ul><li>V8 引擎：编译和执行 JS 代码、管理内存、垃圾回收。V8 给 JS 提供了运行环境，可以说是 JS 的虚拟机。</li><li>libuv：libuv 是一个专注于异步 I/O 的跨平台类库，目前主要在 Node.js 上使用，是Node.js的底层类库。</li></ul><h2 id="Node特点">Node特点</h2><ol><li><p><strong>事件驱动与非阻塞 I/O</strong></p><ul><li><p>Node.js 使用单线程事件循环处理高并发请求。</p></li><li><p>异步编程模型可以避免阻塞操作，提高性能。</p></li></ul></li><li><p><strong>高性能</strong></p><ul><li>基于 Google 的 V8 引擎，Node.js 的 JavaScript 代码执行速度非常快。</li></ul></li><li><p><strong>轻量化</strong></p><ul><li>Node.js 以模块化设计，核心只包含最基础的功能，其他功能通过 npm 包扩展。</li></ul></li><li><p><strong>跨平台支持</strong></p><ul><li>Node.js 支持 Windows、macOS 和 Linux。</li></ul></li><li><p><strong>NPM（Node Package Manager）</strong></p><ul><li>包管理工具，拥有世界上最大的开源生态系统。</li></ul></li></ol><h2 id="Node安装">Node安装</h2><p>官方推荐的做法是<strong>先安装 NVM，然后通过 NVM 安装 Node.js</strong>。</p><h3 id="NVM">NVM</h3><p>node.js version manager，用来管理 node 的版本。</p><h4 id="安装">安装</h4><p>可以通过 <a href="https://github.com/coreybutler/nvm-windows/releases">github</a> 下载安装NVM的安装包</p><h4 id="验证">验证</h4><p>在 cmd 命令行中输入命令，输入<code>nvm</code>命令查看环境变量是否配置成功</p><h4 id="常用命令">常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看已安装的所有 node 版本</span></span><br><span class="line">nvm <span class="built_in">ls</span></span><br><span class="line">nvm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已安装的 nvm 版本</span></span><br><span class="line">nvm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看正在使用的 node 版本</span></span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本的 Node.js</span></span><br><span class="line">nvm install 版本号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用已安装的 Node.js</span></span><br><span class="line">nvm use 版本号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载指定版本的 Node.js</span></span><br><span class="line">nvm uninstall 版本号</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Node</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Node</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习-Git分支</title>
    <link href="/2024/11/22/Git%E5%AD%A6%E4%B9%A0-Git%E5%88%86%E6%94%AF/"/>
    <url>/2024/11/22/Git%E5%AD%A6%E4%B9%A0-Git%E5%88%86%E6%94%AF/</url>
    
    <content type="html"><![CDATA[<p>分支是 Git 的核心功能之一，也是其最强大的特性之一。分支让开发者可以并行地处理不同的功能、修复错误或试验新特性，而不会干扰到主分支的代码。</p><span id="more"></span><h1>Git分支</h1><p>分支是 Git 中对代码版本的一个独立开发线的引用。分支允许开发者在一个分支上进行更改，而不会影响其他分支。默认情况下，Git 创建的分支名称是 <code>main</code> 或 <code>master</code>。分支是对代码库的一个独立版本的指针，可以理解为一个可移动的“标签”指向特定的提交。</p><h2 id="查看分支">查看分支</h2><p>使用 <code>git branch</code> 命令列出所有本地分支，当前所在的分支前会标有 <code>*</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">* main</span><br><span class="line">  dev</span><br></pre></td></tr></table></figure><p>使用 <code>git branch</code> 命令加上<code>-r</code>参数列出所有远程分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">origin/main</span><br><span class="line">origin/dev</span><br></pre></td></tr></table></figure><p>使用 <code>git branch</code> 命令加上<code>-a</code>参数列出所有分支（本地和远程），当前所在的分支前会标有 <code>*</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">* main</span><br><span class="line">  dev</span><br><span class="line">  remotes/origin/main</span><br><span class="line">  remotes/origin/dev</span><br></pre></td></tr></table></figure><p>使用 <code>git branch</code> 命令加上<code>--list &lt;pattern&gt;</code>参数根据指定模式过滤分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch --list &lt;pattern&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git branch --list <span class="string">&quot;feature-*&quot;</span></span><br><span class="line">feature-1</span><br><span class="line">feature-2</span><br></pre></td></tr></table></figure><p>使用 <code>git branch</code> 命令加上<code>-v</code>参数显示每个分支的最新提交信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">* main      1a2b3c4 [Bug fix] Correct null pointer error</span><br><span class="line">  feature-1 2b3c4d5 Add new login feature</span><br></pre></td></tr></table></figure><p>使用 <code>git branch</code> 命令加上<code>-vv</code>参数显示分支的跟踪信息以及分支状态（与远程分支的差异情况）。</p><ol><li><code>ahead 2</code> 表示当前分支比远程分支多了 2 次提交。</li><li><code>behind 3</code> 表示当前分支比远程分支少了 3 次提交。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">* main      1a2b3c4 [origin/main: ahead 2] Add documentation</span><br><span class="line">  feature-1 2b3c4d5 [origin/feature-1] Add new login feature</span><br></pre></td></tr></table></figure><p>使用 <code>git branch</code> 命令加上<code>--show-current</code>参数显示当前所在分支的名称。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch --show-current</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">main</span><br></pre></td></tr></table></figure><p>使用 <code>git branch</code> 命令加上<code>--no-merged</code>参数列出尚未合并到当前分支的其他分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch --no-merged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">feature-1</span><br><span class="line">feature-2</span><br></pre></td></tr></table></figure><p>使用 <code>git branch</code> 命令加上<code>--merged</code>参数列出已经合并到当前分支的分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch --merged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">feature-old</span><br></pre></td></tr></table></figure><h2 id="创建分支">创建分支</h2><p>使用 <code>git branch &lt;branch_name&gt;</code> 命令会基于当前分支创建一个新分支，<code>git branch</code> 命令只会创建一个新分支，并不会自动切换到新分支中去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git branch dev</span><br></pre></td></tr></table></figure><p>使用 <code>git branch &lt;branch_name&gt;</code> 命令加上<code>--eidt-description</code>参数可以创意一个带有分支描述的新分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branch_name&gt;</span><br><span class="line">git branch --edit-description &lt;branch_name&gt;</span><br></pre></td></tr></table></figure><p>也可以使用 <code>git checkout</code> 命令加上<code>-b</code>参数表示创建并切换分支，相当于以下两条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">git branch dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><p>也可以使用 <code>git switch</code> 命令加上<code>-c</code>参数表示创建并切换分支，相当于以下两条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git switch -c dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line">git branch dev</span><br><span class="line">git switch dev</span><br></pre></td></tr></table></figure><h3 id="基于指定分支创建分支">基于指定分支创建分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于指定分支创建新分支</span></span><br><span class="line">git branch &lt;new_branch_name&gt; &lt;existing_branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于指定分支创建并切换到新分支</span></span><br><span class="line">git checkout -b &lt;new_branch_name&gt; &lt;existing_branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git branch feature-2 main</span><br><span class="line">git checkout -b feature-2 main</span><br></pre></td></tr></table></figure><h3 id="基于某个提交创建分支">基于某个提交创建分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于指定提交创建新分支</span></span><br><span class="line">git branch &lt;new_branch_name&gt; &lt;commit_hash&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于指定提交创建并切换到新分支</span></span><br><span class="line">git checkout -b &lt;new_branch_name&gt; &lt;commit_hash&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git branch bugfix 1a2b3c4</span><br><span class="line">git checkout -b bugfix 1a2b3c4</span><br></pre></td></tr></table></figure><h3 id="基于远程分支创建本地分支">基于远程分支创建本地分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于远程分支创建一个本地分支并切换到该分支</span></span><br><span class="line">git checkout -b &lt;local_branch_name&gt; &lt;remote_name&gt;/&lt;remote_branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 git switch 方式</span></span><br><span class="line">git switch -c &lt;local_branch_name&gt; --track &lt;remote_name&gt;/&lt;remote_branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git checkout -b feature-3 origin/feature-3</span><br><span class="line">git switch -c feature-3 --track origin/feature-3</span><br></pre></td></tr></table></figure><h2 id="切换分支">切换分支</h2><p>使用 <code>git checkout</code> 命令可以切换到一个已存在的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><p>我们注意到切换分支使用<code>git checkout &lt;branch&gt;</code>，而前面讲过的撤销修改则是<code>git checkout -- &lt;file&gt;</code>，同一个命令，有两种作用，确实有点令人迷惑。因此，最新版本的Git提供了新的<code>git switch</code>命令来切换分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git switch &lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git switch dev</span><br></pre></td></tr></table></figure><h2 id="合并分支">合并分支</h2><p>使用 <strong><code>git merge</code></strong> 命令将指定分支的更改合并到当前分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例，将 feature-1 分支的更改合并到 main 分支。</span></span><br><span class="line">git switch main</span><br><span class="line">git merge feature-1</span><br></pre></td></tr></table></figure><p>当两个分支修改了同一个文件的同一区域，合并时会产生冲突，Git 无法自动完成合并。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并冲突后，输出会提示冲突文件</span></span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> README.md</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示冲突文件的状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开冲突的文件，找到标记, 修改为需要的最终内容并保存。</span></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="string">HEAD</span></span><br><span class="line"><span class="string">当前分支的内容</span></span><br><span class="line"><span class="string">=======</span></span><br><span class="line"><span class="string">合并分支的内容</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature-1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 标记冲突解决完成</span></span><br><span class="line"><span class="string">git add &lt;conflict_file&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 提交合并结果</span></span><br><span class="line"><span class="string">git commit</span></span><br></pre></td></tr></table></figure><p>使用 <strong><code>git merge</code></strong> 命令加上<code>--abort</code>参数取消正在进行的合并操作，将分支恢复到合并前的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge --abort</span><br></pre></td></tr></table></figure><h2 id="删除分支">删除分支</h2><h3 id="删除本地分支">删除本地分支</h3><p>使用 <code>git branch</code> 命令加上<code>-d</code>参数可以删除指定的本地分支，这里只能删除已经合并到当前分支的分支，以及其他分支（之前未合并过的分支）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git branch -d feature-1</span><br></pre></td></tr></table></figure><p>使用 <code>git branch</code> 命令加上<code>-D</code>参数可以强制删除指定分支，无论是否已合并</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git branch -D &lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git branch -D feature-1</span><br></pre></td></tr></table></figure><h3 id="删除远程分支">删除远程分支</h3><p>使用 <code>git push</code> 命令加上<code>--delete</code>参数可以从远程仓库中删除指定分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote_name&gt; --delete &lt;branch_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git push origin --delete feature-1</span><br></pre></td></tr></table></figure><h2 id="变基">变基</h2><p><code>git rebase</code> 是一种用来重新整理和修改提交历史的工具，它可以将分支上的提交应用到另一个分支的基础上，从而使历史记录更清晰。</p><h3 id="基础使用">基础使用</h3><p>将当前分支的提交重新应用到指定分支（<code>&lt;base_branch&gt;</code>）的最新提交上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git rebase &lt;base_branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例，feature 分支上的提交将被重新应用到 main 分支的最新提交之上。</span></span><br><span class="line">git switch feature</span><br><span class="line">git rebase main</span><br></pre></td></tr></table></figure><h3 id="持续变基">持续变基</h3><p>当需要从分叉点之后的提交进行变基，将 <code>&lt;branch&gt;</code> 上的提交应用到新的基础（<code>&lt;new_base&gt;</code>）上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git rebase --onto &lt;new_base&gt; &lt;upstream_branch&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例，将 feature 分支从 develop 分支的基础切换到 main 分支。</span></span><br><span class="line">git rebase --onto main develop feature</span><br></pre></td></tr></table></figure><h3 id="解决冲突">解决冲突</h3><p>在 <code>git rebase</code> 过程中，如果不同分支修改了同一部分代码，可能会产生冲突。此时需要手动解决冲突。</p><h4 id="查看冲突文件">查看冲突文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><h4 id="手动解决冲突">手动解决冲突</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑冲突文件，选择合适的代码，使用 git add 标记冲突解决。</span></span><br><span class="line">git add CONTRIBUTING.md</span><br></pre></td></tr></table></figure><h4 id="继续变基">继续变基</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure><h4 id="放弃变基">放弃变基</h4><p>放弃当前未完成的变基操作，返回到变基前的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase --abort</span><br></pre></td></tr></table></figure><h3 id="变基的风险">变基的风险</h3><p>变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。<strong>如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。</strong></p><h3 id="变基VS合并">变基VS合并</h3><table><thead><tr><th><strong>功能</strong></th><th><strong>git rebase</strong></th><th><strong>git merge</strong></th></tr></thead><tbody><tr><td><strong>历史记录</strong></td><td>将分支历史整理为线性记录，使提交记录清晰简洁。</td><td>保留完整的分支历史，显示分叉和合并信息。</td></tr><tr><td><strong>使用场景</strong></td><td>团队合作中避免过多分支记录、整理提交历史。</td><td>保留所有开发分支和合并记录，用于审查历史。</td></tr><tr><td><strong>冲突处理</strong></td><td>逐次处理每个提交的冲突。</td><td>一次性处理所有冲突。</td></tr><tr><td><strong>推荐用法</strong></td><td>用于个人开发时整理提交。</td><td>用于团队协作，避免历史重写。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习-Git标签</title>
    <link href="/2024/11/21/Git%E5%AD%A6%E4%B9%A0-Git%E6%A0%87%E7%AD%BE/"/>
    <url>/2024/11/21/Git%E5%AD%A6%E4%B9%A0-Git%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<p>Git 可以给仓库历史中的某一个提交打上标签，以示重要。 发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p><span id="more"></span><h1>Git标签</h1><p>Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针，标签类似于分支，但它是只读的，不能移动，通常用来标记软件的发布点。</p><h2 id="查看标签">查看标签</h2><p>通过<code>git tag</code>命令可以列出当前仓库的所有标签（可带上可选的<code>-l</code>选项或<code>--list</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br><span class="line"></span><br><span class="line">v1.0</span><br><span class="line">v1.1</span><br><span class="line">v2.0</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>通过<code>git tag</code>命令也可以按特定模式列出标签，此时必须带上<code>-l</code>或<code>--list</code>选项。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git tag -l <span class="string">&quot;v1.*&quot;</span></span><br><span class="line"></span><br><span class="line">v1.0</span><br><span class="line">v1.1</span><br></pre></td></tr></table></figure><h2 id="创建标签">创建标签</h2><p>Git 支持两种标签：轻量标签（lightweight）与附注标签（annotated）。</p><h3 id="轻量标签">轻量标签</h3><p>轻量标签很像一个不会改变的分支，它只是某个特定提交的引用，创建轻量标签，不需要使用 <code>-a</code>、<code>-s</code> 或 <code>-m</code> 选项，只需提供标签名字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tag_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前分支的最新提交上创建一个名为 v1.0 的标签。</span></span><br><span class="line">git tag v1.0</span><br></pre></td></tr></table></figure><h3 id="附注标签">附注标签</h3><p>附注标签是存储在 Git 数据库中的一个完整对象， 它们是可以被校验的，其中包含打标签者的名字、电子邮件地址、日期时间等等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git tag -a &lt;tag_name&gt; -m <span class="string">&quot;tag message&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个名为 v1.0 的附注标签，并添加说明信息 &quot;Version 1.0 release&quot;。</span></span><br><span class="line">git tag -a v1.0 -m <span class="string">&quot;Version 1.0 release&quot;</span></span><br></pre></td></tr></table></figure><h3 id="为指定提交创建标签">为指定提交创建标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git tag &lt;tag_name&gt; &lt;commit_hash&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给提交 3f4e9b2 创建一个名为 v1.1 的标签。</span></span><br><span class="line">git tag v1.1 3f4e9b2</span><br></pre></td></tr></table></figure><h3 id="共享标签">共享标签</h3><p>默认情况下，<code>git push</code> 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到共享服务器上。 这个过程就像共享远程分支一样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;tag_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送单个标签</span></span><br><span class="line">git push origin v1.0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt; --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有标签</span></span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><h2 id="删除标签">删除标签</h2><p>要删除掉你本地仓库上的标签，可以使用命令 <code>git tag -d &lt;tagname&gt;</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;tag_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地的 v1.0 标签。</span></span><br><span class="line">git tag -d v1.0</span><br></pre></td></tr></table></figure><p>要注意的是上述命令并不会从任何远程仓库中移除这个标签，必须用 <code>git push &lt;remote&gt; :refs/tags/&lt;tagname&gt;</code> 来更新你的远程仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git push origin :refs/tags/v1.0</span><br></pre></td></tr></table></figure><p>也可以使用命令 <code>git push &lt;remote&gt; --delete &lt;tag_name&gt;</code>删除掉远程仓库上的标签。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git push origin --delete v1.0</span><br></pre></td></tr></table></figure><h2 id="查看标签信息">查看标签信息</h2><p>通过使用 <code>git show</code> 命令可以看到标签信息和与之对应的提交信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git show &lt;tag_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git show v1.0</span><br></pre></td></tr></table></figure><h2 id="应用场景">应用场景</h2><h3 id="回退到特定版本">回退到特定版本</h3><p>如果需要切换到某个标签对应的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;tag_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git checkout v1.0</span><br></pre></td></tr></table></figure><h3 id="比较版本差异">比较版本差异</h3><p>查看两个标签之间的差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;tag1&gt; &lt;tag2&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git diff v1.0 v2.0</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习-Git远程仓库</title>
    <link href="/2024/11/20/Git%E5%AD%A6%E4%B9%A0-Git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <url>/2024/11/20/Git%E5%AD%A6%E4%B9%A0-Git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>为了能在任意 Git 项目上协作，我们需要知道如何管理自己的远程仓库。 远程仓库是指我们托管在因特网或其他网络中的项目的版本库。 可以有好几个远程仓库，管理远程仓库包括了解如何添加远程仓库、移除无效的远程仓库等等。</p><span id="more"></span><h1>Git远程仓库</h1><h2 id="查看远程仓库">查看远程仓库</h2><p>如果想查看你已经配置的远程仓库服务器，可以运行 <code>git remote</code> 命令。 它会列出你指定的每一个远程服务器的简写。 如果你已经克隆了自己的仓库，那么至少应该能看到 origin ——这是 Git 给你克隆的仓库服务器的默认名字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote</span><br><span class="line">origin</span><br></pre></td></tr></table></figure><p>也可以指定选项 <code>-v</code>，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origin  https://github.com/username/learnGit.git (fetch)</span><br><span class="line">origin  https://github.com/username/learnGit.git (push)</span><br></pre></td></tr></table></figure><p>如果想要查看某一个远程仓库的更多信息，可以使用 <code>git remote show &lt;remote&gt;</code> 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote show origin</span><br></pre></td></tr></table></figure><h2 id="添加远程仓库">添加远程仓库</h2><p>通过 <code>git remote add &lt;shortname&gt; &lt;url&gt;</code> 命令添加一个新的远程 Git 仓库，同时指定一个方便使用的简写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;name&gt; &lt;url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git remote add origin https://github.com/username/repo.git</span><br></pre></td></tr></table></figure><p>通过 <code>git remote set-url &lt;shortname&gt; &lt;url&gt;</code> 命令更新指定远程仓库的地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url &lt;shortname&gt; &lt;new-url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git remote set-url origin https://github.com/newusername/newrepo.git</span><br></pre></td></tr></table></figure><p>通过 <code>git remote set-url &lt;shortname&gt; &lt;url&gt;</code> 命令移除指定的远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git remote remove &lt;shortname&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure><p>通过 <code>git remote rename &lt;oldname&gt; &lt;newname&gt;</code> 命令来修改一个远程仓库的简写名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote rename origin origin_git</span><br></pre></td></tr></table></figure><h2 id="从远程仓库克隆">从远程仓库克隆</h2><p>通过 <code>git clone &lt;url&gt;</code> 命令从远程仓库复制整个项目到本地。克隆后，默认会将远程仓库设置为 <code>origin</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;url&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/username/repo.git</span><br></pre></td></tr></table></figure><h2 id="从远程仓库抓取和拉取">从远程仓库抓取和拉取</h2><p>通过 <code>git fetch &lt;remote&gt;</code> 命令获取指定远程仓库的所有更新。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;remote&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例，获取远程仓库 origin 的所有分支的更新。</span></span><br><span class="line">git fetch origin</span><br></pre></td></tr></table></figure><p>通过 <code>git fetch &lt;remote&gt; &lt;branch&gt;</code> 命令获取指定远程仓库及分支的更新。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例，获取 origin/main 分支的更新。</span></span><br><span class="line">git fetch origin main</span><br></pre></td></tr></table></figure><p>通过 <code>git fetch --all</code> 命令获取所有远程仓库的所有更新。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例，获取所有远程仓库的最新更新。</span></span><br><span class="line">git fetch --all</span><br></pre></td></tr></table></figure><p>通过 <code>git pull &lt;remote&gt; &lt;branch&gt;</code> 命令从远程仓库拉取并合并指定分支的更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例，从远程仓库 origin 的 main 分支拉取最新代码并合并到本地分支。</span></span><br><span class="line">git pull origin main</span><br></pre></td></tr></table></figure><h2 id="推送到远程仓库">推送到远程仓库</h2><p>通过 <code>git push &lt;remote&gt; &lt;branch&gt;</code> 命令将本地分支的更改推送到指定的远程仓库和分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例，将本地 main 分支推送到 origin 的 main 分支。</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习-Git撤销操作</title>
    <link href="/2024/11/19/Git%E5%AD%A6%E4%B9%A0-Git%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C/"/>
    <url>/2024/11/19/Git%E5%AD%A6%E4%B9%A0-Git%E6%92%A4%E9%94%80%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>当我们熟悉了各种 Git 操作之后，不禁会想，人总是会犯错的，如果我们使用了 Git 提交了一些不想提交的信息，我们应该如何撤回这些操作呢？</p><span id="more"></span><h1>Git撤销操作</h1><h2 id="查看提交记录">查看提交记录</h2><p>使用 <code>git log</code> 命令查看历史记录，不传入任何参数的默认情况下，<code>git log</code> 会按时间先后顺序列出所有提交，最近的更新排在最上面。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><code>git log</code> 有许多选项可以帮助搜寻所要找的提交：</p><p>选项<code>-p</code> 或 <code>--patch</code> ，它会显示每次提交所引入的差异，也可以限制显示的日志条目数量，<code>-p</code> 或 <code>--patch</code> 选项除了显示基本信息之外，还附带了每次提交的变化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -p</span><br></pre></td></tr></table></figure><p>也可以设置只看每次提交的简略统计信息，可以使用 <code>--stat</code> 选项。<code>--stat</code> 选项在每次提交的下面列出所有被修改过的文件、有多少文件被修改了以及被修改过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br></pre></td></tr></table></figure><p><code>--pretty</code>。 这个选项可以使用不同于默认格式的方式展示提交历史。 这个选项有一些内建的子选项供使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line">git <span class="built_in">log</span> --pretty=short</span><br><span class="line">git <span class="built_in">log</span> --pretty=full</span><br><span class="line">git <span class="built_in">log</span> --pretty=fuller</span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">&quot;%h - %an, %ar : %s&quot;</span></span><br></pre></td></tr></table></figure><ol><li><code>oneline</code>：会将每个提交放在一行显示。</li><li><code>short</code>：会以简洁的形式显示提交日志。每个提交只显示提交哈希值和提交信息，不包括作者、日期等详细信息。</li><li><code>full</code>：显示每次提交的完整信息，包括作者、提交者以及提交哈希值和提交信息。</li><li><code>fuller</code>：相比 <code>full</code>，<code>fuller</code> 输出更加详细的信息，增加了作者、提交者的日期。</li><li><code>format</code>：可以定制记录的显示格式。<ul><li><code>%H</code>：提交的完整哈希值</li><li><code>%h</code>：提交的简写哈希值</li><li><code>%T</code>：树的完整哈希值</li><li><code>%t</code>：树的简写哈希值</li><li><code>%P</code>：父提交的完整哈希值</li><li><code>%p</code>：父提交的简写哈希值</li><li><code>%an</code>：作者名字</li><li><code>%ae</code>：作者的电子邮件地址</li><li><code>%ad</code>：作者修订日期（可以用 --date=选项 来定制格式）</li><li><code>%ar</code>：作者修订日期，按多久以前的方式显示</li><li><code>%cn</code>：提交者的名字</li><li><code>%ce</code>：提交者的电子邮件地址</li><li><code>%cd</code>：提交日期</li><li><code>%cr</code>：提交日期（距今多长时间）</li><li><code>%s</code>：提交说明</li></ul></li></ol><p><code>git log</code> 可以使用类似 <code>-&lt;n&gt;</code> 的选项，其中的 <code>n</code> 可以是任何整数，表示仅显示最近的 <code>n</code> 条提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> -2</span><br></pre></td></tr></table></figure><p><code>git log</code> 也可以使用 <code>--since</code> 和 <code>--until</code> 按照时间作限制的选项。<code>--since</code>用于筛选在某个特定时间之后的提交记录；<code>--until</code>用于筛选某个特定时间之前的提交记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --since=&lt;时间&gt;</span><br><span class="line">git <span class="built_in">log</span> --<span class="keyword">until</span>=&lt;时间&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;时间&gt;</code> 可以用多种格式表示，例如：</p><ol><li>自然语言描述：<ul><li><code>--since=&quot;2 weeks ago&quot;</code>（两周前）</li><li><code>--since=&quot;yesterday&quot;</code>（昨天）</li><li><code>--since=&quot;3 days ago&quot;</code>（三天前）</li></ul></li><li>日期格式：<ul><li><code>--since=&quot;2024-11-01&quot;</code>（指定日期后）</li><li><code>--since=&quot;2024-11-01 10:00:00&quot;</code>（精确到时间）</li></ul></li><li>特殊格式：<ul><li><code>--since=&quot;last monday&quot;</code>（上周一）</li><li><code>--since=&quot;1 month ago&quot;</code>（一个月前）</li></ul></li></ol><h2 id="查看文件差异">查看文件差异</h2><p>现在我们将目光重新回到 Git 仓库上，我们已经成功地添加并提交了一个<code>README.md</code>文件，现在我们继续修改<code>README.md</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改README.md内容</span></span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>运行<code>git status</code>命令看看结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">On branch main</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with <span class="string">&#x27;origin/main&#x27;</span>.</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   README.md</span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure><p>通过<code>git status</code>命令我们知道<code>README.md</code>被修改过了，但还没有准备提交的修改。如果你忘记修改了什么内容，可以用<code>git diff</code>这个命令来查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git diff README.md</span><br><span class="line">diff --git a/README.md b/README.md</span><br><span class="line">index d60788e..9247db6 100644</span><br><span class="line">--- a/README.md</span><br><span class="line">+++ b/README.md</span><br><span class="line">@@ -1 +1,2 @@</span><br><span class="line">-this is a readme <span class="built_in">test</span> text</span><br><span class="line">+Git is a distributed version control system.</span><br><span class="line">+Git is free software.</span><br></pre></td></tr></table></figure><p>我们再通过<code>git add</code>和<code>git commit</code>命令就可以将修改过的<code>README.md</code>文件提交到 Git 仓库中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&#x27;modified README.md&#x27;</span></span><br></pre></td></tr></table></figure><p>上面的例子仅仅只是查看了某一个文件的差异，<code>git diff</code>命令还有很多的用法：</p><ol><li><p>查看工作区和暂存区之间的差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff</span><br></pre></td></tr></table></figure></li><li><p>查看暂存区和最新提交之间的差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached</span><br></pre></td></tr></table></figure></li><li><p>查看工作区与最新提交之间的差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff HEAD</span><br></pre></td></tr></table></figure></li><li><p>比较两个提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit1&gt; &lt;commit2&gt;</span><br></pre></td></tr></table></figure></li><li><p>比较某次提交与当前工作区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;commit&gt;</span><br></pre></td></tr></table></figure></li><li><p>比较某次提交与暂存区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff --cached &lt;commit&gt;</span><br></pre></td></tr></table></figure></li><li><p>比较两个分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;branch1&gt; &lt;branch2&gt;</span><br></pre></td></tr></table></figure></li><li><p>比较当前分支与其他分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;branch&gt;</span><br></pre></td></tr></table></figure></li><li><p>查看特定文件的差异</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;file&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="撤销操作">撤销操作</h2><p>在任何一个阶段，我们都有可能想要撤消某些操作。有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。此时，可以运行带有 <code>--amend</code> 选项的提交命令来重新提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我们修改了README.md，并创建了一个test.txt文件</span></span><br><span class="line">vi README.md</span><br><span class="line"><span class="built_in">touch</span> test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只把README.md添加到暂存区，并提交到 Git 仓库</span></span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&#x27;modified README.md&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时发现忘了提交test.txt文件，可以通过 git add 和 git commit --amend命令，将test.txt文件添加到暂存区，并且第二次提交将替代第一次提交的结果</span></span><br><span class="line">git add test.txt</span><br><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>假设我们修改了两个文件并且想要将它们作为两次独立的修改提交， 但是却意外地输入 <code>git add *</code> 暂存了它们两个。如何只取消暂存两个中的一个呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git add *</span><br><span class="line">git status</span><br><span class="line">On branch main</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with <span class="string">&#x27;origin/main&#x27;</span>.</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        new file:   CONTRIBUTING.md</span><br><span class="line">        modified:   README.md</span><br></pre></td></tr></table></figure><p>这里有三种方法可以操作，Git 版本2.23.0以前推荐使用<code>git reset</code>和<code>git checkout</code>，Git 2.23.0以后的版本可以使用<code>git restore</code></p><h3 id="git-reset">git reset</h3><p><code>git reset</code> 主要用于调整 <strong>提交记录</strong> 和 <strong>暂存区</strong> 的状态，可能会影响提交历史。</p><ol><li><p>重置到指定的提交：将当前分支回退到 <code>&lt;commit&gt;</code>，并将更改保留在工作区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;commit&gt;</span><br></pre></td></tr></table></figure></li><li><p>移除暂存区的文件：将文件从暂存区移除，但不影响工作区中的实际更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset &lt;file&gt;</span><br></pre></td></tr></table></figure></li><li><p>修改提交记录的类型</p><ul><li><p><strong>软重置（<code>--soft</code>）：</strong> 只重置提交记录，暂存区和工作区不受影响。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure></li><li><p><strong>混合重置（<code>--mixed</code>，默认）：</strong> 重置提交记录和暂存区，保留工作区更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --mixed HEAD~1</span><br></pre></td></tr></table></figure></li><li><p><strong>硬重置（<code>--hard</code>）：</strong> 重置提交记录、暂存区和工作区，彻底清除更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD~1</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="git-checkout">git checkout</h3><p><code>git checkout</code> 是一个多功能命令，用于切换分支或恢复文件。它在 Git 2.23.0 后逐步被 <code>git switch</code> 和 <code>git restore</code> 替代。</p><ol><li><p>切换分支：切换到指定的分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch&gt;</span><br></pre></td></tr></table></figure></li><li><p>恢复文件：将指定文件恢复为暂存区或指定提交的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure></li><li><p>检出到某个提交：将工作区切换到指定提交，不影响分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;commit&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="git-restore">git restore</h3><p><code>git restore</code> 是 Git 2.23.0 引入的新命令，用于专门恢复文件的内容，增强了可读性和安全性。</p><ol><li><p>恢复工作区中的文件：撤销工作区中的更改，将文件恢复到暂存区的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore &lt;file&gt;</span><br></pre></td></tr></table></figure></li><li><p>恢复暂存区中的文件：从暂存区中移除文件，但保留工作区中的更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore --staged &lt;file&gt;</span><br></pre></td></tr></table></figure></li><li><p>从某个提交恢复文件：将文件恢复到指定提交的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore --<span class="built_in">source</span>=&lt;commit&gt; &lt;file&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习-Git基础</title>
    <link href="/2024/11/18/Git%E5%AD%A6%E4%B9%A0-Git%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/11/18/Git%E5%AD%A6%E4%B9%A0-Git%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>在了解了 Git 之后，我们将继续介绍如何在日常开发中使用 Git 进行基本的版本控制操作。这些操作包括创建仓库、跟踪文件变化、提交修改等。</p><span id="more"></span><h1>Git基础</h1><h2 id="创建Git仓库">创建Git仓库</h2><p>Git 使用仓库（repository）来管理文件的版本历史。可以通过两种方式创建仓库：</p><ul><li><p><strong>在现有项目中初始化仓库</strong>：</p><p>使用 <code>git init</code> 命令将当前目录转化为 Git 仓库：会在目录中创建一个隐藏的 <code>.git</code> 文件夹，用于存储 Git 的所有版本控制信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>在 Git 2.28.0 及之后的版本中，可以在初始化时指定默认分支的名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init --initial-branch=main</span><br></pre></td></tr></table></figure></li><li><p><strong>从远程仓库克隆项目</strong>：</p><p>使用 <code>git clone</code> 命令克隆远程仓库：此命令会下载远程仓库的内容，并初始化一个本地 Git 仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repository-url&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>git clone</code> 命令克隆到指定目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repository-url&gt; &lt;directory-name&gt;</span><br></pre></td></tr></table></figure><p>使用 <code>git clone</code> 命令克隆特定分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b &lt;branch-name&gt; &lt;repository-url&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="检查文件状态">检查文件状态</h2><p>当我们成功创建一个 Git 仓库之后，当前仓库工作目录下的每一个文件都不外乎这两种状态：<strong>已跟踪</strong> 或 <strong>未跟踪</strong>。 已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后， 它们的状态可能是未修改，已修改或已放入暂存区。</p><p>使用 <code>git status</code> 命令查看当前仓库的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>此命令会显示：</p><ol><li>尚未跟踪的新文件</li><li>暂存区中的文件</li><li>被修改但未暂存的文件</li><li>文件是否已被删除或重命名</li></ol><p>可以用 <code>git status</code> 命令查看哪些文件处于什么状态。 如果在克隆仓库或现有项目初始化后立即使用此命令，会看到类似这样的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">On branch main</span><br><span class="line">No commits yet</span><br><span class="line">nothing to commit (create/copy files and use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure><p>让我们在项目下创建一个新的 <code>README.md</code> 文件。 如果之前并不存在这个文件，使用 <code>git status</code> 命令，你将看到一个新的未跟踪文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> README.md</span><br><span class="line">git status</span><br><span class="line">On branch main</span><br><span class="line">No commits yet</span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">    README.md</span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">&quot;git add&quot;</span> to track)</span><br></pre></td></tr></table></figure><h2 id="跟踪新文件">跟踪新文件</h2><p>要让 Git 开始跟踪某个文件，需要使用 <code>git add</code> 命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file&gt;</span><br></pre></td></tr></table></figure><p>如果要一次性添加所有修改过的文件，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>此命令会将当前目录下的所有文件添加到暂存区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br><span class="line">git status</span><br><span class="line">On branch main</span><br><span class="line">No commits yet</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">    new file:   README</span><br></pre></td></tr></table></figure><p>我们再来创建一个新的<code>CONTRIBUTING.md</code>文件，使用<code>git status</code>查看一下状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> CONTRIBUTING.md</span><br><span class="line">git status</span><br><span class="line">On branch main</span><br><span class="line">No commits yet</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        new file:   README.md</span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        CONTRIBUTING.md</span><br></pre></td></tr></table></figure><p>使用<code>git add</code>命令将<code>CONTRIBUTING.md</code>文件添加到暂存区，再修改一下<code>CONTRIBUTING.md</code>文件，并使用<code>git status</code>查看一下状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">git add CONTRIBUTING.md</span><br><span class="line">vi CONTRIBUTING.md</span><br><span class="line">git status</span><br><span class="line">On branch main</span><br><span class="line">No commits yet</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        new file:   CONTRIBUTING.md</span><br><span class="line">        new file:   README.md</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   CONTRIBUTING.md</span><br></pre></td></tr></table></figure><h2 id="提交文件">提交文件</h2><p>当我们把本次修改的文件全部添加到暂存区后，就可以使用<code>git commit</code>命令将暂存区的文件提交到仓库中</p><p>运行提交命令 <code>git commit</code>会启动文本编辑器来输入提交说明。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># On branch main</span></span><br><span class="line"><span class="comment"># Your branch is based on &#x27;origin/main&#x27;, but the upstream is gone.</span></span><br><span class="line"><span class="comment">#   (use &quot;git branch --unset-upstream&quot; to fixup)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#       new file:   README.md</span></span><br><span class="line"><span class="comment">#       modified:   CONTRIBUTING.md</span></span><br></pre></td></tr></table></figure><p>也可以在 <code>commit</code> 命令后添加 <code>-m</code> 选项，将提交信息与命令放在同一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;modified README.md&#x27;</span></span><br></pre></td></tr></table></figure><p>Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 <code>git commit</code> 加上 <code>-a</code> 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -a -m <span class="string">&#x27;modified README.md&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="移除文件">移除文件</h2><p>要从 Git 仓库中移除某个文件， 可以用 <code>git rm</code> 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> CONTRIBUTING.md</span><br><span class="line">git status</span><br><span class="line">On branch main</span><br><span class="line">Your branch is based on <span class="string">&#x27;origin/main&#x27;</span>, but the upstream is gone.</span><br><span class="line">  (use <span class="string">&quot;git branch --unset-upstream&quot;</span> to fixup)</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        deleted:    CONTRIBUTING.md</span><br></pre></td></tr></table></figure><p>下一次提交时，该文件就不再纳入版本管理了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;deleted CONTRIBUTING.md&#x27;</span></span><br><span class="line">[main e34ebb3] deleted CONTRIBUTING.md</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 CONTRIBUTING.md</span><br></pre></td></tr></table></figure><p>如果要删除之前修改过或已经放到暂存区的文件，则必须使用强制删除选项 <code>-f</code>（译注：即 force 的首字母）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> test.txt</span><br><span class="line">git add test.txt</span><br><span class="line">git <span class="built_in">rm</span> -f test.txt</span><br></pre></td></tr></table></figure><p>如果想把文件从 Git 仓库中删除或从暂存区中移除，但仍然希望保留在当前工作目录中，可以使用 <code>--cached</code> 选项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> bug.log</span><br><span class="line">git add bug.log</span><br><span class="line">git <span class="built_in">rm</span> --cached bug.log</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="built_in">touch</span> bug.log</span><br><span class="line">git add bug.log</span><br><span class="line">git commit -m <span class="string">&#x27;create new file bug.log&#x27;</span></span><br><span class="line">git <span class="built_in">rm</span> --cached bug.log</span><br></pre></td></tr></table></figure><h2 id="移动文件">移动文件</h2><p>Git 并不显式跟踪文件移动操作，如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">mv</span> README.md HELLO.md</span><br><span class="line">git status</span><br><span class="line">On branch main</span><br><span class="line">Your branch is up to <span class="built_in">date</span> with <span class="string">&#x27;origin/main&#x27;</span>.</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        renamed:    README.md -&gt; HELLO.md</span><br></pre></td></tr></table></figure><p>运行 <code>git mv</code> 就相当于运行了下面三条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> README.md README</span><br><span class="line">git <span class="built_in">rm</span> README.md</span><br><span class="line">git add README</span><br></pre></td></tr></table></figure><h2 id="忽略文件">忽略文件</h2><p>有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 <code>.gitignore</code> 的文件，列出要忽略的文件的模式。</p><p>文件 <code>.gitignore</code> 的格式规范如下：</p><ol><li>所有空行或者以 <code>#</code> 开头的行都会被 Git 忽略。</li><li>可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。</li><li>匹配模式可以以（<code>/</code>）开头防止递归。</li><li>匹配模式可以以（<code>/</code>）结尾指定目录。</li><li>要忽略指定模式以外的文件或目录，可以在模式前加上叹号（<code>!</code>）取反。</li></ol><p>所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 星号（<code>*</code>）匹配零个或多个任意字符；<code>[abc]</code> 匹配任何一个列在方括号中的字符 （这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）； 问号（<code>?</code>）只匹配一个任意字符；如果在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 <code>[0-9]</code> 表示匹配所有 0 到 9 的数字）。 使用两个星号（<code>**</code>）表示匹配任意中间目录，比如 <code>a/**/z</code> 可以匹配 <code>a/z</code> 、 <code>a/b/z</code> 或 <code>a/b/c/z</code> 等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽略所有的 .a 文件</span></span><br><span class="line">*.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件</span></span><br><span class="line">!lib.a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO</span></span><br><span class="line">/TODO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略任何目录下名为 build 的文件夹</span></span><br><span class="line">build/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt</span></span><br><span class="line">doc/*.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略 doc/ 目录及其所有子目录下的 .pdf 文件</span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git学习-Git简介</title>
    <link href="/2024/11/15/Git%E5%AD%A6%E4%B9%A0-Git%E7%AE%80%E4%BB%8B/"/>
    <url>/2024/11/15/Git%E5%AD%A6%E4%B9%A0-Git%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>Git是一个流行的分布式版本控制系统，它允许多人协作管理代码变化，追踪历史记录，并且便于回溯和分支管理。</p><span id="more"></span><h1>Git简介</h1><h2 id="版本控制">版本控制</h2><p>版本控制（Version Control）是管理文件变化的系统，特别适用于开发人员的协作项目。通过版本控制，可以记录文件的历史修改，帮助跟踪和回溯每次变化，解决多人同时编辑时的冲突。</p><h3 id="集中式版本控制">集中式版本控制</h3><p>如 Subversion（SVN），所有代码存储在一个中央仓库中，开发人员从该仓库获取代码。集中化的版本控制的好处在于每个人都可以在一定程度上看到项目中的其他人正在做些什么， 而管理员也可以轻松掌控每个开发者的权限。缺点是中央服务器的单点故障，一旦中央服务器宕机，谁都无法提交更新，也就无法协同工作。如果中心数据库所在的磁盘发生损坏，又没有做恰当备份，毫无疑问你将丢失所有数据——包括项目的整个变更历史。</p><h3 id="分布式版本控制">分布式版本控制</h3><p>如 Git 和 Mercurial，每个开发者的机器上都有一个完整的代码仓库副本，可以离线工作，后期再与其他人同步。客户端并不只提取最新版本的文件快照， 而是把代码仓库完整地镜像下来，包括完整的历史记录。任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。 因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。</p><h2 id="Git优势">Git优势</h2><p>Git 是一个分布式版本控制系统，相比其他版本控制系统（如 SVN 或 CVS），Git 提供了许多优势：</p><ol><li><strong>分布式架构</strong>：每个开发者的电脑上都有一个完整的仓库副本，确保更高的可靠性和灵活性。</li><li><strong>快速高效</strong>：Git 使用高效的数据结构和算法，操作（如提交、分支、合并等）非常快速。</li><li><strong>强大的分支功能</strong>：Git 的分支管理非常轻量、便捷，适合多分支开发模式，支持并行开发。</li><li><strong>数据完整性</strong>：Git 使用 SHA-1 哈希值来确保数据的一致性和完整性。</li></ol><h2 id="Git-的工作区与版本库">Git 的工作区与版本库</h2><p>Git 的工作区和版本库的管理是其核心概念。Git 将文件管理分为三个区域：</p><ol><li><strong>工作区（Working Directory）</strong>：当前开发者正在编辑和修改的文件夹。</li><li><strong>暂存区（Staging Area）</strong>：Git 用来存放准备提交的文件变化的区域。</li><li><strong>版本库（Repository）</strong>：Git 用来存储文件历史记录的区域，包括提交记录。</li></ol><h2 id="Git状态">Git状态</h2><p>Git 有三种状态，你的文件可能处于其中之一： <strong>已提交（committed）</strong>、<strong>已修改（modified）</strong> 和 <strong>已暂存（staged）</strong>。</p><ol><li>已修改表示修改了文件，但还没保存到数据库中。</li><li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li>已提交表示数据已经安全地保存在本地数据库中。</li></ol><h2 id="Git安装">Git安装</h2><p>在使用 Git 之前，需要先安装它。Git 可以在多个平台上运行，包括 Windows、macOS 和 Linux。</p><ol><li><strong>Windows</strong>：可以通过 Git 官方网站下载并安装 Git for Windows。</li><li><strong>macOS</strong>：可以通过 Homebrew（<code>brew install git</code>）或官网下载并安装。</li><li><strong>Linux</strong>：大多数 Linux 发行版都可以通过包管理器（如 <code>apt-get</code> 或 <code>yum</code>）直接安装 Git。</li></ol><h2 id="Git配置">Git配置</h2><p>安装完成后，需要对 Git 进行基本的配置，主要包括设置用户名和电子邮件。这些信息将用于记录每次提交的作者信息。</p><p>配置用户名和电子邮件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>配置默认文本编辑器：可以设置使用的编辑器（例如 Vim 或 VSCode）来编辑提交信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.editor <span class="string">&quot;vim&quot;</span></span><br></pre></td></tr></table></figure><p>查看当前配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure><h2 id="获取帮助">获取帮助</h2><p>若你使用 Git 时需要获取帮助，有三种等价的方法可以找到 Git 命令的综合手册（manpage）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span> &lt;verb&gt;</span><br><span class="line">git &lt;verb&gt; --<span class="built_in">help</span></span><br><span class="line">man git-&lt;verb&gt;</span><br></pre></td></tr></table></figure><p>例如，要想获得 <code>git config</code> 命令的手册，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span> config</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS学习-高级概念与设计模式</title>
    <link href="/2024/11/14/TS%E5%AD%A6%E4%B9%A0-%E9%AB%98%E7%BA%A7%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/11/14/TS%E5%AD%A6%E4%B9%A0-%E9%AB%98%E7%BA%A7%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>在 TypeScript 中，高级概念和设计模式的运用可以极大地提升代码的灵活性、可读性和维护性。</p><span id="more"></span><h1>高级概念与设计模式</h1><h2 id="装饰器">装饰器</h2><p>TypeScript 装饰器用于修改类、方法、访问器、属性或参数的行为。装饰器分为四种：类装饰器、方法装饰器、访问器装饰器和属性装饰器。</p><h3 id="装饰器启用">装饰器启用</h3><p>在使用装饰器前，需要在 <code>tsconfig.json</code> 中启用 <code>experimentalDecorators</code> 选项</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;experimentalDecorators&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="类装饰器">类装饰器</h3><p>类装饰器用于为类添加元数据或增强类的功能。类装饰器会应用于类的构造函数，可以用于修改类的定义或动态添加属性和方法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Logger</span>(<span class="params">constructor: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Class was instantiated:&quot;</span>, constructor.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Logger</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MyClass constructor called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// Class was instantiated: MyClass</span></span><br><span class="line"><span class="comment">// MyClass constructor called.</span></span><br></pre></td></tr></table></figure><p><strong>返回值：</strong> 类装饰器可以返回一个新的构造函数，以替换原来的类。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title class_">WithTimestamp</span>&lt;T <span class="keyword">extends</span> &#123; <span class="title function_">new</span>(...<span class="attr">args</span>: <span class="built_in">any</span>[]): &#123;&#125; &#125;&gt;(<span class="attr">constructor</span>: T) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> constructor &#123;</span><br><span class="line">    timestamp = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WithTimestamp</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Event</span> &#123;</span><br><span class="line">name = <span class="string">&quot;Some Event&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> event = <span class="keyword">new</span> <span class="title class_">Event</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(event);  <span class="comment">// Event &#123; name: &quot;Some Event&quot;, timestamp: &lt;当前时间&gt; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="方法装饰器">方法装饰器</h3><p>方法装饰器用于修改或增强类中的方法。它接收三个参数：</p><ol><li><code>target</code>：方法所在的对象（类的原型）。</li><li><code>propertyKey</code>：方法的名称。</li><li><code>descriptor</code>：方法的属性描述符，可以用来修改方法的行为。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LogMethod</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> originalMethod = descriptor.<span class="property">value</span>;</span><br><span class="line">    descriptor.<span class="property">value</span> = <span class="keyword">function</span> (<span class="params">...args: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Method <span class="subst">$&#123;propertyKey&#125;</span> called with args:`</span>, args);</span><br><span class="line">        <span class="keyword">return</span> originalMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="meta">@LogMethod</span></span><br><span class="line">    <span class="title function_">add</span>(<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calc = <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(calc.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>));  </span><br><span class="line"><span class="comment">// Logs: Method add called with args: [2, 3]</span></span><br><span class="line"><span class="comment">// Output: 5</span></span><br></pre></td></tr></table></figure><h3 id="访问器装饰器">访问器装饰器</h3><p>访问器装饰器用于装饰类的 <code>getter</code> 或 <code>setter</code> 方法。访问器装饰器的参数和方法装饰器相同。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LogAccessor</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> originalGet = descriptor.<span class="property">get</span>;</span><br><span class="line">    descriptor.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Getting value for <span class="subst">$&#123;propertyKey&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">return</span> originalGet?.<span class="title function_">apply</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">_name</span>: <span class="built_in">string</span> = <span class="string">&quot;John Doe&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LogAccessor</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);  </span><br><span class="line"><span class="comment">// Logs: Getting value for name</span></span><br><span class="line"><span class="comment">// Output: John Doe</span></span><br></pre></td></tr></table></figure><h3 id="属性装饰器">属性装饰器</h3><p>属性装饰器用于装饰类中的属性。它接受两个参数：</p><ol><li><code>target</code>：类的原型（静态属性则为构造函数）。</li><li><code>propertyKey</code>：属性的名称。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LogProperty</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Property <span class="subst">$&#123;propertyKey&#125;</span> added to`</span>, target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="meta">@LogProperty</span></span><br><span class="line">    <span class="attr">price</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">price: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// Property price added to Product &#123;&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：属性装饰器无法直接访问属性的值，只能用于添加元数据或标注。</p><h3 id="参数装饰器">参数装饰器</h3><p>参数装饰器用于标记类的构造函数或方法参数。它接收三个参数：</p><ol><li><code>target</code>：类的原型（静态方法则为构造函数）。</li><li><code>propertyKey</code>：方法的名称。</li><li><code>parameterIndex</code>：参数的位置索引。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LogParameter</span>(<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, parameterIndex: <span class="built_in">number</span></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Parameter <span class="subst">$&#123;parameterIndex&#125;</span> in method <span class="subst">$&#123;propertyKey&#125;</span> was decorated`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"><span class="meta">@LogParameter</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// Parameter 0 in method greet was decorated</span></span><br></pre></td></tr></table></figure><h3 id="装饰器组合">装饰器组合</h3><p>多个装饰器可以应用在同一个类或方法上。装饰器的执行顺序自下而上应用，自上而下执行。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">First</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;First decorator&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Second</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Second decorator&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="meta">@First</span>()</span><br><span class="line">    <span class="meta">@Second</span>()</span><br><span class="line">    <span class="title function_">method</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Method execution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Second decorator</span></span><br><span class="line"><span class="comment">// First decorator</span></span><br></pre></td></tr></table></figure><h3 id="装饰器工厂">装饰器工厂</h3><p>装饰器工厂是返回装饰器函数的工厂函数，允许装饰器接受参数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">LogWithPrefix</span>(<span class="params">prefix: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propertyKey: <span class="built_in">string</span>, descriptor: PropertyDescriptor</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> originalMethod = descriptor.<span class="property">value</span>;</span><br><span class="line">        descriptor.<span class="property">value</span> = <span class="keyword">function</span> (<span class="params">...args: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;prefix&#125;</span> Method <span class="subst">$&#123;propertyKey&#125;</span> called with args:`</span>, args);</span><br><span class="line">            <span class="keyword">return</span> originalMethod.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="meta">@LogWithPrefix</span>(<span class="string">&quot;INFO:&quot;</span>)</span><br><span class="line">    <span class="title function_">multiply</span>(<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> calc = <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(calc.<span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">3</span>));  </span><br><span class="line"><span class="comment">// Logs: INFO: Method multiply called with args: [2, 3]</span></span><br><span class="line"><span class="comment">// Output: 6</span></span><br></pre></td></tr></table></figure><h2 id="设计模式">设计模式</h2><h3 id="单例模式">单例模式</h3><p>单例模式确保一个类只有一个实例，并提供一个全局访问点。可以通过私有构造函数和静态方法来实现。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="attr">instance</span>: <span class="title class_">Singleton</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">getInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Singleton</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">        <span class="title class_">Singleton</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Singleton</span>.<span class="property">instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂模式">工厂模式</h3><p>工厂模式通过定义一个接口或抽象类，由具体的工厂类来负责创建对象。适用于对象创建逻辑复杂或类型较多的情况。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"><span class="title function_">use</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="title function_">use</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Using product A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProductFactory</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">createProduct</span>(<span class="attr">type</span>: <span class="built_in">string</span>): <span class="title class_">Product</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">type</span> === <span class="string">&quot;A&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProductA</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unknown product type&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="观察者模式">观察者模式</h3><p>观察者模式定义对象间一对多的依赖关系，在一个对象发生改变时，自动通知并更新所有依赖的对象。可以通过接口实现事件发布订阅。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"><span class="title function_">update</span>(<span class="attr">data</span>: <span class="built_in">any</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">observers</span>: <span class="title class_">Observer</span>[] = [];</span><br><span class="line">    <span class="title function_">addObserver</span>(<span class="params">observer: Observer</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">push</span>(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">notify</span>(<span class="params">data: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> observer.<span class="title function_">update</span>(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="装饰器模式">装饰器模式</h3><p>装饰器模式通过将对象组合在一起而非继承的方式来扩展对象的功能。TypeScript 本身也支持装饰器。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Logger</span>(<span class="params">target: <span class="built_in">Function</span></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;target.name&#125;</span> was called.`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Logger</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="策略模式">策略模式</h3><p>策略模式定义一组算法，将每个算法封装，并使它们可以互换。适用于一组算法需要互换的情况。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"><span class="title function_">execute</span>(<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddStrategy</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="title function_">execute</span>(<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> strategy: Strategy</span>) &#123;&#125;</span><br><span class="line">    <span class="title function_">setStrategy</span>(<span class="params">strategy: Strategy</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">strategy</span> = strategy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">executeStrategy</span>(<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">strategy</span>.<span class="title function_">execute</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代理模式">代理模式</h3><p>代理模式通过代理对象控制对另一个对象的访问。适用于需要在访问对象前后做预处理或后处理的情况。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Service</span> &#123;</span><br><span class="line"><span class="title function_">request</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealService</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RealService request&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyService</span> <span class="keyword">implements</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">realService</span>: <span class="title class_">RealService</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">realService</span> = <span class="keyword">new</span> <span class="title class_">RealService</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ProxyService: Do some work before calling the real service.&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">realService</span>.<span class="title function_">request</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中介者模式">中介者模式</h3><p>中介者模式通过中介对象来简化对象间的通信，避免了对象间的直接相互依赖。适用于对象间通信复杂、相互依赖较多的情况。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">components</span>: <span class="title class_">Component</span>[] = [];</span><br><span class="line">    <span class="title function_">register</span>(<span class="params">component: Component</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">components</span>.<span class="title function_">push</span>(component);</span><br><span class="line">        component.<span class="title function_">setMediator</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">notify</span>(<span class="params">sender: Component, event: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">components</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">component</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (component !== sender) &#123;</span><br><span class="line">            component.<span class="title function_">receive</span>(event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS学习-TS工具链</title>
    <link href="/2024/11/13/TS%E5%AD%A6%E4%B9%A0-TS%E5%B7%A5%E5%85%B7%E9%93%BE/"/>
    <url>/2024/11/13/TS%E5%AD%A6%E4%B9%A0-TS%E5%B7%A5%E5%85%B7%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<p>TypeScript 工具链涉及 TypeScript 项目的开发、构建、调试和优化的方方面面，包括编译器、类型检查工具、代码格式化工具、构建工具、调试工具以及与 IDE 的集成等。</p><span id="more"></span><h1>工具链</h1><h2 id="TypeScript-编译器-tsc">TypeScript 编译器 (<code>tsc</code>)</h2><p>TypeScript 的核心工具是 <code>tsc</code>（TypeScript Compiler），它负责将 <code>.ts</code> 文件编译为 JavaScript，并进行类型检查。</p><h3 id="安装-tsc">安装 <code>tsc</code></h3><p>如果项目中还未安装 TypeScript，可以使用以下命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><h3 id="基本用法">基本用法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc index.ts</span><br></pre></td></tr></table></figure><h2 id="tsconfig-json-配置文件"><code>tsconfig.json</code> 配置文件</h2><p><code>tsconfig.json</code> 文件包含 TypeScript 编译器的配置选项。项目根目录中的 <code>tsconfig.json</code> 使 <code>tsc</code> 可以识别项目并自动处理其中文件。</p><h3 id="常用配置项">常用配置项</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span>             <span class="comment">// 指定编译后的 ECMAScript 版本</span></span><br><span class="line">        <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>        <span class="comment">// 指定模块系统，如 &#x27;commonjs&#x27;、&#x27;ESNext&#x27;</span></span><br><span class="line">        <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>              <span class="comment">// 启用所有严格类型检查选项</span></span><br><span class="line">        <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span>          <span class="comment">// 输出目录</span></span><br><span class="line">        <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span><span class="punctuation">,</span>          <span class="comment">// 输入文件目录</span></span><br><span class="line">        <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>     <span class="comment">// 允许对 CommonJS 模块进行 ES6 兼容导入</span></span><br><span class="line">        <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span>         <span class="comment">// 跳过库文件的类型检查</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>       <span class="comment">// 包含的文件</span></span><br><span class="line">    <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">]</span>    <span class="comment">// 排除的文件</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="构建工具的-TypeScript-支持">构建工具的 TypeScript 支持</h2><p>现代 JavaScript 构建工具，如 Webpack、Babel 和 Vite，都可以集成 TypeScript，通过插件来实现编译和类型检查。</p><h3 id="Webpack">Webpack</h3><p>可以使用 <code>ts-loader</code> 或 <code>babel-loader</code> 来在 Webpack 项目中集成 TypeScript。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev typescript ts-loader</span><br></pre></td></tr></table></figure><h4 id="Webpack-配置示例">Webpack 配置示例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.ts&#x27;</span>,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                <span class="attr">use</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Babel">Babel</h3><p>Babel 主要用于将 TypeScript 代码编译为 JavaScript，但不会进行类型检查。可以结合 <code>@babel/preset-typescript</code> 使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @babel/core @babel/preset-typescript</span><br></pre></td></tr></table></figure><h4 id="Babel-配置">Babel 配置</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@babel/preset-typescript&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Vite">Vite</h3><p>Vite 是现代的构建工具，开箱即用支持 TypeScript，无需额外配置。可以直接在 <code>vite.config.ts</code> 中定义 TypeScript 配置。</p><h2 id="Linting-和代码风格">Linting 和代码风格</h2><h3 id="ESLint">ESLint</h3><p>ESLint 是最流行的 JavaScript 代码检查工具，支持 TypeScript。推荐使用 <code>@typescript-eslint</code> 插件集成 TypeScript 支持。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin</span><br></pre></td></tr></table></figure><h4 id="ESLint-配置">ESLint 配置</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;parser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@typescript-eslint/parser&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;@typescript-eslint&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;plugin:@typescript-eslint/recommended&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 这里可以加入自定义规则</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Prettier">Prettier</h4><p>Prettier 是一个代码格式化工具，可以结合 ESLint 使用。安装 Prettier 及其 ESLint 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev prettier eslint-plugin-prettier eslint-config-prettier</span><br></pre></td></tr></table></figure><h4 id="Prettier-配置示例">Prettier 配置示例</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS学习-类型声明与库</title>
    <link href="/2024/11/12/TS%E5%AD%A6%E4%B9%A0-%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%BA%93/"/>
    <url>/2024/11/12/TS%E5%AD%A6%E4%B9%A0-%E7%B1%BB%E5%9E%8B%E5%A3%B0%E6%98%8E%E4%B8%8E%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<p>在 TypeScript 中，为了使代码在编写和编译时能得到类型检查和代码提示，需要对第三方库进行类型声明。如果一个第三方库本身没有内置类型定义，TypeScript 提供了多种方式来添加类型支持。</p><span id="more"></span><h1>类型声明与库</h1><h2 id="第三方库类型声明">第三方库类型声明</h2><ol><li><strong>内置类型声明</strong>：一些第三方库直接在库内部定义了 TypeScript 类型。</li><li><strong>DefinitelyTyped 的类型声明</strong>：很多第三方库的类型声明被发布到 <code>DefinitelyTyped</code> 仓库，可以通过 <code>@types</code> 获取这些类型。</li><li><strong>手动创建类型声明文件</strong>：如果库没有提供类型支持，也未在 <code>DefinitelyTyped</code> 中提供类型声明，可以手动创建类型声明文件。</li></ol><h3 id="内置类型声明">内置类型声明</h3><p>现代很多第三方库直接包含了 <code>.d.ts</code> 文件，这些文件用于定义库的类型。安装这样的库时，不需要额外的类型定义包。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = _.<span class="title function_">chunk</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], <span class="number">2</span>); <span class="comment">// 类型会自动识别</span></span><br></pre></td></tr></table></figure><h3 id="DefinitelyTyped-安装类型声明包">DefinitelyTyped 安装类型声明包</h3><p>如果第三方库没有提供内置类型声明，可以在 DefinitelyTyped 查找它的类型声明包。<code>DefinitelyTyped</code> 是一个由社区维护的仓库，专门用于管理第三方库的类型定义。类型声明包通常以 <code>@types/包名</code> 的形式发布到 npm。</p><h4 id="安装方式">安装方式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lodash @types/lodash</span><br></pre></td></tr></table></figure><h4 id="使用类型声明包">使用类型声明包</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = _.<span class="title function_">chunk</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>], <span class="number">2</span>); <span class="comment">// 自动获得类型提示</span></span><br></pre></td></tr></table></figure><h3 id="手动创建类型声明文件">手动创建类型声明文件</h3><p>如果库没有内置类型声明，也没有 <code>@types</code> 包，可以手动为它创建类型声明文件。手动创建类型声明文件时，需要确保 TypeScript 能够找到声明文件的路径。</p><h4 id="创建-d-ts-文件">创建 <code>.d.ts</code> 文件</h4><p>通常在项目的 <code>src</code> 或 <code>typings</code> 目录下创建一个 <code>.d.ts</code> 文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明模块，指定模块名与库的名字匹配</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;example-library&#x27;</span> &#123;</span><br><span class="line">    <span class="comment">// 声明库的导出内容，以下为示例</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">exampleFunction</span>(<span class="params">arg: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">exampleConstant</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用手动创建的类型声明文件">使用手动创建的类型声明文件</h4><p>创建完类型声明文件后，可以直接导入库，TypeScript 会使用 <code>.d.ts</code> 文件中的类型声明进行类型检查。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; exampleFunction, exampleConstant &#125; <span class="keyword">from</span> <span class="string">&#x27;example-library&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">exampleFunction</span>(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exampleConstant);</span><br></pre></td></tr></table></figure><h2 id="declare-关键字">declare 关键字</h2><p><code>declare</code> 是 TypeScript 中的一个关键字，用于声明在当前文件中不存在的变量、函数、模块、命名空间等。它的主要作用是告诉 TypeScript 编译器某些内容的类型信息，以便在编译时进行类型检查，但这些内容不会生成实际的 JavaScript 代码。<code>declare</code> 常用于为全局变量、第三方库或自定义模块添加类型声明</p><h3 id="declare-声明变量"><code>declare</code> 声明变量</h3><p>在某些情况下，可能会使用一些全局变量，可以使用 <code>declare</code> 告诉 TypeScript，这些变量存在并指定它们的类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">API_KEY</span>: <span class="built_in">string</span>;</span><br></pre></td></tr></table></figure><h3 id="declare-声明函数"><code>declare</code> 声明函数</h3><p>对于在 TypeScript 文件中没有实现的函数，可以使用 <code>declare</code> 来告知其存在并定义类型信息。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="built_in">void</span>;</span><br></pre></td></tr></table></figure><h3 id="declare-声明模块"><code>declare</code> 声明模块</h3><p>在引入第三方库时，如果没有对应的类型声明文件，可以使用 <code>declare module</code> 来告诉 TypeScript 该模块的类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;my-library&#x27;</span> &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; myFunction &#125; <span class="keyword">from</span> <span class="string">&#x27;my-library&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">myFunction</span>();</span><br></pre></td></tr></table></figure><h3 id="declare-声明命名空间"><code>declare</code> 声明命名空间</h3><p>命名空间用于为全局对象（或模块）创建一个命名空间，以便在一个逻辑范围内组织代码。使用 <code>declare namespace</code> 可以声明第三方库的全局命名空间。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> <span class="title class_">MyLibrary</span> &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>): <span class="built_in">void</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">version</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyLibrary</span>.<span class="title function_">doSomething</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyLibrary</span>.<span class="property">version</span>);</span><br></pre></td></tr></table></figure><h3 id="declare-global-声明全局变量"><code>declare global</code> 声明全局变量</h3><p>如果希望为全局作用域添加一些类型声明，可以使用 <code>declare global</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">global</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Window</span> &#123;</span><br><span class="line">    <span class="attr">myCustomProperty</span>: <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">myCustomProperty</span> = <span class="string">&quot;Hello World&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="declare-与-export、export-default-结合使用"><code>declare</code> 与 <code>export</code>、<code>export default</code> 结合使用</h3><p>在模块化系统中，使用 <code>declare</code> 来声明导出内容时，可以结合 <code>export</code> 或 <code>export default</code> 使用，以便 TypeScript 正确识别模块的导出内容。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;my-default-export-lib&#x27;</span> &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> doSomething <span class="keyword">from</span> <span class="string">&#x27;my-default-export-lib&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">doSomething</span>();</span><br></pre></td></tr></table></figure><h3 id="declare-类型声明文件（-d-ts-文件）"><code>declare</code> 类型声明文件（<code>.d.ts</code> 文件）</h3><p>在 <code>.d.ts</code> 文件中，<code>declare</code> 用来声明类型信息，告诉 TypeScript 类型和模块的结构信息，但不包含实现。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/custome.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;my-library&#x27;</span> &#123;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用声明文件</span></span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&#x27;my-library&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 输出：3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS学习-模块与命名空间</title>
    <link href="/2024/11/11/TS%E5%AD%A6%E4%B9%A0-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    <url>/2024/11/11/TS%E5%AD%A6%E4%B9%A0-%E6%A8%A1%E5%9D%97%E4%B8%8E%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<p>在 TypeScript 中，<strong>模块</strong>和<strong>命名空间</strong>用于组织和管理代码，避免命名冲突，使项目结构更清晰。尽管它们有相似之处，但其用法、适用场景和作用也有所不同。</p><span id="more"></span><h1>模块与命名空间</h1><h2 id="模块">模块</h2><p><strong>模块</strong>是 TypeScript 基于 ES6 模块规范实现的一种代码组织方式，具有更好的代码复用性和封装性。模块的代码会默认处于文件的私有作用域中，不会污染全局命名空间，需要显式导入和导出才能在其他文件中访问模块中的内容。</p><h3 id="模块的定义与使用">模块的定义与使用</h3><p>模块在 TypeScript 中是一个独立的文件，模块中的内容（类、接口、变量等）需要通过 <code>export</code> 导出，才能在其他模块中被导入使用。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.ts</span></span><br><span class="line"><span class="comment">// 导出函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, subtract &#125; <span class="keyword">from</span> <span class="string">&#x27;./math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">10</span>, <span class="number">5</span>));       <span class="comment">// 输出: 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtract</span>(<span class="number">10</span>, <span class="number">5</span>));  <span class="comment">// 输出: 5</span></span><br></pre></td></tr></table></figure><p>一个模块也可以使用 <code>export default</code> 来导出默认成员，导入时可以自定义名称</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nath.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.ts</span></span><br><span class="line"><span class="keyword">import</span> multiply <span class="keyword">from</span> <span class="string">&#x27;./math&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">10</span>, <span class="number">5</span>));  <span class="comment">// 输出: 50</span></span><br></pre></td></tr></table></figure><h3 id="import-type">import type</h3><p><strong><code>import type</code></strong> 是 TypeScript 引入的一种语法，用于显式地声明仅用于类型信息的导入。</p><ol><li><strong>减少运行时代码</strong>：类型信息在编译时使用，而不会在运行时存在。因此，使用 <code>import type</code> 可以确保编译后的代码中不会包含不必要的导入语句，从而减小最终的代码体积。</li><li><strong>避免循环依赖</strong>：在某些复杂的模块关系中，普通的导入可能会导致循环依赖问题。由于类型导入不会在运行时存在，使用 <code>import type</code> 可以有效避免这些问题。</li><li><strong>明确类型用途</strong>：通过显式声明某个导入仅用于类型，代码的可读性和维护性得到提高。开发者和工具可以更清楚地理解导入的目的。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.ts</span></span><br><span class="line"><span class="comment">// 仅用于类型声明，不会在编译后的代码中保留</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">User</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./User&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">user: User</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;user.name&#125;</span>!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span> = &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;;</span><br><span class="line"><span class="title function_">greet</span>(user);</span><br></pre></td></tr></table></figure><p><strong><code>import type</code> 与 <code>import</code> 的区别</strong></p><p><strong><code>import</code></strong>：</p><ol><li>用于导入值（变量、函数、类等），不仅仅是类型。</li><li>会在编译后的 JavaScript 中保留对应的导入语句。</li></ol><p><strong><code>import type</code></strong>：</p><ol><li>仅用于导入类型信息（接口、类型别名、枚举等）。</li><li>不会在编译后的 JavaScript 中生成导入语句。</li></ol><h3 id="模块的优点">模块的优点</h3><ol><li><strong>模块化</strong>：模块将代码分隔到不同的文件中，便于代码管理和维护。</li><li><strong>作用域隔离</strong>：模块内的代码默认在模块的作用域中，不会污染全局命名空间。</li><li><strong>依赖管理</strong>：使用 <code>import</code> 和 <code>export</code> 来声明模块之间的依赖关系，编译器能检查模块的导入和导出是否正确。</li></ol><h2 id="命名空间">命名空间</h2><p><strong>命名空间</strong>是 TypeScript 中用于组织代码的一种早期机制，它的主要目的是解决全局命名空间污染的问题。命名空间常用于将大量相关功能或类型放在同一个命名空间中，避免命名冲突。命名空间适合在浏览器环境中使用，因为命名空间的内容会直接暴露在全局作用域下。</p><h3 id="命名空间的定义与使用">命名空间的定义与使用</h3><p>命名空间使用 <code>namespace</code> 关键字定义，通常用于包含一组相关的类、接口、函数或常量。命名空间可以嵌套、分散在多个文件中，但需要使用 <code>/// &lt;reference path=&quot;...&quot;&gt;</code> 或 <code>tsconfig.json</code> 的 <code>include</code> 设置来引用关联的文件。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shapes.ts</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">Shapes</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">calculateCircleArea</span>(<span class="params">radius: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">calculateSquareArea</span>(<span class="params">side: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> side * side;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.ts</span></span><br><span class="line"><span class="comment">/// &lt;reference path=&quot;shapes.ts&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Shapes</span>.<span class="title function_">calculateCircleArea</span>(<span class="number">5</span>));  <span class="comment">// 输出: 78.53981633974483</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Shapes</span>.<span class="title function_">calculateSquareArea</span>(<span class="number">4</span>));  <span class="comment">// 输出: 16</span></span><br></pre></td></tr></table></figure><h3 id="嵌套命名空间">嵌套命名空间</h3><p>命名空间可以嵌套，从而进一步组织代码。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title class_">Shapes</span> &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">TwoD</span> &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">calculateRectangleArea</span>(<span class="params">width: <span class="built_in">number</span>, height: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> <span class="title class_">ThreeD</span> &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">calculateCubeVolume</span>(<span class="params">side: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> side ** <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用嵌套命名空间</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Shapes</span>.<span class="property">TwoD</span>.<span class="title function_">calculateRectangleArea</span>(<span class="number">5</span>, <span class="number">10</span>));  <span class="comment">// 输出: 50</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Shapes</span>.<span class="property">ThreeD</span>.<span class="title function_">calculateCubeVolume</span>(<span class="number">3</span>));       <span class="comment">// 输出: 27</span></span><br></pre></td></tr></table></figure><h3 id="命名空间的优点">命名空间的优点</h3><ol><li><strong>分组相关代码</strong>：命名空间将相关代码分组在一起，有助于组织代码结构。</li><li><strong>避免全局命名冲突</strong>：命名空间将代码封装在一个命名空间下，减少了与其他代码的命名冲突。</li><li><strong>适合大型应用</strong>：对于大型应用程序或复杂的代码库，命名空间可以帮助将逻辑进行分层管理。</li></ol>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS学习-泛型</title>
    <link href="/2024/11/08/TS%E5%AD%A6%E4%B9%A0-%E6%B3%9B%E5%9E%8B/"/>
    <url>/2024/11/08/TS%E5%AD%A6%E4%B9%A0-%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>泛型是 TypeScript 中的一项强大功能，它允许我们定义可重用的组件、函数、类或接口，使得这些组件可以在不同的类型上工作，而不需要事先指定具体的类型。</p><span id="more"></span><h1>泛型</h1><p>在 TypeScript 中，我们通常需要定义函数、类或接口来处理不同的数据类型。如果没有泛型，我们可能会使用 <code>any</code> 类型来表示可以接受任何类型的参数，但 <code>any</code> 会丧失类型检查的优势，容易导致错误。泛型通过让开发者在编写代码时指定类型的占位符，使得代码能够在不同类型上工作，同时仍然保留类型安全。</p><h2 id="泛型语法">泛型语法</h2><p>泛型使用 <strong>尖括号（<code>&lt;</code> 和 <code>&gt;</code>）</strong> 来指定占位符类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line"><span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中：</p><ol><li><code>T</code> 是一个类型变量（占位符），代表任意类型。</li><li>函数 <code>identity</code> 可以接受任何类型的参数，并且返回相同类型的值。</li></ol><h2 id="泛型使用">泛型使用</h2><p>调用泛型函数时，TypeScript 会自动推断类型，但也可以显式传递类型参数。</p><h3 id="自动推断类型">自动推断类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line"><span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">identity</span>(<span class="number">42</span>);  <span class="comment">// 推断 T 为 number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">// 输出 42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title function_">identity</span>(<span class="string">&quot;hello&quot;</span>);  <span class="comment">// 推断 T 为 string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2);  <span class="comment">// 输出 &quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h3 id="显式传递类型">显式传递类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = identity&lt;<span class="built_in">number</span>&gt;(<span class="number">42</span>);  <span class="comment">// 显式指定 T 为 number</span></span><br><span class="line"><span class="keyword">let</span> result2 = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;hello&quot;</span>);  <span class="comment">// 显式指定 T 为 string</span></span><br></pre></td></tr></table></figure><h2 id="泛型写法">泛型写法</h2><h3 id="函数的泛型写法">函数的泛型写法</h3><p><code>function</code>关键字定义的泛型函数，类型参数放在尖括号中，写在函数名后面。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> id&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line"><span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口的泛型写法">接口的泛型写法</h3><p>使用泛型接口时，需要给出类型参数的值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line"><span class="attr">contents</span>: <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">box</span>: <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Fn</span> &#123;</span><br><span class="line">&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> id&lt;<span class="title class_">Type</span>&gt;(<span class="attr">arg</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line"><span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">myId</span>: <span class="title class_">Fn</span> = id;</span><br></pre></td></tr></table></figure><h3 id="类的泛型写法">类的泛型写法</h3><p>泛型类的类型参数写在类名后面。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="attr">key</span>: K;</span><br><span class="line">    <span class="attr">value</span>: V;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承泛型类，类<code>A</code>有一个类型参数<code>T</code>，使用时必须给出<code>T</code>的类型，所以类<code>B</code>继承时要写成<code>A&lt;any&gt;</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="attr">value</span>: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span>&lt;<span class="built_in">any</span>&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><p>泛型也可以用在类表达式</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Container</span> = <span class="keyword">class</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> <span class="keyword">readonly</span> data: T</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title class_">Container</span>&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">true</span>);</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title class_">Container</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="类型别名的泛型写法">类型别名的泛型写法</h3><p>type 命令定义的类型别名，也可以使用泛型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Container</span>&lt;T&gt; = &#123; <span class="attr">value</span>: T &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">Container</span>&lt;<span class="built_in">number</span>&gt; = &#123; <span class="attr">value</span>: <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="title class_">Container</span>&lt;<span class="built_in">string</span>&gt; = &#123; <span class="attr">value</span>: <span class="string">&quot;b&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="数组的泛型写法">数组的泛型写法</h3><p>使用 <code>Array&lt;T&gt;</code>，其中 <code>T</code> 表示数组元素的类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">numbers</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strings</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>];</span><br></pre></td></tr></table></figure><h2 id="泛型默认类型">泛型默认类型</h2><p>泛型可以为类型提供默认值。这样，如果在调用时没有传递类型参数，TypeScript 会使用默认类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> createArray&lt;T = <span class="built_in">string</span>&gt;(<span class="attr">length</span>: <span class="built_in">number</span>, <span class="attr">value</span>: T): T[] &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Array</span>(length).<span class="title function_">fill</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stringArray = <span class="title function_">createArray</span>(<span class="number">3</span>, <span class="string">&quot;Hello&quot;</span>);  <span class="comment">// 类型推断为 string[]</span></span><br><span class="line"><span class="keyword">let</span> numberArray = <span class="title function_">createArray</span>(<span class="number">3</span>, <span class="number">42</span>);  <span class="comment">// 类型推断为 number[]</span></span><br></pre></td></tr></table></figure><h2 id="泛型约束">泛型约束</h2><p>泛型约束用于限制泛型类型 <code>T</code> 必须满足某些条件或约束。这使得在使用泛型时，可以确保泛型类型符合一定的结构或特性。</p><h3 id="基本语法">基本语法</h3><p>要给泛型类型添加约束，可以使用 <code>extends</code> 关键字。<code>T extends U</code> 的意思是 <code>T</code> 类型必须是 <code>U</code> 类型的子类型（即 <code>T</code> 必须符合 <code>U</code> 类型的结构）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> logLength&lt;T <span class="keyword">extends</span> &#123; <span class="attr">length</span>: <span class="built_in">number</span> &#125;&gt;(<span class="attr">item</span>: T): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">length</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS学习-高级类型</title>
    <link href="/2024/11/07/TS%E5%AD%A6%E4%B9%A0-%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/"/>
    <url>/2024/11/07/TS%E5%AD%A6%E4%B9%A0-%E9%AB%98%E7%BA%A7%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>TypeScript 的高级类型提供了更灵活的方式来操作和组合类型，使得类型系统能够处理更复杂的场景。</p><span id="more"></span><h1>高级类型</h1><h2 id="联合类型">联合类型</h2><p>联合类型是一种互斥的类型，该类型同时表示所有可能的类型。**联合类型可以理解为多个类型的并集。**联合类型使用 <code>|</code> 运算符，表示一个变量可以是多个类型中的一种。联合类型常用于函数参数和返回值类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formatId</span>(<span class="params">id: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`ID: <span class="subst">$&#123;id&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="交叉类型">交叉类型</h2><p>交叉类型使用 <code>&amp;</code> 运算符，将多个类型合并成一个新类型。新类型具有所有被交叉类型的属性和方法。<strong>交叉类型可以理解为多个类型的交集。</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Employee</span> = &#123; <span class="attr">employeeId</span>: <span class="built_in">number</span>; <span class="attr">position</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Staff</span> = <span class="title class_">Person</span> &amp; <span class="title class_">Employee</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">staff</span>: <span class="title class_">Staff</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">employeeId</span>: <span class="number">101</span>,</span><br><span class="line">    <span class="attr">position</span>: <span class="string">&quot;Developer&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类型别名">类型别名</h2><p>类型别名使用 <code>type</code> 关键字来定义一个新的类型名称，便于复用复杂类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Point</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Circle</span> = &#123; <span class="attr">radius</span>: <span class="built_in">number</span>; <span class="attr">center</span>: <span class="title class_">Point</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="索引类型">索引类型</h2><p>索引类型允许使用动态的属性名。</p><h3 id="索引查询操作符">索引查询操作符</h3><p>使用 <code>keyof</code> 操作符可以返回一个由这个类型的所有属性名组成的联合类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">UserRole</span> = <span class="string">&#x27;admin&#x27;</span> | <span class="string">&#x27;moderator&#x27;</span> | <span class="string">&#x27;author&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">email</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">role</span>: <span class="title class_">UserRole</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserKeysType</span> = keyof <span class="title class_">User</span>; <span class="comment">// &#x27;id&#x27; | &#x27;name&#x27; | &#x27;email&#x27; | &#x27;role&#x27;;</span></span><br></pre></td></tr></table></figure><h3 id="索引访问操作符">索引访问操作符</h3><p>索引访问操作符就是<code>[]</code>，其实和访问对象的某个属性值是一样的语法，但是在 TS 中它可以用来访问某个属性的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">        <span class="attr">street</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">city</span>: <span class="built_in">string</span>;</span><br><span class="line">        <span class="attr">country</span>: <span class="built_in">string</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Params</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="title class_">User</span>[<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">    <span class="attr">address</span>: <span class="title class_">User</span>[<span class="string">&#x27;address&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="映射类型">映射类型</h2><p>映射类型可以根据一个现有类型创建一个新的类型。可以用 <code>in</code> 关键字对类型的每个属性进行变换。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Person</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPerson</span> = &#123; [K <span class="keyword">in</span> keyof <span class="title class_">Person</span>]?: <span class="title class_">Person</span>[K] &#125;; <span class="comment">// 所有属性可选</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialPerson</span> = &#123; <span class="keyword">readonly</span> [K <span class="keyword">in</span> keyof <span class="title class_">Person</span>]: <span class="title class_">Person</span>[K] &#125;; <span class="comment">// 所有属性只读</span></span><br></pre></td></tr></table></figure><h2 id="条件类型">条件类型</h2><p>条件类型使用 <code>T extends U ? X : Y</code> 语法表示，如果 <code>T</code> 能够分配给 <code>U</code>，则返回类型 <code>X</code>；否则，返回类型 <code>Y</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TypeName</span>&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">string</span> ? <span class="string">&quot;string&quot;</span> : <span class="string">&quot;other&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="title class_">TypeName</span>&lt;<span class="built_in">string</span>&gt;; <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">TypeName</span>&lt;<span class="built_in">number</span>&gt;; <span class="comment">// &quot;other&quot;</span></span><br></pre></td></tr></table></figure><h2 id="内置类型工具">内置类型工具</h2><p>TypeScript 提供了一些常用的内置类型工具，帮助处理常见的类型变换任务：</p><ol><li><strong><code>Partial&lt;T&gt;</code></strong>：将类型 <code>T</code> 的所有属性变为可选。</li><li><strong><code>Required&lt;T&gt;</code></strong>：将类型 <code>T</code> 的所有属性变为必填。</li><li><strong><code>Readonly&lt;T&gt;</code></strong>：将类型 <code>T</code> 的所有属性变为只读。</li><li><strong><code>Pick&lt;T, K&gt;</code></strong>：从类型 <code>T</code> 中选择部分属性，创建新类型。</li><li><strong><code>Omit&lt;T, K&gt;</code></strong>：从类型 <code>T</code> 中排除部分属性，创建新类型。</li><li><strong><code>ReturnType&lt;T&gt;</code></strong>：获取函数 <code>T</code> 的返回值类型。</li><li><strong><code>Parameters&lt;T&gt;</code></strong>：获取函数 <code>T</code> 的参数类型。</li></ol><h2 id="可辨识联合类型">可辨识联合类型</h2><p>可辨识联合类型用于处理联合类型中的多个可能类型。可辨识联合类型通过在每个类型中添加一个唯一的 <strong>字面量类型属性</strong>，帮助 TypeScript 根据这个属性推断出联合类型的具体分支，进而在代码中进行类型缩小和类型检查。</p><ol><li><strong>联合类型</strong>：多个类型的组合。</li><li><strong>字面量类型</strong>：包含一个唯一的、具备字面量值的属性。</li><li><strong>类型缩小</strong>：可以在条件分支中通过判断该字面量属性的值来缩小类型范围。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建可辨识联合类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&quot;circle&quot;</span>; <span class="comment">// 字面量属性</span></span><br><span class="line">    <span class="attr">radius</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&quot;rectangle&quot;</span>;</span><br><span class="line">    <span class="attr">width</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Triangle</span> &#123;</span><br><span class="line">    <span class="attr">kind</span>: <span class="string">&quot;triangle&quot;</span>;</span><br><span class="line">    <span class="attr">base</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Shape</span> = <span class="title class_">Circle</span> | <span class="title class_">Rectangle</span> | <span class="title class_">Triangle</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用可辨识联合类型进行类型缩小</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape: Shape</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (shape.<span class="property">kind</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * shape.<span class="property">radius</span> ** <span class="number">2</span>; <span class="comment">// `shape` 在这里被推断为 `Circle`</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;rectangle&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> shape.<span class="property">width</span> * shape.<span class="property">height</span>; <span class="comment">// `shape` 在这里被推断为 `Rectangle`</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;triangle&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> (shape.<span class="property">base</span> * shape.<span class="property">height</span>) / <span class="number">2</span>; <span class="comment">// `shape` 在这里被推断为 `Triangle`</span></span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">const</span> <span class="attr">_exhaustiveCheck</span>: <span class="built_in">never</span> = shape;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Unknown shape: <span class="subst">$&#123;_exhaustiveCheck&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字面量类型">字面量类型</h2><p>字面量类型通过使用特定的字面量值（如字符串、数字、布尔值等）来约束变量的取值范围。字面量类型使得我们可以指定一个变量只能接受特定的值，从而提供更精确的类型控制。</p><ol><li><strong>字符串字面量类型</strong></li><li><strong>数字字面量类型</strong></li><li><strong>布尔字面量类型</strong></li></ol><h3 id="字符串字面量类型">字符串字面量类型</h3><p>字符串字面量类型用于限制变量的值为一个或多个特定的字符串。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Direction</span> = <span class="string">&quot;left&quot;</span> | <span class="string">&quot;right&quot;</span> | <span class="string">&quot;up&quot;</span> | <span class="string">&quot;down&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">direction: Direction</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Moving <span class="subst">$&#123;direction&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">move</span>(<span class="string">&quot;left&quot;</span>);  <span class="comment">// 正常</span></span><br><span class="line"><span class="title function_">move</span>(<span class="string">&quot;right&quot;</span>); <span class="comment">// 正常</span></span><br><span class="line"><span class="comment">// move(&quot;forward&quot;); // 错误：&#x27;forward&#x27; 不是 Direction 类型</span></span><br></pre></td></tr></table></figure><h3 id="数字字面量类型">数字字面量类型</h3><p>数字字面量类型用于限制变量的值为特定的数字。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DiceRoll</span> = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span> | <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">rollDice</span>(<span class="params"></span>): <span class="title class_">DiceRoll</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">6</span> + <span class="number">1</span>) <span class="keyword">as</span> <span class="title class_">DiceRoll</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> roll = <span class="title function_">rollDice</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Rolled a <span class="subst">$&#123;roll&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h3 id="布尔字面量类型">布尔字面量类型</h3><p>布尔字面量类型用于限制变量只能为 <code>true</code> 或 <code>false</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">OnOff</span> = <span class="literal">true</span> | <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toggle</span>(<span class="params">state: OnOff</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> !state;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">toggle</span>(<span class="literal">true</span>);  <span class="comment">// 返回 false</span></span><br><span class="line"><span class="title function_">toggle</span>(<span class="literal">false</span>); <span class="comment">// 返回 true</span></span><br></pre></td></tr></table></figure><h3 id="模板字面量类型">模板字面量类型</h3><p>在 TypeScript 4.1 版本中新增了模板字面量类型，它以字符串字面量类型为基础，可以通过联合类型扩展成多个字符串。它与 JavaScript 的模板字符串语法相同，但是只能用在类型定义中使用。</p><h4 id="基本语法">基本语法</h4><p>当使用模板字面量类型时，它会替换模板中的变量，返回一个新的字符串字面量。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> attrs = <span class="string">&quot;Phone&quot;</span> | <span class="string">&quot;Name&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> target = <span class="string">`get<span class="subst">$&#123;attrs&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type target = &quot;getPhone&quot; | &quot;getName&quot;;</span></span><br></pre></td></tr></table></figure><h4 id="变量限制">变量限制</h4><p>模板字面量类型中的变量只允许是<code>string</code>、<code>number</code>、<code>bigint</code>、<code>boolean</code>、<code>null</code>、<code>undefined</code>或这些类型的联合类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">CustomObject</span> = &#123;</span><br><span class="line"><span class="attr">foo</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> target = <span class="string">`get<span class="subst">$&#123;CustomObject&#125;</span>`</span></span><br><span class="line"><span class="comment">// 不能将类型“CustomObject”分配给类型“string | number | bigint | boolean | null | undefined”。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> complexUnion = <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">bigint</span> | <span class="built_in">boolean</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> target2 = <span class="string">`get<span class="subst">$&#123;complexUnion&#125;</span>`</span>  <span class="comment">// success</span></span><br></pre></td></tr></table></figure><h2 id="This-类型">This 类型</h2><p><strong>This</strong> 类型在 TypeScript 中是一种特殊的类型，它表示 <strong>当前上下文中的 <code>this</code></strong> 对象的类型。通常用于方法和函数中，帮助类型系统推断和检查函数内部 <code>this</code> 的类型，尤其是在面向对象编程中。<code>this</code> 类型通常用于对象方法的上下文绑定，确保 <code>this</code> 的类型符合预期。</p><h3 id="类或接口中This类型">类或接口中This类型</h3><p>在 JavaScript 或 TypeScript 中，<code>this</code> 通常引用当前对象的实例。TypeScript 通过 <code>this</code> 类型来明确 <code>this</code> 的结构和类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">person.<span class="title function_">greet</span>(); <span class="comment">// Hello, my name is Alice</span></span><br></pre></td></tr></table></figure><h3 id="使用-this-类型明确上下文">使用 <code>this</code> 类型明确上下文</h3><p>在 TypeScript 中，我们可以显式地指定 <code>this</code> 的类型，这在一些复杂的函数或回调中尤为重要。尤其是在回调函数中，如果没有正确绑定 <code>this</code>，TypeScript 可能会无法推断出 <code>this</code> 的类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Timer</span> &#123;</span><br><span class="line">    <span class="attr">seconds</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">seconds</span>++;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">seconds</span>); <span class="comment">// 错误：`this` 的类型为 `any`</span></span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用箭头函数绑定-this">使用箭头函数绑定 <code>this</code></h3><p>箭头函数不会创建自己的 <code>this</code>，它会从外部上下文中继承 <code>this</code>，所以可以避免在回调中 <code>this</code> 丢失的问题。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Timer</span> &#123;</span><br><span class="line">    <span class="attr">seconds</span>: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">start</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">seconds</span>++;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">seconds</span>); <span class="comment">// 正确：`this` 被正确绑定为 `Timer`</span></span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> timer = <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line">timer.<span class="title function_">start</span>(); <span class="comment">// 会每秒增加秒数并输出</span></span><br></pre></td></tr></table></figure><h3 id="使用-this-类型的函数声明">使用 <code>this</code> 类型的函数声明</h3><p>除了在类中，<code>this</code> 类型也可以用于普通函数或方法中，显式声明 <code>this</code> 的类型。比如，定义一个函数时，能够准确指明函数调用时的 <code>this</code> 上下文。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params"><span class="variable language_">this</span>: &#123; message: <span class="built_in">string</span> &#125;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">message</span>: <span class="string">&quot;Hello, world!&quot;</span> &#125;;</span><br><span class="line">log.<span class="title function_">call</span>(obj); <span class="comment">// 正常，输出 &quot;Hello, world!&quot;</span></span><br><span class="line"><span class="comment">// log(); // 错误：没有传递正确的 `this`，会抛出错误</span></span><br></pre></td></tr></table></figure><h2 id="类型推断">类型推断</h2><p>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。</p><h3 id="基础类型">基础类型</h3><p>在变量的定义中如果没有明确指定类型，编译器会自动推断出其类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">name = <span class="number">123</span>; <span class="comment">// error 不能将类型“123”分配给类型“string”</span></span><br></pre></td></tr></table></figure><h3 id="多类型联合">多类型联合</h3><p>当定义一个数组或元组这种包含多个元素的值时，多个元素可以有不同的类型，这时 TypeScript 会将多个类型合并起来，组成一个联合类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="string">&quot;a&quot;</span>];</span><br><span class="line">arr = [<span class="string">&quot;b&quot;</span>, <span class="number">2</span>, <span class="literal">false</span>]; <span class="comment">// error 不能将类型“false”分配给类型“string | number”</span></span><br></pre></td></tr></table></figure><h3 id="上下文类型">上下文类型</h3><p>上下文类型是根据左侧的类型推断右侧的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params">mouseEvent</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mouseEvent.<span class="property">a</span>); <span class="comment">// error 类型“MouseEvent”上不存在属性“a”</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="类型守卫">类型守卫</h2><p>类型守卫是 TypeScript 提供的一种方法，用来在代码中动态缩小变量的类型范围，从而增强类型安全性。类型守卫在控制类型检查的逻辑判断时非常有用，常用于条件语句中，以确保不同的类型能够通过类型缩小得到正确的访问和处理。</p><h3 id="typeof-类型守卫">typeof 类型守卫</h3><p><code>typeof</code> 类型保护用于确定变量的类型，它只能识别 boolean、string、bigint、symbol、undefined、function、number。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">double</span>(<span class="params">value: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value * <span class="number">2</span>; <span class="comment">// value 被推断为 number</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>(value) * <span class="number">2</span>; <span class="comment">// value 被推断为 string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="instanceof-类型守卫">instanceof 类型守卫</h3><p>用于检查某个对象是否是某个类的实例，适合于类和构造函数类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="title function_">meow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Meow!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeSound</span>(<span class="params">animal: Dog | Cat</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> <span class="title class_">Dog</span>) &#123;</span><br><span class="line">    animal.<span class="title function_">bark</span>(); <span class="comment">// animal 被推断为 Dog</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    animal.<span class="title function_">meow</span>(); <span class="comment">// animal 被推断为 Cat</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="in-关键字类型守卫">in 关键字类型守卫</h3><p>用于检查对象是否具有特定属性，通常返回一个布尔值，指示该属性是否存在于对象中，适用于对象字面量类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Bird</span> = &#123; <span class="attr">fly</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Fish</span> = &#123; <span class="attr">swim</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">animal: Bird | Fish</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;fly&quot;</span> <span class="keyword">in</span> animal) &#123;</span><br><span class="line">    animal.<span class="title function_">fly</span>(); <span class="comment">// animal 被推断为 Bird</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    animal.<span class="title function_">swim</span>(); <span class="comment">// animal 被推断为 Fish</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义类型守卫">自定义类型守卫</h3><p>使用 <code>is</code> 关键字定义自定义的类型守卫，通常用于复杂的类型判断。类型谓词函数返回一个布尔值，TypeScript 可以在布尔判断的分支中推断具体类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Car</span> = &#123; <span class="attr">drive</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Boat</span> = &#123; <span class="attr">sail</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isCar</span>(<span class="params">vehicle: Car | Boat</span>): vehicle is <span class="title class_">Car</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (vehicle <span class="keyword">as</span> <span class="title class_">Car</span>).<span class="property">drive</span> !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">operate</span>(<span class="params">vehicle: Car | Boat</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isCar</span>(vehicle)) &#123;</span><br><span class="line">    vehicle.<span class="title function_">drive</span>(); <span class="comment">// vehicle 被推断为 Car</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    vehicle.<span class="title function_">sail</span>(); <span class="comment">// vehicle 被推断为 Boat</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型断言">类型断言</h2><p>类型断言是 TypeScript 中的一种机制，它允许开发者明确告诉 TypeScript 编译器一个值的类型，从而绕过类型检查。类型断言不会对代码产生运行时的影响，它只是告诉编译器“相信我，我知道这个值的类型是什么”，通过这种方式可以绕过 TypeScript 默认的类型推断。</p><h3 id="类型断言语法">类型断言语法</h3><p>TypeScript 提供了两种方式进行类型断言：</p><ol><li><p>使用尖括号（<code>&lt;Type&gt;</code>）语法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>as</code> 语法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">any</span> = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="类型断言条件">类型断言条件</h3><p>类型断言常见的使用场景是在你已经知道某个值的类型，但 TypeScript 无法推断出来时。</p><ol><li><strong>操作动态类型的值</strong>：当你从 <code>any</code> 类型或者从外部库中获取到某个值时，TypeScript 可能无法自动推断出其类型，这时可以使用类型断言来明确指定类型。</li><li><strong>与 DOM 操作相关的代码</strong>：操作 DOM 元素时，TypeScript 无法知道特定元素的类型，使用类型断言可以使代码更清晰。</li><li><strong>对象类型的细化</strong>：在处理联合类型时，某些情况下需要根据上下文对对象类型进行细化。</li></ol><h3 id="as-const-断言">as const 断言</h3><p>用于将一个值的类型锁定为 <strong>字面量类型</strong>，而不是它的普通类型（如 <code>string</code>、<code>number</code>、<code>boolean</code> 等）。通常用于对象、数组或其他常量的定义，目的是让 TypeScript 确保这些值不会被修改，并且其类型被缩小为最具体的字面量类型。</p><h4 id="对常量值使用-as-const">对常量值使用 <code>as const</code></h4><p>当我们定义一个字符串或数字常量时，TypeScript 默认会推断出更宽泛的类型，比如 <code>string</code> 或 <code>number</code>，但如果你希望将其类型限制为它的字面量类型，可以使用 <code>as const</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> color = <span class="string">&quot;red&quot;</span>;  <span class="comment">// 默认类型是 string</span></span><br><span class="line"><span class="keyword">const</span> color2 = <span class="string">&quot;red&quot;</span> <span class="keyword">as</span> <span class="keyword">const</span>;  <span class="comment">// 使用 `as const`，类型被推断为 &quot;red&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">string</span> = color; <span class="comment">// 正常，color 是 string 类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="string">&quot;red&quot;</span> = color2; <span class="comment">// 正常，color2 是 &quot;red&quot; 字面量类型</span></span><br></pre></td></tr></table></figure><h4 id="对数组使用-as-const">对数组使用 <code>as const</code></h4><p>使用 <code>as const</code> 还可以将数组中的元素类型锁定为字面量类型，而不是常规的 <code>string[]</code> 或 <code>number[]</code> 类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];  <span class="comment">// 默认类型是 number[]</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>] <span class="keyword">as</span> <span class="keyword">const</span>;  <span class="comment">// 使用 `as const`，元素类型被推断为 [10, 20, 30]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="built_in">number</span>[] = arr; <span class="comment">// 正常，arr 是 number[] 类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr3</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>] = arr2; <span class="comment">// 正常，arr2 是 [10, 20, 30] 字面量类型</span></span><br></pre></td></tr></table></figure><h4 id="对对象使用-as-const">对对象使用 <code>as const</code></h4><p>当对对象进行定义时，<code>as const</code> 可以确保对象的属性值被推断为字面量类型，而不是更宽泛的 <code>string</code>、<code>number</code> 或 <code>boolean</code> 类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;;  <span class="comment">// 默认类型是 &#123; x: number, y: number &#125;</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125; <span class="keyword">as</span> <span class="keyword">const</span>;  <span class="comment">// 使用 `as const`，属性值被推断为字面量类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj1</span>: &#123; <span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span> &#125; = obj; <span class="comment">// 正常，obj 是 &#123; x: number, y: number &#125; 类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj3</span>: &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125; = obj2; <span class="comment">// 正常，obj2 是 &#123; x: 10, y: 20 &#125; 字面量类型</span></span><br></pre></td></tr></table></figure><h4 id="as-const-与-readonly-的关系"><code>as const</code> 与 <code>readonly</code> 的关系</h4><p><code>as const</code> 不仅将值的类型缩小为字面量类型，还会将对象或数组的属性变为 <code>readonly</code>，从而确保这些值不可修改。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];  <span class="comment">// 类型是 number[]</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>] <span class="keyword">as</span> <span class="keyword">const</span>;  <span class="comment">// 类型是 readonly [10, 20, 30]</span></span><br><span class="line"></span><br><span class="line">arr2[<span class="number">0</span>] = <span class="number">100</span>;  <span class="comment">// 错误：无法修改 readonly 数组元素</span></span><br></pre></td></tr></table></figure><h3 id="非空断言">非空断言</h3><p>对于那些可能为空的变量（即可能等于<code>undefined</code>或<code>null</code>），TypeScript 提供了非空断言，保证这些变量不会为空，写法是在变量名后面加上感叹号<code>!</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">string</span> | <span class="literal">null</span> = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">length</span>: <span class="built_in">number</span> = someValue!.<span class="property">length</span>; <span class="comment">// 使用非空断言</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS学习-接口</title>
    <link href="/2024/11/06/TS%E5%AD%A6%E4%B9%A0-%E6%8E%A5%E5%8F%A3/"/>
    <url>/2024/11/06/TS%E5%AD%A6%E4%B9%A0-%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<p>在 TypeScript 中，接口（<code>interface</code>）用于定义对象的结构和行为。接口不仅可以为类定义约定，还可以约束函数、数组等多种数据结构。通过接口，可以确保对象符合某种结构，使代码更加类型安全和可维护。</p><span id="more"></span><h1>接口</h1><p>面向对象语言中，接口（Interfaces）是一个很重要的概念，它是对行为的抽象，而具体如何行动需要由类（classes）去实现（implement）。</p><h2 id="接口定义">接口定义</h2><p>接口通常用于定义对象的结构。通过接口，可以指定对象的属性及其类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// 输出 &quot;Alice&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>);  <span class="comment">// 输出 30</span></span><br></pre></td></tr></table></figure><h2 id="接口属性">接口属性</h2><h3 id="可选属性">可选属性</h3><p>在定义一些结构时，一些结构的某些字段的要求是可选的，有这个字段就做处理，没有就忽略，所以针对这种情况，TypeScript提供了可选属性，通过在属性名后添加 <code>?</code> 标记为可选属性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// 输出 &quot;Bob&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>);  <span class="comment">// 输出 undefined</span></span><br></pre></td></tr></table></figure><h3 id="只读属性">只读属性</h3><p>接口中的属性可以使用 <code>readonly</code> 关键字声明为只读。只读属性在对象创建后不能被修改。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">brand</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">model</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">car</span>: <span class="title class_">Car</span> = &#123;</span><br><span class="line">    <span class="attr">brand</span>: <span class="string">&quot;Toyota&quot;</span>,</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&quot;Camry&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// car.brand = &quot;Honda&quot;; // 错误：无法为只读属性赋值</span></span><br><span class="line">car.<span class="property">model</span> = <span class="string">&quot;Corolla&quot;</span>; <span class="comment">// 正常</span></span><br></pre></td></tr></table></figure><h3 id="属性索引">属性索引</h3><p>接口可以定义可索引类型（Indexable Types），用来表示具有索引的对象，如数组或对象字典。索引签名的语法为 <code>[index: type]: type</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringArray</span> &#123;</span><br><span class="line">[<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myArray</span>: <span class="title class_">StringArray</span> = [<span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Charlie&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myArray[<span class="number">0</span>]); <span class="comment">// 输出 &quot;Alice&quot;</span></span><br></pre></td></tr></table></figure><h2 id="函数类型接口">函数类型接口</h2><h3 id="对象的方法">对象的方法</h3><p>对象的方法共有三种写法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line"><span class="title function_">f</span>(<span class="attr">x</span>: <span class="built_in">boolean</span>): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line"><span class="attr">f</span>: <span class="function">(<span class="params">x: <span class="built_in">boolean</span></span>) =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">interface</span> C &#123;</span><br><span class="line"><span class="attr">f</span>: &#123; (<span class="attr">x</span>: <span class="built_in">boolean</span>): <span class="built_in">string</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数">函数</h3><p>interface 也可以用来声明独立的函数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Add</span> &#123;</span><br><span class="line">(<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">myAdd</span>: <span class="title class_">Add</span> = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</span><br></pre></td></tr></table></figure><h3 id="构造函数">构造函数</h3><p>interface 内部可以使用<code>new</code>关键字，表示构造函数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ErrorConstructor</span> &#123;</span><br><span class="line"><span class="keyword">new</span> (message?: <span class="built_in">string</span>): <span class="title class_">Error</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类实现接口">类实现接口</h2><p>实现（implements）是面向对象中的一个重要概念。一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些共有的特性，这时候就可以把特性提取成接口（interfaces），用 <code>implements</code> 关键字来实现。这个特性大大提高了面向对象的灵活性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">sayHello</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">employee.<span class="title function_">sayHello</span>(); <span class="comment">// 输出 &quot;Hello, my name is Alice&quot;</span></span><br></pre></td></tr></table></figure><h2 id="接口继承">接口继承</h2><h3 id="接口继承接口">接口继承接口</h3><p>接口可以使用<code>extends</code>关键字继承其他接口，从而实现接口的扩展。可以通过继承将多个接口组合在一起形成新的接口。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Named</span> &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Aged</span> &#123;</span><br><span class="line"><span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_">Named</span>, <span class="title class_">Aged</span> &#123;</span><br><span class="line"><span class="title function_">sayHello</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I&#x27;m <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">20</span>);</span><br><span class="line">student.<span class="title function_">sayHello</span>(); <span class="comment">// 输出 &quot;Hello, I&#x27;m Bob and I&#x27;m 20 years old.&quot;</span></span><br></pre></td></tr></table></figure><h3 id="接口继承类">接口继承类</h3><p>interface 还可以继承 class，即继承该类的所有成员。当接口继承一个类时，它会继承该类的属性和方法，但是不会继承类的具体实现。这种继承方式常用于定义一个接口，使其兼容特定类及其子类的结构。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="attr">employeeId</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Developer</span> <span class="keyword">implements</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">employeeId</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, employeeId: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">employeeId</span> = employeeId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, I am <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, my employee ID is <span class="subst">$&#123;<span class="variable language_">this</span>.employeeId&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dev = <span class="keyword">new</span> <span class="title class_">Developer</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>, <span class="number">101</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dev.<span class="title function_">sayHello</span>()); <span class="comment">// 输出 &quot;Hello, I am Alice, my employee ID is 101&quot;</span></span><br></pre></td></tr></table></figure><h3 id="接口继承类型">接口继承类型</h3><p>接口继承类型主要用于将类型别名的特性合并到接口中。这种方式在 TypeScript 4.1 及更高版本中被支持。在接口继承类型别名时，接口会继承类型别名的属性结构，但不能继承联合类型或原始类型的直接定义。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PersonType</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_">PersonType</span> &#123;</span><br><span class="line"><span class="attr">employeeId</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">employee</span>: <span class="title class_">Employee</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">employeeId</span>: <span class="number">101</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(employee); </span><br><span class="line"><span class="comment">// 输出 &#123; name: &quot;Alice&quot;, age: 30, employeeId: 101 &#125;</span></span><br></pre></td></tr></table></figure><h4 id="接口继承交叉类型">接口继承交叉类型</h4><p>接口可以继承交叉类型，来组合多个类型别名的结构。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Name</span> = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Age</span> = &#123;</span><br><span class="line"><span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonType</span> = <span class="title class_">Name</span> &amp; <span class="title class_">Age</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_">PersonType</span> &#123;</span><br><span class="line"><span class="attr">employeeId</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">employee</span>: <span class="title class_">Employee</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">employeeId</span>: <span class="number">102</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="接口不能继承联合类型">接口不能继承联合类型</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PersonType</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonOrAnimal</span> = <span class="title class_">PersonType</span> | &#123; <span class="attr">species</span>: <span class="built_in">string</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口无法直接继承联合类型</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_">PersonOrAnimal</span> &#123; <span class="comment">// 会报错</span></span><br><span class="line"><span class="attr">employeeId</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口拓展">接口拓展</h2><p>接口可以扩展来创建复杂的结构。使用交叉类型也可以实现类似的效果。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"><span class="attr">sideLength</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">square</span>: <span class="title class_">Square</span> = &#123;</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    <span class="attr">sideLength</span>: <span class="number">10</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="接口合并">接口合并</h2><p>在 TypeScript 中，可以对同一个接口进行多次声明，TypeScript 会自动将它们合并为一个接口。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">animal</span>: <span class="title class_">Animal</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Lion&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">5</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="接口泛型">接口泛型</h2><p>接口可以使用泛型，使其更具通用性。泛型接口允许定义一个适用于多种类型的接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line"><span class="attr">content</span>: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">stringBox</span>: <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt; = &#123; <span class="attr">content</span>: <span class="string">&quot;Hello&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">numberBox</span>: <span class="title class_">Box</span>&lt;<span class="built_in">number</span>&gt; = &#123; <span class="attr">content</span>: <span class="number">123</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringBox.<span class="property">content</span>); <span class="comment">// 输出 &quot;Hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberBox.<span class="property">content</span>); <span class="comment">// 输出 123</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS学习-类</title>
    <link href="/2024/11/05/TS%E5%AD%A6%E4%B9%A0-%E7%B1%BB/"/>
    <url>/2024/11/05/TS%E5%AD%A6%E4%B9%A0-%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>TypeScript 中的类（Class）提供了面向对象编程的功能，包括继承、封装、多态等特性。与 JavaScript 的类相比，TypeScript 中的类更加强大，因为它具有类型检查、访问修饰符等特性，从而能够编写更健壮的代码。</p><span id="more"></span><h1>类</h1><h2 id="类定义">类定义</h2><p>任何实体都可以被抽象为一个使用类表达的类似对象的数据结构，这个数据结构既包含属性，又包含方法，在TypeScript 中使用 <code>class</code> 关键字定义类。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">greet</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">greet</span>()); <span class="comment">// 输出 &quot;Hello, my name is Alice and I am 30 years old.&quot;</span></span><br></pre></td></tr></table></figure><h2 id="访问修饰符">访问修饰符</h2><p>访问修饰符用于控制类成员的可见性。TypeScript 中有三种修饰符：<code>public</code>、<code>private</code> 和 <code>protected</code>。</p><ol><li><strong>public</strong>：默认修饰符，类的属性和方法可以在类的外部访问。</li><li><strong>private</strong>：私有属性或方法只能在类内部访问，不能在外部或子类中访问。</li><li><strong>protected</strong>：受保护的属性或方法只能在类内部和子类中访问，不能在类的外部直接访问。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">position</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, position: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">position</span> = position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">getAge</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Employee</span> &#123;</span><br><span class="line">    <span class="title function_">getPosition</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">position</span>; <span class="comment">// 可以在子类中访问 protected 属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> employee = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Bob&quot;</span>, <span class="number">25</span>, <span class="string">&quot;Developer&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(employee.<span class="property">name</span>);      <span class="comment">// 输出 &quot;Bob&quot;</span></span><br><span class="line"><span class="comment">// console.log(employee.age);    // 错误: &#x27;age&#x27; 是私有的，无法访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(employee.<span class="title function_">getAge</span>());  <span class="comment">// 输出 25</span></span><br></pre></td></tr></table></figure><h2 id="类继承">类继承</h2><p>TypeScript 支持类的继承。可以使用 <code>extends</code> 关键字来创建一个类的子类，子类中使用 <code>super</code> 关键字来调用父类的构造函数和方法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">makeSound</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> makes a sound.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">makeSound</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> barks.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;Buddy&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="title function_">makeSound</span>()); <span class="comment">// 输出 &quot;Buddy barks.&quot;</span></span><br></pre></td></tr></table></figure><h2 id="抽象类">抽象类</h2><p>抽象类是一种只能被继承而不能直接实例化的类，用于定义类的模板。抽象类中的抽象方法没有具体实现，必须在子类中实现。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">getArea</span>(): <span class="built_in">number</span>; <span class="comment">// 抽象方法，没有实现</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">printArea</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Area: <span class="subst">$&#123;<span class="variable language_">this</span>.getArea()&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> radius: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getArea</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="variable language_">this</span>.<span class="property">radius</span> * <span class="variable language_">this</span>.<span class="property">radius</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">5</span>);</span><br><span class="line">circle.<span class="title function_">printArea</span>(); <span class="comment">// 输出 &quot;Area: 78.53981633974483&quot;</span></span><br></pre></td></tr></table></figure><h2 id="只读属性">只读属性</h2><p>TypeScript 支持 <code>readonly</code> 修饰符，用于定义只读属性。一旦初始化后，属性值就不能被修改。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">readonly</span> <span class="attr">brand</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;Toyota&quot;</span>);</span><br><span class="line"><span class="comment">// car.brand = &quot;Honda&quot;; // 错误: 不能修改只读属性 &#x27;brand&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="存取器">存取器</h2><p>TypeScript 支持 <code>get</code> 和 <code>set</code> 存取器，可以通过它们控制对属性的访问和修改。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">_width</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">_height</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">width: <span class="built_in">number</span>, height: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_width</span> = width;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_height</span> = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">width</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_width</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">width</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Width must be positive&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_width</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">height</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_height</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">height</span>(<span class="params">value: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Height must be positive&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_height</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">area</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_width</span> * <span class="variable language_">this</span>.<span class="property">_height</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rectangle = <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">10</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rectangle.<span class="property">area</span>); <span class="comment">// 输出 50</span></span><br><span class="line">rectangle.<span class="property">width</span> = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rectangle.<span class="property">area</span>); <span class="comment">// 输出 100</span></span><br></pre></td></tr></table></figure><h2 id="静态属性和方法">静态属性和方法</h2><p>使用 <code>static</code> 关键字可以定义静态属性和方法。静态成员属于类本身，而不是某个实例，可以直接通过类名访问。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MathUtils</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="attr">PI</span>: <span class="built_in">number</span> = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">calculateArea</span>(<span class="attr">radius</span>: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">PI</span> * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MathUtils</span>.<span class="property">PI</span>); <span class="comment">// 输出 3.14159</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MathUtils</span>.<span class="title function_">calculateArea</span>(<span class="number">5</span>)); <span class="comment">// 输出 78.53975</span></span><br></pre></td></tr></table></figure><h2 id="类的类型（接口实现）">类的类型（接口实现）</h2><p>TypeScript 中的类可以实现接口，接口可以为类定义公共的结构和行为。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Drivable</span> &#123;</span><br><span class="line"><span class="title function_">drive</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> <span class="keyword">implements</span> <span class="title class_">Drivable</span> &#123;</span><br><span class="line">    <span class="title function_">drive</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Driving a vehicle.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vehicle = <span class="keyword">new</span> <span class="title class_">Vehicle</span>();</span><br><span class="line">vehicle.<span class="title function_">drive</span>(); <span class="comment">// 输出 &quot;Driving a vehicle.&quot;</span></span><br></pre></td></tr></table></figure><h2 id="类的泛型">类的泛型</h2><p>类可以使用泛型，从而可以在实例化时指定类型，使得类具有更强的灵活性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">content</span>: T;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">content: T</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span> = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getContent</span>(): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stringBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringBox.<span class="title function_">getContent</span>()); <span class="comment">// 输出 &quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberBox.<span class="title function_">getContent</span>()); <span class="comment">// 输出 123</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS学习-函数</title>
    <link href="/2024/11/04/TS%E5%AD%A6%E4%B9%A0-%E5%87%BD%E6%95%B0/"/>
    <url>/2024/11/04/TS%E5%AD%A6%E4%B9%A0-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>在 TypeScript 中，函数可以通过指定参数类型和返回类型来确保代码的类型安全。</p><span id="more"></span><h1>函数</h1><h2 id="函数定义">函数定义</h2><p>在 TypeScript 中，可以为函数的参数和返回值指定类型。</p><h3 id="函数声明">函数声明</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 15</span></span><br></pre></td></tr></table></figure><p>一个函数有输入和输出，要在 TypeScript 中对其进行约束，需要把输入和输出都考虑到，<strong>输入多余的（或者少于要求的）参数，是不被允许的</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>); <span class="comment">// 报错</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">5</span>); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="函数表达式">函数表达式</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 15</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数">箭头函数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 15</span></span><br></pre></td></tr></table></figure><h3 id="接口定义函数">接口定义函数</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Add</span> &#123;</span><br><span class="line">    (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">add</span>: <span class="title class_">Add</span> = (<span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 15</span></span><br></pre></td></tr></table></figure><h3 id="类型定义函数">类型定义函数</h3><p>可以将函数类型定义为一种独立类型，便于复用或传递。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Operation</span> = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">add</span>: <span class="title class_">Operation</span> = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">multiply</span>: <span class="title class_">Operation</span> = <span class="function">(<span class="params">x, y</span>) =&gt;</span> x * y;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">10</span>, <span class="number">5</span>)); <span class="comment">// 输出 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">10</span>, <span class="number">5</span>)); <span class="comment">// 输出 50</span></span><br></pre></td></tr></table></figure><h2 id="函数参数">函数参数</h2><h3 id="可选参数">可选参数</h3><p>通过在参数名后添加 <code>?</code>，可以将该参数声明为可选参数</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span>, greeting?: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;greeting || <span class="string">&quot;Hello&quot;</span>&#125;</span>, <span class="subst">$&#123;name&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&quot;Alice&quot;</span>)); <span class="comment">// 输出 &quot;Hello, Alice&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Hi&quot;</span>)); <span class="comment">// 输出 &quot;Hi, Bob&quot;</span></span><br></pre></td></tr></table></figure><h3 id="默认参数">默认参数</h3><p>可以为参数指定默认值。如果调用函数时没有传入该参数，TypeScript 将使用指定的默认值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span> = <span class="number">2</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">5</span>)); <span class="comment">// 输出 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">5</span>, <span class="number">3</span>)); <span class="comment">// 输出 15</span></span><br></pre></td></tr></table></figure><p>可选参数与默认值不能同时使用。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">x: <span class="built_in">number</span>, y?: <span class="built_in">number</span> = <span class="number">2</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x * y;</span><br><span class="line">&#125; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>设有默认值的参数，如果传入<code>undefined</code>，也会触发默认值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x: <span class="built_in">number</span> = <span class="number">456</span></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(<span class="literal">undefined</span>); <span class="comment">// 456</span></span><br></pre></td></tr></table></figure><p>具有默认值的参数如果不位于参数列表的末尾，调用时不能省略，如果要触发默认值，必须显式传入<code>undefined</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span> = <span class="number">0</span>, y: <span class="built_in">number</span></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>); <span class="comment">// 报错</span></span><br><span class="line"><span class="title function_">add</span>(<span class="literal">undefined</span>, <span class="number">1</span>); <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><h3 id="剩余参数">剩余参数</h3><p>TypeScript 支持使用剩余参数（<code>...args</code>）来处理可变数量的参数。剩余参数类型必须是一个数组类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...numbers: <span class="built_in">number</span>[]</span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">return</span> numbers.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, curr</span>) =&gt;</span> acc + curr, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>)); <span class="comment">// 输出 100</span></span><br></pre></td></tr></table></figure><h2 id="函数重载">函数重载</h2><p>TypeScript 支持函数重载，可以为同一个函数定义多个签名，从而实现不同参数组合下的类型支持。函数重载通常用于处理输入参数数量或类型不同的情况。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">age: <span class="built_in">number</span></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Name: <span class="subst">$&#123;value&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Age: <span class="subst">$&#123;value&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getInfo</span>(<span class="string">&quot;Alice&quot;</span>)); <span class="comment">// 输出 &quot;Name: Alice&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getInfo</span>(<span class="number">25</span>)); <span class="comment">// 输出 &quot;Age: 25&quot;</span></span><br></pre></td></tr></table></figure><h2 id="高阶函数">高阶函数</h2><p>高阶函数是指以函数为参数或返回值的函数，TypeScript 可以通过类型注解实现高阶函数的类型安全。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">applyOperation</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, operation: (a: <span class="built_in">number</span>, b: <span class="built_in">number</span>) =&gt; <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">operation</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">applyOperation</span>(<span class="number">5</span>, <span class="number">3</span>, <span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b)); <span class="comment">// 输出 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">applyOperation</span>(<span class="number">5</span>, <span class="number">3</span>, <span class="function">(<span class="params">a, b</span>) =&gt;</span> a * b)); <span class="comment">// 输出 15</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS学习-数据类型</title>
    <link href="/2024/11/01/TS%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2024/11/01/TS%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>TypeScript 继承了 JavaScript 的类型，在这个基础上，定义了一套自己的类型系统。</p><span id="more"></span><h1>数据类型</h1><p>在语法层面，缺省类型注解的 TypeScript 与 JavaScript 完全一致。因此，可以把 TypeScript 代码的编写看作是为 JavaScript 代码添加类型注解。</p><p>在 TypeScript 语法中，类型的标注主要通过类型后置语法来实现：“<strong>变量: 类型</strong>”</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">996</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="number">996</span></span><br></pre></td></tr></table></figure><h2 id="基本数据类型">基本数据类型</h2><p>JavaScript 中将值分成 8 种类型，包括：number、boolean、string、null、undefined、symbol、bigInt、object。TypeScript 继承了 JavaScript 的类型设计，以上 8 种类型可以看作 TypeScript 的基本类型。</p><table><thead><tr><th>JavaScript数据类型</th><th>TypeScript类型</th></tr></thead><tbody><tr><td>number</td><td>number</td></tr><tr><td>boolean</td><td>boolean</td></tr><tr><td>string</td><td>string</td></tr><tr><td>null</td><td>null</td></tr><tr><td>undefined</td><td>undefined</td></tr><tr><td>symbol</td><td>symbol</td></tr><tr><td>bigInt</td><td>bigInt</td></tr><tr><td>object</td><td>ocject</td></tr></tbody></table><h3 id="number类型">number类型</h3><p>TypeScript 中的 <code>number</code> 类型涵盖整数和浮点数，与 JavaScript 一致。同时，TypeScript 还支持十进制、十六进制、二进制、和八进制等不同数值表示方法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">hex</span>: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">binary</span>: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">octal</span>: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br></pre></td></tr></table></figure><h3 id="boolean类型">boolean类型</h3><p><code>boolean</code>类型只包含<code>true</code>和<code>false</code>两个布尔值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">x</span>: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">y</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="string类型">string类型</h3><p><code>string</code> 表示文本数据。TypeScript 支持双引号 (<code>&quot;</code>)、单引号 (<code>'</code>)、模板字符串（用反引号 `` 标识）。模板字符串允许嵌入表达式和多行字符串。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">str = <span class="string">&quot;Hello TypeScript&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> first = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> last = <span class="string">&quot;TypeScript&quot;</span>;</span><br><span class="line">str = <span class="string">`<span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str) <span class="comment">// 结果: Hello TypeScript</span></span><br></pre></td></tr></table></figure><h3 id="undefined-类型和null-类型">undefined 类型和null 类型</h3><p>undefined 和 null 是两种独立类型，它们各自都只有一个值。</p><p>undefined 类型只包含一个值<code>undefined</code>，表示未定义（即还未给出定义，以后可能会有定义）。null 类型也只包含一个值<code>null</code>，表示为空（即此处没有值）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">empty</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">notDefined</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>如果没有声明类型的变量，被赋值为<code>undefined</code>或<code>null</code>，它们的类型会被推断为<code>any</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">undefined</span>; <span class="comment">// any</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="literal">undefined</span>; <span class="comment">// any</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="literal">null</span>; <span class="comment">// any</span></span><br><span class="line"><span class="keyword">const</span> d = <span class="literal">null</span>; <span class="comment">// any</span></span><br></pre></td></tr></table></figure><p><code>undefined</code>和<code>null</code>既是值，又是类型。作为值，它们有一个特殊的地方：任何其他类型的变量都可以赋值为<code>undefined</code>或<code>null</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">age = <span class="literal">null</span>; <span class="comment">// 正确</span></span><br><span class="line">age = <span class="literal">undefined</span>; <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><h3 id="bigInt类型">bigInt类型</h3><p>bigInt是ES6中新引入的数据类型，它是一种内置对象，它提供了一种方法来表示大于 $ 2^{53} -1 $ 的整数，BigInt可以表示任意大的整数。使用 <code>BigInt</code> 可以安全地存储和操作大整数，即使这个数已经超出了JavaScript构造函数 Number 能够表示的安全整数范围。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> max = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>;</span><br><span class="line"><span class="keyword">const</span> max1 = max + <span class="number">1</span></span><br><span class="line"><span class="keyword">const</span> max2 = max + <span class="number">2</span></span><br><span class="line">max1 === max2     <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>可以看到，最终返回了true，这就是超过精读范围造成的问题，而<code>BigInt</code>正是解决这类问题而生的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> max = <span class="title class_">BigInt</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>);</span><br><span class="line"><span class="keyword">const</span> max1 = max + <span class="number">1n</span></span><br><span class="line"><span class="keyword">const</span> max2 = max + <span class="number">2n</span></span><br><span class="line">max1 === max2    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>这里需要用 <code>BigInt(number)</code> 把 Number 转化为 <code>BigInt</code>，同时如果类型是 <code>BigInt</code> ，那么数字后面需要加 <code>n</code>。</p><p>在TypeScript中，<code>number</code> 类型虽然和 <code>BigInt</code> 都表示数字，但是实际上两者类型是完全不同的</p><h3 id="symbol类型">symbol类型</h3><p>symbol 是 ES6 新增的一种基本数据类型，它用来表示独一无二的值，可以通过 Symbol 构造函数生成。</p><p>在TypeScript中使用symbol就是指定一个值的类型为symbol类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>()</span><br></pre></td></tr></table></figure><p>TypeScript 中还有一个 <strong>unique symbol</strong> 类型，它是symbol的子类型，这种类型的值只能由<code>Symbol()</code>或<code>Symbol.for()</code>创建，或者通过指定类型来指定变量是这种类型。这种类型的值只能用于常量的定义和用于属性名。需要注意，定义 <strong>unique symbol</strong> 类型的值，必须用 const 而不能用let来声明。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">key1</span>: unique <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">let</span> <span class="attr">key2</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    [key1]: <span class="string">&#x27;value1&#x27;</span>,</span><br><span class="line">    [key2]: <span class="string">&#x27;value2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key1]) <span class="comment">// value1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key2]) <span class="comment">// error 类型“symbol”不能作为索引类型使用。</span></span><br></pre></td></tr></table></figure><h2 id="复杂数据类型">复杂数据类型</h2><h3 id="array类型">array类型</h3><p>TypeScript 数组有一个根本特征：所有成员的类型必须相同，但是成员数量是不确定的，可以是无限数量的成员，也可以是零成员。在 TypeScript 中有两种定义数组的方式：</p><ol><li><strong>直接定义</strong>：通过 number[] 的形式来指定这个类型元素均为number类型的数组类型，推荐使用这种写法。</li><li><strong>数组泛型</strong>：通过 <code>Array&lt;number&gt;</code> 的形式来定义</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list1</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>如果数组成员的类型比较复杂，可以写在圆括号里面</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: (<span class="built_in">number</span> | <span class="built_in">string</span>)[];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span> | <span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure><p>JavaScript 规定，<code>const</code>命令声明的数组变量是可以改变成员的，很多时候确实有声明为只读数组的需求，即不允许变动数组成员。TypeScript 允许声明只读数组，方法是在数组类型前面加上<code>readonly</code>关键字。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: <span class="keyword">readonly</span> <span class="built_in">number</span>[] = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">2</span>; <span class="comment">// 报错</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">3</span>); <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">0</span>]; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="对象">对象</h3><p>在 TypeScript 中，对象是一种包含多个属性和方法的结构。</p><p>在 TypeScript 中，可以通过 <code>&#123;&#125;</code> 定义一个简单的对象类型。对象类型的每个属性都可以指定类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// 输出 &quot;Alice&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>);  <span class="comment">// 输出 30</span></span><br></pre></td></tr></table></figure><p>对象的属性可以是可选的。可选属性用 <code>?</code> 标记，表示该属性可以存在，也可以不存在。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; age?: <span class="built_in">number</span> &#125; = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>); <span class="comment">// 输出 undefined</span></span><br></pre></td></tr></table></figure><p>属性可以被声明为只读（<code>readonly</code>），这样一旦对象创建后该属性就不能被修改。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: &#123; <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span>; <span class="attr">name</span>: <span class="built_in">string</span> &#125; = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// person.id = 2; // 错误：无法为只读属性赋值</span></span><br></pre></td></tr></table></figure><h4 id="使用接口定义对象类型">使用接口定义对象类型</h4><p>接口（<code>interface</code>）用于定义对象的结构，接口通常用于描述更复杂的对象。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">sayHello</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello!&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">sayHello</span>(); <span class="comment">// 输出 &quot;Hello!&quot;</span></span><br></pre></td></tr></table></figure><h4 id="使用类型别名定义对象类型">使用类型别名定义对象类型</h4><p>类型别名（<code>type</code>）与接口相似，可以用来定义对象的结构。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Car</span> = &#123;</span><br><span class="line">    <span class="attr">brand</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">model</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">year</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">car</span>: <span class="title class_">Car</span> = &#123;</span><br><span class="line">    <span class="attr">brand</span>: <span class="string">&quot;Toyota&quot;</span>,</span><br><span class="line">    <span class="attr">model</span>: <span class="string">&quot;Camry&quot;</span>,</span><br><span class="line">    <span class="attr">year</span>: <span class="number">2020</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="索引签名">索引签名</h4><p>索引签名允许定义不确定数量的属性。常用于表示键值对结构。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringDictionary</span> &#123;</span><br><span class="line">    [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">dictionary</span>: <span class="title class_">StringDictionary</span> = &#123;</span><br><span class="line">    <span class="attr">hello</span>: <span class="string">&quot;world&quot;</span>,</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dictionary.<span class="property">hello</span>); <span class="comment">// 输出 &quot;world&quot;</span></span><br></pre></td></tr></table></figure><h3 id="元组">元组</h3><p>在 TypeScript 中，<strong>元组（Tuple）</strong> 是一种特殊的数组，允许在一个数组中存储不同类型的元素，并且每个元素的类型和位置是固定的。</p><p>元组通过指定每个元素的类型来定义。元组的元素类型和数量必须与定义时保持一致。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个包含两个元素的元组：第一个为 string 类型，第二个为 number 类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="number">0</span>]); <span class="comment">// 输出 &quot;Alice&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[<span class="number">1</span>]); <span class="comment">// 输出 30</span></span><br></pre></td></tr></table></figure><p>虽然元组的长度是固定的，但它仍然是一个数组类型，因此可以使用一些数组方法，如 <code>push</code> 和 <code>pop</code>。但要注意，<code>push</code> 添加的元素不会受到类型检查的限制。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">employee</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1</span>, <span class="string">&quot;Bob&quot;</span>];</span><br><span class="line">employee.<span class="title function_">push</span>(<span class="string">&quot;Developer&quot;</span>); <span class="comment">// 不会报错，但会增加元组长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(employee); <span class="comment">// 输出 [1, &quot;Bob&quot;, &quot;Developer&quot;]</span></span><br></pre></td></tr></table></figure><p>访问或赋值非指定类型的位置，TypeScript 会报错。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;Alice&quot;</span>, <span class="number">30</span>];</span><br><span class="line">person[<span class="number">1</span>] = <span class="string">&quot;thirty&quot;</span>; <span class="comment">// 错误：不能将 string 类型赋值给 number 类型</span></span><br></pre></td></tr></table></figure><p>元组支持解构赋值，可以很方便地获取元组中的元素。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">1001</span>, <span class="string">&quot;Alice&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> [id, name] = user;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(id);   <span class="comment">// 输出 1001</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// 输出 &quot;Alice&quot;</span></span><br></pre></td></tr></table></figure><p>元组还可以包含可选元素，即元素可以存在也可以不存在。可选元素必须放在元组的末尾，以确保类型的正确性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">contact</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>?] = [<span class="string">&quot;Alice&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(contact); <span class="comment">// 输出 [&quot;Alice&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="枚举">枚举</h3><p>在 TypeScript 中，<strong>枚举（Enum）</strong> 是一种用于定义命名常量集合的数据类型，适合表示一组固定值的场景。Enum 成员值都是只读的，不能重新赋值。</p><p>定义枚举时使用 <code>enum</code> 关键字，枚举中的每个成员默认从 0 开始递增编号。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,     <span class="comment">// 0</span></span><br><span class="line">    <span class="title class_">Down</span>,   <span class="comment">// 1</span></span><br><span class="line">    <span class="title class_">Left</span>,   <span class="comment">// 2</span></span><br><span class="line">    <span class="title class_">Right</span>,  <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">dir</span>: <span class="title class_">Direction</span> = <span class="title class_">Direction</span>.<span class="property">Up</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dir); <span class="comment">// 输出 0</span></span><br></pre></td></tr></table></figure><p>可以手动指定枚举成员的数值。未赋值的成员会从最后一个成员的数值递增，但不能是 bigInt。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">    <span class="title class_">Ready</span> = <span class="number">1</span>,</span><br><span class="line">    <span class="title class_">InProgress</span>,   <span class="comment">// 2</span></span><br><span class="line">    <span class="title class_">Done</span> = <span class="number">10</span>,</span><br><span class="line">    <span class="title class_">Cancelled</span>     <span class="comment">// 11</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Status</span>.<span class="property">InProgress</span>); <span class="comment">// 输出 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Status</span>.<span class="property">Cancelled</span>);   <span class="comment">// 输出 11</span></span><br></pre></td></tr></table></figure><p>多个同名的 Enum 结构会自动合并，Enum 结构合并时，只允许其中一个的首成员省略初始值，否则报错；不能有同名成员，否则报错。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">A,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">B, <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Foo1</span> &#123;</span><br><span class="line">    A,</span><br><span class="line">    B,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Foo1</span> &#123;</span><br><span class="line">    B = <span class="number">1</span>, <span class="comment">// 报错</span></span><br><span class="line">    C,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>字符串枚举中，所有成员都必须被初始化为字符串。字符串枚举适用于对每个值有固定含义的情况。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span> = <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">    <span class="title class_">Down</span> = <span class="string">&quot;DOWN&quot;</span>,</span><br><span class="line">    <span class="title class_">Left</span> = <span class="string">&quot;LEFT&quot;</span>,</span><br><span class="line">    <span class="title class_">Right</span> = <span class="string">&quot;RIGHT&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>); <span class="comment">// 输出 &quot;UP&quot;</span></span><br></pre></td></tr></table></figure><p>TypeScript 支持<strong>混合字符串和数字</strong>的枚举</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="title class_">Success</span> = <span class="number">1</span>,</span><br><span class="line">    <span class="title class_">Failure</span> = <span class="string">&quot;FAILURE&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在数字枚举中，可以通过值来查找对应的键，称为反向映射。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">    <span class="title class_">Active</span> = <span class="number">1</span>,</span><br><span class="line">    <span class="title class_">Inactive</span>,</span><br><span class="line">    <span class="title class_">Pending</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Status</span>[<span class="number">1</span>]); <span class="comment">// 输出 &quot;Active&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Status</span>.<span class="property">Active</span>); <span class="comment">// 输出 1</span></span><br></pre></td></tr></table></figure><h3 id="any类型">any类型</h3><p>有时候并不清楚一个值是什么类型，就可以用到any类型，它是一个任意类型。any 类型表示没有任何限制，该类型的变量可以赋予任意类型的值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">any</span>;</span><br><span class="line">value = <span class="number">123</span>;</span><br><span class="line">value = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">value = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">array</span>: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="string">&quot;a&quot;</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure><h3 id="void类型">void类型</h3><p>void 和 any 相反，any 是表示任意类型，而 void 是表示没有类型，就是什么类型都不是。JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 <code>void</code> 表示没有任何返回值的函数。</p><p><strong>void</strong> 类型的变量只能赋值为 undefined 和 null ，其他类型不能赋值给 <strong>void</strong> 类型的变量。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">alertName</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;My name is Tom&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="unknown类型">unknown类型</h3><p>为了解决<code>any</code>类型“污染”其他变量的问题，TypeScript 3.0 引入了<code>unknown</code>类型。它与<code>any</code>含义相同，表示类型不确定，可能是任意类型，但是它的使用有一些限制，不像<code>any</code>那样自由，可以视为严格版的<code>any</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">unknown</span>;</span><br><span class="line"></span><br><span class="line">x = <span class="literal">true</span>; <span class="comment">// 正确</span></span><br><span class="line">x = <span class="number">42</span>; <span class="comment">// 正确</span></span><br><span class="line">x = <span class="string">&quot;Hello World&quot;</span>; <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><p><code>unknown</code>类型的变量，不能直接赋值给其他类型的变量（除了<code>any</code>类型和<code>unknown</code>类型）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">v</span>: <span class="built_in">unknown</span> = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">v1</span>: <span class="built_in">boolean</span> = v; <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">v2</span>: <span class="built_in">number</span> = v; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p><code>unknown</code>类型变量的方法和属性不能被直接调用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">v1</span>: <span class="built_in">unknown</span> = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;;</span><br><span class="line">v1.<span class="property">foo</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">v2</span>: <span class="built_in">unknown</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">v2.<span class="title function_">trim</span>(); <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">v3</span>: <span class="built_in">unknown</span> = <span class="function">(<span class="params">n = <span class="number">0</span></span>) =&gt;</span> n + <span class="number">1</span>;</span><br><span class="line"><span class="title function_">v3</span>(); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="never类型">never类型</h3><p>在 TypeScript 中，<code>never</code> 类型表示的是<strong>永远不会有值</strong>的类型。它主要用在那些<strong>不可能正常结束的函数</strong>上，比如总是抛出错误或陷入无限循环的函数。</p><ol><li><strong>函数总是抛出异常</strong>：如果一个函数内部抛出异常，导致函数不会有正常返回值，那么可以将该函数的返回类型标记为 <code>never</code>。</li><li><strong>无限循环的函数</strong>：如果一个函数的逻辑使得它永远不会结束（例如死循环），也可以使用 <code>never</code> 作为返回类型。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throwError</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">infiniteLoop</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This loop never ends!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TS学习-TypeScript简介</title>
    <link href="/2024/10/31/TS%E5%AD%A6%E4%B9%A0-TypeScript%E7%AE%80%E4%BB%8B/"/>
    <url>/2024/10/31/TS%E5%AD%A6%E4%B9%A0-TypeScript%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<p>TypeScript 是由微软开发并维护的开源编程语言，它是 JavaScript 的<strong>超集</strong>，即在现有 JavaScript 基础上增加了<strong>静态类型</strong>和<strong>其他特性</strong>。TypeScript 主要用于开发大型应用程序，同时仍能编译为纯 JavaScript 运行在任何浏览器、Node.js 环境或任何支持 JavaScript 的地方。</p><span id="more"></span><h1>TypeScript简介</h1><h2 id="TypeScript特性">TypeScript特性</h2><ol><li><strong>超集</strong> ：TypeScript 是 JavaScript 的超集；</li><li><strong>类型系统</strong> ：TypeScript在JavaScript的基础上，包装了类型机制，使其变身为静态类型语言；</li><li><strong>编辑器功能</strong> ：增强了编辑器和IDE功能，包括代码补全、接口提示、跳转到定义、重构等；</li><li><strong>错误提示</strong> ：可以在编译阶段就发现大部分错误，帮助调试程序。</li></ol><h2 id="类型">类型</h2><p>类型（type）指的是一组具有相同特征的值。如果两个值具有某种共同的特征，就可以说，它们属于同一种类型。可以理解为**类型是人为添加的一种编程约束和用法提示。**目的是在软件开发过程中，为编译器和开发工具提供更多的验证和帮助，帮助提高代码质量，减少错误。</p><p>我们知道，JavaScript 是一门非常灵活的编程语言：</p><ul><li>它没有类型约束，一个变量可能初始化时是字符串，过一会儿又被赋值为数字。</li><li>由于隐式类型转换的存在，有的变量的类型很难在运行前就确定。</li><li>基于原型的面向对象编程，使得原型上的属性或方法可以在运行时被修改。</li><li>函数是 JavaScript 中的一等公民，可以赋值给变量，也可以当作参数或返回值。</li></ul><p>这种灵活性就像一把双刃剑，一方面使得 JavaScript 蓬勃发展，无所不能；另一方面也使得它的代码质量参差不齐，维护成本高，运行时错误多。</p><p>TypeScript在JavaScript的基础上，包装了类型机制，使其变身成为<strong>静态类型</strong>语言。在 TypeScript 中，不仅可以轻易复用 JavaScript 的代码、最新特性，还能使用可选的静态类型进行检查报错，使得编写的代码更健壮、更易于维护。</p><h3 id="动态类型与静态类型">动态类型与静态类型</h3><h4 id="动态类型">动态类型</h4><p>动态类型是指在运行时才会进行类型检查，这种语言的类型错误往往会导致运行时错误。</p><p>JavaScript 是一门解释型语言，没有编译阶段，所以它是动态类型，以下这段代码在运行时才会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line">foo.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>); <span class="comment">// Uncaught TypeError: foo.split is not a function</span></span><br></pre></td></tr></table></figure><h4 id="静态类型">静态类型</h4><p>静态类型是指编译阶段就能确定每个变量的类型，这种语言的类型错误往往会导致语法错误。TypeScript 在运行前需要先编译为 JavaScript，而在编译阶段就会进行类型检查，所以 <strong>TypeScript 是静态类型</strong>，这段 TypeScript 代码在编译阶段就会报错了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line">foo.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>); <span class="comment">// Property &#x27;split&#x27; does not exist on type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure><h3 id="显式类型与隐式类型">显式类型与隐式类型</h3><p>类型会按照「是否允许隐式类型转换」来分类，可以分为强类型和弱类型。</p><p>TypeScript 是完全兼容 JavaScript 的，它不会修改 JavaScript 运行时的特性，所以<strong>它们都是弱类型</strong>。</p><p>以下这段代码不管是在 JavaScript 中还是在 TypeScript 中都是可以正常运行的，运行时数字 <code>1</code> 会被隐式类型转换为字符串 <code>'1'</code>，加号 <code>+</code> 被识别为字符串拼接。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="string">&#x27;1&#x27;</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><p>TypeScript 会尽可能的去推断类型信息，以便在开发过程中以更小的成本为我们提供类型安全。通俗来讲就是，即使我们不去显式的声明变量的类型，TypeScript也会自动判断数据类型。比如下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">a = <span class="string">&quot;996&quot;</span> <span class="comment">// 报错：不能将类型“string”分配给类型“number”。</span></span><br></pre></td></tr></table></figure><h3 id="类型结构化">类型结构化</h3><p>在一些语言中，类型总是有一些不必要的复杂的存在方式，而 TypeScript 的类型是结构化的。比如下面的例子中，函数会接受它所期望的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">interface <span class="title class_">Point2D</span> &#123;</span><br><span class="line"><span class="attr">x</span>: number;</span><br><span class="line"><span class="attr">y</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Point3D</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: number;</span><br><span class="line">    <span class="attr">y</span>: number;</span><br><span class="line">    <span class="attr">z</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">point2D</span>: <span class="title class_">Point2D</span> = &#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">point3D</span>: <span class="title class_">Point3D</span> = &#123;<span class="attr">x</span>: <span class="number">20</span>, <span class="attr">y</span>: <span class="number">20</span>, <span class="attr">z</span>: <span class="number">20</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">takePoint2D</span>(<span class="params">point: Point2D</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">takePoint2D</span>(point2D)  <span class="comment">// 正确，完全匹配</span></span><br><span class="line"><span class="title function_">takePoint2D</span>(point3D)  <span class="comment">// 正确，可以有额外的信息</span></span><br><span class="line"><span class="title function_">takePoint2D</span>(&#123;<span class="attr">x</span>: <span class="number">30</span>&#125;)  <span class="comment">// 错误，缺少y</span></span><br></pre></td></tr></table></figure><h3 id="类型错误不会影响JS运行">类型错误不会影响JS运行</h3><p>为了便于把 JavaScript 代码迁移至 TypeScript，即使存在编译错误，在默认的情况下，TypeScript 也会尽可能的被编译为 JavaScript 代码。因此，我们可以将JavaScript代码逐步迁移至 TypeScript。</p><h2 id="安装">安装</h2><p>TypeScript 的命令行工具安装方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>以上命令会在全局环境下安装 <code>tsc</code> 命令，安装完成之后，我们就可以在任何地方执行 <code>tsc</code> 命令了。</p><p>编译一个 TypeScript 文件很简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure><p>我们约定使用 TypeScript 编写的文件以 <code>.ts</code> 为后缀</p>]]></content>
    
    
    <categories>
      
      <category>TypeScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-解释器模式</title>
    <link href="/2024/10/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>解释器模式</strong>（Interpreter Pattern）是一种行为型设计模式，用于<strong>定义一个语言的文法，并且为该语言设计一个解释器来解释该语言中的句子</strong>。简言之，解释器模式通过构建抽象语法树（AST，Abstract Syntax Tree）来解析和执行语言中的表达式或指令。</p><span id="more"></span><h1>解释器模式</h1><p>解释器模式通过定义文法规则和解释规则，允许系统解析和解释特定的语言结构或命令序列。模式中每一个规则（或表达式）都是一个类，通过组合这些类，可以解析并执行复杂的指令序列。</p><h2 id="组成">组成</h2><ol><li><strong>抽象表达式（Abstract Expression）</strong>：定义一个解释操作接口，所有具体表达式都必须实现该接口。</li><li><strong>终结符表达式（Terminal Expression）</strong>：实现抽象表达式接口，用于处理文法中的终结符。每个终结符都代表一个简单的元素。</li><li><strong>非终结符表达式（Non-Terminal Expression）</strong>：实现抽象表达式接口，用于处理文法中的非终结符。非终结符表达式通常由多个终结符或非终结符组成，表示更复杂的语法结构。</li><li><strong>上下文（Context）</strong>：用于存储解释器的全局信息和变量。</li><li><strong>客户端（Client）</strong>：构造抽象语法树（AST），并通过调用解释器的解释方法来解析或计算表达式。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象表达式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Expression</span> &#123;</span><br><span class="line">    <span class="title function_">interpret</span>(<span class="params">context</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;This method should be overridden&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终结符表达式类：数字</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberExpression</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Expression</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">number</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">number</span> = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">interpret</span>(<span class="params">context</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">number</span>;  <span class="comment">// 返回数字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非终结符表达式类：加法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddExpression</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Expression</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">leftExpression, rightExpression</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">leftExpression</span> = leftExpression;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">rightExpression</span> = rightExpression;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">interpret</span>(<span class="params">context</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">leftExpression</span>.<span class="title function_">interpret</span>(context) + <span class="variable language_">this</span>.<span class="property">rightExpression</span>.<span class="title function_">interpret</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非终结符表达式类：减法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubtractExpression</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Expression</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">leftExpression, rightExpression</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">leftExpression</span> = leftExpression;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">rightExpression</span> = rightExpression;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">interpret</span>(<span class="params">context</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">leftExpression</span>.<span class="title function_">interpret</span>(context) - <span class="variable language_">this</span>.<span class="property">rightExpression</span>.<span class="title function_">interpret</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码：构造语法树并解释表达式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 解析表达式：3 + 5 - 2</span></span><br><span class="line">    <span class="keyword">const</span> expression = <span class="keyword">new</span> <span class="title class_">SubtractExpression</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AddExpression</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NumberExpression</span>(<span class="number">3</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NumberExpression</span>(<span class="number">5</span>)</span><br><span class="line">        ),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">NumberExpression</span>(<span class="number">2</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解释上下文</span></span><br><span class="line">    <span class="keyword">const</span> context = &#123;&#125;;  <span class="comment">// 这里可以存储解释器所需的全局信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解释并输出结果</span></span><br><span class="line">    <span class="keyword">const</span> result = expression.<span class="title function_">interpret</span>(context);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结果:&#x27;</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// 结果: 6</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>抽象表达式类 <code>Expression</code></strong>：定义了一个解释方法 <code>interpret()</code>，所有的具体表达式都必须实现这个方法。</li><li><strong>终结符表达式类 <code>NumberExpression</code></strong>：表示一个数字。<code>interpret()</code> 方法返回该数字的值。</li><li><strong>非终结符表达式类 <code>AddExpression</code> 和 <code>SubtractExpression</code></strong>：分别表示加法和减法操作。它们的 <code>interpret()</code> 方法会递归地调用左右子表达式的 <code>interpret()</code> 方法，并进行相应的加法或减法运算。</li><li><strong>客户端代码</strong>：客户端构造了一棵抽象语法树（AST），表示表达式 <code>3 + 5 - 2</code>。通过调用 <code>interpret()</code> 方法来解析并计算表达式的结果。</li></ol><h2 id="优点">优点</h2><ol><li><strong>易于扩展</strong>：可以很容易地为新的文法规则增加新的解释器类，灵活性高。</li><li><strong>易于实现复杂的语法解析</strong>：通过组合终结符和非终结符表达式，可以实现复杂的文法解析。</li><li><strong>设计结构清晰</strong>：文法的每一个规则都可以被封装为一个类，符合面向对象的设计原则。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>性能问题</strong>：如果文法规则非常复杂，或者表达式特别长，会导致大量的类实例化和递归调用，影响性能。</li><li><strong>类数量增加</strong>：由于每个文法规则都需要一个类，如果文法比较复杂，可能会导致类的数量急剧增加，维护成本较高。</li></ol><h2 id="与其他模式的对比">与其他模式的对比</h2><ol><li><strong>解释器模式 vs 组合模式</strong><ul><li><strong>组合模式</strong>：组合模式用于构建对象的树形结构，强调对象间的层级关系。</li><li><strong>解释器模式</strong>：解释器模式利用语法树来解释语言表达式，侧重于语法和解释规则。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-中介者模式</title>
    <link href="/2024/10/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>中介者模式</strong>（Mediator Pattern）是一种行为型设计模式，<strong>通过引入一个中介者对象来协调对象之间的交互</strong>，避免对象之间的直接引用，从而降低它们之间的耦合性。中介者模式的核心思想是将系统中多个对象之间的复杂交互关系封装到一个中介者对象中，由中介者负责调度各个对象之间的通讯，而不是让对象彼此直接联系。</p><span id="more"></span><h1>中介者模式</h1><h2 id="组成">组成</h2><ol><li><strong>中介者接口（Mediator）</strong>：定义了一个接口，用来与各个同事对象（Colleague）进行通信，通常包括发送消息或处理请求的机制。</li><li><strong>具体中介者（Concrete Mediator）</strong>：实现了中介者接口，负责协调多个同事对象之间的交互。它通常会持有所有同事对象的引用，并根据需要转发请求或消息。</li><li><strong>同事类（Colleague）</strong>：具体对象的基类，它们不知道其他对象的存在，只通过中介者来进行交互。同事类只与中介者通信，执行相应的操作。</li><li><strong>具体同事类（Concrete Colleague）</strong>：继承同事类，并通过中介者来发送或接收消息。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中介者接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatMediator</span> &#123;</span><br><span class="line">    <span class="title function_">sendMessage</span>(<span class="params">message, sender</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overridden!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体中介者类：聊天室</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChatRoomMediator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ChatMediator</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">users</span> = []; <span class="comment">// 存储聊天室中的用户</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">push</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sendMessage</span>(<span class="params">message, sender</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">users</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (user !== sender) &#123;</span><br><span class="line">                user.<span class="title function_">receiveMessage</span>(message, sender.<span class="property">name</span>); <span class="comment">// 向其他用户发送消息</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同事类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, mediator</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mediator</span> = mediator; <span class="comment">// 持有中介者引用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sendMessage</span>(<span class="params">message</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 发送消息: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mediator</span>.<span class="title function_">sendMessage</span>(message, <span class="variable language_">this</span>); <span class="comment">// 通过中介者发送消息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">receiveMessage</span>(<span class="params">message, senderName</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> 收到来自 <span class="subst">$&#123;senderName&#125;</span> 的消息: <span class="subst">$&#123;message&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">const</span> chatRoom = <span class="keyword">new</span> <span class="title class_">ChatRoomMediator</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user1 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;Alice&#x27;</span>, chatRoom);</span><br><span class="line"><span class="keyword">const</span> user2 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;Bob&#x27;</span>, chatRoom);</span><br><span class="line"><span class="keyword">const</span> user3 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;Charlie&#x27;</span>, chatRoom);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将用户加入聊天室</span></span><br><span class="line">chatRoom.<span class="title function_">addUser</span>(user1);</span><br><span class="line">chatRoom.<span class="title function_">addUser</span>(user2);</span><br><span class="line">chatRoom.<span class="title function_">addUser</span>(user3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户发送消息</span></span><br><span class="line">user1.<span class="title function_">sendMessage</span>(<span class="string">&#x27;Hello, everyone!&#x27;</span>); <span class="comment">// Bob 和 Charlie 都会收到消息</span></span><br><span class="line">user2.<span class="title function_">sendMessage</span>(<span class="string">&#x27;Hi Alice!&#x27;</span>); <span class="comment">// Alice 和 Charlie 会收到消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Alice 发送消息: Hello, everyone!</span></span><br><span class="line"><span class="comment">// Bob 收到来自 Alice 的消息: Hello, everyone!</span></span><br><span class="line"><span class="comment">// Charlie 收到来自 Alice 的消息: Hello, everyone!</span></span><br><span class="line"><span class="comment">// Bob 发送消息: Hi Alice!</span></span><br><span class="line"><span class="comment">// Alice 收到来自 Bob 的消息: Hi Alice!</span></span><br><span class="line"><span class="comment">// Charlie 收到来自 Bob 的消息: Hi Alice!</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>中介者接口 <code>ChatMediator</code></strong>：定义了一个发送消息的接口 <code>sendMessage()</code>，具体中介者类 <code>ChatRoomMediator</code> 实现了该接口，负责协调用户之间的消息发送。</li><li><strong>具体中介者类 <code>ChatRoomMediator</code></strong>：该类持有聊天室中所有用户的引用，并负责管理用户之间的消息传递。<code>sendMessage()</code> 方法会将消息发送给除发送者外的所有用户。</li><li><strong>同事类 <code>User</code></strong>：每个用户都有一个名字 <code>name</code>，并且持有中介者的引用，通过中介者与其他用户通信。</li><li><strong>客户端代码</strong>：创建了一个聊天室 <code>chatRoom</code>，并将用户加入聊天室。用户通过调用 <code>sendMessage()</code> 方法发送消息，消息通过中介者 <code>chatRoom</code> 转发给其他用户。</li></ol><h2 id="优点">优点</h2><ol><li><strong>降低对象之间的耦合</strong>：各个同事对象不再直接引用彼此，而是通过中介者进行通讯，降低了对象之间的依赖性。</li><li><strong>集中控制交互逻辑</strong>：中介者集中管理系统中复杂的交互逻辑，易于修改和扩展交互规则。</li><li><strong>提高系统的可维护性</strong>：新增或修改同事对象不会影响其他同事对象，系统扩展性增强。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>中介者复杂性增加</strong>：随着同事对象的增加，中介者对象的逻辑可能变得非常复杂，容易导致中介者成为系统中的“上帝对象”。</li><li><strong>单点故障风险</strong>：中介者负责所有的交互逻辑，一旦中介者出现问题，可能影响整个系统的运行。</li></ol><h2 id="与其他设计模式的对比">与其他设计模式的对比</h2><ol><li><strong>中介者模式 vs 职责链模式</strong><ul><li><strong>中介者模式</strong>：所有同事对象通过中介者进行交互，由中介者协调对象之间的通讯，交互逻辑集中化。</li><li><strong>职责链模式</strong>：请求沿着链条依次传递，每个对象都可以处理或传递请求，交互逻辑分布在各个处理者之间。</li></ul></li><li><strong>中介者模式 vs 观察者模式</strong><ul><li><strong>中介者模式</strong>：对象之间通过中介者进行交互，所有交互都经过中介者。</li><li><strong>观察者模式</strong>：一个对象（发布者）通知多个观察者对象，交互是单向的，不依赖于中介者。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-访问者模式</title>
    <link href="/2024/10/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>访问者模式</strong>（Visitor Pattern）是一种行为型设计模式，它将作用于某种数据结构（如集合或对象结构）中的操作与数据结构本身分离开来，使得在不改变数据结构的前提下增加新的操作变得更加容易。访问者模式通过为数据结构中的每个元素定义新的操作，避免了频繁修改数据结构的类。</p><span id="more"></span><h1>访问者模式</h1><p>访问者模式的核心在于允许**定义操作（即访问者）**来作用于一组对象（即被访问的对象）上，而这些对象的具体类型在编译期是已知的。访问者通过将操作从对象类中分离出来，使得新操作可以独立地扩展。</p><p>访问者模式的一个典型场景是，数据结构相对稳定，但是需要在其基础上定义许多不同的操作。通过使用访问者模式，我们可以避免在对象类中增加大量与具体操作相关的代码。</p><h2 id="组成">组成</h2><ol><li><strong>访问者接口（Visitor）</strong>：为所有具体访问者声明一个接口，定义每个具体元素的访问操作。</li><li><strong>具体访问者类（Concrete Visitor）</strong>：实现访问者接口，为不同的对象（元素）定义具体的操作行为。</li><li><strong>元素接口（Element）</strong>：为能够被访问的对象（元素）定义一个 <code>accept()</code> 方法，该方法接受一个访问者对象作为参数。</li><li><strong>具体元素类（Concrete Element）</strong>：实现元素接口，定义 <code>accept()</code> 方法。通常这个方法会调用访问者的对应方法。</li><li><strong>对象结构（Object Structure）</strong>：包含一组元素对象，可以通过遍历对象结构，执行访问者的操作。</li></ol><h2 id="工作原理">工作原理</h2><p>访问者模式使用双重分派（Double Dispatch）机制，确保操作的执行不仅依赖于访问者的类型，还依赖于被访问对象的类型。</p><ol><li>通过元素对象的 <code>accept()</code> 方法，传入访问者。</li><li>元素对象调用访问者的 <code>visit()</code> 方法，并将自身作为参数传递给访问者，从而让访问者根据元素的具体类型进行处理。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问者接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShapeVisitor</span> &#123;</span><br><span class="line">    <span class="title function_">visitCircle</span>(<span class="params">circle</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;This method should be overridden&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">visitRectangle</span>(<span class="params">rectangle</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;This method should be overridden&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体访问者类：计算面积</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AreaCalculator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ShapeVisitor</span> &#123;</span><br><span class="line">    <span class="title function_">visitCircle</span>(<span class="params">circle</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> area = <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="title class_">Math</span>.<span class="title function_">pow</span>(circle.<span class="property">radius</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`圆的面积: <span class="subst">$&#123;area.toFixed(<span class="number">2</span>)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">visitRectangle</span>(<span class="params">rectangle</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> area = rectangle.<span class="property">width</span> * rectangle.<span class="property">height</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`矩形的面积: <span class="subst">$&#123;area&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体访问者类：绘制形状</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShapeDrawer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ShapeVisitor</span> &#123;</span><br><span class="line">    <span class="title function_">visitCircle</span>(<span class="params">circle</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`绘制圆形，半径: <span class="subst">$&#123;circle.radius&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">visitRectangle</span>(<span class="params">rectangle</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`绘制矩形，宽度: <span class="subst">$&#123;rectangle.width&#125;</span>, 高度: <span class="subst">$&#123;rectangle.height&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元素接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="title function_">accept</span>(<span class="params">visitor</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;This method should be overridden&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体元素类：圆形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">accept</span>(<span class="params">visitor</span>) &#123;</span><br><span class="line">        visitor.<span class="title function_">visitCircle</span>(<span class="variable language_">this</span>); <span class="comment">// 调用访问者的 visitCircle 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体元素类：矩形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">width, height</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">accept</span>(<span class="params">visitor</span>) &#123;</span><br><span class="line">        visitor.<span class="title function_">visitRectangle</span>(<span class="variable language_">this</span>); <span class="comment">// 调用访问者的 visitRectangle 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码：操作图形</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> shapes = [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">5</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> areaCalculator = <span class="keyword">new</span> <span class="title class_">AreaCalculator</span>();</span><br><span class="line">    <span class="keyword">const</span> shapeDrawer = <span class="keyword">new</span> <span class="title class_">ShapeDrawer</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算面积</span></span><br><span class="line">    shapes.<span class="title function_">forEach</span>(<span class="function"><span class="params">shape</span> =&gt;</span> shape.<span class="title function_">accept</span>(areaCalculator));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制形状</span></span><br><span class="line">    shapes.<span class="title function_">forEach</span>(<span class="function"><span class="params">shape</span> =&gt;</span> shape.<span class="title function_">accept</span>(shapeDrawer));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// 圆的面积: 78.54</span></span><br><span class="line"><span class="comment">// 矩形的面积: 200</span></span><br><span class="line"><span class="comment">// 绘制圆形，半径: 5</span></span><br><span class="line"><span class="comment">// 绘制矩形，宽度: 10, 高度: 20</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>访问者接口 <code>ShapeVisitor</code></strong>：定义了访问圆形和矩形的方法 <code>visitCircle()</code> 和 <code>visitRectangle()</code>，具体访问者类会实现这些方法。</li><li><strong>具体访问者 <code>AreaCalculator</code> 和 <code>ShapeDrawer</code></strong>：分别负责计算面积和绘制形状。它们根据不同形状（圆形、矩形）实现不同的操作。</li><li><strong>元素接口 <code>Shape</code></strong>：提供了 <code>accept()</code> 方法，允许访问者访问具体元素。</li><li><strong>具体元素 <code>Circle</code> 和 <code>Rectangle</code></strong>：实现了 <code>accept()</code> 方法。每当需要操作这些元素时，它们会接受访问者，并将自身作为参数传递给访问者的 <code>visit()</code> 方法。</li><li><strong>客户端代码</strong>：创建了一组图形对象，并通过访问者模式分别计算其面积和绘制它们。</li></ol><h2 id="优点">优点</h2><ol><li><strong>符合单一职责原则</strong>：将数据结构与操作解耦，使得每个访问者可以专注于其特定的功能，数据结构类则不会被多种操作耦合。</li><li><strong>开闭原则</strong>：可以在不修改元素类的前提下添加新的访问者，从而实现新的功能或操作。</li><li><strong>灵活性高</strong>：访问者可以对对象结构中不同类型的元素执行不同的操作，这种灵活性让访问者可以方便地扩展现有系统。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>违反依赖倒置原则</strong>：访问者模式要求访问者知道所有具体元素的详细信息，这导致访问者依赖具体类而非抽象接口。</li><li><strong>元素类修改不方便</strong>：如果需要对元素类进行修改或增加新的元素类，那么必须修改所有的访问者类，扩展性受到影响。</li><li><strong>复杂性增加</strong>：如果元素类的种类繁多或复杂，会导致访问者类的实现变得复杂。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-状态模式</title>
    <link href="/2024/10/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>状态模式</strong>（State Pattern）是一种行为型设计模式，它允许一个对象在其内部状态改变时改变其行为。通过将状态的行为封装在独立的状态类中，状态模式可以让对象在其状态变化时，不需要修改自己的类，只需改变其内部的状态对象。</p><span id="more"></span><h1>状态模式</h1><h2 id="组成">组成</h2><ol><li><strong>上下文（Context）</strong>：维护对某个状态对象的引用，定义与客户端交互的方法。</li><li><strong>状态接口（State）</strong>：定义一个接口，以封装与上下文的特定状态相关的行为。</li><li><strong>具体状态类（ConcreteState）</strong>：实现状态接口，封装特定状态下的行为。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 状态接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OrderState</span> &#123;</span><br><span class="line">    <span class="title function_">handle</span>(<span class="params">order</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态：待付款</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PendingPaymentState</span> <span class="keyword">extends</span> <span class="title class_ inherited__">OrderState</span> &#123;</span><br><span class="line">    <span class="title function_">handle</span>(<span class="params">order</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Order is pending payment.&quot;</span>);</span><br><span class="line">        order.<span class="title function_">setState</span>(<span class="keyword">new</span> <span class="title class_">ShippedState</span>()); <span class="comment">// 模拟付款后状态改变</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态：待发货</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShippedState</span> <span class="keyword">extends</span> <span class="title class_ inherited__">OrderState</span> &#123;</span><br><span class="line">    <span class="title function_">handle</span>(<span class="params">order</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Order has been shipped.&quot;</span>);</span><br><span class="line">        order.<span class="title function_">setState</span>(<span class="keyword">new</span> <span class="title class_">CompletedState</span>()); <span class="comment">// 模拟发货后状态改变</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体状态：已完成</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompletedState</span> <span class="keyword">extends</span> <span class="title class_ inherited__">OrderState</span> &#123;</span><br><span class="line">    <span class="title function_">handle</span>(<span class="params">order</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Order is completed.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文：订单</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = <span class="keyword">new</span> <span class="title class_">PendingPaymentState</span>(); <span class="comment">// 初始状态</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setState</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">process</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="title function_">handle</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">const</span> order = <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">order.<span class="title function_">process</span>(); <span class="comment">// 输出: Order is pending payment.</span></span><br><span class="line">order.<span class="title function_">process</span>(); <span class="comment">// 输出: Order has been shipped.</span></span><br><span class="line">order.<span class="title function_">process</span>(); <span class="comment">// 输出: Order is completed.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">// Order is pending payment.</span></span><br><span class="line"><span class="comment">// Order has been shipped.</span></span><br><span class="line"><span class="comment">// Order is completed.</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><p><strong>状态接口 <code>OrderState</code></strong>：定义一个处理订单的方法，具体状态类需要实现该接口。</p></li><li><p><strong>具体状态类</strong>：</p><ul><li><p><code>PendingPaymentState</code>：表示订单的“待付款”状态，处理时输出信息并切换到“待发货”状态。</p></li><li><p><code>ShippedState</code>：表示订单的“待发货”状态，处理时输出信息并切换到“已完成”状态。</p></li><li><p><code>CompletedState</code>：表示订单的“已完成”状态，处理时只输出状态信息。</p></li></ul></li><li><p><strong>上下文类 <code>Order</code></strong>：维护当前状态对象，调用状态对象的方法以处理订单逻辑，允许状态的动态切换。</p></li><li><p><strong>客户端代码</strong>：创建一个订单实例，调用 <code>process()</code> 方法，模拟状态的变化。</p></li></ol><h2 id="优点">优点</h2><ol><li><strong>简化复杂性</strong>：将复杂的状态转换和行为逻辑分离到状态类中，使代码更清晰、易于管理。</li><li><strong>扩展性</strong>：可以通过增加新的状态类来扩展对象的状态行为，无需修改现有代码。</li><li><strong>降低条件语句</strong>：通过状态类替代复杂的条件语句，提升代码可读性。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>状态类数量增加</strong>：对于状态较多的系统，可能导致状态类数量急剧增加。</li><li><strong>可能导致系统复杂性增加</strong>：状态的管理可能需要额外的逻辑来切换和维护状态对象。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-备忘录模式</title>
    <link href="/2024/10/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>备忘录模式</strong>（Memento Pattern）是一种行为型设计模式，用于在不破坏封装的前提下，捕获并保存对象的内部状态，以便之后可以恢复该状态。通过备忘录模式，我们可以将对象恢复到某个历史状态，从而实现“撤销”或“回滚”操作。</p><span id="more"></span><h1>备忘录模式</h1><h2 id="组成">组成</h2><ol><li><strong>发起人（Originator）</strong>：负责创建备忘录以记录当前状态，以及恢复到先前状态。</li><li><strong>备忘录（Memento）</strong>：用于存储发起人的内部状态，备忘录只供发起人自己访问。</li><li><strong>管理者（Caretaker）</strong>：负责保存好备忘录，但不能对备忘录的内容进行操作或修改。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 备忘录类：用于存储发起人的状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Memento</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getState</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发起人类：管理自身状态，并可以创建和恢复备忘录</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置状态</span></span><br><span class="line">    <span class="title function_">setState</span>(<span class="params">state</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span> = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前状态</span></span><br><span class="line">    <span class="title function_">getState</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">content</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建备忘录</span></span><br><span class="line">    <span class="title function_">saveStateToMemento</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Memento</span>(<span class="variable language_">this</span>.<span class="property">content</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从备忘录恢复状态</span></span><br><span class="line">    <span class="title function_">getStateFromMemento</span>(<span class="params">memento</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">content</span> = memento.<span class="title function_">getState</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 管理者类：保存和管理备忘录</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Caretaker</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mementoList</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存备忘录</span></span><br><span class="line">    <span class="title function_">addMemento</span>(<span class="params">memento</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">mementoList</span>.<span class="title function_">push</span>(memento);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取某个备忘录</span></span><br><span class="line">    <span class="title function_">getMemento</span>(<span class="params">index</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">mementoList</span>[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">const</span> editor = <span class="keyword">new</span> <span class="title class_">TextEditor</span>();</span><br><span class="line"><span class="keyword">const</span> caretaker = <span class="keyword">new</span> <span class="title class_">Caretaker</span>();</span><br><span class="line"></span><br><span class="line">editor.<span class="title function_">setState</span>(<span class="string">&quot;Version 1&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Current Content: <span class="subst">$&#123;editor.getState()&#125;</span>`</span>); <span class="comment">// 输出: Current Content: Version 1</span></span><br><span class="line">caretaker.<span class="title function_">addMemento</span>(editor.<span class="title function_">saveStateToMemento</span>());   <span class="comment">// 保存状态</span></span><br><span class="line"></span><br><span class="line">editor.<span class="title function_">setState</span>(<span class="string">&quot;Version 2&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Current Content: <span class="subst">$&#123;editor.getState()&#125;</span>`</span>); <span class="comment">// 输出: Current Content: Version 2</span></span><br><span class="line">caretaker.<span class="title function_">addMemento</span>(editor.<span class="title function_">saveStateToMemento</span>());   <span class="comment">// 保存状态</span></span><br><span class="line"></span><br><span class="line">editor.<span class="title function_">setState</span>(<span class="string">&quot;Version 3&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Current Content: <span class="subst">$&#123;editor.getState()&#125;</span>`</span>); <span class="comment">// 输出: Current Content: Version 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销到上一个状态</span></span><br><span class="line">editor.<span class="title function_">getStateFromMemento</span>(caretaker.<span class="title function_">getMemento</span>(<span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Restored to: <span class="subst">$&#123;editor.getState()&#125;</span>`</span>);    <span class="comment">// 输出: Restored to: Version 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 撤销到初始状态</span></span><br><span class="line">editor.<span class="title function_">getStateFromMemento</span>(caretaker.<span class="title function_">getMemento</span>(<span class="number">0</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Restored to: <span class="subst">$&#123;editor.getState()&#125;</span>`</span>);    <span class="comment">// 输出: Restored to: Version 1</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>备忘录类 <code>Memento</code></strong>：它是封装状态的类，内部存储了发起人的状态，并通过 <code>getState()</code> 方法提供状态的访问。</li><li><strong>发起人类 <code>TextEditor</code></strong>：发起人是文本编辑器，它负责管理自己的状态。发起人可以创建备忘录对象来保存当前状态，也可以从备忘录中恢复状态。</li><li><strong>管理者类 <code>Caretaker</code></strong>：管理者维护了一个备忘录列表，用于保存多个历史状态。它可以根据索引返回某个备忘录，发起人通过这个备忘录来恢复状态。</li><li><strong>客户端代码</strong>：通过发起人和管理者类，实现了保存和恢复文本状态的功能。用户输入不同的文本状态，管理者负责保存状态，发起人通过管理者的备忘录实现状态的回滚。</li></ol><h2 id="优点">优点</h2><ol><li><strong>状态恢复</strong>：可以方便地保存和恢复对象的历史状态，支持撤销/回滚操作。</li><li><strong>封装性</strong>：备忘录将发起人的状态存储起来，但不会暴露发起人的实现细节，保持了封装性。</li><li><strong>简化管理</strong>：通过备忘录模式，可以将状态管理委托给管理者对象，简化了发起人的逻辑。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>资源消耗</strong>：如果对象状态比较复杂或存储备忘录频率较高，可能会占用较多内存资源。</li><li><strong>额外的维护复杂性</strong>：备忘录需要存储和管理对象的多个状态，增加了系统的复杂性。</li></ol><h2 id="与其他模式的对比">与其他模式的对比</h2><ol><li><strong>备忘录模式 vs 原型模式</strong><ul><li><strong>备忘录模式</strong>：主要用于保存和恢复对象的历史状态，强调状态的回滚或撤销。</li><li><strong>原型模式</strong>：用于通过克隆的方式创建对象，原型模式中的对象复制不一定会保存对象的历史状态。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-命令模式</title>
    <link href="/2024/10/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>命令模式</strong>（Command Pattern）是一种行为型设计模式，它将<strong>请求（操作）封装成对象</strong>，从而使你可以用不同的请求对客户端进行参数化。命令模式允许你将请求的发送者与执行者解耦，使得请求的发送者不必知道如何执行请求，甚至在某些情况下，可以在不同的时间执行请求。</p><span id="more"></span><h1>命令模式</h1><h2 id="组成">组成</h2><ol><li><strong>命令接口（Command）</strong>：声明执行命令的接口，一般包含 <code>execute()</code> 方法。</li><li><strong>具体命令（ConcreteCommand）</strong>：实现命令接口，封装具体的操作细节。通常会维护一个对实际接收者（Receiver）的引用。</li><li><strong>接收者（Receiver）</strong>：执行与请求相关的具体操作，通常由具体命令对象调用。</li><li><strong>调用者（Invoker）</strong>：持有命令对象，并在某个时间点调用命令的 <code>execute()</code> 方法来执行请求。</li><li><strong>客户端（Client）</strong>：负责创建命令对象并将其关联到具体的接收者，通常也会将命令对象传递给调用者。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="title function_">execute</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overridden!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收者：灯</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Light</span> &#123;</span><br><span class="line">    <span class="title function_">turnOn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The light is on.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">turnOff</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;The light is off.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体命令：打开灯的命令</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightOnCommand</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Command</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">light</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">light</span> = light; <span class="comment">// 保存接收者对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">execute</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">light</span>.<span class="title function_">turnOn</span>(); <span class="comment">// 调用接收者的具体操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体命令：关闭灯的命令</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightOffCommand</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Command</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">light</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">light</span> = light; <span class="comment">// 保存接收者对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">execute</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">light</span>.<span class="title function_">turnOff</span>(); <span class="comment">// 调用接收者的具体操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用者：遥控器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RemoteControl</span> &#123;</span><br><span class="line">    <span class="title function_">setCommand</span>(<span class="params">command</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">command</span> = command; <span class="comment">// 绑定命令对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">pressButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">command</span>.<span class="title function_">execute</span>(); <span class="comment">// 执行绑定的命令</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码：控制灯</span></span><br><span class="line"><span class="keyword">const</span> light = <span class="keyword">new</span> <span class="title class_">Light</span>(); <span class="comment">// 接收者</span></span><br><span class="line"><span class="keyword">const</span> lightOnCommand = <span class="keyword">new</span> <span class="title class_">LightOnCommand</span>(light); <span class="comment">// 创建打开灯的命令</span></span><br><span class="line"><span class="keyword">const</span> lightOffCommand = <span class="keyword">new</span> <span class="title class_">LightOffCommand</span>(light); <span class="comment">// 创建关闭灯的命令</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> remoteControl = <span class="keyword">new</span> <span class="title class_">RemoteControl</span>(); <span class="comment">// 调用者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开灯</span></span><br><span class="line">remoteControl.<span class="title function_">setCommand</span>(lightOnCommand);</span><br><span class="line">remoteControl.<span class="title function_">pressButton</span>(); <span class="comment">// 输出：The light is on.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭灯</span></span><br><span class="line">remoteControl.<span class="title function_">setCommand</span>(lightOffCommand);</span><br><span class="line">remoteControl.<span class="title function_">pressButton</span>(); <span class="comment">// 输出：The light is off.</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>命令接口 <code>Command</code></strong>：它定义了命令的 <code>execute()</code> 方法，所有具体命令类都需要实现这个方法。</li><li><strong>具体命令类 <code>LightOnCommand</code> 和 <code>LightOffCommand</code></strong>：这两个类分别实现了打开和关闭灯的具体命令。它们通过构造函数持有接收者 <code>Light</code> 的引用，并在 <code>execute()</code> 方法中调用接收者的方法。</li><li><strong>接收者 <code>Light</code></strong>：它是执行具体操作的对象，包含了打开和关闭灯的方法。</li><li><strong>调用者 <code>RemoteControl</code></strong>：持有命令对象，并在合适的时机调用命令的 <code>execute()</code> 方法。它可以动态地设置不同的命令，从而执行不同的操作。</li><li><strong>客户端代码</strong>：客户端负责创建具体命令对象并将其传递给调用者。然后，调用者可以在不同时间点调用命令。</li></ol><h2 id="优点">优点</h2><ol><li><strong>解耦请求者与执行者</strong>：命令模式将请求的发送者和实际执行者解耦，使得调用者不需要知道具体操作的实现细节。</li><li><strong>支持撤销和重做操作</strong>：命令模式天然支持命令的记录和撤销操作，因为每个命令都是一个独立的对象，可以轻松保存和恢复。</li><li><strong>扩展性强</strong>：可以很容易地添加新的命令，扩展系统功能而无需修改现有代码。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>增加类的数量</strong>：每一个命令都需要一个类，这可能导致类数量急剧增加，增加了系统的复杂性。</li></ol><h2 id="与其他模式的对比">与其他模式的对比</h2><ol><li><strong>命令模式 vs 策略模式</strong><ul><li><strong>命令模式</strong>：将<strong>动作请求</strong>封装为对象，主要用于解耦请求的发送者与接收者，同时支持操作的撤销与重做。</li><li><strong>策略模式</strong>：将<strong>行为或算法</strong>封装为对象，主要用于替换不同的算法，以实现不同的行为。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-职责链模式</title>
    <link href="/2024/10/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>职责链模式</strong>（Chain of Responsibility Pattern）是一种行为型设计模式。它通过将请求沿着处理链传递，直到某个处理者处理该请求为止，从而避免了请求的发送者与接收者直接耦合。职责链模式允许多个对象都有机会处理请求，避免请求者与处理者之间的耦合关系，提高了系统的灵活性。</p><span id="more"></span><h1>职责链模式</h1><p>职责链模式的核心是<strong>处理者链</strong>，每个处理者对象包含对下一个处理者对象的引用，形成一条链。请求在链上传递，直到某个处理者对象处理它。</p><h2 id="组成">组成</h2><ol><li><strong>抽象处理者（Handler）</strong>：定义了处理请求的接口，通常包括一个 <code>handleRequest()</code> 方法和一个指向下一个处理者的引用（<code>nextHandler</code>）。</li><li><strong>具体处理者（ConcreteHandler）</strong>：实现抽象处理者的接口，具体处理请求。如果无法处理该请求，则将其传递给下一个处理者。</li><li><strong>客户端（Client）</strong>：向链中的第一个处理者提交请求，并不关心具体是哪个处理者处理了请求。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象处理者类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SupportHandler</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nextHandler</span> = <span class="literal">null</span>; <span class="comment">// 指向下一个处理者</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setNextHandler</span>(<span class="params">handler</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nextHandler</span> = handler; <span class="comment">// 设置下一个处理者</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handleRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overridden!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体处理者：处理技术支持请求</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TechSupportHandler</span> <span class="keyword">extends</span> <span class="title class_ inherited__">SupportHandler</span> &#123;</span><br><span class="line">    <span class="title function_">handleRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.<span class="property">type</span> === <span class="string">&#x27;tech&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;技术支持部门处理请求:&quot;</span>, request.<span class="property">content</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">nextHandler</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextHandler</span>.<span class="title function_">handleRequest</span>(request); <span class="comment">// 传递给下一个处理者</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;没有人能处理这个请求:&quot;</span>, request.<span class="property">content</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体处理者：处理账单问题请求</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BillingSupportHandler</span> <span class="keyword">extends</span> <span class="title class_ inherited__">SupportHandler</span> &#123;</span><br><span class="line">    <span class="title function_">handleRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.<span class="property">type</span> === <span class="string">&#x27;billing&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;账单部门处理请求:&quot;</span>, request.<span class="property">content</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">nextHandler</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextHandler</span>.<span class="title function_">handleRequest</span>(request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;没有人能处理这个请求:&quot;</span>, request.<span class="property">content</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体处理者：处理普通请求</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GeneralSupportHandler</span> <span class="keyword">extends</span> <span class="title class_ inherited__">SupportHandler</span> &#123;</span><br><span class="line">    <span class="title function_">handleRequest</span>(<span class="params">request</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (request.<span class="property">type</span> === <span class="string">&#x27;general&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;普通客服处理请求:&quot;</span>, request.<span class="property">content</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">nextHandler</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">nextHandler</span>.<span class="title function_">handleRequest</span>(request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;没有人能处理这个请求:&quot;</span>, request.<span class="property">content</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码：构建职责链并处理请求</span></span><br><span class="line"><span class="keyword">const</span> techSupport = <span class="keyword">new</span> <span class="title class_">TechSupportHandler</span>();</span><br><span class="line"><span class="keyword">const</span> billingSupport = <span class="keyword">new</span> <span class="title class_">BillingSupportHandler</span>();</span><br><span class="line"><span class="keyword">const</span> generalSupport = <span class="keyword">new</span> <span class="title class_">GeneralSupportHandler</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置职责链顺序：普通客服 -&gt; 技术支持 -&gt; 账单支持</span></span><br><span class="line">generalSupport.<span class="title function_">setNextHandler</span>(techSupport);</span><br><span class="line">techSupport.<span class="title function_">setNextHandler</span>(billingSupport);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建请求并传递给链上的第一个处理者</span></span><br><span class="line"><span class="keyword">const</span> request1 = &#123; <span class="attr">type</span>: <span class="string">&#x27;tech&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;我的电脑无法连接网络&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> request2 = &#123; <span class="attr">type</span>: <span class="string">&#x27;billing&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;我需要查看我的账单&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> request3 = &#123; <span class="attr">type</span>: <span class="string">&#x27;general&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;我想了解一下你们的服务&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> request4 = &#123; <span class="attr">type</span>: <span class="string">&#x27;unknown&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;未知的请求&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由普通客服开始处理请求</span></span><br><span class="line">generalSupport.<span class="title function_">handleRequest</span>(request1); <span class="comment">// 输出：技术支持部门处理请求: 我的电脑无法连接网络</span></span><br><span class="line">generalSupport.<span class="title function_">handleRequest</span>(request2); <span class="comment">// 输出：账单部门处理请求: 我需要查看我的账单</span></span><br><span class="line">generalSupport.<span class="title function_">handleRequest</span>(request3); <span class="comment">// 输出：普通客服处理请求: 我想了解一下你们的服务</span></span><br><span class="line">generalSupport.<span class="title function_">handleRequest</span>(request4); <span class="comment">// 输出：没有人能处理这个请求: 未知的请求</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>抽象处理者 <code>SupportHandler</code></strong>：它定义了处理请求的接口 <code>handleRequest()</code>，并包含了一个指向下一个处理者的引用 <code>nextHandler</code>。<code>setNextHandler()</code> 用于设置链中的下一个处理者。</li><li><strong>具体处理者 <code>TechSupportHandler</code>、<code>BillingSupportHandler</code> 和 <code>GeneralSupportHandler</code></strong>：这些具体类实现了 <code>handleRequest()</code> 方法，根据请求类型处理不同的请求。如果当前处理者无法处理请求，则将请求传递给下一个处理者。</li><li><strong>客户端代码</strong>：客户端代码创建了不同的请求，并将请求传递给链中的第一个处理者 <code>generalSupport</code>。如果 <code>generalSupport</code> 无法处理请求，它会传递给下一个处理者 <code>techSupport</code>，依此类推，直到请求被处理或到达链的末端。</li></ol><h2 id="优点">优点</h2><ol><li><strong>请求与处理者解耦</strong>：请求的发送者与处理者不需要直接联系，可以动态组合处理者链，灵活性高。</li><li><strong>链的动态组合</strong>：可以动态地添加或删除处理者，从而控制请求的处理流程。</li><li><strong>符合开闭原则</strong>：可以通过新增具体处理者来扩展系统，而不影响已有的处理者。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>请求可能得不到处理</strong>：如果没有合适的处理者，可能导致请求未被处理。</li><li><strong>调试困难</strong>：请求沿着链传递，可能出现链条过长或过复杂，导致调试和跟踪问题变得困难。</li></ol><h2 id="与其他设计模式的对比">与其他设计模式的对比</h2><ol><li><strong>职责链模式 vs 观察者模式</strong>：职责链模式是一种<strong>请求处理</strong>的模式，处理者按顺序依次接收到请求；而观察者模式是一种<strong>事件通知</strong>模式，所有观察者会同时收到通知。</li><li><strong>职责链模式 vs 装饰模式</strong>：职责链模式强调的是<strong>多个对象按顺序处理请求</strong>；而装饰模式主要用于<strong>动态增强对象功能</strong>，通常每个装饰器都会处理或增强对象的行为。</li><li><strong>职责链模式 vs 中介者模式</strong>：职责链模式中，每个处理者只关心它能处理的部分并将请求传递下去，而中介者模式由一个中央控制结构来负责协调各个对象之间的交互。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-迭代器模式</title>
    <link href="/2024/10/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>迭代器模式</strong>（Iterator Pattern）是一种行为型设计模式，它提供了一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。迭代器模式将遍历聚合对象的责任交给迭代器，而不是聚合对象本身。</p><span id="more"></span><h1>迭代器模式</h1><h2 id="组成">组成</h2><ol><li><strong>迭代器接口（Iterator）</strong>：定义了遍历元素的方法，通常包括 <code>hasNext()</code> 和 <code>next()</code> 等方法，用于检查是否有下一个元素以及获取下一个元素。</li><li><strong>具体迭代器（Concrete Iterator）</strong>：实现了迭代器接口，负责具体的元素遍历操作。它维护当前遍历的状态（例如当前索引）。</li><li><strong>聚合接口（Aggregate）</strong>：定义一个集合的接口，通常包括 <code>createIterator()</code> 方法，用于返回一个迭代器对象。</li><li><strong>具体聚合（Concrete Aggregate）</strong>：实现聚合接口，返回该集合的具体迭代器实例。可以是不同的数据结构，例如数组、链表等。</li><li><strong>客户端（Client）</strong>：通过迭代器接口访问集合中的元素，而不需要知道集合的具体实现。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迭代器接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="title function_">hasNext</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overridden!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overridden!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体迭代器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookIterator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Iterator</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">books</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">books</span> = books;  <span class="comment">// 书籍集合</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">index</span> = <span class="number">0</span>;      <span class="comment">// 当前迭代的索引</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">hasNext</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">index</span> &lt; <span class="variable language_">this</span>.<span class="property">books</span>.<span class="property">length</span>;  <span class="comment">// 是否还有下一个元素</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">hasNext</span>() ? <span class="variable language_">this</span>.<span class="property">books</span>[<span class="variable language_">this</span>.<span class="property">index</span>++] : <span class="literal">null</span>;  <span class="comment">// 返回当前元素，并指向下一个</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚合接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Aggregate</span> &#123;</span><br><span class="line">    <span class="title function_">createIterator</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overridden!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体聚合类：书籍集合</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookCollection</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Aggregate</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">books</span> = [];  <span class="comment">// 保存书籍的数组</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addBook</span>(<span class="params">book</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">books</span>.<span class="title function_">push</span>(book);  <span class="comment">// 添加书籍</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">createIterator</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BookIterator</span>(<span class="variable language_">this</span>.<span class="property">books</span>);  <span class="comment">// 返回书籍的迭代器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码：使用迭代器遍历书籍</span></span><br><span class="line"><span class="keyword">const</span> collection = <span class="keyword">new</span> <span class="title class_">BookCollection</span>();</span><br><span class="line">collection.<span class="title function_">addBook</span>(<span class="string">&quot;Book 1: JavaScript Basics&quot;</span>);</span><br><span class="line">collection.<span class="title function_">addBook</span>(<span class="string">&quot;Book 2: Design Patterns&quot;</span>);</span><br><span class="line">collection.<span class="title function_">addBook</span>(<span class="string">&quot;Book 3: Web Development&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator = collection.<span class="title function_">createIterator</span>();</span><br><span class="line"><span class="keyword">while</span> (iterator.<span class="title function_">hasNext</span>()) &#123;</span><br><span class="line">    <span class="keyword">const</span> book = iterator.<span class="title function_">next</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(book);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">// Book 1: JavaScript Basics</span></span><br><span class="line"><span class="comment">// Book 2: Design Patterns</span></span><br><span class="line"><span class="comment">// Book 3: Web Development</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>迭代器接口 <code>Iterator</code></strong>：它定义了遍历方法，必须有 <code>hasNext()</code> 和 <code>next()</code> 两个方法，用来检测是否有下一个元素并返回下一个元素。</li><li><strong>具体迭代器 <code>BookIterator</code></strong>：它实现了迭代器接口，内部维护了一个书籍数组 <code>books</code> 和当前的索引 <code>index</code>。<code>hasNext()</code> 用来判断是否还有书籍没有遍历完，<code>next()</code> 返回当前书籍并将索引移动到下一个位置。</li><li><strong>聚合接口 <code>Aggregate</code></strong>：它定义了 <code>createIterator()</code> 方法，目的是返回一个用于遍历集合的迭代器。</li><li><strong>具体聚合类 <code>BookCollection</code></strong>：这是一个包含书籍的集合类，内部使用数组存储书籍，并实现了 <code>createIterator()</code> 方法，返回该集合的具体迭代器 <code>BookIterator</code>。</li><li><strong>客户端代码</strong>：客户端通过 <code>createIterator()</code> 获取迭代器，并通过迭代器的 <code>hasNext()</code> 和 <code>next()</code> 方法依次遍历集合中的书籍。</li></ol><h2 id="优点">优点</h2><ol><li><strong>分离遍历算法与集合结构</strong>：迭代器模式将遍历的算法与集合的内部结构分离，集合本身不需要实现遍历功能，遵循了<strong>单一职责原则</strong>。</li><li><strong>一致性</strong>：客户端可以使用相同的接口遍历不同类型的集合对象，实现了一种统一的遍历机制。</li><li><strong>灵活性</strong>：可以根据需要扩展不同的迭代方式，例如正序、倒序遍历等。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>增加复杂性</strong>：如果集合对象本身很简单，使用迭代器模式可能显得过于复杂和不必要。</li><li><strong>遍历状态可能需要存储</strong>：在某些情况下，遍历需要存储额外的状态信息，如当前索引等。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-观察者模式</title>
    <link href="/2024/10/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>观察者模式</strong>（Observer Pattern）是一种行为型设计模式，它定义了一种一对多的依赖关系，使得当一个对象（主题）状态发生变化时，所有依赖于它的对象（观察者）都会得到通知并自动更新。这种模式通常用于实现事件处理系统。</p><span id="more"></span><h1>观察者模式</h1><h2 id="组成">组成</h2><ol><li><strong>主题（Subject）</strong>：被观察的对象，维护一系列观察者，并在状态变化时通知它们。</li><li><strong>观察者（Observer）</strong>：对主题感兴趣的对象，当主题的状态发生变化时，观察者会收到通知。</li><li><strong>具体主题（ConcreteSubject）</strong>：实现了主题接口的具体类，包含状态变化的逻辑。</li><li><strong>具体观察者（ConcreteObserver）</strong>：实现了观察者接口的具体类，定义在主题变化时如何响应。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主题接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addObserver</span>(<span class="params">observer</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">push</span>(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">removeObserver</span>(<span class="params">observer</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span> = <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">obs</span> =&gt;</span> obs !== observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">notifyObservers</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> observer.<span class="title function_">update</span>(<span class="variable language_">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体主题：新闻发布者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewsPublisher</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Subject</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">news</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setNews</span>(<span class="params">news</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">news</span> = news;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">notifyObservers</span>();  <span class="comment">// 通知所有观察者</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="title function_">update</span>(<span class="params">subject</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体观察者：读者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Reader</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Observer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">update</span>(<span class="params">subject</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> received news: <span class="subst">$&#123;subject.news&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">const</span> newsPublisher = <span class="keyword">new</span> <span class="title class_">NewsPublisher</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reader1 = <span class="keyword">new</span> <span class="title class_">Reader</span>(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> reader2 = <span class="keyword">new</span> <span class="title class_">Reader</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"></span><br><span class="line">newsPublisher.<span class="title function_">addObserver</span>(reader1);</span><br><span class="line">newsPublisher.<span class="title function_">addObserver</span>(reader2);</span><br><span class="line">newsPublisher.<span class="title function_">setNews</span>(<span class="string">&quot;New JavaScript features released!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除观察者</span></span><br><span class="line">newsPublisher.<span class="title function_">removeObserver</span>(reader1);</span><br><span class="line">newsPublisher.<span class="title function_">setNews</span>(<span class="string">&quot;New CSS features released!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">// Alice received news: New JavaScript features released!</span></span><br><span class="line"><span class="comment">// Bob received news: New JavaScript features released!</span></span><br><span class="line"><span class="comment">// Bob received news: New CSS features released!</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>主题接口 <code>Subject</code></strong>：维护一个观察者列表，提供添加、移除观察者的方法，以及通知观察者的方法 <code>notifyObservers()</code>。</li><li><strong>具体主题 <code>NewsPublisher</code></strong>：实现了 <code>Subject</code> 接口，包含一个 <code>setNews()</code> 方法，更新新闻内容并通知所有观察者。</li><li><strong>观察者接口 <code>Observer</code></strong>：定义了 <code>update()</code> 方法，观察者需要实现该方法来处理主题的更新。</li><li><strong>具体观察者 <code>Reader</code></strong>：实现了观察者接口，定义了如何响应主题更新。在接收到新闻时输出通知。</li><li><strong>客户端代码</strong>：创建一个新闻发布者和几个读者，订阅新闻。当新闻更新时，所有观察者都会收到通知。</li></ol><h2 id="优点">优点</h2><ol><li><strong>松耦合</strong>：主题与观察者之间的依赖关系是松散的，主题不需要知道具体的观察者细节，增加新的观察者不会影响已有代码。</li><li><strong>动态关系</strong>：观察者可以在运行时动态添加或移除，无需修改主题的代码。</li><li><strong>广泛适用</strong>：非常适合实现广播系统、事件处理系统等场景。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>可能导致性能问题</strong>：如果观察者数量很多，状态变化时会通知所有观察者，可能导致性能下降。</li><li><strong>更新顺序不可控</strong>：当多个观察者响应同一事件时，无法控制它们的更新顺序。</li></ol><h1>发布订阅模式</h1><p><strong>发布/订阅模式</strong>（Publish/Subscribe Pattern）是一种消息传递模式，它允许系统中的组件以松耦合的方式进行通信。发布者（Publisher）发送消息，而订阅者（Subscriber）接收感兴趣的消息。中间不需要直接的依赖关系，发布者与订阅者通过一个消息通道（Event Bus）进行交互。</p><h2 id="组成-2">组成</h2><ol><li><strong>发布者（Publisher）</strong>：发布消息的组件。</li><li><strong>订阅者（Subscriber）</strong>：对特定消息感兴趣的组件，负责接收和处理消息。</li><li><strong>事件总线（Event Bus）</strong>：负责管理发布者和订阅者之间的关系，传递消息。</li></ol><h2 id="代码实现-2">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 事件总线类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EventBus</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscribers</span> = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅</span></span><br><span class="line">    <span class="title function_">subscribe</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">subscribers</span>[event]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">subscribers</span>[event] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscribers</span>[event].<span class="title function_">push</span>(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消订阅</span></span><br><span class="line">    <span class="title function_">unsubscribe</span>(<span class="params">event, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">subscribers</span>[event]) <span class="keyword">return</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscribers</span>[event] = <span class="variable language_">this</span>.<span class="property">subscribers</span>[event].<span class="title function_">filter</span>(<span class="function"><span class="params">sub</span> =&gt;</span> sub !== callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布</span></span><br><span class="line">    <span class="title function_">publish</span>(<span class="params">event, data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">subscribers</span>[event]) <span class="keyword">return</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subscribers</span>[event].<span class="title function_">forEach</span>(<span class="function"><span class="params">callback</span> =&gt;</span> <span class="title function_">callback</span>(data));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> <span class="title class_">EventBus</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅者</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">subscriber1</span> = (<span class="params">data</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Subscriber 1 received: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">subscriber2</span> = (<span class="params">data</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Subscriber 2 received: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件</span></span><br><span class="line">eventBus.<span class="title function_">subscribe</span>(<span class="string">&quot;news&quot;</span>, subscriber1);</span><br><span class="line">eventBus.<span class="title function_">subscribe</span>(<span class="string">&quot;news&quot;</span>, subscriber2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布事件</span></span><br><span class="line">eventBus.<span class="title function_">publish</span>(<span class="string">&quot;news&quot;</span>, <span class="string">&quot;New JavaScript features released!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消订阅</span></span><br><span class="line">eventBus.<span class="title function_">unsubscribe</span>(<span class="string">&quot;news&quot;</span>, subscriber1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布事件</span></span><br><span class="line">eventBus.<span class="title function_">publish</span>(<span class="string">&quot;news&quot;</span>, <span class="string">&quot;New CSS features released!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">// Subscriber 1 received: New JavaScript features released!</span></span><br><span class="line"><span class="comment">// Subscriber 2 received: New JavaScript features released!</span></span><br><span class="line"><span class="comment">// Subscriber 2 received: New CSS features released!</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>事件总线类 <code>EventBus</code></strong>：维护一个订阅者列表，提供 <code>subscribe()</code>、<code>unsubscribe()</code> 和 <code>publish()</code> 方法来管理消息的发布和订阅。</li><li><strong>订阅方法 <code>subscribe()</code></strong>：注册订阅者，添加到指定事件的回调列表。</li><li><strong>取消订阅方法 <code>unsubscribe()</code></strong>：移除指定事件的订阅者。</li><li><strong>发布方法 <code>publish()</code></strong>：触发事件，调用所有订阅该事件的回调函数，并传递数据。</li><li><strong>客户端代码</strong>：创建一个事件总线实例，订阅并发布事件，展示了如何添加和移除订阅者。</li></ol><h2 id="优点-2">优点</h2><ol><li><strong>松耦合</strong>：发布者和订阅者之间不直接依赖，增强了系统的灵活性和可维护性。</li><li><strong>动态交互</strong>：可以在运行时动态添加或移除订阅者，无需修改发布者的代码。</li><li><strong>可扩展性强</strong>：支持多个发布者和多个订阅者的消息传递，适合复杂的事件处理系统。</li></ol><h2 id="缺点-2">缺点</h2><ol><li><strong>性能开销</strong>：如果订阅者数量较多，消息发送时可能会产生性能开销。</li><li><strong>调试困难</strong>：由于发布者和订阅者之间没有直接的连接，跟踪消息流动可能变得复杂。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-模板方法模式</title>
    <link href="/2024/10/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>模板方法模式</strong>（Template Method Pattern）是一种行为型设计模式，它定义了一个操作中的算法骨架，将某些步骤的实现延迟到子类中。通过模板方法，子类可以重新定义算法中的某些步骤，而不改变算法的结构。这个模式的核心思想是<strong>将不变的行为（算法的步骤和结构）放在基类中，将可变的行为（某些具体的步骤实现）放在子类中去实现</strong>。这样可以最大限度地复用代码，且保持代码的灵活性。</p><span id="more"></span><h1>模板方法模式</h1><h2 id="组成">组成</h2><ol><li><strong>抽象类（Abstract Class）</strong>：定义了算法的骨架，包含模板方法和一些具体方法。模板方法通常是一个公共方法，它定义了算法的步骤，并调用某些抽象方法，由子类去实现这些方法。</li><li><strong>具体类（Concrete Class）</strong>：继承抽象类，并实现抽象类中的抽象方法，完成算法的具体步骤。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类：饮品类，定义了制作饮品的步骤（模板方法）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Beverage</span> &#123;</span><br><span class="line">    <span class="comment">// 模板方法，定义了制作饮品的流程</span></span><br><span class="line">    <span class="title function_">prepareRecipe</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">boilWater</span>();         <span class="comment">// 1. 烧水</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">brew</span>();              <span class="comment">// 2. 冲泡（茶或咖啡）</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">pourInCup</span>();         <span class="comment">// 3. 倒入杯中</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addCondiments</span>();     <span class="comment">// 4. 添加调料（可选）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">boilWater</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Boiling water&quot;</span>);  <span class="comment">// 烧水</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">pourInCup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Pouring into cup&quot;</span>);  <span class="comment">// 倒入杯中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这些是需要子类实现的抽象方法</span></span><br><span class="line">    <span class="title function_">brew</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addCondiments</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体类：咖啡类，具体实现了冲泡和添加调料的步骤</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coffee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Beverage</span> &#123;</span><br><span class="line">    <span class="title function_">brew</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Dripping Coffee through filter&quot;</span>);  <span class="comment">// 冲泡咖啡</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addCondiments</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Adding Sugar and Milk&quot;</span>);  <span class="comment">// 添加糖和牛奶</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体类：茶类，具体实现了冲泡和添加调料的步骤</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tea</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Beverage</span> &#123;</span><br><span class="line">    <span class="title function_">brew</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Steeping the tea&quot;</span>);  <span class="comment">// 泡茶</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addCondiments</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Adding Lemon&quot;</span>);  <span class="comment">// 加柠檬</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 制作咖啡</span></span><br><span class="line"><span class="keyword">const</span> coffee = <span class="keyword">new</span> <span class="title class_">Coffee</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Making coffee:&quot;</span>);</span><br><span class="line">coffee.<span class="title function_">prepareRecipe</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 制作茶</span></span><br><span class="line"><span class="keyword">const</span> tea = <span class="keyword">new</span> <span class="title class_">Tea</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\nMaking tea:&quot;</span>);</span><br><span class="line">tea.<span class="title function_">prepareRecipe</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">// Making coffee:</span></span><br><span class="line"><span class="comment">// Boiling water</span></span><br><span class="line"><span class="comment">// Dripping Coffee through filter</span></span><br><span class="line"><span class="comment">// Pouring into cup</span></span><br><span class="line"><span class="comment">// Adding Sugar and Milk</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Making tea:</span></span><br><span class="line"><span class="comment">// Boiling water</span></span><br><span class="line"><span class="comment">// Steeping the tea</span></span><br><span class="line"><span class="comment">// Pouring into cup</span></span><br><span class="line"><span class="comment">// Adding Lemon</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>抽象类 <code>Beverage</code></strong>：<code>Beverage</code> 类是一个包含模板方法的抽象类，定义了制作饮品的流程 <code>prepareRecipe()</code>，这是模板方法，它定义了饮品的制作步骤（烧水、冲泡、倒入杯中、添加调料）。其中 <code>brew()</code> 和 <code>addCondiments()</code> 是需要在子类中实现的抽象方法。</li><li><strong>具体类 <code>Coffee</code> 和 <code>Tea</code></strong>：这两个类继承了 <code>Beverage</code>，并实现了 <code>brew()</code> 和 <code>addCondiments()</code> 方法，分别定义了咖啡和茶的具体冲泡和添加调料的过程。</li><li><strong>模板方法 <code>prepareRecipe()</code></strong>：在每个具体类中调用了模板方法 <code>prepareRecipe()</code>，它定义了制作饮品的整体步骤。而每个步骤中的具体实现（如冲泡、添加调料）是由子类来完成的。</li></ol><h2 id="优点">优点</h2><ol><li><strong>代码复用</strong>：通过将不变的部分放在基类中，不同的子类可以共享算法的公共部分，避免代码重复。</li><li><strong>扩展灵活</strong>：通过在子类中重写模板方法中的部分步骤，可以灵活地扩展算法的行为，而不影响其他子类。</li><li><strong>遵循开闭原则</strong>：通过增加新的子类，可以扩展模板方法的功能，而不修改已有的代码。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>子类过多</strong>：随着系统的复杂度增加，可能会导致创建过多的子类，增加了系统的复杂性。</li><li><strong>控制力减弱</strong>：子类必须遵循父类定义的算法骨架，无法改变算法的整体结构。</li></ol><h2 id="与其他模式的对比">与其他模式的对比</h2><ol><li><strong>模板方法模式 vs 策略模式</strong>：模板方法模式和策略模式都涉及行为的扩展和变化，但它们的关注点不同。模板方法模式在父类中定义了算法的骨架，子类只能改变算法的某些步骤；而策略模式是通过将算法完全封装在不同的策略类中，允许客户端动态选择不同的算法。</li><li><strong>模板方法模式 vs 工厂方法模式</strong>：工厂方法模式关注的是对象的创建过程，而模板方法模式关注的是行为的执行过程。工厂方法用于创建对象，而模板方法用于定义算法的执行步骤。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-策略模式</title>
    <link href="/2024/10/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>策略模式</strong>（Strategy Pattern）是一种<strong>行为型设计模式</strong>，它定义了一系列算法，并将每种算法封装起来，使得它们可以互相替换使用。策略模式允许算法独立于使用它的客户端变化，从而提高了系统的灵活性。</p><span id="more"></span><h1>策略模式</h1><p>策略模式的核心思想是<strong>将不同的算法或行为封装到独立的策略类中</strong>，并且让这些策略类可以互换。客户端代码无需关心具体的策略实现，只需要与抽象策略接口交互。</p><h2 id="组成">组成</h2><ol><li><strong>策略接口（Strategy）</strong>：定义算法的通用接口。</li><li><strong>具体策略（Concrete Strategy）</strong>：实现策略接口的不同算法。</li><li><strong>上下文（Context）</strong>：持有对某个策略的引用，并且客户端通过上下文来调用具体的策略算法。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体策略函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">creditCardPayment</span> = (<span class="params">amount</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Paying <span class="subst">$&#123;amount&#125;</span> using Credit Card`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">payPalPayment</span> = (<span class="params">amount</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Paying <span class="subst">$&#123;amount&#125;</span> using PayPal`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">processPayment</span> = (<span class="params">strategy, amount</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> strategy === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">strategy</span>(amount);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Invalid payment strategy&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用策略模式</span></span><br><span class="line"><span class="title function_">processPayment</span>(creditCardPayment, <span class="number">100</span>);  <span class="comment">// Paying 100 using Credit Card</span></span><br><span class="line"><span class="title function_">processPayment</span>(payPalPayment, <span class="number">200</span>);       <span class="comment">// Paying 200 using PayPal</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>策略函数</strong>：每个支付方式定义为一个普通函数，接收金额作为参数。</li><li><strong>上下文函数</strong>：<code>processPayment</code> 函数接收一个策略函数和金额，如果传入的策略是有效的函数，则调用它。</li><li><strong>简单调用</strong>：直接调用 <code>processPayment</code>，传入所需的策略和参数，无需实例化任何类。</li></ol><h2 id="优点">优点</h2><ol><li><strong>解耦算法与客户端</strong>：策略对象与调用逻辑解耦，客户端只需要知道如何使用策略对象即可。</li><li><strong>易于扩展</strong>：新增策略类时，无需修改现有代码，只需实现新的策略接口。</li><li><strong>可复用性</strong>：策略对象可以在不同的场景中被复用，避免了重复编写相似的代码。</li><li><strong>遵循开闭原则</strong>：支持设计模式 “开发-封闭原则“ ，算法封装在独立的 Strategy 中，易于维护和扩展。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>类的数量增加</strong>：每个策略都需要定义为一个独立的类，当策略数量多时，类的数量也会增多。</li><li><strong>客户端需要了解策略</strong>：客户端需要了解可用的策略，以便选择合适的策略。</li></ol><h2 id="与其他模式的对比">与其他模式的对比</h2><ol><li><strong>策略模式 vs 状态模式</strong>：两者的结构相似，但策略模式关注的是算法的选择，而状态模式关注的是对象的状态变化。策略模式中的策略可以在运行时自由切换，而状态模式则是在对象状态变化时，自动切换相关行为。</li><li><strong>策略模式 vs 模板方法模式</strong>：模板方法模式定义了一个算法的骨架，而将某些步骤留给子类实现；策略模式则是完全将算法分离，使得策略类之间可以互换。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-享元模式</title>
    <link href="/2024/10/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/15/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>享元模式</strong>（Flyweight Pattern）是一种结构型设计模式，旨在通过<strong>共享对象</strong>来减少内存的使用，以便在大量对象需要被创建、渲染或存储的情况下，优化内存消耗。</p><span id="more"></span><h1>享元模式</h1><p>享元模式通过将对象的<strong>内在状态</strong>（共享部分）和<strong>外在状态</strong>（不共享部分）分离，将内在状态存储在共享对象中，从而减少内存消耗。每个对象的外在状态在使用时可以动态提供，不需要与对象本身存储在一起。</p><ol><li><strong>内在状态</strong>：对象中可以共享的部分，通常是不变的，存储在享元对象中。</li><li><strong>外在状态</strong>：对象的非共享部分，通常是变化的，在每次使用时传递给享元对象。</li></ol><h2 id="组成">组成</h2><ol><li><strong>享元接口（Flyweight）</strong>：定义了享元对象的基本行为。通常包含操作方法和设置外在状态的方法。</li><li><strong>具体享元类（Concrete Flyweight）</strong>：实现享元接口，存储享元对象的内在状态，并提供处理外在状态的方法。</li><li><strong>享元工厂类（Flyweight Factory）</strong>：负责管理享元对象的创建和共享逻辑。工厂类确保客户端获取的享元对象是共享的。</li><li><strong>客户端（Client）</strong>：客户端会持有外在状态，并在需要时与享元对象配合使用。客户端负责将外在状态传递给享元对象。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 享元接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CharacterFlyweight</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">fontFamily, fontSize, color</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fontFamily</span> = fontFamily;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fontSize</span> = fontSize;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color; <span class="comment">// 内在状态</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params">character, positionX, positionY</span>) &#123;</span><br><span class="line">        <span class="comment">// 外在状态：字符内容（character）和位置（positionX, positionY）</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`渲染字符 &#x27;<span class="subst">$&#123;character&#125;</span>&#x27;，字体: <span class="subst">$&#123;<span class="variable language_">this</span>.fontFamily&#125;</span>, 大小: <span class="subst">$&#123;<span class="variable language_">this</span>.fontSize&#125;</span>px, 颜色: <span class="subst">$&#123;<span class="variable language_">this</span>.color&#125;</span>，位置: (<span class="subst">$&#123;positionX&#125;</span>, <span class="subst">$&#123;positionY&#125;</span>)`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 享元工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlyweightFactory</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">flyweights</span> = &#123;&#125;; <span class="comment">// 存储共享的享元对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getFlyweight</span>(<span class="params">fontFamily, fontSize, color</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> key = <span class="string">`<span class="subst">$&#123;fontFamily&#125;</span>_<span class="subst">$&#123;fontSize&#125;</span>_<span class="subst">$&#123;color&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">flyweights</span>[key]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">flyweights</span>[key] = <span class="keyword">new</span> <span class="title class_">CharacterFlyweight</span>(fontFamily, fontSize, color);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">flyweights</span>[key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getFlyweightCount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>.<span class="property">flyweights</span>).<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DocumentEditor</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">characters</span> = []; <span class="comment">// 存储字符及其外在状态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">factory</span> = <span class="keyword">new</span> <span class="title class_">FlyweightFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">addCharacter</span>(<span class="params">char, fontFamily, fontSize, color, positionX, positionY</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> flyweight = <span class="variable language_">this</span>.<span class="property">factory</span>.<span class="title function_">getFlyweight</span>(fontFamily, fontSize, color);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">characters</span>.<span class="title function_">push</span>(&#123; flyweight, char, positionX, positionY &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">renderDocument</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">characters</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">            entry.<span class="property">flyweight</span>.<span class="title function_">render</span>(entry.<span class="property">char</span>, entry.<span class="property">positionX</span>, entry.<span class="property">positionY</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端使用</span></span><br><span class="line"><span class="keyword">const</span> editor = <span class="keyword">new</span> <span class="title class_">DocumentEditor</span>();</span><br><span class="line">editor.<span class="title function_">addCharacter</span>(<span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;black&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">editor.<span class="title function_">addCharacter</span>(<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;black&#x27;</span>, <span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">editor.<span class="title function_">addCharacter</span>(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;black&#x27;</span>, <span class="number">20</span>, <span class="number">0</span>);</span><br><span class="line">editor.<span class="title function_">addCharacter</span>(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;black&#x27;</span>, <span class="number">30</span>, <span class="number">0</span>);</span><br><span class="line">editor.<span class="title function_">addCharacter</span>(<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;black&#x27;</span>, <span class="number">40</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用不同的字体样式</span></span><br><span class="line">editor.<span class="title function_">addCharacter</span>(<span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;Times New Roman&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="number">50</span>, <span class="number">0</span>);</span><br><span class="line">editor.<span class="title function_">addCharacter</span>(<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;Times New Roman&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="number">60</span>, <span class="number">0</span>);</span><br><span class="line">editor.<span class="title function_">addCharacter</span>(<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;Times New Roman&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="number">70</span>, <span class="number">0</span>);</span><br><span class="line">editor.<span class="title function_">addCharacter</span>(<span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;Times New Roman&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="number">80</span>, <span class="number">0</span>);</span><br><span class="line">editor.<span class="title function_">addCharacter</span>(<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;Times New Roman&#x27;</span>, <span class="number">14</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="number">90</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染文档</span></span><br><span class="line">editor.<span class="title function_">renderDocument</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`享元对象数量: <span class="subst">$&#123;editor.factory.getFlyweightCount()&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// 渲染字符 &#x27;H&#x27;，字体: Arial, 大小: 12px, 颜色: black，位置: (0, 0)</span></span><br><span class="line"><span class="comment">// 渲染字符 &#x27;e&#x27;，字体: Arial, 大小: 12px, 颜色: black，位置: (10, 0)</span></span><br><span class="line"><span class="comment">// 渲染字符 &#x27;l&#x27;，字体: Arial, 大小: 12px, 颜色: black，位置: (20, 0)</span></span><br><span class="line"><span class="comment">// 渲染字符 &#x27;l&#x27;，字体: Arial, 大小: 12px, 颜色: black，位置: (30, 0)</span></span><br><span class="line"><span class="comment">// 渲染字符 &#x27;o&#x27;，字体: Arial, 大小: 12px, 颜色: black，位置: (40, 0)</span></span><br><span class="line"><span class="comment">// 渲染字符 &#x27;W&#x27;，字体: Times New Roman, 大小: 14px, 颜色: blue，位置: (50, 0)</span></span><br><span class="line"><span class="comment">// 渲染字符 &#x27;o&#x27;，字体: Times New Roman, 大小: 14px, 颜色: blue，位置: (60, 0)</span></span><br><span class="line"><span class="comment">// 渲染字符 &#x27;r&#x27;，字体: Times New Roman, 大小: 14px, 颜色: blue，位置: (70, 0)</span></span><br><span class="line"><span class="comment">// 渲染字符 &#x27;l&#x27;，字体: Times New Roman, 大小: 14px, 颜色: blue，位置: (80, 0)</span></span><br><span class="line"><span class="comment">// 渲染字符 &#x27;d&#x27;，字体: Times New Roman, 大小: 14px, 颜色: blue，位置: (90, 0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 享元对象数量: 2</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>享元类 <code>CharacterFlyweight</code></strong>：这个类代表了一个字符的共享部分，即字体、字号和颜色。它实现了 <code>render()</code> 方法来渲染字符，外在状态（字符内容和位置）是在每次渲染时提供的。</li><li><strong>享元工厂类 <code>FlyweightFactory</code></strong>：享元工厂负责创建和管理共享的享元对象。工厂通过字体、字号和颜色生成一个唯一的键，并根据这个键来缓存并复用共享对象。</li><li><strong>客户端 <code>DocumentEditor</code></strong>：客户端负责维护字符对象的外在状态（如字符内容和位置）。当需要添加字符时，它会从工厂获取享元对象，并存储外在状态。</li><li><strong>享元对象的复用</strong>：从输出结果可以看到，多个相同样式的字符（如 <code>H</code>, <code>e</code>, <code>l</code>, <code>o</code> 等）使用了相同的享元对象，而不同样式的字符（如 <code>W</code>, <code>o</code>, <code>r</code>, <code>l</code>, <code>d</code> 等）使用了另一个享元对象。</li></ol><h2 id="优点">优点</h2><ol><li><strong>减少内存消耗</strong>：通过共享大量相同的对象，避免创建重复的对象，极大降低了内存使用。</li><li><strong>提升性能</strong>：在对象重复率较高的情况下，享元模式通过共享相同的对象，减少了对象的创建开销，提高了系统的性能。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>系统复杂性增加</strong>：由于需要区分内在状态和外在状态，并通过享元工厂管理对象的共享，增加了系统的设计和实现复杂性。</li><li><strong>需要精确分析</strong>：享元模式的效果依赖于共享对象的高重复率。如果对象的种类过多，享元模式的内存节约效果会减弱。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-组合模式</title>
    <link href="/2024/10/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>组合模式</strong>（Composite Pattern）是一种结构型设计模式，用于将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户可以以一致的方式处理<strong>单个对象</strong>和<strong>对象的组合</strong>，即无论处理的是单个对象还是组合对象，都具有相同的操作接口。</p><span id="more"></span><h1>组合模式</h1><h2 id="组成">组成</h2><ol><li><strong>组件（Component）</strong>：定义了组合对象和叶子对象的共有接口，通常包括一些操作方法（如<code>add()</code>、<code>remove()</code>等）和执行方法（如<code>operation()</code>）。</li><li><strong>叶子节点（Leaf）</strong>：代表树结构的叶节点，叶节点是树的最小组成部分，它没有子节点。叶子节点通常只实现组件的执行方法，不需要实现添加、删除子节点的方法。</li><li><strong>组合对象（Composite）</strong>：它代表了有子节点的对象，也就是“部分-整体”结构中的“整体”。组合对象可以包含叶子节点或其他组合对象，实现组件接口中的所有操作，并能够操作其包含的子对象（如增加、删除和遍历子节点）。</li><li><strong>客户端（Client）</strong>：通过组件接口与树形结构的对象进行交互，客户端不需要关心对象是叶子节点还是组合对象。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件类：定义文件和文件夹的共有接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileSystemComponent</span> &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params">component</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unsupported operation on this component.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">component</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unsupported operation on this component.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unsupported operation on this component.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unsupported operation on this component.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">display</span>(<span class="params">indent = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unsupported operation on this component.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 叶子节点：文件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">File</span> <span class="keyword">extends</span> <span class="title class_ inherited__">FileSystemComponent</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, size</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">size</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">display</span>(<span class="params">indent = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;indent&#125;</span>File: <span class="subst">$&#123;<span class="variable language_">this</span>.getName()&#125;</span> (<span class="subst">$&#123;<span class="variable language_">this</span>.getSize()&#125;</span>KB)`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合对象：文件夹</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Directory</span> <span class="keyword">extends</span> <span class="title class_ inherited__">FileSystemComponent</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">children</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">add</span>(<span class="params">component</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">children</span>.<span class="title function_">push</span>(component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">remove</span>(<span class="params">component</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">children</span> = <span class="variable language_">this</span>.<span class="property">children</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">child</span> =&gt;</span> child !== component);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">children</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">totalSize, child</span>) =&gt;</span> totalSize + child.<span class="title function_">getSize</span>(), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">display</span>(<span class="params">indent = <span class="string">&#x27;&#x27;</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;indent&#125;</span>Directory: <span class="subst">$&#123;<span class="variable language_">this</span>.getName()&#125;</span> (<span class="subst">$&#123;<span class="variable language_">this</span>.getSize()&#125;</span>KB)`</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">children</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">child</span> =&gt;</span> child.<span class="title function_">display</span>(indent + <span class="string">&#x27;    &#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">const</span> file1 = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;file1.txt&quot;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">const</span> file2 = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;file2.txt&quot;</span>, <span class="number">200</span>);</span><br><span class="line"><span class="keyword">const</span> file3 = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;file3.txt&quot;</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> folder1 = <span class="keyword">new</span> <span class="title class_">Directory</span>(<span class="string">&quot;Folder1&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> folder2 = <span class="keyword">new</span> <span class="title class_">Directory</span>(<span class="string">&quot;Folder2&quot;</span>);</span><br><span class="line"></span><br><span class="line">folder1.<span class="title function_">add</span>(file1);</span><br><span class="line">folder1.<span class="title function_">add</span>(file2);</span><br><span class="line">folder2.<span class="title function_">add</span>(file3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootFolder = <span class="keyword">new</span> <span class="title class_">Directory</span>(<span class="string">&quot;RootFolder&quot;</span>);</span><br><span class="line">rootFolder.<span class="title function_">add</span>(folder1);</span><br><span class="line">rootFolder.<span class="title function_">add</span>(folder2);</span><br><span class="line"></span><br><span class="line">rootFolder.<span class="title function_">display</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Directory: RootFolder (600KB)</span></span><br><span class="line"><span class="comment">//     Directory: Folder1 (300KB)</span></span><br><span class="line"><span class="comment">//         File: file1.txt (100KB)</span></span><br><span class="line"><span class="comment">//         File: file2.txt (200KB)</span></span><br><span class="line"><span class="comment">//     Directory: Folder2 (300KB)</span></span><br><span class="line"><span class="comment">//         File: file3.txt (300KB)</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>组件类 <code>FileSystemComponent</code></strong>：它定义了文件系统中所有对象（无论是文件还是文件夹）的共有接口。这些接口包括添加、删除、获取名称、获取大小和显示内容等操作。默认情况下，它们抛出异常，因为某些操作不适用于叶子节点（例如文件）。</li><li><strong>叶子节点 <code>File</code></strong>：文件类实现了 <code>FileSystemComponent</code> 接口的 <code>getName()</code>、<code>getSize()</code> 和 <code>display()</code> 方法。文件是树的叶子节点，不能包含其他子节点，因此不实现 <code>add()</code> 和 <code>remove()</code>。</li><li><strong>组合对象 <code>Directory</code></strong>：文件夹类是组合对象，可以包含文件和其他文件夹。它实现了 <code>add()</code> 和 <code>remove()</code> 方法，用于添加和移除子节点。文件夹通过递归的方式遍历其子节点来实现 <code>getSize()</code> 和 <code>display()</code>。</li><li><strong>客户端代码</strong>：创建了多个文件和文件夹对象，并将它们组织成树形结构。通过调用 <code>rootFolder.display()</code> 方法，客户端可以以一致的方式显示整个文件系统结构。</li></ol><h2 id="优点">优点</h2><ol><li><strong>层次结构的清晰表示</strong>：组合模式将对象组织成树形结构，能够清晰地表达复杂的层次关系。</li><li><strong>一致性操作</strong>：客户端可以以一致的方式对待单个对象和组合对象，无需区分二者的具体类型。</li><li><strong>增加新的节点类型非常容易</strong>：可以方便地扩展新的叶子或组合对象，增加了系统的灵活性。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>过于抽象</strong>：设计较为抽象，可能导致系统复杂性增加，尤其是在处理很多小对象时可能导致性能问题。</li><li><strong>对子节点类型的控制较少</strong>：由于统一接口，组合对象和叶子对象都提供相同的接口，会使某些本不该具有的操作暴露给了叶子节点。</li></ol><h2 id="与其他模式的对比">与其他模式的对比</h2><ol><li><strong>组合模式 vs 装饰器模式</strong><ul><li><strong>组合模式</strong>：用于构建树形结构，并将单个对象和组合对象的操作一致化，强调的是“整体-部分”的关系。</li><li><strong>装饰器模式</strong>：用于动态地为对象添加行为，强调的是对象功能的灵活扩展。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-桥接模式</title>
    <link href="/2024/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>桥接模式</strong>（Bridge Pattern）是一种结构型设计模式，它的主要目的是<strong>将抽象部分与它的实现部分分离</strong>，使它们都可以独立地变化。桥接模式通过引入一个中间层将抽象和实现解耦，使得两者可以独立扩展。</p><span id="more"></span><h1>桥接模式</h1><p>桥接模式的核心思想是通过组合的方式来替代继承，使得<strong>抽象类和具体实现类可以分离开来</strong>，避免因为多层继承导致的类数量急剧增加。</p><h2 id="组成">组成</h2><ol><li><strong>抽象部分（Abstraction）</strong>：定义了抽象的接口，并维护一个对实现部分（Implementor）的引用。抽象部分通过调用实现部分的接口来完成具体的操作。</li><li><strong>精确抽象部分（Refined Abstraction）</strong>：它扩展了抽象部分，通常添加一些新的行为，但依然依赖实现部分的接口。</li><li><strong>实现接口（Implementor）</strong>：定义了实现部分的接口，不同的实现类可以有不同的具体实现。实现接口和抽象部分接口通常不一样，但实现接口是为了支持抽象部分的操作。</li><li><strong>具体实现（Concrete Implementor）</strong>：实现接口的具体类，提供具体的实现逻辑。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现接口：颜色接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title function_">applyColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overridden!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现类：红色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedColor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Color</span> &#123;</span><br><span class="line">    <span class="title function_">applyColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Applying red color.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体实现类：蓝色</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlueColor</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Color</span> &#123;</span><br><span class="line">    <span class="title function_">applyColor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Applying blue color.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类：形状</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">color</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;  <span class="comment">// 持有实现部分的引用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overridden!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展抽象类：圆形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">color, radius</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(color);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">radius</span> = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Drawing a circle with radius: <span class="subst">$&#123;<span class="variable language_">this</span>.radius&#125;</span>`</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span>.<span class="title function_">applyColor</span>();  <span class="comment">// 调用实现部分的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展抽象类：矩形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">color, width, height</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(color);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Drawing a rectangle with width: <span class="subst">$&#123;<span class="variable language_">this</span>.width&#125;</span> and height: <span class="subst">$&#123;<span class="variable language_">this</span>.height&#125;</span>`</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span>.<span class="title function_">applyColor</span>();  <span class="comment">// 调用实现部分的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码：使用桥接模式绘图</span></span><br><span class="line"><span class="keyword">const</span> redColor = <span class="keyword">new</span> <span class="title class_">RedColor</span>();</span><br><span class="line"><span class="keyword">const</span> blueColor = <span class="keyword">new</span> <span class="title class_">BlueColor</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(redColor, <span class="number">10</span>);</span><br><span class="line">circle.<span class="title function_">draw</span>();  <span class="comment">// 输出：Drawing a circle with radius: 10. Applying red color.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rectangle = <span class="keyword">new</span> <span class="title class_">Rectangle</span>(blueColor, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">rectangle.<span class="title function_">draw</span>();  <span class="comment">// 输出：Drawing a rectangle with width: 20 and height: 30. Applying blue color.</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>实现接口 <code>Color</code></strong>：定义了颜色的接口，具体的颜色实现类将实现 <code>applyColor()</code> 方法，决定颜色如何应用。</li><li><strong>具体实现类 <code>RedColor</code> 和 <code>BlueColor</code></strong>：它们是具体的颜色实现类，分别提供了红色和蓝色的实现逻辑。</li><li><strong>抽象类 <code>Shape</code></strong>：定义了形状的抽象接口，包含一个对颜色实现类的引用。不同的形状通过组合的方式拥有颜色的实现。</li><li><strong>扩展抽象类 <code>Circle</code> 和 <code>Rectangle</code></strong>：这两个类分别是具体的形状实现，通过调用颜色实现类的方法来应用颜色。</li><li><strong>客户端代码</strong>：客户端创建不同颜色的实现类和不同的形状对象，并通过 <code>draw()</code> 方法绘制形状，同时应用颜色。</li></ol><h2 id="优点">优点</h2><ol><li><strong>抽象和实现分离</strong>：将抽象和实现分离，使得它们可以独立变化，这有助于避免继承导致的类爆炸问题。</li><li><strong>扩展能力强</strong>：因为抽象部分和实现部分是独立扩展的，所以可以轻松地扩展这两个维度，而不需要修改原有的代码。</li><li><strong>符合开闭原则</strong>：新增实现或新的抽象不会影响已有的实现，可以保持系统的灵活性。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>增加复杂性</strong>：引入了额外的抽象层，使得代码理解起来更加复杂，特别是对于较小的系统，可能显得过度设计。</li></ol><h2 id="与其他模式的对比">与其他模式的对比</h2><ol><li><strong>桥接模式 vs 适配器模式</strong><ul><li><strong>桥接模式</strong>：强调的是<strong>将抽象和实现分离</strong>，让两者可以独立地变化。适用于系统的某些维度可能独立扩展的场景。</li><li><strong>适配器模式</strong>：主要用于<strong>解决接口不兼容的问题</strong>，适配器模式用于将一个已有接口适配到另一个接口上，解决接口不匹配的问题。</li></ul></li><li><strong>桥接模式 vs 策略模式</strong><ul><li><strong>桥接模式</strong>：主要用来将抽象和实现分离，强调的是对象不同维度的独立变化。</li><li><strong>策略模式</strong>：侧重于<strong>行为的灵活替换</strong>，允许在运行时根据不同的策略来执行不同的行为。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-适配器模式</title>
    <link href="/2024/10/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>适配器模式</strong>（Adapter Pattern）是一种结构型设计模式，它允许将一个类的接口转换为客户端期望的另一个接口。适配器模式的主要目的是解决接口不兼容的问题，使得原本无法直接交互的类能够协作。</p><span id="more"></span><h1>适配器模式</h1><h2 id="组成">组成</h2><ol><li><strong>目标接口（Target）</strong>：定义客户端期望的接口，适配器类需要实现这个接口。</li><li><strong>适配器（Adapter）</strong>：实现目标接口，并将适配后的请求委托给适配者。</li><li><strong>适配者（Adaptee）</strong>：需要被适配的类，它的接口不符合目标接口，但提供了客户端需要的功能。</li><li><strong>客户端（Client）</strong>：通过目标接口与适配器交互。</li></ol><h2 id="代码实现">代码实现</h2><p>适配器模式主要有两种形式：类适配器和对象适配器。</p><h3 id="类适配器">类适配器</h3><p>通过继承的方式，使适配器类同时拥有目标接口和适配者的接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 适配者类：老式支付系统</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OldPaymentSystem</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">amount</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">makePayment</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">amount</span> = amount;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Payment of $<span class="subst">$&#123;amount&#125;</span> made through Old Payment System.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标接口：新的支付接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewPaymentSystem</span> &#123;</span><br><span class="line">    <span class="title function_">processPayment</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method should be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器类：将老式支付系统适配到新的支付接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentAdapter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">NewPaymentSystem</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">oldPaymentSystem</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">oldPaymentSystem</span> = oldPaymentSystem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">processPayment</span>(<span class="params">amount</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">oldPaymentSystem</span>.<span class="title function_">makePayment</span>(amount); <span class="comment">// 委托给老系统的 makePayment 方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">const</span> oldSystem = <span class="keyword">new</span> <span class="title class_">OldPaymentSystem</span>();</span><br><span class="line"><span class="keyword">const</span> paymentAdapter = <span class="keyword">new</span> <span class="title class_">PaymentAdapter</span>(oldSystem);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用适配器调用新接口</span></span><br><span class="line">paymentAdapter.<span class="title function_">processPayment</span>(<span class="number">100</span>); </span><br><span class="line"><span class="comment">// 输出: Payment of $100 made through Old Payment System.</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>适配者类 <code>OldPaymentSystem</code></strong>：代表旧的支付系统，它的接口 <code>makePayment()</code> 不符合新的支付接口。</li><li><strong>目标接口 <code>NewPaymentSystem</code></strong>：定义新的支付接口，要求实现 <code>processPayment()</code> 方法。</li><li><strong>适配器类 <code>PaymentAdapter</code></strong>：继承自新的支付接口 <code>NewPaymentSystem</code>，并在内部组合了 <code>OldPaymentSystem</code>。通过 <code>processPayment()</code> 方法，适配器将请求委托给旧支付系统的 <code>makePayment()</code> 方法。</li><li><strong>客户端代码</strong>：创建一个 <code>PaymentAdapter</code> 实例，使客户端能够通过新的接口与旧系统交互。</li></ol><h3 id="对象适配器">对象适配器</h3><p>对象适配器中，适配器类持有一个被适配者对象的实例，并实现了目标接口。通过委托，适配器将客户端的请求传递给被适配者。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标接口：新的媒体播放器接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MediaPlayer</span> &#123;</span><br><span class="line">    <span class="title function_">play</span>(<span class="params">fileType, fileName</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method should be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配者类：只能播放 mp3 的旧版媒体播放器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mp3Player</span> &#123;</span><br><span class="line">    <span class="title function_">playMp3</span>(<span class="params">fileName</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Playing mp3 file: <span class="subst">$&#123;fileName&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Mp4Player</span> &#123;</span><br><span class="line">    <span class="title function_">playMp4</span>(<span class="params">fileName</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Playing mp4 file: <span class="subst">$&#123;fileName&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AviPlayer</span> &#123;</span><br><span class="line">    <span class="title function_">playAvi</span>(<span class="params">fileName</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Playing avi file: <span class="subst">$&#123;fileName&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 适配器类：适配 Mp3Player 使其兼容新的 MediaPlayer 接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MediaAdapter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MediaPlayer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">fileType</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="keyword">if</span> (fileType === <span class="string">&quot;mp3&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">advancedPlayer</span> = <span class="keyword">new</span> <span class="title class_">Mp3Player</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileType === <span class="string">&quot;mp4&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">advancedPlayer</span> = <span class="keyword">new</span> <span class="title class_">Mp4Player</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileType === <span class="string">&quot;avi&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">advancedPlayer</span> = <span class="keyword">new</span> <span class="title class_">AviPlayer</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">play</span>(<span class="params">fileType, fileName</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileType === <span class="string">&quot;mp3&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">advancedPlayer</span>.<span class="title function_">playMp3</span>(fileName);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileType === <span class="string">&quot;mp4&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">advancedPlayer</span>.<span class="title function_">playMp4</span>(fileName);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileType === <span class="string">&quot;avi&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">advancedPlayer</span>.<span class="title function_">playAvi</span>(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端类：通过适配器播放不同格式的文件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AudioPlayer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MediaPlayer</span> &#123;</span><br><span class="line">    <span class="title function_">play</span>(<span class="params">fileType, fileName</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fileType === <span class="string">&quot;mp3&quot;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Directly playing mp3 file: <span class="subst">$&#123;fileName&#125;</span>`</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileType === <span class="string">&quot;mp4&quot;</span> || fileType === <span class="string">&quot;avi&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> adapter = <span class="keyword">new</span> <span class="title class_">MediaAdapter</span>(fileType);</span><br><span class="line">            adapter.<span class="title function_">play</span>(fileType, fileName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Invalid media. Cannot play.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端代码</span></span><br><span class="line"><span class="keyword">const</span> audioPlayer = <span class="keyword">new</span> <span class="title class_">AudioPlayer</span>();</span><br><span class="line">audioPlayer.<span class="title function_">play</span>(<span class="string">&quot;mp3&quot;</span>, <span class="string">&quot;song.mp3&quot;</span>); <span class="comment">// 输出: Directly playing mp3 file: song.mp3</span></span><br><span class="line">audioPlayer.<span class="title function_">play</span>(<span class="string">&quot;mp4&quot;</span>, <span class="string">&quot;video.mp4&quot;</span>); <span class="comment">// 输出: Playing mp4 file: video.mp4</span></span><br><span class="line">audioPlayer.<span class="title function_">play</span>(<span class="string">&quot;avi&quot;</span>, <span class="string">&quot;movie.avi&quot;</span>); <span class="comment">// 输出: Playing avi file: movie.avi</span></span><br><span class="line">audioPlayer.<span class="title function_">play</span>(<span class="string">&quot;mkv&quot;</span>, <span class="string">&quot;series.mkv&quot;</span>); <span class="comment">// 输出: Invalid media. Cannot play.</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>目标接口 <code>MediaPlayer</code></strong>：定义了客户端期望的媒体播放器接口，要求实现 <code>play()</code> 方法。</li><li><strong>适配者类 <code>Mp3Player</code></strong>：它是旧版的播放器，只支持播放 <code>.mp3</code> 格式，通过 <code>playMp3()</code> 方法播放文件。</li><li><strong>适配器类 <code>MediaAdapter</code></strong>：适配器将 <code>MediaPlayer</code> 接口与适配者 <code>Mp3Player</code>、<code>Mp4Player</code> 和 <code>AviPlayer</code> 连接起来。它根据文件类型创建不同的播放器，并将请求委托给适配者的相应方法。</li><li><strong>客户端类 <code>AudioPlayer</code></strong>：这是客户端直接使用的类。它通过适配器适配不同的文件格式，支持 <code>.mp3</code>、<code>.mp4</code> 和 <code>.avi</code> 文件。如果遇到不支持的格式，它会输出相应的错误信息。</li><li><strong>客户端代码</strong>：创建一个 <code>AudioPlayer</code> 实例，并通过它播放不同格式的文件。<code>.mp3</code> 文件通过旧版播放器直接播放，<code>.mp4</code> 和 <code>.avi</code> 文件通过适配器播放。</li></ol><h2 id="优点">优点</h2><ol><li><strong>提高代码复用</strong>：可以将现有的类适配到新的接口，而无需修改原有代码。</li><li><strong>解耦代码</strong>：客户端不需要知道适配者的内部实现，只需通过适配器与其交互，降低了耦合度。</li><li><strong>灵活性高</strong>：可以在运行时根据需要使用不同的适配器。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>增加系统复杂性</strong>：如果过度使用适配器，系统可能变得复杂且难以维护。</li><li><strong>性能开销</strong>：适配器需要额外的处理，可能会带来一些性能开销，特别是在适配过程中涉及大量对象转换时。</li></ol><h2 id="与其他模式的对比">与其他模式的对比</h2><ol><li><strong>适配器模式 vs 代理模式</strong><ul><li><strong>适配器模式：</strong> 提供一个不一样的接口，由于原来的接口格式<strong>不能用了</strong>，提供新的接口以满足新场景下的需求。</li><li><strong>代理模式：</strong> 提供一模一样的接口，由于不能直接访问目标对象，找个代理来帮忙访问，使用者可以就像访问目标对象一样来访问代理对象。</li></ul></li><li><strong>适配器模式 vs 观察者模式 vs 装饰模式</strong><ul><li><strong>适配器模式</strong>：主要用于接口不兼容时，通过适配器使两个接口能够相互配合。</li><li><strong>观察者模式</strong>：用于实现一对多的通知机制，当一个对象状态发生变化时，自动通知依赖它的对象。</li><li><strong>装饰模式</strong>：用于动态地为对象添加新功能，而不改变其原始结构。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-外观模式</title>
    <link href="/2024/10/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>外观模式</strong>（Facade Pattern）是一种结构型设计模式，它通过提供一个统一的接口，用来访问子系统中的一群接口，简化复杂系统的使用。外观模式隐藏了系统的复杂性，使得子系统的调用更加容易，从而让客户端与系统的交互更为简便。外观模式的核心是：<strong>对外提供一个简化的接口，屏蔽内部复杂性</strong>。</p><span id="more"></span><h1>外观模式</h1><h2 id="组成">组成</h2><ol><li><strong>外观（Facade）</strong>：这是对外暴露的简化接口，负责与客户端进行交互，并协调子系统的调用。</li><li><strong>子系统（Subsystems）</strong>：这是一个或多个复杂的类或模块，处理系统的实际功能。客户端不直接与子系统交互，而是通过外观对象调用子系统中的方法。</li><li><strong>客户端（Client）</strong>：客户端通过外观类来与系统交互，不关心子系统的内部实现。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子系统1：灯光控制</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Light</span> &#123;</span><br><span class="line">    <span class="title function_">turnOn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Lights are on&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">turnOff</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Lights are off&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">dim</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Lights are dimmed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子系统2：DVD播放器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DVDPlayer</span> &#123;</span><br><span class="line">    <span class="title function_">turnOn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DVD Player is on&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">turnOff</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DVD Player is off&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">play</span>(<span class="params">movie</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Playing movie: <span class="subst">$&#123;movie&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">stop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;DVD Player stopped&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子系统3：音响系统</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SoundSystem</span> &#123;</span><br><span class="line">    <span class="title function_">turnOn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Sound system is on&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">turnOff</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Sound system is off&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setVolume</span>(<span class="params">volume</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Sound system volume set to <span class="subst">$&#123;volume&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外观类：家庭影院外观</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeTheaterFacade</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">light, dvdPlayer, soundSystem</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">light</span> = light;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dvdPlayer</span> = dvdPlayer;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">soundSystem</span> = soundSystem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">watchMovie</span>(<span class="params">movie</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Get ready to watch a movie...&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">light</span>.<span class="title function_">dim</span>();                 <span class="comment">// 调暗灯光</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dvdPlayer</span>.<span class="title function_">turnOn</span>();          <span class="comment">// 打开DVD</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">soundSystem</span>.<span class="title function_">turnOn</span>();        <span class="comment">// 打开音响</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">soundSystem</span>.<span class="title function_">setVolume</span>(<span class="number">5</span>);    <span class="comment">// 设置音量</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dvdPlayer</span>.<span class="title function_">play</span>(movie);       <span class="comment">// 播放电影</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">endMovie</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Shutting down movie theater...&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dvdPlayer</span>.<span class="title function_">stop</span>();            <span class="comment">// 停止播放</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dvdPlayer</span>.<span class="title function_">turnOff</span>();         <span class="comment">// 关闭DVD</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">soundSystem</span>.<span class="title function_">turnOff</span>();       <span class="comment">// 关闭音响</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">light</span>.<span class="title function_">turnOn</span>();              <span class="comment">// 重新打开灯光</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端使用外观模式</span></span><br><span class="line"><span class="keyword">const</span> light = <span class="keyword">new</span> <span class="title class_">Light</span>();</span><br><span class="line"><span class="keyword">const</span> dvdPlayer = <span class="keyword">new</span> <span class="title class_">DVDPlayer</span>();</span><br><span class="line"><span class="keyword">const</span> soundSystem = <span class="keyword">new</span> <span class="title class_">SoundSystem</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建家庭影院外观类</span></span><br><span class="line"><span class="keyword">const</span> homeTheater = <span class="keyword">new</span> <span class="title class_">HomeTheaterFacade</span>(light, dvdPlayer, soundSystem);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端通过外观类来播放电影</span></span><br><span class="line">homeTheater.<span class="title function_">watchMovie</span>(<span class="string">&quot;Inception&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束电影播放</span></span><br><span class="line">homeTheater.<span class="title function_">endMovie</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">// Get ready to watch a movie...</span></span><br><span class="line"><span class="comment">// Lights are dimmed</span></span><br><span class="line"><span class="comment">// DVD Player is on</span></span><br><span class="line"><span class="comment">// Sound system is on</span></span><br><span class="line"><span class="comment">// Sound system volume set to 5</span></span><br><span class="line"><span class="comment">// Playing movie: Inception</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Shutting down movie theater...</span></span><br><span class="line"><span class="comment">// DVD Player stopped</span></span><br><span class="line"><span class="comment">// DVD Player is off</span></span><br><span class="line"><span class="comment">// Sound system is off</span></span><br><span class="line"><span class="comment">// Lights are on</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>子系统（Subsystems）</strong>：包括 <code>Light</code>（灯光控制）、<code>DVDPlayer</code>（DVD 播放器）、<code>SoundSystem</code>（音响系统）等类。这些类提供了控制灯光、DVD 播放和音响系统的方法。</li><li><strong>外观类（HomeTheaterFacade）</strong>：<code>HomeTheaterFacade</code> 是外观类，它封装了操作家庭影院的复杂逻辑。<code>watchMovie()</code> 和 <code>endMovie()</code> 方法分别封装了观看电影和结束电影的操作，简化了客户端与各个子系统的交互。</li><li><strong>客户端</strong>：客户端通过外观类的简单接口来控制整个家庭影院系统，而不需要直接与每个子系统进行交互。</li></ol><h2 id="优点">优点</h2><ol><li><strong>简化了复杂系统的使用</strong>：外观模式为客户端提供了一个简单的接口，使得子系统的复杂性对外透明，客户端不需要了解内部细节。</li><li><strong>松散耦合</strong>：客户端与子系统之间的耦合降低，客户端不需要直接依赖子系统。系统的修改（如子系统的变化）不会影响客户端代码。</li><li><strong>提高了代码的可维护性</strong>：通过外观模式，代码结构更加清晰、可读性更高，并且修改系统时也更方便。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>不能完全封装子系统</strong>：外观模式只能简化子系统的接口，但不能完全封装。如果客户端需要访问子系统的某些复杂功能，还是需要直接与子系统交互。</li><li><strong>可能导致外观类过于臃肿</strong>：如果外观类包含太多系统接口的逻辑，可能会使得外观类的代码变得臃肿且复杂。</li></ol><h2 id="与其他设计模式的对比">与其他设计模式的对比</h2><ol><li><strong>外观模式 vs 适配器模式</strong>：适配器模式用于将一个接口转换为客户端期望的接口，使得不兼容的类可以协同工作；而外观模式是为了简化接口，将多个接口的功能统一整合，便于客户端使用。适配器侧重兼容性，外观侧重简化复杂性。</li><li><strong>外观模式 vs 中介者模式</strong>：中介者模式定义了一个中介对象，各个对象通过中介者进行通信，目的是减少对象之间的直接依赖。外观模式则是简化对一组子系统的使用接口。外观模式是客户端与子系统的交互接口，而中介者模式是对象之间的通信中枢。</li><li><strong>外观模式 vs 单例模式</strong>：外观类并不一定是单例，多个外观实例可以控制不同的子系统实例。而单例模式确保只有一个实例，全局唯一。外观类在某些场景下可以设计为单例，但它们的职责不同。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-装饰模式</title>
    <link href="/2024/10/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>装饰模式</strong>（Decorator Pattern）是一种结构型设计模式，它允许你通过将对象放入一系列装饰器对象中，来动态地给对象添加额外的行为或职责，而无需修改原始类的代码。装饰器模式通过组合的方式取代继承，增加了系统的灵活性和可扩展性。</p><span id="more"></span><h1>装饰模式</h1><h2 id="组成">组成</h2><ol><li><strong>组件接口（Component）</strong>：定义了对象的基本接口，所有装饰器类和被装饰对象都需要实现这个接口。</li><li><strong>具体组件（Concrete Component）</strong>：实现了组件接口的具体类，是需要被装饰的对象。</li><li><strong>装饰器（Decorator）</strong>：装饰器类实现了组件接口，持有一个组件的引用，装饰器类的目的是在不改变被装饰对象的情况下，为其增加功能。</li><li><strong>具体装饰器（Concrete Decorator）</strong>：具体装饰器继承装饰器类，负责给被装饰的对象增加具体的功能。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件接口：咖啡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="title function_">cost</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;  <span class="comment">// 基础咖啡的价格</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">description</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Simple Coffee&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器：基本装饰器类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CoffeeDecorator</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">coffee</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">coffee</span> = coffee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">cost</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">coffee</span>.<span class="title function_">cost</span>();  <span class="comment">// 默认不改变价格</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">description</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">coffee</span>.<span class="title function_">description</span>();  <span class="comment">// 默认不改变描述</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体装饰器：添加牛奶</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MilkDecorator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CoffeeDecorator</span> &#123;</span><br><span class="line">    <span class="title function_">cost</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">coffee</span>.<span class="title function_">cost</span>() + <span class="number">2</span>;  <span class="comment">// 加牛奶多收2元</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">description</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">coffee</span>.<span class="title function_">description</span>() + <span class="string">&#x27;, Milk&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体装饰器：添加糖</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SugarDecorator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CoffeeDecorator</span> &#123;</span><br><span class="line">    <span class="title function_">cost</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">coffee</span>.<span class="title function_">cost</span>() + <span class="number">1</span>;  <span class="comment">// 加糖多收1元</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">description</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">coffee</span>.<span class="title function_">description</span>() + <span class="string">&#x27;, Sugar&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体装饰器：添加摩卡</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MochaDecorator</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CoffeeDecorator</span> &#123;</span><br><span class="line">    <span class="title function_">cost</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">coffee</span>.<span class="title function_">cost</span>() + <span class="number">3</span>;  <span class="comment">// 加摩卡多收3元</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">description</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">coffee</span>.<span class="title function_">description</span>() + <span class="string">&#x27;, Mocha&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用装饰器模式</span></span><br><span class="line"><span class="keyword">let</span> myCoffee = <span class="keyword">new</span> <span class="title class_">Coffee</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCoffee.<span class="title function_">description</span>() + <span class="string">&quot; costs &quot;</span> + myCoffee.<span class="title function_">cost</span>() + <span class="string">&quot;元&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 加牛奶</span></span><br><span class="line">myCoffee = <span class="keyword">new</span> <span class="title class_">MilkDecorator</span>(myCoffee);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCoffee.<span class="title function_">description</span>() + <span class="string">&quot; costs &quot;</span> + myCoffee.<span class="title function_">cost</span>() + <span class="string">&quot;元&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 加糖</span></span><br><span class="line">myCoffee = <span class="keyword">new</span> <span class="title class_">SugarDecorator</span>(myCoffee);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCoffee.<span class="title function_">description</span>() + <span class="string">&quot; costs &quot;</span> + myCoffee.<span class="title function_">cost</span>() + <span class="string">&quot;元&quot;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 加摩卡</span></span><br><span class="line">myCoffee = <span class="keyword">new</span> <span class="title class_">MochaDecorator</span>(myCoffee);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myCoffee.<span class="title function_">description</span>() + <span class="string">&quot; costs &quot;</span> + myCoffee.<span class="title function_">cost</span>() + <span class="string">&quot;元&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Simple Coffee costs 5元</span></span><br><span class="line"><span class="comment">// Simple Coffee, Milk costs 7元</span></span><br><span class="line"><span class="comment">// Simple Coffee, Milk, Sugar costs 8元</span></span><br><span class="line"><span class="comment">// Simple Coffee, Milk, Sugar, Mocha costs 11元</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>组件类（Coffee）</strong>：<code>Coffee</code> 类实现了基本的咖啡对象，提供了 <code>cost</code> 和 <code>description</code> 方法，描述咖啡的价格和内容。</li><li><strong>装饰器类（CoffeeDecorator）</strong>：装饰器类 <code>CoffeeDecorator</code> 持有一个 <code>coffee</code> 对象引用，并实现了 <code>cost</code> 和 <code>description</code> 方法，默认情况下直接调用 <code>coffee</code> 的相应方法。</li><li><strong>具体装饰器类（MilkDecorator、SugarDecorator、MochaDecorator）</strong>：这些具体的装饰器继承了 <code>CoffeeDecorator</code>，在 <code>cost</code> 方法中增加了对应的价格，在 <code>description</code> 方法中添加了对应的描述。</li><li><strong>动态组合</strong>：我们通过装饰器来逐步给 <code>Coffee</code> 对象增加牛奶、糖和摩卡等调料，最后形成一个复杂的咖啡组合，而无需修改原始的 <code>Coffee</code> 类。</li></ol><h2 id="优点">优点</h2><ol><li><strong>灵活性高</strong>：可以动态地给对象添加功能，并且不需要修改原有类的代码。</li><li><strong>遵循开闭原则</strong>：可以通过装饰器扩展对象的功能，而无需修改已有的代码。</li><li><strong>替代继承</strong>：避免了通过继承来扩展功能，从而减少了类的数量。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>类数量增加</strong>：每个装饰器类都是一个新类，可能会增加代码的复杂度和类的数量。</li><li><strong>调试困难</strong>：因为功能是通过多个装饰器叠加的，调试时需要关注多个类之间的组合关系。</li></ol><h2 id="与其他模式的对比">与其他模式的对比</h2><ol><li><strong>装饰模式 vs 代理模式</strong>：代理模式主要用于控制访问，而装饰模式用于动态添加行为。代理模式强调的是控制和管理对真实对象的访问，而装饰模式则侧重于扩展对象的功能。</li><li><strong>装饰模式 vs 继承</strong>：装饰模式是一种替代继承的方式，它通过组合的方式，动态地为对象增加功能，而继承则是在编译时确定的，不能动态修改。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-代理模式</title>
    <link href="/2024/10/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/10/08/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>代理模式</strong>（Proxy Pattern）是一种结构型设计模式，允许通过代理对象来控制对另一个对象的访问。代理对象可以在不改变被代理对象的情况下，增加额外的功能或控制行为。</p><span id="more"></span><h1>代理模式</h1><h2 id="组成">组成</h2><ol><li><strong>主题接口（Subject）</strong>：定义了代理和真实对象都要实现的接口。</li><li><strong>真实主题（Real Subject）</strong>：实现了主题接口的真实对象，代理通过它来完成实际的业务逻辑。</li><li><strong>代理类（Proxy）</strong>：实现了主题接口，持有对真实主题的引用。通过调用真实主题的方法，增加附加逻辑</li></ol><h2 id="应用场景">应用场景</h2><ol><li><strong>虚拟代理</strong>：在需要延迟加载或开销较大的对象时使用，例如大图像的加载。</li><li><strong>保护代理</strong>：控制对真实主题的访问，添加权限检查，如用户权限验证。</li><li><strong>远程代理</strong>：用于表示一个远程对象，通过网络调用，隐藏网络通信的复杂性。</li><li><strong>缓存代理</strong>：对某些方法的返回结果进行缓存，提高性能，避免重复计算。</li></ol><h2 id="代码实现">代码实现</h2><h3 id="基础实现">基础实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主题接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;This method should be overwritten!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真实主题</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RealSubject</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Subject</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;RealSubject: Handling request.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Subject</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">realSubject</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">realSubject</span> = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">request</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">preRequest</span>(); <span class="comment">// 代理前的处理</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">realSubject</span>.<span class="title function_">request</span>(); <span class="comment">// 调用真实主题的方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">postRequest</span>(); <span class="comment">// 代理后的处理</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">preRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Proxy: Pre-processing before request.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">postRequest</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Proxy: Post-processing after request.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用代理模式</span></span><br><span class="line"><span class="keyword">const</span> realSubject = <span class="keyword">new</span> <span class="title class_">RealSubject</span>();</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(realSubject);</span><br><span class="line"></span><br><span class="line">proxy.<span class="title function_">request</span>();</span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Proxy: Pre-processing before request.</span></span><br><span class="line"><span class="comment">// RealSubject: Handling request.</span></span><br><span class="line"><span class="comment">// Proxy: Post-processing after request.</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>主题接口</strong>：<code>Subject</code> 定义了一个 <code>request</code> 方法，真实主题和代理类都需要实现该方法。</li><li><strong>真实主题</strong>：<code>RealSubject</code> 实现了 <code>request</code> 方法，处理实际的请求逻辑。</li><li><strong>代理类</strong>：<code>Proxy</code>类持有<code>RealSubject</code>的引用，在 <code>request</code> 方法中调用真实主题的 <code>request</code> 方法之前和之后添加了额外的处理逻辑。</li><li><strong>客户端代码</strong>：客户端通过代理对象 <code>proxy</code> 发送请求，而无需直接与 <code>RealSubject</code> 交互。</li></ol><h3 id="ES6-Proxy实现">ES6 Proxy实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 真实主题：数据库</span></span><br><span class="line"><span class="keyword">const</span> database = &#123;</span><br><span class="line">    <span class="attr">fetchData</span>: <span class="function">(<span class="params">query</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Fetching data for query: <span class="subst">$&#123;query&#125;</span>`</span>);</span><br><span class="line">        <span class="comment">// 模拟返回数据</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">data</span>: <span class="string">`Result for <span class="subst">$&#123;query&#125;</span>`</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理处理程序</span></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="function">(<span class="params">target, propKey, receiver</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (propKey === <span class="string">&#x27;fetchData&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Proxy: Logging before fetching data.&#x27;</span>);</span><br><span class="line">                <span class="keyword">const</span> result = target[propKey](...args);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Proxy: Logging after fetching data.&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> target[propKey];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建代理对象</span></span><br><span class="line"><span class="keyword">const</span> proxyDatabase = <span class="keyword">new</span> <span class="title class_">Proxy</span>(database, handler);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用代理</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxyDatabase.<span class="title function_">fetchData</span>(<span class="string">&#x27;SELECT * FROM users&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：</span></span><br><span class="line"><span class="comment">// Proxy: Logging before fetching data.</span></span><br><span class="line"><span class="comment">// Fetching data for query: SELECT * FROM users</span></span><br><span class="line"><span class="comment">// Proxy: Logging after fetching data.</span></span><br><span class="line"><span class="comment">// &#123; data: &#x27;Result for SELECT * FROM users&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>真实主题 (<code>database</code>)</strong>：<code>database</code> 是我们实际要访问的对象，它有一个 <code>fetchData</code> 方法，负责处理数据库查询。</li><li><strong>代理处理程序 (<code>handler</code>)</strong>：<code>handler</code> 是 <code>Proxy</code> 对象的第二个参数，它定义了如何拦截对目标对象的操作。在这个例子中，我们拦截了 <code>fetchData</code> 方法的调用，并在调用前后打印日志。</li><li><strong><code>get</code> 拦截器</strong>：<code>get</code> 拦截器会在访问对象的属性时被调用。如果访问的是 <code>fetchData</code> 方法，我们会返回一个新的函数，其中包含了额外的逻辑（如日志记录）。</li><li><strong>代理对象 (<code>proxyDatabase</code>)</strong>：我们通过 <code>new Proxy(database, handler)</code> 创建了代理对象 <code>proxyDatabase</code>，该代理对象会在每次调用 <code>fetchData</code> 时执行拦截器中的逻辑。</li><li><strong>运行结果</strong>：每次调用 <code>proxyDatabase.fetchData()</code> 时，都会在真实的 <code>database.fetchData()</code> 方法之前和之后执行日志记录逻辑</li></ol><h2 id="优点">优点</h2><ol><li><strong>增强功能</strong>：可以在不改变真实主题的情况下，增强其功能，如添加日志、权限控制等。</li><li><strong>延迟加载</strong>：可以在需要时才创建真实对象，节省资源。</li><li><strong>解耦</strong>：客户端只依赖代理，而不需要直接与真实主题交互，从而减少耦合。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>增加复杂性</strong>：引入代理可能会使系统结构更加复杂。</li><li><strong>性能开销</strong>：代理可能引入额外的调用层，造成性能损失，尤其在频繁调用时。</li></ol><h2 id="与其他模式的对比">与其他模式的对比</h2><ol><li><strong>代理模式 vs 装饰者模式</strong>：代理模式主要用于控制访问，而装饰者模式用于增强对象的功能。代理不改变对象的行为，只是在调用前后添加处理，而装饰者则是通过包装对象来改变其行为。</li><li><strong>代理模式 vs 适配器模式</strong>：适配器模式用于将一个接口转换成客户端所期望的另一个接口，而代理模式主要用于控制对对象的访问。适配器关注于接口的转换，代理则关注于访问控制。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-建造者模式</title>
    <link href="/2024/09/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/09/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>建造者模式</strong>（Builder Pattern）是一种创建型设计模式，主要用于构建复杂对象的过程。它通过使用多个简单的对象一步步构建成一个复杂的对象，允许以相同的构建过程创建不同类型的对象。</p><span id="more"></span><h1>建造者模式</h1><h2 id="组成">组成</h2><ol><li><strong>产品（Product）</strong>：要构建的复杂对象。</li><li><strong>建造者（Builder）</strong>：定义创建产品的抽象接口，提供用于组装产品的各种方法。</li><li><strong>具体建造者（ConcreteBuilder）</strong>：实现建造者接口，构建并装配各个部件，最终返回产品。</li><li><strong>指挥者（Director）</strong>：负责控制建造过程，使用建造者接口构建产品。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 产品类：计算机</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cpu</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">memory</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hardDrive</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">specs</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Computer with CPU: <span class="subst">$&#123;<span class="variable language_">this</span>.cpu&#125;</span>, Memory: <span class="subst">$&#123;<span class="variable language_">this</span>.memory&#125;</span>, Hard Drive: <span class="subst">$&#123;<span class="variable language_">this</span>.hardDrive&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建造者接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputerBuilder</span> &#123;</span><br><span class="line">    <span class="title function_">buildCPU</span>(<span class="params">cpu</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">buildMemory</span>(<span class="params">memory</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">buildHardDrive</span>(<span class="params">hardDrive</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getComputer</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method must be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体建造者</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GamingComputerBuilder</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ComputerBuilder</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">computer</span> = <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">buildCPU</span>(<span class="params">cpu</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">computer</span>.<span class="property">cpu</span> = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">buildMemory</span>(<span class="params">memory</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">computer</span>.<span class="property">memory</span> = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">buildHardDrive</span>(<span class="params">hardDrive</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">computer</span>.<span class="property">hardDrive</span> = hardDrive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getComputer</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">computer</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指挥者类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputerDirector</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">builder</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">builder</span> = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructGamingComputer</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">builder</span>.<span class="title function_">buildCPU</span>(<span class="string">&quot;Intel i9&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">builder</span>.<span class="title function_">buildMemory</span>(<span class="string">&quot;32GB&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">builder</span>.<span class="title function_">buildHardDrive</span>(<span class="string">&quot;1TB SSD&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端</span></span><br><span class="line"><span class="keyword">const</span> gamingBuilder = <span class="keyword">new</span> <span class="title class_">GamingComputerBuilder</span>();</span><br><span class="line"><span class="keyword">const</span> director = <span class="keyword">new</span> <span class="title class_">ComputerDirector</span>(gamingBuilder);</span><br><span class="line">director.<span class="title function_">constructGamingComputer</span>();</span><br><span class="line"><span class="keyword">const</span> gamingComputer = gamingBuilder.<span class="title function_">getComputer</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gamingComputer.<span class="title function_">specs</span>());</span><br><span class="line"><span class="comment">// Computer with CPU: Intel i9, Memory: 32GB, Hard Drive: 1TB SSD</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>产品类 <code>Computer</code></strong>：表示要构建的复杂对象，具有 <code>CPU</code>、<code>Memory</code> 和 <code>HardDrive</code> 属性，并提供了一个 <code>specs()</code> 方法用于输出配置。</li><li><strong>建造者接口 <code>ComputerBuilder</code></strong>：定义了构建计算机的接口，提供了构建各个部件的方法和获取产品的方法。</li><li><strong>具体建造者 <code>GamingComputerBuilder</code></strong>：实现了建造者接口，负责具体的产品构建过程，创建并返回一个 <code>Computer</code> 对象。</li><li><strong>指挥者类 <code>ComputerDirector</code></strong>：使用具体建造者的方法来构建一个完整的计算机。这里的 <code>constructGamingComputer()</code> 方法负责设定构建过程。</li><li><strong>客户端</strong>：创建一个 <code>GamingComputerBuilder</code> 实例和 <code>ComputerDirector</code> 实例，调用指挥者的构建方法，最后获取构建完成的 <code>Computer</code> 对象。</li></ol><h2 id="优点">优点</h2><ol><li><strong>解耦</strong>：将对象的构建与表示分离，便于管理和维护。</li><li><strong>灵活性</strong>：可以通过不同的建造者创建不同类型的产品，构建过程灵活可变。</li><li><strong>便于扩展</strong>：增加新的产品类型或建造者只需扩展，现有代码不需修改。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>复杂性</strong>：由于需要引入多个类，增加了系统的复杂度。</li><li><strong>产品多样性过多</strong>：如果产品种类很多，可能导致建造者类数目急剧增加。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-原型模式</title>
    <link href="/2024/09/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/09/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>原型模式</strong>（Prototype Pattern）是一种创建型设计模式，它允许通过复制现有对象来创建新对象，而不是通过实例化类来创建对象。通过原型模式，可以避免重复创建相似的对象，尤其是当对象的创建成本较高时，复制已有对象的效率更高。在 JavaScript 中，由于它的原型继承特性，原型模式可以非常自然地实现。</p><span id="more"></span><h1>原型模式</h1><h2 id="组成">组成</h2><ol><li><strong>原型接口（Prototype）</strong>：定义一个可以被克隆的接口，通常提供 <code>clone()</code> 方法，用于复制自身。</li><li><strong>具体原型（Concrete Prototype）</strong>：实现原型接口的具体对象，负责复制自身。</li><li><strong>客户端（Client）</strong>：通过调用原型对象的 <code>clone()</code> 方法来创建新的对象，而不是直接使用 <code>new</code> 操作符。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基础原型对象</span></span><br><span class="line"><span class="keyword">const</span> personPrototype = &#123;</span><br><span class="line">    <span class="title function_">init</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新对象，基于personPrototype</span></span><br><span class="line"><span class="keyword">const</span> person1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(personPrototype);</span><br><span class="line">person1.<span class="title function_">init</span>(<span class="string">&#x27;John&#x27;</span>, <span class="number">25</span>);</span><br><span class="line">person1.<span class="title function_">greet</span>(); <span class="comment">// Hello, my name is John and I am 25 years old.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 克隆一个新的对象</span></span><br><span class="line"><span class="keyword">const</span> person2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(personPrototype);</span><br><span class="line">person2.<span class="title function_">init</span>(<span class="string">&#x27;Jane&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">person2.<span class="title function_">greet</span>(); <span class="comment">// Hello, my name is Jane and I am 30 years old.</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong></p><ol><li><strong>原型对象 (<code>personPrototype</code>)</strong>：这是一个带有初始化和行为方法的原型对象，所有基于这个原型创建的对象都会继承这些方法。</li><li><strong><code>Object.create()</code></strong>：JavaScript 的内置方法，用来基于给定的原型对象创建一个新对象。新对象会继承原型对象的属性和方法。</li><li><strong><code>init()</code> 方法</strong>：每个克隆对象都会调用 <code>init()</code> 方法进行初始化。这相当于一个构造函数，初始化对象的 <code>name</code> 和 <code>age</code> 属性。</li><li><strong>克隆</strong>：<code>person1</code> 和 <code>person2</code> 是两个独立的对象，它们基于相同的原型创建，并且分别通过 <code>init</code> 方法初始化了不同的状态。</li></ol><h2 id="优点">优点</h2><ol><li><strong>减少对象创建的开销</strong>：特别是对于复杂对象，克隆比重新创建成本更低。</li><li><strong>动态创建对象</strong>：在运行时动态创建对象，不需要提前知道具体的类型。</li><li><strong>避免复杂类的创建</strong>：对于那些需要经过复杂初始化的对象，可以通过克隆快速得到一个已初始化的副本。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>深拷贝问题</strong>：如果对象中有嵌套对象，浅拷贝可能会带来副作用，需要手动处理深拷贝。</li><li><strong>实现复杂性</strong>：在一些编程语言中，实现深拷贝可能比较复杂，尤其是当对象包含引用其他对象时。</li></ol><h2 id="与其他模式的对比">与其他模式的对比</h2><ol><li><strong>原型模式 vs 工厂模式</strong>：原型模式通过复制现有对象来创建新对象，而工厂模式是通过调用工厂方法来实例化对象。原型模式适用于需要克隆的场景，而工厂模式适用于控制对象创建的场景。</li><li><strong>原型模式 vs 单例模式</strong>：单例模式只允许一个实例，而原型模式允许通过克隆创建多个类似的对象。两者的目标不同，单例模式强调唯一性，而原型模式强调高效的对象创建。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-工厂模式</title>
    <link href="/2024/09/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/09/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>工厂模式（Factory Pattern）是设计模式中的一种创建型模式，用于将对象的创建与使用分离。通过工厂模式，我们可以在不暴露对象的创建逻辑的情况下，根据不同的条件生成不同类型的对象。这样做的好处是提高了代码的灵活性和可维护性，因为我们可以动态地创建不同的对象，而不需要修改已有的代码。</p><span id="more"></span><h1>工厂模式</h1><p>工厂模式通常有以下几种形式：</p><ol><li><strong>简单工厂模式（Simple Factory Pattern）</strong></li><li><strong>工厂方法模式（Factory Method Pattern）</strong></li><li><strong>抽象工厂模式（Abstract Factory Pattern）</strong></li></ol><h2 id="简单工厂模式（Simple-Factory-Pattern）">简单工厂模式（Simple Factory Pattern）</h2><p><strong>简单工厂模式</strong>通过一个工厂类，根据传入的参数生成不同类型的对象。它是一种不属于 GoF 23 种经典设计模式的“非正式”模式，但在实际开发中非常常用。</p><h3 id="代码实现">代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">type</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">type</span> = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Driving a <span class="subst">$&#123;<span class="variable language_">this</span>.type&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="title function_">createCar</span>(<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type === <span class="string">&#x27;Sedan&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&#x27;Sedan&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;SUV&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&#x27;SUV&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;Truck&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&#x27;Truck&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Unknown car type&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用工厂</span></span><br><span class="line"><span class="keyword">const</span> factory = <span class="keyword">new</span> <span class="title class_">CarFactory</span>();</span><br><span class="line"><span class="keyword">const</span> sedan = factory.<span class="title function_">createCar</span>(<span class="string">&#x27;Sedan&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> suv = factory.<span class="title function_">createCar</span>(<span class="string">&#x27;SUV&#x27;</span>);</span><br><span class="line"></span><br><span class="line">sedan.<span class="title function_">drive</span>();  <span class="comment">// Driving a Sedan</span></span><br><span class="line">suv.<span class="title function_">drive</span>();    <span class="comment">// Driving a SUV</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li><code>CarFactory</code> 负责根据传入的 <code>type</code> 创建相应的 <code>Car</code> 实例。</li><li>当需要添加新类型的汽车时，可以在 <code>CarFactory</code> 中添加相应的分支，而不影响客户端代码。</li></ol><h3 id="优点">优点</h3><ol><li>客户端无需知道具体的产品类，只需通过工厂类来创建对象。</li><li>实现了对象创建和使用的分离。</li></ol><h3 id="缺点">缺点</h3><ol><li>违反了<strong>开放-封闭原则</strong>。每次添加新的产品时，都必须修改工厂类的代码。</li></ol><h2 id="工厂方法模式（Factory-Method-Pattern）">工厂方法模式（Factory Method Pattern）</h2><p><strong>工厂方法模式</strong>是工厂模式的改进版本，它将对象的创建延迟到子类中，遵循了开放-封闭原则。每个产品类都有对应的工厂子类，客户端通过这些子类工厂来创建具体的产品对象。</p><h3 id="代码实现-2">代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method should be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sedan</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Car</span> &#123;</span><br><span class="line">    <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Driving a Sedan&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SUV</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Car</span> &#123;</span><br><span class="line">    <span class="title function_">drive</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Driving an SUV&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="title function_">createCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method should be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SedanFactory</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CarFactory</span> &#123;</span><br><span class="line">    <span class="title function_">createCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Sedan</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SUVFactory</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CarFactory</span> &#123;</span><br><span class="line">    <span class="title function_">createCar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">SUV</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用工厂</span></span><br><span class="line"><span class="keyword">const</span> sedanFactory = <span class="keyword">new</span> <span class="title class_">SedanFactory</span>();</span><br><span class="line"><span class="keyword">const</span> suvFactory = <span class="keyword">new</span> <span class="title class_">SUVFactory</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sedan = sedanFactory.<span class="title function_">createCar</span>();</span><br><span class="line"><span class="keyword">const</span> suv = suvFactory.<span class="title function_">createCar</span>();</span><br><span class="line"></span><br><span class="line">sedan.<span class="title function_">drive</span>();  <span class="comment">// Driving a Sedan</span></span><br><span class="line">suv.<span class="title function_">drive</span>();    <span class="comment">// Driving an SUV</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li><code>CarFactory</code> 是抽象工厂类，定义了 <code>createCar()</code> 方法，具体工厂类（如 <code>SedanFactory</code> 和 <code>SUVFactory</code>）需要实现该方法。</li><li>这样，在增加新的 <code>Car</code> 子类时，无需修改工厂的基类，只需要创建新的工厂类，这符合开放-封闭原则。</li></ol><h3 id="优点-2">优点</h3><ol><li>遵循了开放-封闭原则，产品的扩展更加容易。</li><li>每个工厂类只负责创建一种具体产品，职责更加明确。</li></ol><h3 id="缺点-2">缺点</h3><ol><li>需要为每种产品创建对应的工厂类，类的数量增多，增加了系统的复杂度。</li></ol><h2 id="抽象工厂模式（Abstract-Factory-Pattern）">抽象工厂模式（Abstract Factory Pattern）</h2><p><strong>抽象工厂模式</strong>用于创建一系列相关或相互依赖的对象，而无需指定具体的类。</p><h3 id="代码实现-3">代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sedan</span> &#123;</span><br><span class="line">    <span class="title function_">createEngine</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method should be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">createWheels</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method should be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体产品类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LuxurySedan</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Sedan</span> &#123;</span><br><span class="line">    <span class="title function_">createEngine</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Luxury Sedan Engine&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">createWheels</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Luxury Sedan Wheels&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EconomySedan</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Sedan</span> &#123;</span><br><span class="line">    <span class="title function_">createEngine</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Economy Sedan Engine&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">createWheels</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Economy Sedan Wheels&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line">    <span class="title function_">createSedan</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;This method should be overwritten!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体工厂类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LuxuryCarFactory</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CarFactory</span> &#123;</span><br><span class="line">    <span class="title function_">createSedan</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LuxurySedan</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EconomyCarFactory</span> <span class="keyword">extends</span> <span class="title class_ inherited__">CarFactory</span> &#123;</span><br><span class="line">    <span class="title function_">createSedan</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">EconomySedan</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用抽象工厂</span></span><br><span class="line"><span class="keyword">const</span> luxuryFactory = <span class="keyword">new</span> <span class="title class_">LuxuryCarFactory</span>();</span><br><span class="line"><span class="keyword">const</span> economyFactory = <span class="keyword">new</span> <span class="title class_">EconomyCarFactory</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> luxurySedan = luxuryFactory.<span class="title function_">createSedan</span>();</span><br><span class="line"><span class="keyword">const</span> economySedan = economyFactory.<span class="title function_">createSedan</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(luxurySedan.<span class="title function_">createEngine</span>());  <span class="comment">// Luxury Sedan Engine</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(economySedan.<span class="title function_">createWheels</span>()); <span class="comment">// Economy Sedan Wheels</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li><code>CarFactory</code> 是抽象工厂类，定义了创建产品族（如 <code>Sedan</code>）的方法。不同的工厂类（如 <code>LuxuryCarFactory</code> 和 <code>EconomyCarFactory</code>）分别创建不同类型的 <code>Sedan</code>。</li><li>这样，工厂可以生产一整套相关的产品，而不需要指定每个具体的产品类。</li></ol><h3 id="优点-3">优点</h3><ol><li>可以创建一系列相关的对象，确保它们的兼容性。</li><li>遵循了开放-封闭原则，增加新的产品族时，只需要创建新的工厂类。</li></ol><h3 id="缺点-3">缺点</h3><ol><li>工厂类和产品类的数量急剧增加，系统复杂度提高。</li><li>在某些情况下，抽象工厂模式可能显得过于复杂，不易维护。</li></ol><h2 id="工厂模式优缺点">工厂模式优缺点</h2><h3 id="优点-4">优点</h3><ol><li><strong>解耦创建和使用</strong>：将对象的创建逻辑封装在工厂中，客户端只需要关心对象的使用。</li><li><strong>可扩展性强</strong>：当需要新增对象时，工厂模式可以轻松扩展而不修改现有代码。</li><li><strong>遵循单一职责原则</strong>：工厂类专门负责对象的创建，职责明确。</li></ol><h3 id="缺点-4">缺点</h3><ol><li><strong>类的数量增加</strong>：随着产品类型增多，可能导致工厂类和产品类的数量快速增长。</li><li><strong>增加复杂度</strong>：对于简单的对象创建，工厂模式可能显得过于复杂，不一定适用。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-单例模式</title>
    <link href="/2024/09/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2024/09/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>单例模式</strong>（Singleton Pattern）是设计模式中的一种创建型模式，其目的是保证一个类只有一个实例，并提供一个全局访问点来访问该实例。</p><span id="more"></span><h1>单例模式</h1><h2 id="特点">特点</h2><ol><li><strong>唯一性</strong>：一个类只有一个实例，并且只能有一个。</li><li><strong>全局访问点</strong>：通过提供一个静态方法，能够访问这个唯一的实例。</li></ol><h2 id="实现">实现</h2><ol><li><strong>私有化构造函数</strong>：防止外部直接通过 <code>new</code> 操作符创建对象。</li><li><strong>提供一个静态方法来获取实例</strong>：在这个方法中判断实例是否已经存在，若不存在则创建实例并返回；若已存在则直接返回该实例。</li><li><strong>存储实例的静态变量</strong>：确保类的唯一实例能够被全局访问。</li></ol><h2 id="实现方式">实现方式</h2><h3 id="基础实现">基础实现</h3><p>使用一个闭包来保存类的实例，并通过一个静态方法（或属性）来获取这个实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Singleton</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">createInstance</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;I am the Singleton instance&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">getInstance</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="title function_">createInstance</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="title class_">Singleton</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1 === instance2); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">message</span>); <span class="comment">// I am the Singleton instance</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li>使用了**立即执行函数表达式（IIFE）**创建一个闭包，确保 <code>instance</code> 变量是私有的，外部无法访问或修改。</li><li><code>getInstance</code> 方法负责返回唯一的实例。如果实例尚未创建，它会调用 <code>createInstance</code> 创建一个实例。</li></ol><h3 id="ES6-类实现">ES6 类实现</h3><p>在 ES6 及以上版本中，可以使用 <code>class</code> 语法来实现单例模式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Singleton</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">        <span class="title class_">Singleton</span>.<span class="property">instance</span> = <span class="variable language_">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Singleton</span>.<span class="property">instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">someMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is a method in Singleton instance&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1 === instance2); <span class="comment">// true</span></span><br><span class="line">instance1.<span class="title function_">someMethod</span>(); <span class="comment">// This is a method in Singleton instance</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li>通过 <code>if (!Singleton.instance)</code> 来判断是否已经有实例存在，如果不存在则赋值给 <code>Singleton.instance</code>，并将该实例返回。</li><li>这样确保每次 <code>new Singleton()</code> 返回的都是同一个实例。</li></ol><h3 id="ES6-模块化实现">ES6 模块化实现</h3><p>ES6 的模块系统天然适合实现单例模式，因为 JavaScript 模块只会被加载一次，并且模块的状态可以在多个模块间共享。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// singleton.js</span></span><br><span class="line"><span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">        instance = <span class="variable language_">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">someMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is a method in Singleton instance&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Singleton</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Singleton</span> <span class="keyword">from</span> <span class="string">&#x27;./singleton.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1 === instance2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li>通过 <code>export default</code> 导出 <code>Singleton</code> 类，确保它的实例在不同模块中共享。</li><li>无论导入多少次 <code>Singleton</code> 模块，它都只会创建一次实例。</li></ol><h2 id="单例模式的变种">单例模式的变种</h2><h3 id="懒汉式单例模式（Lazy-Singleton）">懒汉式单例模式（Lazy Singleton）</h3><p>懒汉式单例模式是在需要时才进行实例化，这可以节省初始化的资源，尤其是在创建对象的过程比较耗时的时候。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">LazySingleton</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Singleton</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">message</span>: <span class="string">&quot;I am the Lazy Singleton instance&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">getInstance</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance1 = <span class="title class_">LazySingleton</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"><span class="keyword">const</span> instance2 = <span class="title class_">LazySingleton</span>.<span class="title function_">getInstance</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1 === instance2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ol><li>只有在第一次调用 <code>getInstance()</code> 时，才会真正创建实例，从而达到懒加载（惰性加载）的效果。</li></ol><h3 id="线程安全的单例模式">线程安全的单例模式</h3><p>在多线程环境中，单例模式的实现可能会遇到线程安全问题。尽管 JavaScript 在浏览器端是单线程执行的，但在某些服务器端 JavaScript 环境（如 Node.js）中，有可能需要考虑线程安全问题。</p><p>为了避免多个线程同时创建多个实例，单例模式可以引入锁机制来实现线程安全。在 JavaScript 中，可以通过 <code>async/await</code> 或 <code>Promise</code> 来模拟这种锁机制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Singleton</span>.<span class="property">instance</span>) &#123;</span><br><span class="line">            <span class="title class_">Singleton</span>.<span class="property">instance</span> = <span class="variable language_">this</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">data</span> = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Singleton</span>.<span class="property">instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">loadData</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">data</span> = <span class="keyword">await</span> <span class="title function_">fetchDataFromSomewhere</span>(); <span class="comment">// 假设这是一个异步函数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchDataFromSomewhere</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&quot;Loaded data&quot;</span>), <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">instance.<span class="title function_">loadData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data));</span><br></pre></td></tr></table></figure><h2 id="单例模式的优缺点">单例模式的优缺点</h2><h3 id="优点">优点</h3><ol><li><strong>全局唯一性</strong>：确保类的实例是唯一的，避免了创建多个对象导致的资源浪费。</li><li><strong>全局访问点</strong>：提供一个全局的访问点，任何地方都可以方便地访问到这个对象。</li><li><strong>节约资源</strong>：在一些场景中（如数据库连接、日志管理等），单例模式能够有效地减少资源的使用，避免性能开销。</li></ol><h3 id="缺点">缺点</h3><ol><li><strong>不适合频繁变更的类</strong>：单例模式限制了类的实例数量，因此当某个类需要频繁创建和销毁时，单例模式显得不合适。</li><li><strong>隐藏依赖</strong>：单例模式通过全局访问点提供对象，这可能导致依赖关系变得不清晰，影响代码的可读性和维护性。</li><li><strong>多线程问题</strong>：虽然 JavaScript 在浏览器端是单线程的，但在某些多线程的 JavaScript 环境（如Node.js）中，单例模式可能需要考虑线程安全问题。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式-设计思想与原则</title>
    <link href="/2024/09/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B8%8E%E5%8E%9F%E5%88%99/"/>
    <url>/2024/09/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3%E4%B8%8E%E5%8E%9F%E5%88%99/</url>
    
    <content type="html"><![CDATA[<p>设计模式是一套经过验证的解决方案，用于解决软件设计中的常见问题。其核心思想是通过总结和提炼开发过程中反复出现的设计问题，提供可以复用的解决方案，从而提高代码的可维护性、可复用性和扩展性。设计模式的思想和原则旨在确保软件系统能够随着需求的变化保持灵活性和稳定性。</p><span id="more"></span><h1>设计思想与原则</h1><h2 id="设计模式思想">设计模式思想</h2><ol><li><strong>复用代码</strong>：通过使用模式来解决常见问题，减少代码的重复，提升开发效率。</li><li><strong>降低耦合</strong>：设计模式鼓励将模块间的依赖降到最低，从而减少变化带来的影响，使系统更加健壮。</li><li><strong>提高扩展性</strong>：通过模式的应用，系统能够更好地适应变化，例如通过接口或抽象类扩展新的功能。</li><li><strong>代码可维护性</strong>：使用设计模式编写的代码通常更加清晰、易于理解，团队合作时更易于维护。</li><li><strong>提高灵活性</strong>：设计模式鼓励使用面向对象编程中的抽象和多态，使系统更灵活，应对需求变更时不需要大幅度修改代码。</li></ol><h2 id="设计模型原则">设计模型原则</h2><p>SOLID 是一个面向对象设计和编程中的五个基本原则的缩写，它们旨在帮助开发者设计更加灵活、可维护和可扩展的软件系统。</p><ol><li>单一职责原则（Single Responsibility Principle，SRP）</li><li>开放/封闭原则（Open/Closed Principle，OCP）</li><li>里氏替换原则（Liskov Substitution Principle，LSP）</li><li>接口隔离原则（Interface Segregation Principle，ISP）</li><li>依赖倒置原则（Dependency Inversion Principle，DIP）</li></ol><h3 id="单一职责原则">单一职责原则</h3><p>一个类（函数）应该只有一个引起变化的原因。每个类（函数）应该只负责一项单一的职责。这样可以提高代码的可维护性和可测试性。</p><h4 id="场景">场景</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="title function_">validateUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="comment">// 用户验证逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">saveUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="comment">// 保存用户数据逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">logUserAction</span>(<span class="params">action</span>) &#123;</span><br><span class="line">    <span class="comment">// 记录用户行为日志逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，一个 <code>UserService</code> 类同时负责用户的验证、保存和日志记录。<code>UserService</code> 类违反了单一职责原则，它负责多个职责：验证、保存和日志记录。如果日志记录逻辑变化，整个类都需要修改。</p><h4 id="解决方案">解决方案</h4><p>将每个职责拆分到不同的类中，从而遵循单一职责原则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UserValidator</span> &#123;</span><br><span class="line">    <span class="title function_">validate</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="comment">// 用户验证逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserRepository</span> &#123;</span><br><span class="line">    <span class="title function_">save</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="comment">// 保存用户数据逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserLogger</span> &#123;</span><br><span class="line">    <span class="title function_">log</span>(<span class="params">action</span>) &#123;</span><br><span class="line">    <span class="comment">// 记录用户行为日志逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高层逻辑类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">validator, repository, logger</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">validator</span> = validator;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">repository</span> = repository;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">logger</span> = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">register</span>(<span class="params">user</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">validator</span>.<span class="title function_">validate</span>(user);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">repository</span>.<span class="title function_">save</span>(user);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">logger</span>.<span class="title function_">log</span>(<span class="string">&#x27;User registered&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开放-封闭原则">开放/封闭原则</h3><p>软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。即在不修改现有代码的前提下扩展系统的行为。</p><h4 id="场景-2">场景</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="title function_">processPayment</span>(<span class="params">paymentMethod</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (paymentMethod === <span class="string">&#x27;CreditCard&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理信用卡支付</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (paymentMethod === <span class="string">&#x27;PayPal&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 处理 PayPal 支付</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 每新增支付方式都需要修改这里</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，系统中有多个支付方式（如信用卡、PayPal），而每次增加一种新的支付方式时都需要修改原有的支付逻辑。此设计违反了开放-关闭原则，因为每次增加新的支付方式时，我们都需要修改 <code>PaymentService</code> 的代码。</p><h4 id="解决方案-2">解决方案</h4><p>通过扩展新支付类而不是修改原有代码来遵循 OCP。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentService</span> &#123;</span><br><span class="line">    <span class="title function_">processPayment</span>(<span class="params">payment</span>) &#123;</span><br><span class="line">        payment.<span class="title function_">process</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditCardPayment</span> &#123;</span><br><span class="line">    <span class="title function_">process</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 处理信用卡支付</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PayPalPayment</span> &#123;</span><br><span class="line">    <span class="title function_">process</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 处理 PayPal 支付</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增支付方式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ApplePayPayment</span> &#123;</span><br><span class="line">    <span class="title function_">process</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 处理 ApplePay 支付</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> paymentService = <span class="keyword">new</span> <span class="title class_">PaymentService</span>();</span><br><span class="line">paymentService.<span class="title function_">processPayment</span>(<span class="keyword">new</span> <span class="title class_">CreditCardPayment</span>());</span><br><span class="line">paymentService.<span class="title function_">processPayment</span>(<span class="keyword">new</span> <span class="title class_">ApplePayPayment</span>());  <span class="comment">// 无需修改原有代码</span></span><br></pre></td></tr></table></figure><h3 id="里氏替换原则">里氏替换原则</h3><p>子类对象应该能够替换父类对象，而不改变系统的正确性。子类应当完整实现父类的所有行为。</p><h4 id="场景-3">场景</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="title function_">setWidth</span>(<span class="params">width</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setHeight</span>(<span class="params">height</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getArea</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Shape</span> &#123;</span><br><span class="line">    <span class="title function_">setWidth</span>(<span class="params">width</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">height</span> = width;  <span class="comment">// 正方形宽高相等</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setHeight</span>(<span class="params">height</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">width</span> = height;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，有一个基本的形状类 <code>Shape</code> 和一个子类 <code>Rectangle</code>（矩形），后续还计划引入 <code>Square</code>（正方形）。<code>Square</code> 类违背了里氏替换原则，它修改了父类的行为。<code>Rectangle</code> 和 <code>Square</code> 类的行为不一致，当将 <code>Square</code> 代替 <code>Rectangle</code> 时，<code>getArea()</code> 的行为会出错。</p><h4 id="解决方案-3">解决方案</h4><p>为每种形状创建单独的类，而不尝试让 <code>Square</code> 继承 <code>Rectangle</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">width, height</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getArea</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">side</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">side</span> = side;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getArea</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">side</span> * <span class="variable language_">this</span>.<span class="property">side</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口隔离原则">接口隔离原则</h3><p>客户端不应该依赖于它不需要的接口，即为不同的客户端提供专用的接口，而不是使用一个通用的接口。</p><h4 id="场景-4">场景</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="title function_">work</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Robot</span> implements <span class="title class_">Worker</span> &#123;</span><br><span class="line">    <span class="title function_">work</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 机器人工作逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;机器人不需要吃饭&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，一个 <code>Worker</code> 接口有多个方法，如 <code>eat()</code> 和 <code>work()</code>，但有些类并不需要所有方法。<code>Robot</code> 实现了不需要的 <code>eat</code> 方法，违反了接口隔离原则。</p><h4 id="解决方案-4">解决方案</h4><p>将接口拆分为更小的、专门化的接口。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Eater</span> &#123;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line">    <span class="title function_">work</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> implements <span class="title class_">Eater</span>, <span class="title class_">Worker</span> &#123;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 人类吃饭逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">work</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 人类工作逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Robot</span> implements <span class="title class_">Worker</span> &#123;</span><br><span class="line">    <span class="title function_">work</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 机器人工作逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖倒置原则">依赖倒置原则</h3><p>高层模块不应该依赖于低层模块，而两者都应该依赖于抽象。抽象不应该依赖于细节，细节应该依赖于抽象。简而言之，依赖反转原则倡导通过抽象来解耦高层和低层模块之间的依赖关系。</p><h4 id="场景-5">场景</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MySQLDatabase</span> &#123;</span><br><span class="line">    <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// MySQL 连接逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DatabaseService</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">db</span> = <span class="keyword">new</span> <span class="title class_">MySQLDatabase</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">connect</span>();</span><br><span class="line">        <span class="comment">// 其他数据库操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，<code>DatabaseService</code> 直接依赖具体的数据库实现，如 <code>MySQLDatabase</code>。<code>DatabaseService</code> 高层模块直接依赖于 <code>MySQLDatabase</code> 低层模块，这违反了依赖倒置原则。如果我们想换成 <code>MongoDB</code> 或 <code>PostgreSQL</code>，需要修改 <code>DatabaseService</code>。</p><h4 id="解决方案-5">解决方案</h4><p>使用接口（抽象层）来解除具体实现的依赖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Database</span> &#123;</span><br><span class="line">    <span class="title function_">connect</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySQLDatabase</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Database</span> &#123;</span><br><span class="line">    <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// MySQL 连接逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MongoDBDatabase</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Database</span> &#123;</span><br><span class="line">    <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// MongoDB 连接逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DatabaseService</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">database</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">db</span> = database;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">db</span>.<span class="title function_">connect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = <span class="keyword">new</span> <span class="title class_">DatabaseService</span>(<span class="keyword">new</span> <span class="title class_">MySQLDatabase</span>());</span><br><span class="line">service.<span class="title function_">getData</span>();  <span class="comment">// 使用 MySQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service2 = <span class="keyword">new</span> <span class="title class_">DatabaseService</span>(<span class="keyword">new</span> <span class="title class_">MongoDBDatabase</span>());</span><br><span class="line">service2.<span class="title function_">getData</span>();  <span class="comment">// 使用 MongoDB</span></span><br></pre></td></tr></table></figure><h2 id="设计模式分类">设计模式分类</h2><ol><li><strong>创建型模式</strong>：主要解决对象的创建问题，使系统独立于对象的创建过程。<ul><li>常见模式：单例模式、工厂模式、抽象工厂模式、建造者模式、原型模式。</li></ul></li><li><strong>结构型模式</strong>：关注对象间的组合，通过合理地组合对象来实现新的功能。<ul><li>常见模式：适配器模式、装饰者模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</li></ul></li><li><strong>行为型模式</strong>：关注对象之间的通信与职责划分，帮助管理复杂的对象交互。<ul><li>常见模式：观察者模式、状态模式、策略模式、命令模式、责任链模式、中介者模式、迭代器模式、模板方法模式、备忘录模式、解释器模式、访问者模式。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序-基数排序</title>
    <link href="/2024/09/23/%E6%8E%92%E5%BA%8F-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/09/23/%E6%8E%92%E5%BA%8F-%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>基数排序</strong>是一种非比较型的整数排序算法，它通过按位排序的方式来实现排序。基数排序的主要思想是将数据分解成几个数字位，然后从最低位到最高位对这些位进行排序。</p><span id="more"></span><h1>基数排序</h1><h2 id="基数排序步骤">基数排序步骤</h2><ol><li><strong>确定排序位数</strong>：找到数据中最大数的位数，确定需要排序的位数。</li><li><strong>按照每一位进行排序</strong>：从最低位到最高位进行排序，通常使用稳定的排序算法（如计数排序）对每一位进行排序。</li><li><strong>合并结果</strong>：每一位的排序完成后，合并结果，直到所有位数都排序完成。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计数排序，用于对每一位进行排序</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countingSort</span>(<span class="params">arr, exp</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> output = <span class="keyword">new</span> <span class="title class_">Array</span>(n);  <span class="comment">// 存储排序后的结果</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>).<span class="title function_">fill</span>(<span class="number">0</span>);  <span class="comment">// 用于计数的数组</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计每个数字在当前位的出现次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(arr[i] / exp) % <span class="number">10</span>;</span><br><span class="line">        count[index]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将计数数组转换为位置数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        count[i] += count[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建输出数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(arr[i] / exp) % <span class="number">10</span>;</span><br><span class="line">        output[count[index] - <span class="number">1</span>] = arr[i];</span><br><span class="line">        count[index]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将排序结果复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        arr[i] = output[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基数排序主函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">radixSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr);  <span class="comment">// 找到最大值以确定最大位数</span></span><br><span class="line">    <span class="keyword">let</span> exp = <span class="number">1</span>;  <span class="comment">// 从最低位开始排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="title class_">Math</span>.<span class="title function_">floor</span>(max / exp) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="title function_">countingSort</span>(arr, exp);</span><br><span class="line">        exp *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">170</span>, <span class="number">45</span>, <span class="number">75</span>, <span class="number">90</span>, <span class="number">802</span>, <span class="number">24</span>, <span class="number">2</span>, <span class="number">66</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">radixSort</span>(array));  <span class="comment">// 输出: [2, 24, 45, 66, 75, 90, 170, 802]</span></span><br></pre></td></tr></table></figure><ol><li><p><strong><code>countingSort</code> 函数</strong>：对每一位使用计数排序进行排序。</p><ul><li><p><strong>计数</strong>：统计每个数字在当前位的出现次数。</p></li><li><p><strong>位置计算</strong>：将计数数组转换为位置数组，计算每个数字的最终位置。</p></li><li><p><strong>构建输出数组</strong>：根据位置数组构建排序后的输出数组。</p></li><li><p><strong>复制结果</strong>：将排序结果复制回原数组。</p></li></ul></li><li><p><strong><code>radixSort</code> 函数</strong>：</p><ul><li><p><strong>确定最大值</strong>：找到最大值以确定最大位数。</p></li><li><p><strong>迭代每一位</strong>：从最低位开始进行排序，逐步到最高位，直到所有位都排序完成。</p></li></ul></li></ol><h2 id="时间复杂度">时间复杂度</h2><ol><li><strong>时间复杂度</strong>：O(n * k)，其中 n 是数组的长度，k 是最大值的位数。</li><li><strong>空间复杂度</strong>：O(n + k)，其中 n 是数组的长度，k 是位数范围（例如 10）。</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序-计数排序</title>
    <link href="/2024/09/20/%E6%8E%92%E5%BA%8F-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/09/20/%E6%8E%92%E5%BA%8F-%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>计数排序</strong>是一种适用于整数排序的非比较型排序算法。它的基本思想是统计每个元素出现的次数，然后根据这些统计结果生成排序后的数组。计数排序对于数据范围较小且范围已知的情况尤其有效。</p><span id="more"></span><h1>计数排序</h1><h2 id="计数排序步骤">计数排序步骤</h2><ol><li><strong>找出数组中的最大值和最小值</strong>，确定数值范围。</li><li><strong>创建计数数组</strong>，其长度为数值范围的大小，用来记录每个元素出现的次数。</li><li><strong>统计元素出现的次数</strong>，将原数组中每个元素对应的计数加1。</li><li><strong>计算累计计数</strong>，将计数数组中的值更新为累计计数，以确定元素在排序后数组中的位置。</li><li><strong>填充排序后的数组</strong>，通过从原数组中读取每个元素，查找其在计数数组中的位置，填入到结果数组中。</li><li><strong>返回排序后的数组</strong>。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countingSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 找出最大值和最小值</span></span><br><span class="line">    <span class="keyword">let</span> min = <span class="title class_">Math</span>.<span class="title function_">min</span>(...arr);</span><br><span class="line">    <span class="keyword">let</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建计数数组</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="keyword">new</span> <span class="title class_">Array</span>(max - min + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 统计每个元素出现的次数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        count[arr[i] - min]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 填充排序后的数组</span></span><br><span class="line">    <span class="keyword">let</span> sortedIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (count[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            arr[sortedIndex] = i + min;</span><br><span class="line">            sortedIndex++;</span><br><span class="line">            count[i]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countingSort</span>(array));  <span class="comment">// 输出: [1, 2, 2, 3, 3, 4, 8]</span></span><br></pre></td></tr></table></figure><ol><li><strong>找出最大值和最小值</strong>：通过 <code>Math.min</code> 和 <code>Math.max</code> 找到数组中的最大值和最小值。</li><li><strong>创建计数数组</strong>：计数数组的长度为 <code>max - min + 1</code>，每个索引对应一个元素值出现的次数。</li><li><strong>统计元素出现的次数</strong>：遍历原数组，每遇到一个元素，就将其在计数数组中对应的位置加 1。</li><li><strong>填充排序后的数组</strong>：根据计数数组的值，将元素按照顺序填入到原数组中。</li></ol><h2 id="时间复杂度">时间复杂度</h2><ol><li><strong>时间复杂度</strong>：O(n + k)，其中 n 是数组长度，k 是最大值和最小值之间的差值。由于不需要比较元素，计数排序在一定条件下可以非常高效。</li><li><strong>空间复杂度</strong>：O(k)，需要额外的空间存储计数数组。</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序-桶排序</title>
    <link href="/2024/09/19/%E6%8E%92%E5%BA%8F-%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/09/19/%E6%8E%92%E5%BA%8F-%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>桶排序</strong>是一种非比较型的排序算法，适用于均匀分布的浮点数。其基本思想是将数据分布到若干个桶中，然后对每个桶内的数据进行排序，最后将所有桶中的数据合并得到最终的排序结果。桶排序通常结合其他排序算法（如插入排序）对桶内的数据进行排序。</p><span id="more"></span><h1>桶排序</h1><h2 id="桶排序步骤">桶排序步骤</h2><ol><li><strong>创建桶</strong>：根据数据的范围和数量创建若干个桶。每个桶可以存储数据的一个范围。</li><li><strong>分配数据到桶</strong>：将输入数据分配到对应的桶中。</li><li><strong>对每个桶内的数据进行排序</strong>：可以使用其他排序算法（如插入排序）对每个桶内的数据进行排序。</li><li><strong>合并桶中的数据</strong>：将所有桶中的数据按顺序合并到一个结果数组中。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bucketSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 创建桶</span></span><br><span class="line">    <span class="keyword">let</span> bucketCount = <span class="number">10</span>; <span class="comment">// 可以根据数据范围调整桶的数量</span></span><br><span class="line">    <span class="keyword">let</span> buckets = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: bucketCount &#125;, <span class="function">() =&gt;</span> []);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 分配数据到桶</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(num * bucketCount);</span><br><span class="line">        buckets[index].<span class="title function_">push</span>(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 对每个桶内的数据进行排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> bucket <span class="keyword">of</span> buckets) &#123;</span><br><span class="line">        bucket.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 合并桶中的数据</span></span><br><span class="line">    <span class="keyword">return</span> buckets.<span class="title function_">flat</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">0.78</span>, <span class="number">0.17</span>, <span class="number">0.39</span>, <span class="number">0.26</span>, <span class="number">0.72</span>, <span class="number">0.94</span>, <span class="number">0.21</span>, <span class="number">0.12</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bucketSort</span>(array));  <span class="comment">// 输出: [0.12, 0.17, 0.21, 0.26, 0.39, 0.72, 0.78, 0.94]</span></span><br></pre></td></tr></table></figure><ol><li><strong>创建桶</strong>：创建一个桶的数组，每个桶初始化为空数组。桶的数量可以根据数据的分布进行调整。</li><li><strong>分配数据到桶</strong>：根据数据值将每个数据放入相应的桶中。这里通过将数据乘以桶的数量并取整来确定桶的索引。</li><li><strong>排序桶内的数据</strong>：对每个桶内的数据进行排序。这里使用了 JavaScript 的内置排序函数。</li><li><strong>合并数据</strong>：将所有桶中的数据合并到一个数组中。<code>flat()</code> 方法用于将二维数组（桶的数组）扁平化为一维数组。</li></ol><h2 id="时间复杂度">时间复杂度</h2><ol><li><strong>最佳情况</strong>：O(n + k)，其中 n 是数组的长度，k 是桶的数量。最佳情况发生在数据均匀分布时，每个桶的元素数目大致相同。</li><li><strong>最坏情况</strong>：O(n^2)，在极端情况下（例如所有数据都落在同一个桶中），桶内排序可能退化为O(n^2)。</li><li><strong>平均情况</strong>：O(n + n log n)，假设数据均匀分布，桶内排序使用的排序算法的时间复杂度为O(n log n)。</li><li><strong>空间复杂度</strong>：O(n + k)，需要额外的空间来存储桶和每个桶中的数据。</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序-归并排序</title>
    <link href="/2024/09/18/%E6%8E%92%E5%BA%8F-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/09/18/%E6%8E%92%E5%BA%8F-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>归并排序</strong>是一种经典的<strong>分治算法</strong>，通过将数组递归地分成两半，分别排序后再合并，最终得到有序数组</p><span id="more"></span><h1>归并排序</h1><h2 id="归并排序步骤">归并排序步骤</h2><ol><li><strong>分割</strong>：将数组分成两半，递归地对每一半进行排序。</li><li><strong>合并</strong>：将两个有序的子数组合并成一个有序的数组。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并两个有序数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比较两个数组中的元素，将较小的元素推入结果数组</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; left.<span class="property">length</span> &amp;&amp; j &lt; right.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[i] &lt; right[j]) &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(left[i]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(right[j]);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将剩余的元素添加到结果数组</span></span><br><span class="line">    <span class="keyword">return</span> result.<span class="title function_">concat</span>(left.<span class="title function_">slice</span>(i)).<span class="title function_">concat</span>(right.<span class="title function_">slice</span>(j));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序主函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="comment">// 基线条件：如果数组长度小于等于1，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数组分成两半</span></span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>(arr.<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> left = arr.<span class="title function_">slice</span>(<span class="number">0</span>, mid);  <span class="comment">// 左半部分</span></span><br><span class="line">    <span class="keyword">let</span> right = arr.<span class="title function_">slice</span>(mid);  <span class="comment">// 右半部分</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归地排序左右两半并合并</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(left), <span class="title function_">mergeSort</span>(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">mergeSort</span>(array));  <span class="comment">// 输出: [5, 6, 7, 11, 12, 13]</span></span><br></pre></td></tr></table></figure><ol><li><p><strong><code>merge</code> 函数</strong>：负责将两个有序数组合并成一个有序数组。在合并过程中，依次比较两个数组的当前元素，将较小的元素推入结果数组，最后将剩余元素加入结果数组。</p></li><li><p><strong><code>mergeSort</code> 函数</strong>：</p><ul><li><p>基线条件：当数组的长度为 0 或 1 时，直接返回该数组（已经是有序的）。</p></li><li><p>将数组一分为二，分别对左右两部分递归调用 <code>mergeSort</code>。</p></li><li><p>使用 <code>merge</code> 函数将两个排序后的子数组合并。</p></li></ul></li></ol><h2 id="时间复杂度">时间复杂度</h2><ol><li><strong>分解阶段</strong>：每次将数组分成两半，最多需要进行 log n 次分割。</li><li><strong>合并阶段</strong>：每次合并两个有序数组的时间复杂度为 O(n)。</li><li><strong>总时间复杂度</strong>：O(n log n)</li><li><strong>空间复杂度</strong>： O(n)</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序-堆排序</title>
    <link href="/2024/09/14/%E6%8E%92%E5%BA%8F-%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/09/14/%E6%8E%92%E5%BA%8F-%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>堆排序</strong>是一种基于<strong>堆数据结构</strong>的排序算法。堆是一棵完全二叉树，可以通过数组来实现。</p><span id="more"></span><h1>堆排序</h1><p>堆排序分为两个主要步骤：</p><ol><li><strong>构建大顶堆</strong>：保证父节点总是大于等于子节点。</li><li><strong>排序过程</strong>：将堆顶元素（最大值）与最后一个元素交换，然后对剩余元素重新调整为大顶堆，重复这一过程，直到排序完成。</li></ol><h2 id="堆排序步骤">堆排序步骤</h2><ol><li>将无序数组构建成<strong>大顶堆</strong>。</li><li>每次将堆顶（最大值）与数组的最后一个元素交换，缩小堆的范围后，继续对剩余部分调整为大顶堆。</li><li>重复该过程，直到堆中只有一个元素为止。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将数组调整为大顶堆</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapify</span>(<span class="params">arr, n, i</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> largest = i;  <span class="comment">// 先假设父节点是最大的</span></span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">2</span> * i + <span class="number">1</span>;  <span class="comment">// 左子节点</span></span><br><span class="line">    <span class="keyword">let</span> right = <span class="number">2</span> * i + <span class="number">2</span>;  <span class="comment">// 右子节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果左子节点存在且比父节点大，更新最大值索引</span></span><br><span class="line">    <span class="keyword">if</span> (left &lt; n &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果右子节点存在且比当前最大值大，更新最大值索引</span></span><br><span class="line">    <span class="keyword">if</span> (right &lt; n &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果最大值不是父节点，交换它们</span></span><br><span class="line">    <span class="keyword">if</span> (largest !== i) &#123;</span><br><span class="line">        [arr[i], arr[largest]] = [arr[largest], arr[i]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归地调整受影响的子树</span></span><br><span class="line">        <span class="title function_">heapify</span>(arr, n, largest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆排序主函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">heapSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = arr.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建大顶堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">2</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="title function_">heapify</span>(arr, n, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次将堆顶元素与最后一个元素交换，并重新调整堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 将当前最大值（堆顶）移到数组的最后</span></span><br><span class="line">        [arr[<span class="number">0</span>], arr[i]] = [arr[i], arr[<span class="number">0</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调整剩余元素为大顶堆</span></span><br><span class="line">        <span class="title function_">heapify</span>(arr, i, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">heapSort</span>(array));  <span class="comment">// 输出: [5, 6, 7, 11, 12, 13]</span></span><br></pre></td></tr></table></figure><ol><li><strong><code>heapify</code> 函数</strong>：调整数组为大顶堆。从父节点开始，将左右子节点与父节点进行比较，如果子节点比父节点大，则交换，并递归调整受影响的子树。</li><li><strong><code>heapSort</code> 函数</strong>：<ul><li>首先从数组的中间向前遍历，构建大顶堆（即调整每个非叶子节点）。</li><li>然后依次将堆顶元素（最大值）移到数组的末尾，并缩小堆的范围，重复堆化操作，最终实现排序。</li></ul></li></ol><h2 id="时间复杂度">时间复杂度</h2><ol><li><strong>构建大顶堆</strong>：O(n)</li><li><strong>调整堆</strong>：O(log n)（每次堆化操作的时间复杂度）</li><li><strong>整体时间复杂度</strong>：O(n log n)</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序-希尔排序</title>
    <link href="/2024/09/13/%E6%8E%92%E5%BA%8F-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/09/13/%E6%8E%92%E5%BA%8F-%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>希尔排序</strong>是插入排序的一种改进版，通过比较相距较远的元素来提前进行局部排序，以减少后续需要进行的交换次数，从而提高效率。希尔排序的关键在于<strong>分组</strong>和<strong>间隔</strong>的选择。它通过逐步缩小间隔，最后进行标准的插入排序，使整体排序效率得以提升。</p><span id="more"></span><h1>希尔排序</h1><h2 id="希尔排序步骤">希尔排序步骤</h2><ol><li><strong>分组排序</strong>：将数组按照一定的间隔（gap）分为若干个子数组，对每个子数组分别进行插入排序。</li><li><strong>逐步缩小间隔</strong>：随着排序进行，逐渐缩小间隔，直到间隔为 1，即最后一次对整个数组进行标准的插入排序。</li><li><strong>排序完成</strong>：当间隔缩小到 1 后，数组会基本有序，最后一次插入排序会很高效。</li></ol><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shellSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="comment">// 选择一个合适的初始间隔（一般从 n/2 开始）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> gap = <span class="title class_">Math</span>.<span class="title function_">floor</span>(n / <span class="number">2</span>); gap &gt; <span class="number">0</span>; gap = <span class="title class_">Math</span>.<span class="title function_">floor</span>(gap / <span class="number">2</span>)) &#123;</span><br><span class="line">        <span class="comment">// 从 gap 开始，对每个子数组进行插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = gap; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> temp = arr[i]; <span class="comment">// 保存当前元素</span></span><br><span class="line">            <span class="keyword">let</span> j;</span><br><span class="line">            <span class="comment">// 对当前元素进行插入排序</span></span><br><span class="line">            <span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp; j -= gap) &#123;</span><br><span class="line">                arr[j] = arr[j - gap]; <span class="comment">// 元素右移</span></span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = temp; <span class="comment">// 插入当前元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">12</span>, <span class="number">34</span>, <span class="number">54</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">shellSort</span>(array));  <span class="comment">// 输出: [2, 3, 12, 34, 54]</span></span><br></pre></td></tr></table></figure><ol><li><strong><code>gap = Math.floor(n / 2)</code></strong>：选择初始间隔，一般从数组长度的一半开始。</li><li><strong>逐步缩小间隔</strong>：每次 <code>gap</code> 取之前的一半，直到 <code>gap</code> 为 1。</li><li><strong>插入排序</strong>：在每个间隔下，对子数组执行插入排序。</li></ol><h2 id="时间复杂度：">时间复杂度：</h2><ul><li>最好情况：O(n log n)</li><li>最坏情况：O(n²)</li><li>平均时间复杂度：O(n^(3/2))（根据间隔的选择）</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序-快速排序</title>
    <link href="/2024/09/12/%E6%8E%92%E5%BA%8F-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/09/12/%E6%8E%92%E5%BA%8F-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>快速排序（Quick Sort）是一种<strong>分治算法</strong>，通过递归地将数组分为较小的子数组来排序。它的工作原理是从数组中选择一个<strong>基准元素</strong>，然后将数组划分为两部分：一部分比基准元素小，另一部分比基准元素大。接着对这两部分递归地进行排序，直到整个数组有序。</p><span id="more"></span><h1>快速排序</h1><h2 id="快速排序步骤">快速排序步骤</h2><ol><li><strong>选择基准</strong>：从数组中选择一个基准元素。</li><li><strong>分区</strong>：将数组中的值与基准元素比较大小做分区。</li><li><strong>递归排序</strong>：对分区的数组进行递归排序。</li><li><strong>合并</strong>：由于递归排序是就地进行的，不需要额外合并过程，最终数组自然有序。</li></ol><h2 id="分治法">分治法</h2><p>这种方法更像是<strong>非原地的快速排序</strong>，因为它并没有在原数组上进行操作，而是通过额外的数组来递归排序。它的空间复杂度较高，因为每次递归都会创建新的数组。</p><h3 id="代码实现">代码实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="comment">// 基线条件：数组长度为0或1时直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择基准元素：这里选择数组的最后一个元素</span></span><br><span class="line">    <span class="keyword">let</span> pivot = arr[arr.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建两个数组：左侧数组存储比 pivot 小的元素，右侧数组存储比 pivot 大的元素</span></span><br><span class="line">    <span class="keyword">let</span> left = [];</span><br><span class="line">    <span class="keyword">let</span> right = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历数组中的所有元素，进行分区</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">            left.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 递归排序左边和右边的数组，合并最终结果</span></span><br><span class="line">    <span class="keyword">return</span> [...<span class="title function_">quickSort</span>(left), pivot, ...<span class="title function_">quickSort</span>(right)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>(array)); <span class="comment">// 输出: [1, 5, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>基线条件</strong>：如果数组长度为 0 或 1，直接返回该数组，因为它已经是有序的。</p></li><li><p><strong>选择基准</strong>：这里选择数组的最后一个元素作为基准。基准的选择并不固定，也可以选择第一个元素、中间元素或者随机选择一个。</p></li><li><p><strong>分区过程</strong>：将数组中的每个元素与基准进行比较：</p><ul><li><p>小于基准的元素放到 <code>left</code> 数组中。</p></li><li><p>大于或等于基准的元素放到 <code>right</code> 数组中。</p></li></ul></li><li><p><strong>递归排序</strong>：递归地对 <code>left</code> 和 <code>right</code> 子数组进行排序，并返回排序后的数组。</p></li></ol><h2 id="代码优化">代码优化</h2><p>快速排序的核心在于<strong>分区</strong>（partition），即根据基准值（pivot）将数组分成两部分，一部分小于等于基准值，另一部分大于等于基准值。不同的分区方法影响着快速排序的效率和行为。</p><h3 id="Lomuto-分区法">Lomuto 分区法</h3><p>Lomuto 分区法是最常见和简单的分区方法，它使用一个指针来扫描数组，确定分区位置。</p><h4 id="步骤">步骤</h4><ol><li>选择数组的最后一个元素作为基准值。</li><li>使用一个 <code>i</code> 指针来追踪小于基准值的部分。</li><li>使用另一个指针 <code>j</code> 遍历数组，将小于基准值的元素与 <code>i</code> 指针指向的元素交换。</li><li>最后将基准值与 <code>i+1</code> 位置的元素交换，从而使基准值位于正确位置。</li></ol><h4 id="代码实现-2">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">lomutoPartition</span>(<span class="params">arr, low, high</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pivot = arr[high];  <span class="comment">// 选择最后最后一个元素作为基准值</span></span><br><span class="line">    <span class="keyword">let</span> i = low - <span class="number">1</span>;  <span class="comment">// 指向小于基准值的最后一个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = low; j &lt; high; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &lt;= pivot) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            [arr[i], arr[j]] = [arr[j], arr[i]];  <span class="comment">// 交换元素</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [arr[i + <span class="number">1</span>], arr[high]] = [arr[high], arr[i + <span class="number">1</span>]];  <span class="comment">// 把基准元素放到正确位置</span></span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr, begin, end</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (begin &gt;= end) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> keyi = <span class="title function_">lomutoPartition</span>(arr, begin, end);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">quickSort</span>(arr, begin, keyi - <span class="number">1</span>);</span><br><span class="line">    <span class="title function_">quickSort</span>(arr, keyi + <span class="number">1</span>, end);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>(array, <span class="number">0</span>, array.<span class="property">length</span> -<span class="number">1</span>));  <span class="comment">// 输出: [1, 5, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h3 id="Hoare-分区法">Hoare 分区法</h3><p>霍尔（Hoare）分区法是由 C.A.R. Hoare 提出的，是最早提出的分区方法。它使用两个指针从数组两端开始，直到找到不符合顺序的元素并交换它们。</p><h4 id="步骤-2">步骤</h4><ol><li>选择数组的第一个元素作为基准值。</li><li>设置两个指针：<code>i</code> 从左到右扫描，<code>j</code> 从右到左扫描。</li><li><code>i</code> 找到大于等于基准值的元素，<code>j</code> 找到小于等于基准值的元素，然后交换它们。</li><li>当 <code>i</code> 和 <code>j</code> 交错时，停止扫描并返回 <code>j</code> 作为分区点。</li></ol><h4 id="代码实现-3">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hoarePartition</span>(<span class="params">arr, low, high</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pivot = arr[<span class="title class_">Math</span>.<span class="title function_">floor</span>((low + high) / <span class="number">2</span>)];  <span class="comment">// 使用中间元素作为基准</span></span><br><span class="line">    <span class="keyword">let</span> i = low - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> j = high + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (arr[i] &lt; pivot);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            j--;</span><br><span class="line">        &#125; <span class="keyword">while</span> (arr[j] &gt; pivot);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;  <span class="comment">// 返回分区点</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [arr[i], arr[j]] = [arr[j], arr[i]];  <span class="comment">// 交换元素</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr, begin, end</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (begin &gt;= end) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> keyi = <span class="title function_">hoarePartition</span>(arr, begin, end);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">quickSort</span>(arr, begin, keyi - <span class="number">1</span>);</span><br><span class="line">    <span class="title function_">quickSort</span>(arr, keyi + <span class="number">1</span>, end);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>(array, <span class="number">0</span>, array.<span class="property">length</span> - <span class="number">1</span>));  <span class="comment">// 输出: [1, 5, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h3 id="三向切分法">三向切分法</h3><p>三向切分是专门用于处理数组中有大量重复元素的情况。它将数组分为三部分：小于基准值的部分，等于基准值的部分，大于基准值的部分。这种方法可以有效减少处理重复元素时的额外开销。</p><h4 id="步骤-3">步骤</h4><ol><li>选择一个基准值。</li><li>将数组分为三部分：小于基准值，等于基准值，大于基准值。</li><li>对小于和大于基准值的部分递归排序。</li></ol><h4 id="代码实现-4">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">threeWayPartition</span>(<span class="params">arr, low, high</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pivot = arr[low];  <span class="comment">// 选择第一个元素作为基准</span></span><br><span class="line">    <span class="keyword">let</span> i = low, left = low, right = high;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">            [arr[i], arr[left]] = [arr[left], arr[i]];</span><br><span class="line">            i++;</span><br><span class="line">            left++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; pivot) &#123;</span><br><span class="line">            [arr[i], arr[right]] = [arr[right], arr[i]];</span><br><span class="line">            right--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [left, right];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr, begin, end</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (begin &lt; end) &#123;</span><br><span class="line">        <span class="keyword">let</span> [left, right] = <span class="title function_">threeWayPartition</span>(arr, begin, end);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">quickSort</span>(arr, begin, left - <span class="number">1</span>);</span><br><span class="line">        <span class="title function_">quickSort</span>(arr, right + <span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>(array, <span class="number">0</span>, array.<span class="property">length</span> - <span class="number">1</span>));  <span class="comment">// 输出: [1, 5, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><p>在快速排序中，基准位置的选择也会影响快排的效率，将基准放在合适的位置可以增加快排的运行效率。</p><h3 id="三数取中选key法">三数取中选key法</h3><p><strong>三数取中</strong>就是取头，中，尾三个元素，比较大小，选择那个排在中间的数据作为基准值。再进行快速排序，这种优化方法就能使该排序效率比原来高。</p><h4 id="步骤-4">步骤</h4><ol><li>选取数组的第一个元素、最后一个元素和中间位置的元素。</li><li>对这三个元素进行排序。</li><li>选择中间值作为基准。</li></ol><h4 id="代码实现-5">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三数取中法选择基准</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">medianOfThree</span>(<span class="params">arr, low, high</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((low + high) / <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对 low、mid、high 进行排序，确保 arr[low] &lt;= arr[mid] &lt;= arr[high]</span></span><br><span class="line">    <span class="keyword">if</span> (arr[low] &gt; arr[mid]) &#123;</span><br><span class="line">        [arr[low], arr[mid]] = [arr[mid], arr[low]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[mid] &gt; arr[high]) &#123;</span><br><span class="line">        [arr[mid], arr[high]] = [arr[high], arr[mid]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arr[low] &gt; arr[mid]) &#123;</span><br><span class="line">        [arr[low], arr[mid]] = [arr[mid], arr[low]];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回中间值作为基准</span></span><br><span class="line">    <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用三数取中法的分区</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">partition</span>(<span class="params">arr, low, high</span>) &#123;</span><br><span class="line">    <span class="comment">// 选择三数取中的基准元素，并将基准放在最后</span></span><br><span class="line">    <span class="keyword">let</span> pivotIndex = <span class="title function_">medianOfThree</span>(arr, low, high);</span><br><span class="line">    [arr[pivotIndex], arr[high]] = [arr[high], arr[pivotIndex]]; <span class="comment">// 把基准放到最后</span></span><br><span class="line">    <span class="keyword">let</span> pivot = arr[high];  <span class="comment">// 基准值</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> i = low - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = low; j &lt; high; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &lt;= pivot) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            [arr[i], arr[j]] = [arr[j], arr[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将基准放到最终位置</span></span><br><span class="line">    [arr[i + <span class="number">1</span>], arr[high]] = [arr[high], arr[i + <span class="number">1</span>]];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;  <span class="comment">// 返回基准元素的最终位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速排序主函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr, low, high</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">let</span> pivotIndex = <span class="title function_">partition</span>(arr, low, high);  <span class="comment">// 分区操作</span></span><br><span class="line">        <span class="title function_">quickSort</span>(arr, low, pivotIndex - <span class="number">1</span>);  <span class="comment">// 递归处理左侧</span></span><br><span class="line">        <span class="title function_">quickSort</span>(arr, pivotIndex + <span class="number">1</span>, high);  <span class="comment">// 递归处理右侧</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>(array, <span class="number">0</span>, array.<span class="property">length</span> - <span class="number">1</span>));  <span class="comment">// 输出: [1, 5, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h3 id="随机数生成选key法">随机数生成选key法</h3><h4 id="步骤-5">步骤</h4><ol><li>从当前子数组范围内随机选取一个元素作为基准。</li><li>将该随机选取的元素与当前子数组的最后一个元素进行交换，以便后续分区操作可以继续按照经典的快速排序算法进行。</li><li>继续按照正常的快速排序逻辑进行递归排序。</li></ol><h4 id="代码实现-6">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成指定范围内的随机整数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRandomInt</span>(<span class="params">min, max</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机选择基准</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randomizedPartition</span>(<span class="params">arr, low, high</span>) &#123;</span><br><span class="line">    <span class="comment">// 随机选择基准，并与 high 位置元素交换</span></span><br><span class="line">    <span class="keyword">let</span> randomIndex = <span class="title function_">getRandomInt</span>(low, high);</span><br><span class="line">    [arr[randomIndex], arr[high]] = [arr[high], arr[randomIndex]]; <span class="comment">// 把随机选择的基准放在最后</span></span><br><span class="line">    <span class="keyword">let</span> pivot = arr[high];  <span class="comment">// 基准值</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> i = low - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = low; j &lt; high; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] &lt;= pivot) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            [arr[i], arr[j]] = [arr[j], arr[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将基准元素放到最终位置</span></span><br><span class="line">    [arr[i + <span class="number">1</span>], arr[high]] = [arr[high], arr[i + <span class="number">1</span>]];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span>;  <span class="comment">// 返回基准元素的最终位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机化快速排序主函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr, low, high</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">let</span> pivotIndex = <span class="title function_">randomizedPartition</span>(arr, low, high);  <span class="comment">// 随机化分区操作</span></span><br><span class="line">        <span class="title function_">quickSort</span>(arr, low, pivotIndex - <span class="number">1</span>);  <span class="comment">// 递归处理左侧</span></span><br><span class="line">        <span class="title function_">quickSort</span>(arr, pivotIndex + <span class="number">1</span>, high);  <span class="comment">// 递归处理右侧</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">quickSort</span>(array, <span class="number">0</span>, array.<span class="property">length</span> - <span class="number">1</span>));  <span class="comment">// 输出: [1, 5, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序-插入排序</title>
    <link href="/2024/09/11/%E6%8E%92%E5%BA%8F-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/09/11/%E6%8E%92%E5%BA%8F-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>插入排序（Insertion Sort）是一种简单的排序算法，它会将数组分为已排序部分和未排序部分，然后从未排序部分取出元素，插入到已排序部分的正确位置，直到整个数组有序。</p><span id="more"></span><h1>插入排序</h1><h2 id="插入排序步骤">插入排序步骤</h2><ol><li>从第二个元素开始，将它与前面的已排序部分的元素进行比较。</li><li>如果前面的元素大于当前元素，就将前面的元素后移，直到找到当前元素的正确位置。</li><li>将当前元素插入到合适的位置。</li><li>重复这个过程，直到所有元素都插入到正确位置。</li></ol><p><img src="/imgs/algorithm/insertion_sort.gif" alt=""></p><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = arr.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = arr[i];</span><br><span class="line">        <span class="keyword">let</span> j = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将当前元素与前面的已排序部分进行比较，并后移已排序元素</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; current) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];  <span class="comment">// 将较大的元素向后移动</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入当前元素到合适的位置</span></span><br><span class="line">        arr[j + <span class="number">1</span>] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">insertionSort</span>(array));  <span class="comment">// 输出: [5, 6, 11, 12, 13]</span></span><br></pre></td></tr></table></figure><ol><li><strong>外层循环</strong>：从数组的第二个元素开始遍历 (<code>for (let i = 1; i &lt; len; i++)</code>)，因为第一个元素可以视为初始的已排序部分。</li><li><strong>内层循环</strong>：<code>while (j &gt;= 0 &amp;&amp; arr[j] &gt; current)</code>，对于每一个当前元素（<code>current</code>），与前面的已排序元素逐个比较，直到找到比 <code>current</code> 小或相等的元素位置。</li><li><strong>元素后移</strong>：在找到当前元素的合适位置前，所有比它大的元素都会被后移一位 (<code>arr[j + 1] = arr[j]</code>)。</li><li><strong>插入元素</strong>：在找到位置后，将 <code>current</code> 插入到该位置 (<code>arr[j + 1] = current</code>)。</li></ol><h2 id="代码优化">代码优化</h2><p>可以使用二分查找来找到插入位置，从而减少比较次数。虽然这不会减少整体的时间复杂度（依然是 <code>O(n^2)</code>），但可以优化比较的部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二分查找，找到待插入元素的正确位置</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">binarySearch</span>(<span class="params">arr, value, start, end</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">        <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] === value) &#123;</span><br><span class="line">            <span class="keyword">return</span> mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; value) &#123;</span><br><span class="line">            start = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            end = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化版插入排序：使用二分查找加速</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">insertionSortOptimized</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = arr.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = arr[i];</span><br><span class="line">        <span class="keyword">let</span> j = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用二分查找来找到当前元素的插入位置</span></span><br><span class="line">        <span class="keyword">let</span> insertPos = <span class="title function_">binarySearch</span>(arr, current, <span class="number">0</span>, j);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将比当前元素大的部分后移一位</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= insertPos) &#123;</span><br><span class="line">            arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入当前元素到正确位置</span></span><br><span class="line">        arr[insertPos] = current;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">insertionSortOptimized</span>(array));  <span class="comment">// 输出: [5, 6, 11, 12, 13]</span></span><br></pre></td></tr></table></figure><h2 id="时间复杂度">时间复杂度</h2><ol><li><strong>最坏情况时间复杂度</strong>：<code>O(n^2)</code>，当数组是逆序时，每插入一个元素，都需要与前面的所有元素进行比较。</li><li><strong>最优情况时间复杂度</strong>：<code>O(n)</code>，当数组已经有序时，每个元素只需进行一次比较即可插入到正确位置。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，插入排序是原地排序算法，不需要额外的存储空间。</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序-选择排序</title>
    <link href="/2024/09/10/%E6%8E%92%E5%BA%8F-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/09/10/%E6%8E%92%E5%BA%8F-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>选择排序（Selection Sort）是一种简单直观的排序算法。它的基本思想是每一轮从未排序的部分中找到最小（或最大）的元素，并将其与当前轮的起始元素交换位置，直到整个数组有序。</p><span id="more"></span><h1>选择排序</h1><h2 id="选择排序步骤">选择排序步骤</h2><ol><li>从数组中找到最小的元素。</li><li>将这个最小元素与数组的第一个元素交换位置。</li><li>从剩下的未排序部分中继续寻找最小的元素，将它与未排序部分的第一个元素交换位置。</li><li>重复以上步骤，直到整个数组排序完成。</li></ol><p><img src="/imgs/algorithm/selection_sort.gif" alt=""></p><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> minIndex = i;  <span class="comment">// 假设当前位置的元素是最小的</span></span><br><span class="line">        <span class="comment">// 从i+1开始查找剩余部分中最小的元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = j;  <span class="comment">// 更新最小值的位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 交换当前元素和找到的最小元素的位置</span></span><br><span class="line">        <span class="keyword">if</span> (minIndex !== i) &#123;</span><br><span class="line">            [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">64</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">selectionSort</span>(array));  <span class="comment">// 输出: [11, 12, 22, 25, 64]</span></span><br></pre></td></tr></table></figure><ol><li><strong>外层循环</strong>：<code>for (let i = 0; i &lt; len - 1; i++)</code> 控制每一轮的排序过程。每一轮中，选择最小的元素并将它放在当前轮的起始位置。</li><li><strong>内层循环</strong>：<code>for (let j = i + 1; j &lt; len; j++)</code> 从未排序的部分（即从 <code>i + 1</code> 开始）寻找最小值。如果找到了比当前最小值还小的元素，更新 <code>minIndex</code>。</li><li><strong>交换元素</strong>：在找到最小值后，如果它不在当前轮的起始位置（即 <code>minIndex !== i</code>），就交换它和当前元素的位置。</li></ol><h2 id="代码优化">代码优化</h2><p>选择排序可以在某些情况下优化。例如，可以同时找到未排序部分的最小值和最大值，一次遍历将最小值放到前面、最大值放到后面，从而减少一半的遍历次数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> left = <span class="number">0</span>;        <span class="comment">// 未排序部分的起始位置</span></span><br><span class="line">    <span class="keyword">let</span> right = len - <span class="number">1</span>; <span class="comment">// 未排序部分的结束位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">let</span> minIndex = left;</span><br><span class="line">        <span class="keyword">let</span> maxIndex = left;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在未排序部分同时查找最小值和最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &gt; arr[maxIndex]) &#123;</span><br><span class="line">                maxIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将最小值交换到最前面</span></span><br><span class="line">        [arr[left], arr[minIndex]] = [arr[minIndex], arr[left]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果最大值正好在起始位置（被交换走了），需要更新它的位置</span></span><br><span class="line">        <span class="keyword">if</span> (maxIndex === left) &#123;</span><br><span class="line">            maxIndex = minIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将最大值交换到最后面</span></span><br><span class="line">        [arr[right], arr[maxIndex]] = [arr[maxIndex], arr[right]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 缩小未排序部分的范围</span></span><br><span class="line">        left++;</span><br><span class="line">        right--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">64</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">selectionSort</span>(array));  <span class="comment">// 输出: [11, 12, 22, 25, 64]</span></span><br></pre></td></tr></table></figure><h2 id="时间复杂度">时间复杂度</h2><ol><li><strong>最坏情况时间复杂度</strong>：<code>O(n^2)</code>，即使数组已经有序，依然需要两层嵌套循环来比较每个元素。</li><li><strong>最优情况时间复杂度</strong>：<code>O(n^2)</code>，即使数组已经有序，仍需要比较所有元素。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，选择排序是原地排序算法，不需要额外的内存空间。</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序-冒泡排序</title>
    <link href="/2024/09/09/%E6%8E%92%E5%BA%8F-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <url>/2024/09/09/%E6%8E%92%E5%BA%8F-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>冒泡排序（Bubble Sort）是一种基础的排序算法。它通过多次遍历数组，依次比较相邻的两个元素，如果它们的顺序错误（如：从大到小排序时，前一个元素大于后一个元素），则交换它们的位置。每一轮遍历结束后，最大的元素会逐渐 “冒泡” 到数组的末尾。这个过程会重复多次，直到数组完全有序。</p><span id="more"></span><h1>冒泡排序</h1><h2 id="冒泡排序步骤">冒泡排序步骤</h2><ol><li>从数组的第一个元素开始，比较相邻的两个元素。</li><li>如果前一个元素大于后一个元素，则交换它们的位置。</li><li>对每一对相邻元素重复这个操作，直到到达数组的末尾。</li><li>每一轮遍历之后，最大的元素被放到数组的最后一个位置。</li><li>重复这个过程，忽略已经排好序的部分，直到整个数组有序。</li></ol><p><img src="/imgs/algorithm/bubble_sort.gif" alt=""></p><h2 id="代码实现">代码实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="comment">// 外层循环控制比较的轮数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 内层循环控制每一轮的比较次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="comment">// 如果前面的元素大于后面的元素，交换它们的位置</span></span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 交换</span></span><br><span class="line">                [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">90</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bubbleSort</span>(array));  <span class="comment">// 输出: [11, 12, 22, 25, 34, 64, 90]</span></span><br></pre></td></tr></table></figure><ol><li><strong>外层循环</strong> (<code>for (let i = 0; i &lt; len - 1; i++)</code>)：控制整个排序过程的轮数。每一轮都会把最大的元素放在末尾。</li><li><strong>内层循环</strong> (<code>for (let j = 0; j &lt; len - 1 - i; j++)</code>)：在每一轮中，逐个比较相邻元素，交换顺序不对的元素。注意每一轮中，后面已经排好序的部分不再需要比较，因此 <code>j</code> 的范围逐渐减小。</li><li><strong>交换元素</strong>：<code>[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]]</code> 是通过数组解构的方式交换元素的位置。</li></ol><h2 id="代码优化">代码优化</h2><p>冒泡排序在最坏情况下（即数组完全逆序的情况下）需要进行多次遍历。可以通过添加一个标志变量 <code>swapped</code> 来优化，若某一轮遍历中没有发生元素交换，说明数组已经有序，可以提前结束排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bubbleSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">let</span> swapped;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        swapped = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]];</span><br><span class="line">                swapped = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果没有发生交换，说明数组已排序，提前结束</span></span><br><span class="line">        <span class="keyword">if</span> (!swapped) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">90</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bubbleSort</span>(array));  <span class="comment">// 输出: [11, 12, 22, 25, 34, 64, 90]</span></span><br></pre></td></tr></table></figure><h2 id="时间复杂度">时间复杂度</h2><ol><li><strong>最坏情况时间复杂度</strong>：<code>O(n^2)</code>，数组完全逆序时，需比较每一对相邻元素并进行交换。</li><li><strong>最优情况时间复杂度</strong>：<code>O(n)</code>，如果数组已经有序，只需要进行一次遍历即可。</li><li><strong>空间复杂度</strong>：<code>O(1)</code>，只需要常数级的额外空间用于临时变量交换元素。</li></ol>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(50)-内存管理</title>
    <link href="/2024/09/06/JS%E5%AD%A6%E4%B9%A0(50)-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/2024/09/06/JS%E5%AD%A6%E4%B9%A0(50)-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>内存管理是编程中非常重要的一个部分，它决定了如何为程序中的变量和数据分配内存、如何使用内存以及何时释放内存。</p><span id="more"></span><h1>内存管理</h1><h2 id="内存模型">内存模型</h2><p>JavaScript 是单线程语言，主要依赖于<strong>事件循环</strong>机制来处理异步任务。在常规的 JavaScript 执行过程中，不存在多线程并发问题。后来JavaScript 在浏览器或 Node.js 环境中引入了<strong>Web Workers</strong>，这允许 JavaScript 实现多线程编程。在 Web Workers 中，每个线程有自己独立的内存空间，数据通过消息传递的方式进行共享和通信，而不是直接共享内存。</p><h3 id="栈内存">栈内存</h3><p>栈内存用于存储原始数据类型（例如数字、布尔值、<code>null</code>、<code>undefined</code>、字符串等）以及函数调用上下文。在函数调用时，参数、局部变量会被存储在栈中，当函数执行完毕，这些变量会自动被释放。</p><h3 id="堆内存">堆内存</h3><p>堆内存用于存储复杂数据类型（如对象、数组、函数等）。当你创建一个对象时，它的值会存储在堆中，变量会存储该对象的引用。堆内存中的对象不会自动释放，需要依赖垃圾回收机制来回收不再使用的对象。</p><h2 id="内存生命周期">内存生命周期</h2><h3 id="内存分配">内存分配</h3><p>JavaScript 会自动为基本数据类型（如数字、字符串、布尔值）以及引用类型（如对象、数组、函数）分配内存。当声明这些变量时，JavaScript 会自动为它们在内存中分配合适的空间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给数值变量分配内存</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给字符串分配内存</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给对象及其包含的值分配内存</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给数组及其包含的值分配内存</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="string">&#x27;Hello&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给函数分配内存</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数表达式也能分配内存</span></span><br><span class="line">someElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">someElement.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">&#125;,<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h3 id="内存使用">内存使用</h3><p>一旦内存分配完成，JavaScript 引擎会将数据存储在内存中，开发者可以对数据进行操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = num + <span class="number">1</span>;  <span class="comment">// 对内存中的数据进行操作</span></span><br><span class="line">obj.<span class="property">age</span> += <span class="number">1</span>;   <span class="comment">// 修改对象中的属性</span></span><br></pre></td></tr></table></figure><h3 id="内存回收">内存回收</h3><p>内存释放主要依赖于 JavaScript 的垃圾回收机制。JavaScript 引擎会定期扫描不再使用的对象，并将其从内存中删除。</p><h2 id="垃圾回收">垃圾回收</h2><blockquote><p>由于字符串、对象和数组没有固定大小，所以当他们的大小已知时，才能对他们进行动态的存储分配。JavaScript 序每次创建字符串、数组或对象时，解释器都必须分配内存来存储那个实体。只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用，否则，JavaScript 的解释器将会消耗完系统中所有可用的内存，造成系统崩溃。-------《JavaScript 权威指南》</p></blockquote><p>JavaScript 通过 <strong>自动垃圾收集机制</strong> 实现内存的管理。垃圾回收机制通过垃圾收集器每隔固定的时间段（周期性）找出那些不再需要继续使用的变量，执行一次释放占用内存的操作。</p><ol><li><strong>局部变量</strong>：在局部作用域中，当函数执行完毕，局部变量也就没有存在的必要了（除了闭包），垃圾收集器很容易做出判断并回收</li><li><strong>全局变量</strong>：全局变量的生命周期直到浏览器卸载页面才会结束，也就是<strong>全局变量不会被当成垃圾变量回收</strong>。所以声明一个全局变量的时候，一定要慎重的考虑，在使用完这个变量的对象之后，是否还需要这个对象，如果不需要的话，应该手动的将这个变量置为空（<code>null</code>），这样在下一次垃圾回收的时候，就能去释放这个变量上一次指向的值。</li></ol><h3 id="标记清除法">标记清除法</h3><p><strong>标记-清除法</strong> 是垃圾回收机制中最常见的一种算法，用于自动管理程序运行时的内存，尤其是在动态内存分配和释放时，防止内存泄漏和无效占用。</p><h4 id="标记-清除法工作原理">标记-清除法工作原理</h4><ol><li><strong>标记阶段</strong>：<ul><li>从根对象（通常是全局对象、栈中的局部变量等）开始，遍历所有能够直接或间接访问到的对象，标记这些对象为“活跃”状态。</li><li>活跃对象是那些仍然在使用或可以通过某些引用链访问到的对象。</li><li>任何无法从根对象访问到的对象就被认为是不可达的，这些对象在稍后会被回收。</li></ul></li><li><strong>清除阶段</strong>：<ul><li>在清除阶段，垃圾回收器会遍历堆中的所有对象，清理那些没有被标记为“活跃”的对象（即不可达对象）。</li><li>被清理的对象的内存会被释放，从而可以重新分配给其他对象。</li></ul></li></ol><h4 id="标记-清除法缺点">标记-清除法缺点</h4><ol><li><strong>程序暂停</strong>：标记-清除法需要暂停程序执行来标记和清除对象，尤其是在大型程序中，垃圾回收的时间可能较长，导致程序响应延迟。</li><li><strong>不能实时回收</strong>：垃圾回收器只有在内存快满时才会启动，而不是实时回收。因此，在垃圾回收前，内存中的无用对象仍会占用内存。</li><li><strong>内存碎片化</strong>：标记-清除法在清除对象后，不会立即整理内存。多次回收后，可能会在堆中产生大量小的内存碎片，降低内存利用率。</li></ol><h3 id="引用计数法">引用计数法</h3><p><strong>引用计数法</strong> 是另一种常见的垃圾回收算法，用于自动管理内存中的对象。这种方法通过维护每个对象的<strong>引用计数</strong>，来跟踪有多少地方引用了该对象，当引用计数为零时，垃圾回收器会立即回收该对象的内存。</p><h4 id="引用计数法工作原理">引用计数法工作原理</h4><ol><li><strong>引用计数增加</strong>：每当一个对象被引用时（如赋值给一个变量、被另一个对象包含等），该对象的引用计数就增加 1。</li><li><strong>引用计数减少</strong>：当一个对象的引用被解除时（如将变量设为 <code>null</code>、超出作用域等），该对象的引用计数就减少 1。</li><li><strong>内存回收</strong>：一旦某个对象的引用计数变为 0，说明没有地方引用该对象，会被认为是<strong>不可达</strong>的，垃圾回收器会立即回收它的内存。</li></ol><h4 id="引用计数法优点">引用计数法优点</h4><ol><li><strong>即时回收</strong>：引用计数法能够在对象的引用计数为 0 时立即回收内存，避免了程序暂停执行去进行垃圾回收操作。</li></ol><h4 id="引用计数法缺点">引用计数法缺点</h4><ol><li><p><strong>循环引用问题</strong>：引用计数法的最大缺陷是无法处理<strong>循环引用</strong>。当两个或多个对象互相引用时，它们的引用计数永远不会为 0，因此内存无法被回收，造成<strong>内存泄漏</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCycle</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> obj2 = &#123;&#125;;</span><br><span class="line">    obj1.<span class="property">reference</span> = obj2;  <span class="comment">// obj1 引用 obj2</span></span><br><span class="line">    obj2.<span class="property">reference</span> = obj1;  <span class="comment">// obj2 引用 obj1</span></span><br><span class="line">    <span class="keyword">return</span> [obj1, obj2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>额外的内存和性能开销</strong>：引用计数法需要为每个对象维护一个引用计数字段，增加了一些内存开销。同时，每次修改引用时，都需要更新引用计数，增加了运行时的性能负担。</p></li><li><p><strong>无法处理复杂的对象关系</strong>：当对象之间的引用关系过于复杂时，引用计数法难以有效处理，特别是在大型应用程序中，可能导致部分无用对象无法及时释放。</p></li></ol><h2 id="堆栈溢出">堆栈溢出</h2><p><strong>堆栈溢出</strong>是一种程序运行时的错误，它发生在程序试图使用超过系统分配的堆内存或栈内存的情况下。根据内存的区域，堆栈溢出主要分为两种：<strong>栈溢出</strong> 和 <strong>堆溢出</strong>。</p><h3 id="栈溢出">栈溢出</h3><p><strong>栈溢出</strong>是指程序使用了超过栈内存容量的空间，导致无法再分配新的栈内存。通常，栈内存用于存储函数调用信息（例如局部变量、函数参数和返回地址等）。</p><h4 id="常见原因">常见原因</h4><ol><li><p><strong>递归调用过深</strong>：如果函数递归调用自身但没有正确的终止条件，可能导致无限递归，每次调用都会分配新的栈帧，最终导致栈溢出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">recursive</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">recursive</span>();  <span class="comment">// 没有终止条件的递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">recursive</span>();  <span class="comment">// 这将导致栈溢出</span></span><br></pre></td></tr></table></figure></li><li><p><strong>过大的局部变量分配</strong>：在栈中分配过大的局部变量，尤其是数组或结构体，可能导致栈溢出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">largeAllocation</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> largeArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000000</span>);  <span class="comment">// 如果数组过大，可能导致栈溢出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">largeAllocation</span>();</span><br></pre></td></tr></table></figure></li></ol><h4 id="栈溢出表现">栈溢出表现</h4><p>当栈内存耗尽时，系统无法再分配更多的栈空间，会抛出错误或程序崩溃。在 JavaScript 中可能会抛出 <code>RangeError</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Uncaught</span> <span class="title class_">RangeError</span>: <span class="title class_">Maximum</span> call stack size exceeded</span><br></pre></td></tr></table></figure><h4 id="栈溢出解决方案">栈溢出解决方案</h4><ol><li><strong>避免深度递归</strong>：递归函数需要有明确的终止条件。对于深度递归，可以考虑使用循环替代递归。</li><li><strong>优化局部变量使用</strong>：避免在栈中分配过大的局部变量，尽量将数据放在堆内存中。</li><li><strong>尾递归优化</strong>：尾递归优化，减少栈帧的使用。</li></ol><h3 id="堆溢出">堆溢出</h3><p><strong>堆溢出</strong>是指程序申请了比可用堆内存更多的空间，导致内存分配失败。堆内存通常用于存储动态分配的对象和数据。与栈内存不同，堆内存的大小通常是动态扩展的。</p><h4 id="常见原因-2">常见原因</h4><ol><li><p><strong>无限制的动态内存分配</strong>：程序不断向堆内存中分配新的对象或数据，但没有及时释放，可能导致堆内存耗尽。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000000</span>));  <span class="comment">// 不断向堆内存中分配数据，最终会导致堆溢出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>内存泄漏</strong>：程序没有及时释放不再需要的内存，导致堆内存逐渐被占用，直到堆溢出。</p></li></ol><h4 id="堆溢出表现">堆溢出表现</h4><p>当堆内存耗尽时，系统无法再分配新的内存空间，可能会抛出内存分配失败的错误。不同的编程语言和环境可能会有不同的错误提示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">FATAL</span> <span class="attr">ERROR</span>: <span class="variable constant_">CALL_AND_RETRY_LAST</span> <span class="title class_">Allocation</span> failed - <span class="title class_">JavaScript</span> heap out <span class="keyword">of</span> memory</span><br></pre></td></tr></table></figure><h4 id="堆溢出解决方案">堆溢出解决方案</h4><ol><li><strong>合理管理内存</strong>：避免无限制的内存分配，确保不再需要的内存能够及时释放，防止内存泄漏。</li><li><strong>优化数据结构和算法</strong>：确保使用的内存量在合理范围内，避免过度使用动态分配。</li><li><strong>定期监控内存使用</strong>：在复杂应用中，定期监控内存使用情况，防止潜在的内存泄漏和过度分配。</li></ol><h2 id="内存泄漏">内存泄漏</h2><p><strong>内存泄漏</strong> 是指程序无法及时释放不再使用的内存，导致这些内存无法被回收，从而长期占据内存空间，最终可能导致内存耗尽或性能下降。内存泄漏问题在长期运行的应用程序中尤为严重，因为它会逐渐积累占用更多的内存，可能最终导致程序崩溃或系统资源不足。</p><h3 id="常见原因-3">常见原因</h3><ol><li><p><strong>全局变量的滥用</strong>：全局变量在 JavaScript 中会一直存在于内存中，因为它们的生命周期是与程序的生命周期一致的。如果不小心创建了意外的全局变量（如忘记使用 <code>var</code>、<code>let</code>、<code>const</code> 声明变量），这些变量可能会持续占用内存。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createGlobal</span>(<span class="params"></span>) &#123;</span><br><span class="line">globalVar = <span class="string">&quot;I&#x27;m a global variable&quot;</span>;  <span class="comment">// 没有声明变量，成为了意外的全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">createGlobal</span>();</span><br></pre></td></tr></table></figure></li><li><p><strong>未清除的定时器或回调</strong>：使用 <code>setInterval</code> 或 <code>setTimeout</code> 时，如果没有清除定时器（即 <code>clearInterval</code> 或 <code>clearTimeout</code>），相关的回调函数将继续存在，即使程序不再需要它们，导致内存无法释放。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> intervalId = <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This will run forever unless cleared.&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 如果不调用 clearInterval(intervalId)，内存泄漏会持续</span></span><br></pre></td></tr></table></figure></li><li><p><strong>闭包导致的内存泄漏</strong>：闭包是指内部函数引用了外部函数的变量。虽然闭包是 JavaScript 中非常有用的特性，但如果使用不当，可能会导致内存泄漏，尤其是在 DOM 操作或事件处理程序中，引用了已经不需要的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> largeArray = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000000</span>);  <span class="comment">// 分配大量内存</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(largeArray.<span class="property">length</span>);  <span class="comment">// 引用了外部函数的变量</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> innerFunc = <span class="title function_">outer</span>();</span><br><span class="line"><span class="comment">// 即使 largeArray 不再需要，内存仍然无法释放</span></span><br></pre></td></tr></table></figure></li><li><p><strong>DOM 元素的引用未清除</strong>：当 JavaScript 中的对象或事件处理程序持有对 DOM 元素的引用，而这些 DOM 元素已经从页面中移除时，如果不及时解除引用，内存将无法释放。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>);</span><br><span class="line">element.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Clicked!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(element);  <span class="comment">// 元素从 DOM 中移除，但内存仍然保持引用</span></span><br></pre></td></tr></table></figure></li><li><p><strong>被遗忘的事件监听器</strong>：添加事件监听器后，如果不手动移除（<code>removeEventListener</code>），即使相关的 DOM 元素被删除，内存仍然会因为事件监听器的引用无法释放。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Clicked!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">element.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, handleClick);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(element);  <span class="comment">// 虽然元素删除了，但事件监听器仍在内存中</span></span><br></pre></td></tr></table></figure></li><li><p><strong>不再需要的对象保持引用</strong>：当对象之间存在复杂的引用关系时，如果不清除不再需要的引用，内存无法被及时回收。例如，当缓存或数据结构中保留对对象的引用，可能导致不再使用的对象无法释放。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> cache = &#123;&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cacheData</span>(<span class="params">key, data</span>) &#123;</span><br><span class="line">cache[key] = data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">cacheData</span>(<span class="string">&#x27;largeObject&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1000000</span>));  <span class="comment">// 保持了对大对象的引用，即使不再需要它</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(49)-数组API实现</title>
    <link href="/2024/09/05/JS%E5%AD%A6%E4%B9%A0(49)-%E6%95%B0%E7%BB%84API%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/09/05/JS%E5%AD%A6%E4%B9%A0(49)-%E6%95%B0%E7%BB%84API%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，数组方法是常用的工具，但我们也可以手动实现这些数组方法。</p><span id="more"></span><h1>数组API实现</h1><h2 id="forEach">forEach()</h2><p><code>forEach()</code>用于数组的遍历，参数接收一个回调函数，回调函数中接收三个参数，分别代表每一项的值、下标、数组本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myForEach</span> = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>);  <span class="comment">// 当前元素，索引，数组本身</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证</span></span><br><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;zt&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;aa&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;bb&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;cc&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">]</span><br><span class="line">arr.<span class="title function_">myForEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item, index);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="map">map()</h2><p><code>map()</code>也用于数组的遍历，<code>map()</code>方法会创建一个新数组，新数组是原数组中每个元素调用一个提供的函数后返回的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myMap</span> = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    result.<span class="title function_">push</span>(<span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line"><span class="keyword">const</span> result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">myMap</span>(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">// 输出：[2, 4, 6]</span></span><br></pre></td></tr></table></figure><h2 id="filter">filter()</h2><p><code>filter()</code> 方法创建一个新数组，其中包含所有通过提供的函数实现的测试的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFilter</span> = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>)) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(<span class="variable language_">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line"><span class="keyword">const</span> filtered = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">myFilter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filtered);  <span class="comment">// 输出：[3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="reduce">reduce()</h2><p><code>reduce()</code> 方法用于对数组中的每个元素执行一个回调函数，并将其结果累计为单个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myReduce</span> = <span class="keyword">function</span>(<span class="params">callback, initialValue</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(callback + <span class="string">&#x27; is not a function&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取数组长度</span></span><br><span class="line">    <span class="keyword">let</span> len = <span class="variable language_">this</span>.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果数组为空且没有提供初始值，抛出错误</span></span><br><span class="line">    <span class="keyword">if</span> (len === <span class="number">0</span> &amp;&amp; <span class="variable language_">arguments</span>.<span class="property">length</span> &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Reduce of empty array with no initial value&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化累加器，处理是否有初始值的情况</span></span><br><span class="line">    <span class="keyword">let</span> accumulator;</span><br><span class="line">    <span class="keyword">let</span> startIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有初始值，累加器就等于初始值，开始索引为0</span></span><br><span class="line">    <span class="comment">// 否则累加器为数组的第一个元素，开始索引为1</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        accumulator = initialValue;</span><br><span class="line">        startIndex = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        accumulator = <span class="variable language_">this</span>[<span class="number">0</span>];</span><br><span class="line">        startIndex = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历数组并执行回调函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startIndex; i &lt; len; i++) &#123;</span><br><span class="line">    accumulator = <span class="title function_">callback</span>(accumulator, <span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sum = arr.<span class="title function_">myReduce</span>(<span class="function">(<span class="params">acc, current</span>) =&gt;</span> acc + current, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);  <span class="comment">// 输出：10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> product = arr.<span class="title function_">myReduce</span>(<span class="function">(<span class="params">acc, current</span>) =&gt;</span> acc * current, <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(product);  <span class="comment">// 输出：24</span></span><br></pre></td></tr></table></figure><h2 id="some">some()</h2><p><code>some()</code> 方法用来检测数组中的<strong>某些元素</strong>是否通过了提供的函数实现的测试。如果至少有一个元素通过，返回 <code>true</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mySome</span> = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line"><span class="keyword">const</span> hasGreaterThan2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">mySome</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hasGreaterThan2);  <span class="comment">// 输出：true</span></span><br></pre></td></tr></table></figure><h2 id="every">every()</h2><p><code>every()</code> 方法用来检测数组中的<strong>所有元素</strong>是否通过了提供的函数实现的测试。如果所有元素都通过，返回 <code>true</code>，否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myEvery</span> = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line"><span class="keyword">const</span> allGreaterThan0 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">myEvery</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(allGreaterThan0);  <span class="comment">// 输出：true</span></span><br></pre></td></tr></table></figure><h2 id="find">find()</h2><p><code>find()</code> 方法返回数组中满足提供的测试函数的第一个元素。如果没有满足条件的元素，则返回 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFind</span> = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line"><span class="keyword">const</span> found = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">myFind</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(found);  <span class="comment">// 输出：3</span></span><br></pre></td></tr></table></figure><h2 id="findIndex">findIndex()</h2><p><code>findIndex()</code> 方法返回数组中满足提供的测试函数的第一个元素的索引。如果没有满足条件的元素，则返回 <code>-1</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFindIndex</span> = <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">callback</span>(<span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line"><span class="keyword">const</span> index = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">myFindIndex</span>(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index);  <span class="comment">// 输出：2</span></span><br></pre></td></tr></table></figure><h2 id="fill">fill()</h2><p><code>fill()</code> 方法用于将数组的所有元素，或者从某个开始索引到结束索引之间的元素，替换为一个静态值。它修改了原数组并返回它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myFill</span> = <span class="keyword">function</span>(<span class="params">value, start = <span class="number">0</span>, end = <span class="variable language_">this</span>.length</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理负索引：如果 start 或 end 为负数，则从数组末尾开始计算</span></span><br><span class="line">    start = start &lt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable language_">this</span>.<span class="property">length</span> + start, <span class="number">0</span>) : start;</span><br><span class="line">    end = end &lt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="variable language_">this</span>.<span class="property">length</span> + end, <span class="number">0</span>) : end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历数组并用 value 替换指定范围内的元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">myFill</span>(<span class="number">0</span>));              <span class="comment">// 输出：[0, 0, 0, 0, 0]，填充整个数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">myFill</span>(<span class="number">7</span>, <span class="number">1</span>, <span class="number">4</span>));        <span class="comment">// 输出：[0, 7, 7, 7, 0]，填充索引 1 到 4 之间的元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">myFill</span>(<span class="number">9</span>, -<span class="number">3</span>, -<span class="number">1</span>));      <span class="comment">// 输出：[0, 7, 9, 9, 0]，填充倒数第三个到倒数第二个元素</span></span><br></pre></td></tr></table></figure><h2 id="includes">includes()</h2><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况返回 <code>true</code> 或 <code>false</code>。<code>includes()</code> 方法提供第二个参数，支持从指定位置开始查找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myIncludes</span> = <span class="keyword">function</span>(<span class="params">value, fromIndex = <span class="number">0</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 如果 fromIndex 为负数，则从数组末尾开始查找</span></span><br><span class="line">    <span class="keyword">let</span> startIndex = fromIndex &gt;= <span class="number">0</span> ? fromIndex : <span class="variable language_">this</span>.<span class="property">length</span> + fromIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 startIndex 仍为负数，将其重置为 0</span></span><br><span class="line">    <span class="keyword">if</span> (startIndex &lt; <span class="number">0</span>) startIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = startIndex; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>[i] === value) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">myIncludes</span>(<span class="number">3</span>));            <span class="comment">// 输出：true，从索引 0 开始查找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">myIncludes</span>(<span class="number">3</span>, <span class="number">3</span>));         <span class="comment">// 输出：false，从索引 3 开始查找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">myIncludes</span>(<span class="number">3</span>, -<span class="number">3</span>));        <span class="comment">// 输出：true，从倒数第三个位置（索引 2）开始查找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">myIncludes</span>(<span class="number">6</span>));            <span class="comment">// 输出：false，数组中没有 6</span></span><br></pre></td></tr></table></figure><h2 id="join">join()</h2><p><code>join()</code> 方法将数组的所有元素连接成一个字符串，并可以指定一个分隔符。如果不指定分隔符，默认使用逗号（<code>,</code>）作为分隔符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myJoin</span> = <span class="keyword">function</span>(<span class="params">separator = <span class="string">&#x27;,&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历数组的每个元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 将当前元素转换为字符串并添加到结果中</span></span><br><span class="line">    result += <span class="variable language_">this</span>[i] === <span class="literal">undefined</span> || <span class="variable language_">this</span>[i] === <span class="literal">null</span> ? <span class="string">&#x27;&#x27;</span> : <span class="title class_">String</span>(<span class="variable language_">this</span>[i]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在元素之间添加分隔符，但最后一个元素不需要分隔符</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="variable language_">this</span>.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">        result += separator;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="literal">null</span>, <span class="string">&#x27;hello&#x27;</span>, <span class="literal">undefined</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">myJoin</span>());                <span class="comment">// 输出：&quot;1,,hello,,5&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">myJoin</span>(<span class="string">&#x27; - &#x27;</span>));           <span class="comment">// 输出：&quot;1 -  - hello -  - 5&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">myJoin</span>(<span class="string">&#x27;&#x27;</span>));              <span class="comment">// 输出：&quot;1hello5&quot;，无分隔符</span></span><br></pre></td></tr></table></figure><h2 id="concat">concat()</h2><p><code>concat()</code> 方法用于合并两个或多个数组。该方法不会改变现有数组，而是返回一个新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myConcat</span> = <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建一个新数组，并将当前数组的内容放入其中</span></span><br><span class="line">    <span class="keyword">let</span> result = [...<span class="variable language_">this</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历传入的参数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; args.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> item = args[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果参数是数组，展开并添加到结果数组中</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item)) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(...item);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果不是数组，则直接添加到结果数组中</span></span><br><span class="line">            result.<span class="title function_">push</span>(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用例子</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr1.<span class="title function_">myConcat</span>(arr2, <span class="number">6</span>, [<span class="number">7</span>, <span class="number">8</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);  <span class="comment">// 输出：[1, 2, 3, 4, 5, 6, 7, 8]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1);    <span class="comment">// 输出：[1, 2, 3]，原数组未改变</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(48)-this</title>
    <link href="/2024/09/04/JS%E5%AD%A6%E4%B9%A0(48)-this/"/>
    <url>/2024/09/04/JS%E5%AD%A6%E4%B9%A0(48)-this/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，<code>this</code> 是一个非常重要的关键字，它指向当前函数的执行上下文，或者说 <strong><code>this</code> 是指向调用该函数的对象</strong>。<code>this</code> 的值在不同的场景下会有所不同。</p><span id="more"></span><h1>this</h1><p><code>this</code>关键字是一个非常重要的语法点，<code>this</code>可以用在构造函数之中，表示实例对象。<code>this</code>还可以用在别的场合，但不管是什么场合，<code>this</code>都有一个共同点：它总是返回一个对象。简单说，<code>this</code>就是属性或方法“当前”所在的对象。</p><h2 id="实质">实质</h2><p>JavaScript 语言之所以有 this 的设计，跟内存里面的数据结构有关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>:  <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure><p>上面的代码将一个对象赋值给变量<code>obj</code>。JavaScript 引擎会先在内存里面，生成一个对象<code>&#123; foo: 5 &#125;</code>，然后把这个对象的内存地址赋值给变量<code>obj</code>。也就是说，变量<code>obj</code>是一个地址（reference）。后面如果要读取<code>obj.foo</code>，引擎先从<code>obj</code>拿到内存地址，然后再从该地址读出原始的对象，返回它的<code>foo</code>属性。</p><p>这样的结构是很清晰的，问题在于属性的值可能是一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125; &#125;;</span><br></pre></td></tr></table></figure><p>这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给<code>foo</code>属性。由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">f</span>: f &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独执行</span></span><br><span class="line"><span class="title function_">f</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 环境执行</span></span><br><span class="line">obj.<span class="title function_">f</span>()</span><br></pre></td></tr></table></figure><p>JavaScript 允许在函数体内部，引用当前环境的其他变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，函数体里面使用了变量<code>x</code>。该变量由运行环境提供。</p><p>现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（context）。所以，<code>this</code>就出现了，它的设计目的就是在函数体内部，指代函数当前的运行环境。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，函数体里面的<code>this.x</code>就是指当前运行环境的<code>x</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">f</span>: f,</span><br><span class="line">    <span class="attr">x</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独执行</span></span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 环境执行</span></span><br><span class="line">obj.<span class="title function_">f</span>() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数<code>f</code>在全局环境执行，<code>this.x</code>指向全局环境的<code>x</code>；在<code>obj</code>环境执行，<code>this.x</code>指向<code>obj.x</code>。</p><h2 id="使用场合">使用场合</h2><p><code>this</code>主要有以下几个使用场合。</p><h3 id="全局环境">全局环境</h3><p>全局环境使用<code>this</code>，它指的就是顶层对象<code>window</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span> === <span class="variable language_">window</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="variable language_">window</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码说明，不管是不是在函数内部，只要是在全局环境下运行，<code>this</code>就是指顶层对象<code>window</code>。</p><h3 id="构造函数">构造函数</h3><p>构造函数中的<code>this</code>，指的是实例对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params">p</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">p</span> = p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码定义了一个构造函数<code>Obj</code>。由于<code>this</code>指向实例对象，所以在构造函数内部定义<code>this.p</code>，就相当于定义实例对象有一个<code>p</code>属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Obj</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">o.<span class="property">p</span> <span class="comment">// &quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure><h3 id="对象的方法">对象的方法</h3><p>如果对象的方法里面包含<code>this</code>，<code>this</code>的指向就是方法运行时所在的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// obj</span></span><br></pre></td></tr></table></figure><p>如果<code>this</code>所在的方法不在对象的第一层，这时<code>this</code>只是指向当前一层的对象，而不会继承更上面的层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    <span class="attr">p</span>: <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">    <span class="attr">b</span>: &#123;</span><br><span class="line">        <span class="attr">m</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">p</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">a.<span class="property">b</span>.<span class="title function_">m</span>() <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="事件处理函数">事件处理函数</h3><p>在 DOM 事件处理函数中，<code>this</code> 默认指向 <strong>绑定事件的元素</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;myButton&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myButton&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">// 输出: &lt;button id=&quot;myButton&quot;&gt;Click me&lt;/button&gt;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果事件处理函数是一个 <strong>箭头函数</strong>，则 <code>this</code> 会继承自定义时的上下文。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;myButton&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myButton&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    button.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);  <span class="comment">// 在全局作用域中，this 指向 Window</span></span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数">箭头函数</h3><p><strong>箭头函数</strong> 的 <code>this</code> 不会根据执行环境改变，它始终指向 <strong>定义时的上下文</strong>（即外层函数的 <code>this</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">innerFunc</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title function_">innerFunc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">greet</span>();  <span class="comment">// 输出: &#x27;Alice&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="绑定this">绑定this</h2><p><code>this</code>的动态切换，固然为 JavaScript 创造了巨大的灵活性，但也使得编程变得困难和模糊。有时，需要把<code>this</code>固定下来，避免出现意想不到的情况。JavaScript 提供了<code>call</code>、<code>apply</code>、<code>bind</code>这三个方法，来切换/固定<code>this</code>的指向。</p><h3 id="call">call()</h3><p>可以<strong>调用</strong>一个函数，与此同时，它还可以改变这个函数内部的 this 指向。<code>call</code>方法的参数，应该是一个对象。如果参数为空、<code>null</code>和<code>undefined</code>，则默认传入全局对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">n</span>: <span class="number">456</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">n</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">call</span>() <span class="comment">// 123</span></span><br><span class="line">a.<span class="title function_">call</span>(<span class="literal">null</span>) <span class="comment">// 123</span></span><br><span class="line">a.<span class="title function_">call</span>(<span class="literal">undefined</span>) <span class="comment">// 123</span></span><br><span class="line">a.<span class="title function_">call</span>(<span class="variable language_">window</span>) <span class="comment">// 123</span></span><br><span class="line">a.<span class="title function_">call</span>(obj) <span class="comment">// 456</span></span><br></pre></td></tr></table></figure><h3 id="apply">apply()</h3><p>可以<strong>调用</strong>一个函数，与此同时，它还可以改变这个函数内部的 this 指向。这一点，和 call()类似。<code>apply</code>方法的第一个参数也是<code>this</code>所要指向的那个对象，如果设为<code>null</code>或<code>undefined</code>，则等同于指定全局对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, y</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x + y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">1</span>, <span class="number">1</span>) <span class="comment">// 2</span></span><br><span class="line">f.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">1</span>, <span class="number">1</span>]) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="bind">bind()</h3><p><code>bind()</code>方法用于将函数体内的<code>this</code>绑定到某个对象，然后返回一个新函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> counter = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">inc</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">count</span>: <span class="number">100</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> func = counter.<span class="property">inc</span>.<span class="title function_">bind</span>(obj);</span><br><span class="line"><span class="title function_">func</span>();</span><br><span class="line">obj.<span class="property">count</span> <span class="comment">// 101</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(47)-深浅拷贝</title>
    <link href="/2024/09/03/JS%E5%AD%A6%E4%B9%A0(47)-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <url>/2024/09/03/JS%E5%AD%A6%E4%B9%A0(47)-%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，深拷贝和浅拷贝是复制对象的两种不同方式。它们在处理嵌套对象（即对象内包含其他对象或数组）时有着显著的区别。</p><span id="more"></span><h1>深浅拷贝</h1><h2 id="浅拷贝">浅拷贝</h2><p><strong>浅拷贝</strong>只复制对象的第一层属性，而不会递归复制嵌套对象。换句话说，浅拷贝复制了原始对象的所有值，但对于对象或数组等引用类型，只是复制了引用，而不是实际的值。</p><h3 id="常用的浅拷贝方法">常用的浅拷贝方法</h3><h4 id="循环遍历赋值">循环遍历赋值</h4><ol><li><p><code>for循环</code>：对于数组，可以使用 <code>for</code> 循环来实现浅拷贝。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123; <span class="attr">a</span>: <span class="number">4</span>, <span class="attr">b</span>: <span class="number">5</span> &#125;];</span><br><span class="line"><span class="comment">// 使用 for 循环进行浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> shallowCopyArray = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; originalArray.<span class="property">length</span>; i++) &#123;</span><br><span class="line">shallowCopyArray[i] = originalArray[i];</span><br><span class="line">&#125;</span><br><span class="line">shallowCopyArray[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">shallowCopyArray[<span class="number">3</span>].<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">0</span>]); <span class="comment">// 输出: 1，原始数组的第一个元素不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">3</span>].<span class="property">a</span>); <span class="comment">// 输出: 100，原始数组中的对象属性被改变</span></span><br></pre></td></tr></table></figure></li><li><p><code>for...in</code>：<code>for...in</code> 循环可以遍历对象的所有可枚举属性并将它们复制到新的对象中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">        <span class="attr">zip</span>: <span class="string">&#x27;10001&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用 for...in 循环进行浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> shallowCopy = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> original) &#123;</span><br><span class="line">    <span class="keyword">if</span> (original.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">    shallowCopy[key] = original[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">shallowCopy.<span class="property">name</span> = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line">shallowCopy.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&#x27;San Francisco&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(original.<span class="property">name</span>); <span class="comment">// 输出: &#x27;Alice&#x27;，原始对象的name属性不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(original.<span class="property">address</span>.<span class="property">city</span>); <span class="comment">// 输出: &#x27;San Francisco&#x27;，原始对象的address.city属性被改变</span></span><br></pre></td></tr></table></figure></li><li><p><code>for...of</code>：<code>for...of</code> 是 ES6 引入的一种遍历语句，主要用于遍历可迭代对象（如数组、字符串、Map、Set 等）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123; <span class="attr">a</span>: <span class="number">4</span>, <span class="attr">b</span>: <span class="number">5</span> &#125;];</span><br><span class="line"><span class="comment">// 使用 for...of 循环进行数组的浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> shallowCopyArray = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> originalArray) &#123;</span><br><span class="line">shallowCopyArray.<span class="title function_">push</span>(item);</span><br><span class="line">&#125;</span><br><span class="line">shallowCopyArray[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">shallowCopyArray[<span class="number">3</span>].<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">0</span>]); <span class="comment">// 输出: 1，原始数组的第一个元素不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">3</span>].<span class="property">a</span>); <span class="comment">// 输出: 100，原始数组中的对象属性被改变</span></span><br></pre></td></tr></table></figure></li><li><p><code>forEach</code>：<code>forEach</code> 主要用于遍历数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123; <span class="attr">a</span>: <span class="number">4</span>, <span class="attr">b</span>: <span class="number">5</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 forEach 循环进行数组的浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> shallowCopyArray = [];</span><br><span class="line">originalArray.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">shallowCopyArray.<span class="title function_">push</span>(item);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">shallowCopyArray[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">shallowCopyArray[<span class="number">3</span>].<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">0</span>]); <span class="comment">// 输出: 1，原始数组的第一个元素不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">3</span>].<span class="property">a</span>); <span class="comment">// 输出: 100，原始数组中的对象属性被改变</span></span><br></pre></td></tr></table></figure></li><li><p><code>map</code>：<code>map</code> 方法通常用于创建一个新数组，其中每个元素都是原始数组中元素经过某种处理后的结果。非常适合用于数组的浅拷贝。<code>map</code> 方法遍历数组并返回一个新数组，元素是原始数组的浅拷贝。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123; <span class="attr">a</span>: <span class="number">4</span>, <span class="attr">b</span>: <span class="number">5</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 map 方法进行数组的浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> shallowCopyArray = originalArray.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item);</span><br><span class="line"></span><br><span class="line">shallowCopyArray[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">shallowCopyArray[<span class="number">3</span>].<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">0</span>]); <span class="comment">// 输出: 1，原始数组的第一个元素不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">3</span>].<span class="property">a</span>); <span class="comment">// 输出: 100，原始数组中的对象属性被改变</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="对象">对象</h4><ol><li><p><code>Object.assign()</code>：<code>Object.assign()</code> 常用于浅拷贝对象，它将一个或多个源对象的可枚举属性复制到目标对象中，并返回目标对象。如果某个源对象的属性是引用类型（如对象或数组），<code>Object.assign()</code> 只复制其引用，而不是创建新的独立对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalObject = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">        <span class="attr">zip</span>: <span class="string">&#x27;10001&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Object.assign() 进行浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> shallowCopy = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, originalObject);</span><br><span class="line"></span><br><span class="line">shallowCopy.<span class="property">name</span> = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line">shallowCopy.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&#x27;San Francisco&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalObject.<span class="property">name</span>); <span class="comment">// 输出: &#x27;Alice&#x27;，原始对象的 name 属性不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalObject.<span class="property">address</span>.<span class="property">city</span>); <span class="comment">// 输出: &#x27;San Francisco&#x27;，原始对象的 address.city 属性被改变</span></span><br></pre></td></tr></table></figure></li><li><p>拓展运算符<code>&#123;...obj&#125;</code>：对象展开运算符（<code>...</code>）用于将对象的所有可枚举属性浅拷贝到新的对象中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalObject = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">        <span class="attr">zip</span>: <span class="string">&#x27;10001&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用对象展开运算符进行浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> shallowCopy = &#123; ...originalObject &#125;;</span><br><span class="line"></span><br><span class="line">shallowCopy.<span class="property">name</span> = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line">shallowCopy.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&#x27;San Francisco&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalObject.<span class="property">name</span>); <span class="comment">// 输出: &#x27;Alice&#x27;，原始对象的 name 属性不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalObject.<span class="property">address</span>.<span class="property">city</span>); <span class="comment">// 输出: &#x27;San Francisco&#x27;，原始对象的 address.city 属性被改变</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="数组">数组</h4><ol><li><p><code>concat()</code>：用于将两个或多个数组合并为一个新数组。它可以用来实现数组的浅拷贝</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123; <span class="attr">a</span>: <span class="number">4</span>, <span class="attr">b</span>: <span class="number">5</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 concat() 方法进行浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> shallowCopyArray = originalArray.<span class="title function_">concat</span>();</span><br><span class="line"></span><br><span class="line">shallowCopyArray[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">shallowCopyArray[<span class="number">3</span>].<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">0</span>]); <span class="comment">// 输出: 1，原始数组的第一个元素不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">3</span>].<span class="property">a</span>); <span class="comment">// 输出: 100，原始数组中的对象属性被改变</span></span><br></pre></td></tr></table></figure></li><li><p><code>slice()</code>：用于创建一个新数组，包含原数组的一个子集。它可以用于实现浅拷贝数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123; <span class="attr">a</span>: <span class="number">4</span>, <span class="attr">b</span>: <span class="number">5</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 slice() 方法进行浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> shallowCopyArray = originalArray.<span class="title function_">slice</span>();</span><br><span class="line"></span><br><span class="line">shallowCopyArray[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">shallowCopyArray[<span class="number">3</span>].<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">0</span>]); <span class="comment">// 输出: 1，原始数组的第一个元素不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">3</span>].<span class="property">a</span>); <span class="comment">// 输出: 100，原始数组中的对象属性被改变</span></span><br></pre></td></tr></table></figure></li><li><p><code>Array.from()</code>：用于从类数组对象或可迭代对象创建一个新的数组实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123; <span class="attr">a</span>: <span class="number">4</span>, <span class="attr">b</span>: <span class="number">5</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Array.from() 方法进行浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> shallowCopyArray = <span class="title class_">Array</span>.<span class="title function_">from</span>(originalArray);</span><br><span class="line"></span><br><span class="line">shallowCopyArray[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">shallowCopyArray[<span class="number">3</span>].<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">0</span>]); <span class="comment">// 输出: 1，原始数组的第一个元素不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">3</span>].<span class="property">a</span>); <span class="comment">// 输出: 100，原始数组中的对象属性被改变</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="实现浅拷贝">实现浅拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shallowCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// 确保输入的 obj 是一个对象类型</span></span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;The argument must be an object&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个新对象作为目标对象</span></span><br><span class="line">    <span class="keyword">const</span> copy = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历原对象的属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">            <span class="comment">// 将原对象的属性赋值到新对象中</span></span><br><span class="line">            copy[key] = obj[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, &#123; <span class="attr">a</span>: <span class="number">4</span>, <span class="attr">b</span>: <span class="number">5</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> shallowCopyArray = <span class="title function_">shallowCopy</span>(originalArray);</span><br><span class="line"></span><br><span class="line">shallowCopyArray[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">shallowCopyArray[<span class="number">3</span>].<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">0</span>]); <span class="comment">// 输出: 1，原始数组的第一个元素不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalArray[<span class="number">3</span>].<span class="property">a</span>); <span class="comment">// 输出: 100，原始数组中的对象属性被改变</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试示例</span></span><br><span class="line"><span class="keyword">const</span> originalObject = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">        <span class="attr">zip</span>: <span class="string">&#x27;10001&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> copiedObject = <span class="title function_">shallowCopy</span>(originalObject);</span><br><span class="line"></span><br><span class="line">copiedObject.<span class="property">name</span> = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line">copiedObject.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&#x27;San Francisco&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalObject.<span class="property">name</span>); <span class="comment">// 输出: &#x27;Alice&#x27;，原始对象的 name 属性不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalObject.<span class="property">address</span>.<span class="property">city</span>); <span class="comment">// 输出: &#x27;San Francisco&#x27;，原始对象的 address.city 属性被改变</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝">深拷贝</h2><p><strong>深拷贝</strong>递归地复制对象的所有属性，包括嵌套的对象或数组。深拷贝创建一个与原始对象完全独立的新对象，修改新对象中的嵌套对象或数组时，不会影响原始对象。</p><h3 id="常用的深拷贝方法">常用的深拷贝方法</h3><ol><li><p>JSON序列化和反序列化：将对象转换为 JSON 字符串，然后再将其转换回对象。这样可以创建一个新的对象副本，其中包括所有嵌套的属性。这个方法的缺点是它不适用于包含函数、<code>undefined</code>、<code>Symbol</code>、<code>Map</code>、<code>Set</code>、<code>Date</code>、<code>RegExp</code>、<code>Error</code> 等特殊对象的情况，因为这些会在序列化过程中丢失或变得不再有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepCopyUsingJSON</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="comment">// 将对象序列化为 JSON 字符串</span></span><br><span class="line">    <span class="keyword">const</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line">    <span class="comment">// 将 JSON 字符串解析为新对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试示例</span></span><br><span class="line"><span class="keyword">const</span> originalObject = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">address</span>: &#123;</span><br><span class="line">        <span class="attr">city</span>: <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line">        <span class="attr">zip</span>: <span class="string">&#x27;10001&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">hobbies</span>: [<span class="string">&#x27;reading&#x27;</span>, <span class="string">&#x27;traveling&#x27;</span>],</span><br><span class="line">    <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">&#x27;Hello&#x27;</span>; &#125; <span class="comment">// 注意：此属性在序列化过程中会丢失</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 JSON 序列化和反序列化进行深拷贝</span></span><br><span class="line"><span class="keyword">const</span> copiedObject = <span class="title function_">deepCopyUsingJSON</span>(originalObject);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改拷贝对象的属性</span></span><br><span class="line">copiedObject.<span class="property">name</span> = <span class="string">&#x27;Bob&#x27;</span>;</span><br><span class="line">copiedObject.<span class="property">address</span>.<span class="property">city</span> = <span class="string">&#x27;San Francisco&#x27;</span>;</span><br><span class="line">copiedObject.<span class="property">hobbies</span>.<span class="title function_">push</span>(<span class="string">&#x27;cooking&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalObject.<span class="property">name</span>); <span class="comment">// 输出: &#x27;Alice&#x27;，原始对象的 name 属性不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalObject.<span class="property">address</span>.<span class="property">city</span>); <span class="comment">// 输出: &#x27;New York&#x27;，原始对象的 address.city 属性不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalObject.<span class="property">hobbies</span>); <span class="comment">// 输出: [&#x27;reading&#x27;, &#x27;traveling&#x27;]，原始对象的 hobbies 属性不变</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copiedObject.<span class="property">hobbies</span>); <span class="comment">// 输出: [&#x27;reading&#x27;, &#x27;traveling&#x27;, &#x27;cooking&#x27;]，拷贝对象的 hobbies 属性已修改</span></span><br></pre></td></tr></table></figure></li><li><p>循环递归拷贝：使用循环递归来实现深拷贝可以处理对象中的嵌套结构，并且能够处理包含循环引用的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">newObj, obj</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查输入对象是否为 null 或非对象类型</span></span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环处理对象的每一个属性</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123; <span class="comment">// 确保是对象自身的属性</span></span><br><span class="line">            <span class="keyword">if</span> (obj[key] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果属性是数组，创建一个空数组并递归拷贝</span></span><br><span class="line">                newObj[key] = [];</span><br><span class="line">                <span class="title function_">deepClone</span>(newObj[key], obj[key]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj[key] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果属性是对象，创建一个空对象并递归拷贝</span></span><br><span class="line">                newObj[key] = &#123;&#125;;</span><br><span class="line">                <span class="title function_">deepClone</span>(newObj[key], obj[key]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果属性是基础类型，直接赋值</span></span><br><span class="line">                newObj[key] = obj[key];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="attr">c</span>: &#123;</span><br><span class="line">        <span class="attr">d</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">e</span>: [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newObj = &#123;&#125;;</span><br><span class="line"><span class="title function_">deepClone</span>(newObj, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj, obj)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    obj.<span class="property">b</span>[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line">    obj.<span class="property">c</span>.<span class="property">d</span> = <span class="number">7</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newObj, obj)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(46)-事件循环</title>
    <link href="/2024/09/02/JS%E5%AD%A6%E4%B9%A0(46)-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    <url>/2024/09/02/JS%E5%AD%A6%E4%B9%A0(46)-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<p>事件循环（Event Loop）是 JavaScript 的一个核心机制，它使得 JavaScript 能够执行异步操作，同时保持单线程的非阻塞行为。</p><span id="more"></span><h1>事件循环</h1><p>JavaScript 在浏览器和 Node.js 中都是单线程运行的。这意味着在同一时间只能执行一个任务。为了防止长时间运行的任务（如网络请求或文件读写）阻塞主线程，JavaScript 引入了异步编程。异步任务包括 <code>setTimeout</code>、<code>setInterval</code>、<code>Promise</code>、<code>async/await</code>、事件处理等。</p><h2 id="工作原理">工作原理</h2><p>事件循环通过以下几个关键部分来管理异步任务</p><ol><li><strong>调用栈（Call Stack）</strong>：调用栈是一个 LIFO（后进先出）结构，用于存储执行中的函数。JavaScript 代码被逐行解释执行，每次调用函数时，函数会被压入栈顶，执行完毕后被弹出。</li><li><strong>任务队列（Task Queue）</strong>：任务队列是一个 FIFO（先进先出）结构，存放着那些准备好执行的异步任务的回调函数，如 <code>setTimeout</code>、<code>setInterval</code> 的回调。</li><li><strong>微任务队列（Microtask Queue）</strong>：微任务队列存放着更高优先级的异步任务，如 <code>Promise</code> 的 <code>.then</code>、<code>.catch</code> 回调以及 <code>MutationObserver</code>。微任务队列的优先级高于任务队列。</li><li><strong>事件循环（Event Loop）</strong>：事件循环的作用是不断地检查调用栈是否为空，如果为空，则从任务队列或微任务队列中取出任务进行执行。</li></ol><h2 id="执行顺序">执行顺序</h2><ol><li><strong>执行全局代码</strong>：JavaScript 引擎首先执行全局代码（同步任务），这些任务会按顺序压入调用栈中并依次执行。</li><li><strong>执行微任务</strong>：在执行完当前的同步代码后，事件循环会检查并执行微任务队列中的所有任务。</li><li><strong>执行宏任务</strong>：当微任务队列清空后，事件循环会从任务队列中取出第一个任务并执行。</li><li><strong>重复循环</strong>：上述步骤会不断重复，形成了所谓的“事件循环”。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//setTimeout1</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//setTimeout2</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">            <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, <span class="number">5</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;14&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;8&quot;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;9&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//setTimeout3</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;11&quot;</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;12&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;13&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们来分析一下上面的例子：</p><ol><li>首先执行同步任务<code>console.log()</code>，<code>setTimeout1</code>进入宏任务队列，执行<code>new Promise</code>，<code>Promise.then()</code>进入微任务队列，<code>setTimeout3</code>进入宏任务队列，执行同步任务<code>console.log()</code>，打印出<code>1, 8, 13</code></li><li>执行微任务队列，打印出<code>9</code></li><li>执行宏任务队列<code>setTimeout1</code>，执行同步任务<code>console.log()</code>，执行<code>new Promise</code>，<code>Promise.then()</code>进入微任务队列，<code>setTimeout2</code>进入宏任务队列，执行同步任务<code>console.log()</code>，打印出<code>2, 3, 14</code></li><li>执行微任务队列，打印出<code>4</code></li><li>执行宏任务队列<code>setTimeout3</code>，执行同步任务<code>console.log()</code>，执行<code>new Promise</code>，<code>Promise.then()</code>进入微任务队列，打印出<code>10, 11</code></li><li>执行微任务队列，打印出<code>12</code></li><li>执行宏任务队列<code>setTimeout2</code>，执行同步任务<code>console.log()</code>，执行<code>new Promise</code>，<code>Promise.then()</code>进入微任务队列，打印出<code>5, 6</code></li><li>执行微任务队列，打印出<code>7</code></li></ol><h2 id="async-await">async/await</h2><p><code>async</code> 和 <code>await</code> 是 ES2017 引入的语法糖，用于简化基于 <code>Promise</code> 的异步代码。它们使得异步代码看起来更像同步代码，但在事件循环中，它们的工作方式仍然是异步的，并且遵循事件循环的机制。</p><h3 id="async-和-await-的工作原理"><code>async</code> 和 <code>await</code> 的工作原理</h3><ol><li><strong><code>async</code> 函数</strong>：当一个函数被声明为 <code>async</code> 时，它会自动返回一个 <code>Promise</code>。无论函数内部是否显式返回一个值，都会被包装在一个 <code>Promise</code> 中。如果函数内部抛出异常，<code>Promise</code> 会以 <code>reject</code> 状态结束。</li><li><strong><code>await</code> 表达式</strong>：<code>await</code> 关键字用于等待一个 <code>Promise</code> 的完成。它会暂停 <code>async</code> 函数的执行，直到 <code>Promise</code> 解决，然后恢复执行并返回 <code>Promise</code> 的结果。如果 <code>Promise</code> 被拒绝，<code>await</code> 会抛出异常。</li></ol><h3 id="async-和-await-在事件循环中的表现"><code>async</code> 和 <code>await</code> 在事件循环中的表现</h3><p>当 <code>await</code> 遇到一个 <code>Promise</code> 时，它会将后续的代码放入微任务队列中，等待 <code>Promise</code> 解决。这样，<code>await</code> 不会阻塞主线程，它的执行逻辑会遵循事件循环的机制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;asnyc1 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeOut&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">reslove</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">    <span class="title function_">reslove</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure><p>我们来分析一下上面的例子：</p><ol><li>声明了两个异步函数<code>async1、async2</code></li><li>执行同步任务<code>console.log()</code>，打印出<code>script start</code></li><li><code>setTimeout</code>进入宏任务队列</li><li>执行<code>async1</code>，打印出<code>async1 start</code></li><li>执行<code>async2</code>，打印出<code>async2</code>，返回的<code>Promise</code>进入微任务队列，执行<code>await</code>，等待<code>Promise</code>完成</li><li>执行<code>new Promise</code>，<code>Promise.then()</code>进入微任务队列，打印出<code>Promise1</code></li><li>执行同步任务<code>console.log()</code>，打印出<code>script end</code></li><li>执行<code>async2</code>微任务，执行同步任务<code>console.log()</code>，打印出<code>async1 end</code></li><li>执行<code>Promise</code>微任务，打印出<code>Promise2</code></li><li>执行<code>setTimeout</code>宏任务，打印出<code>setTimeOut</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(45)-Promise实现</title>
    <link href="/2024/08/30/JS%E5%AD%A6%E4%B9%A0(45)-Promise%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/08/30/JS%E5%AD%A6%E4%B9%A0(45)-Promise%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p><code>Promise</code> 是 ES6 引入的一个重要特性，用于处理异步操作。它提供了一种更干净、更直观的方式来处理异步代码，避免了回调地狱（Callback Hell），并使代码更具可读性。</p><span id="more"></span><h1>Promise实现</h1><h2 id="Promise状态">Promise状态</h2><ol><li><strong><code>pending</code></strong>（进行中）：Promise 刚创建时的状态，表示异步操作尚未完成。</li><li><strong><code>fulfilled</code></strong>（已完成）：异步操作成功完成，并且返回了一个值。</li><li><strong><code>rejected</code></strong>（已拒绝）：异步操作失败，并且返回了一个错误原因。</li></ol><p>当<code>new Promise()</code>执行之后，<code>Promise</code>对象的状态会被初始化为<code>pending</code>，<code>Promise</code> 的状态一旦从 <code>pending</code> 变为 <code>fulfilled</code> 或 <code>rejected</code>，就不可改变。</p><h2 id="基本使用">基本使用</h2><p>创建一个 <code>Promise</code> 对象并提供一个 <code>executor</code> 函数，该函数有两个参数 <code>resolve</code> 和 <code>reject</code>：</p><ol><li><code>resolve()</code>：在异步操作成功时调用，用来传递成功的结果。</li><li><code>reject()</code>：在异步操作失败时调用，用来传递失败的原因。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 promise 实例</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//进来之后，promise 的状态为 pending</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同步代码&#x27;</span>); <span class="comment">//这行代码是同步的</span></span><br><span class="line">    <span class="comment">//开始执行异步操作（这里开始，根据具体需求写异步的代码，比如ajax请求 or 开启定时器）</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;异步的ajax请求成功&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果请求成功了，请写resolve()，此时，promise的状态会自动变为fulfilled（成功状态）</span></span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&#x27;请求成功，并传参&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果请求失败了，请写reject()，此时，promise的状态会被自动变为rejected（失败状态）</span></span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;请求失败，并传参&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用promise的then()：开始处理成功和失败</span></span><br><span class="line">promise.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">successValue</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理 promise 的成功状态：如果promise的状态为fulfilled，则执行这里的代码</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(successValue, <span class="string">&#x27;回调成功了&#x27;</span>); <span class="comment">// 这里的 successMsg 是前面的 resolve(&#x27;请求成功，并传参&#x27;)  传过来的参数</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">errorMsg</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//处理 promise 的失败状态：如果promise的状态为rejected，则执行这里的代码</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(errorMsg, <span class="string">&#x27;回调失败了&#x27;</span>); <span class="comment">// 这里的 errorMsg 是前面的 reject(&#x27;请求失败，并传参&#x27;) 传过来的参数</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="resolve-参数">resolve()参数</h3><p>执行<code>resolve()</code>之后，<code>Promise</code>的状态不一定会变成<code>fulfilled</code></p><ol><li><p>如果<code>resolve()</code>中传入<strong>普通的值或者普通对象</strong>（包括 undefined），那么<code>Promise</code>的状态为<code>fulfilled</code>。这个值会作为<code>then()</code>回调的参数。这是最常见的情况。</p></li><li><p>如果<code>resolve()</code>中传入的是<strong>另外一个新的<code>Promise</code></strong>，那么原<code>Promise</code>的状态将<strong>交给新的<code>Promise</code>决定</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;promise2 的 reject&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(promise2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise1</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>如果<code>resolve()</code>中传入的是一个对象，并且这个对象里有实现<code>then()</code>方法（这种对象称为 <strong>thenable</strong> 对象），那就会执行该<code>then()</code>方法，并且根据**<code>then()</code>方法的结果来决定<code>Promise</code>的状态**。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve 里传入了一个 thenable 对象，里面有一个 then()方法，then()方法里执行的是 reject()</span></span><br><span class="line">    <span class="title function_">resolve</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;qianguyihao&#x27;</span>,</span><br><span class="line">        <span class="attr">then</span>: <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 可以执行 resolve，也可以执行 reject，这里以 reject 为例</span></span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&#x27;thenable reject&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise1</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="Promise实例方法">Promise实例方法</h2><h3 id="then">then()</h3><p><code>then()</code>方法是 Promise实例上的一个方法。它其实是放在Promise的原型上的 <code>Promise.prototype.then</code>。</p><p><code>then()</code>方法可以接收一个参数，也可以接收两个参数。两个参数时，分别代表两个回调函数，这两个函数一直处于<strong>监听状态</strong>：</p><ol><li>参数1：当 Promise 的状态变为 fulfilled（意思是：任务执行成功）时会立即执行的回调函数。</li><li>参数2：当 Promise 的状态为 rejected（任务执行失败）时会立即执行的回调函数。</li></ol><p>下面这两种写法是等价的。处理 rejected 失败状态的回调函数，既可以放在 then() 方法的第二个参数里，也可以单独放在 catch() 方法的参数里。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法1</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;qianguyihao&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res:&#x27;</span>, res);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法2</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;qianguyihao&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res:&#x27;</span>, res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><code>then()</code>方法可以被多次调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myPromise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功回调1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myPromise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功回调2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myPromise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功回调3&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>then()</code>返回<code>Promise</code>的状态</p><ol><li>当<code>then()</code>方法中的回调函数在执行时，那么<code>Promise</code> 处于<code>pending</code>状态。</li><li>当<code>then()</code>方法中的回调函数中，手动 return 一个返回值时，那么<code>Promise</code>的状态取决于返回值的类型。<ul><li>如果没有返回值（相当于 return undefined），或者返回值是<strong>普通值/普通对象</strong>，那么 Promise 的状态为fulfilled。这个值会作为fulfilled 状态的回调函数的参数值。</li><li>如果返回值是<strong>另外一个新的 Promise</strong>，那么原 Promise 的状态将<strong>交给新的 Promise 决定</strong>，这两个Promise 的状态一致。</li><li>如果返回值是一个对象，并且这个对象里有实现then()方法（这种对象称为 <strong>thenable</strong> 对象），那就会执行该then()方法，并且根据<strong>then()方法的结果来决定Promise的状态</strong>。</li><li>当<code>then()</code>方法传入的回调函数遇到异常或者手动抛出异常时，那么， Promise 处于rejected 状态，并将抛出的错误作为 rejected 状态的回调函数的参数值。</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认返回值</span></span><br><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">&#x27;zzstriker&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myPromise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功回调1&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res1:&#x27;</span>, res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功回调2&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res2:&#x27;</span>, res);</span><br><span class="line">    &#125;) </span><br><span class="line"><span class="comment">// 成功回调1 res1: zzstriker </span></span><br><span class="line"><span class="comment">// 成功回调2 res2: undefined </span></span><br><span class="line"><span class="comment">// 成功回调3 res3：undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回普通值：通过 return 传递数据结果</span></span><br><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">&#x27;zzstriker1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myPromise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res1:&#x27;</span>, res);</span><br><span class="line">        <span class="comment">// return一个普通值，把这个值传递给下一个Promise</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;zzstriker2&#x27;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// res可以接收到上一个 Promise 传递的值</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res2:&#x27;</span>, res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res3:&#x27;</span>, res);</span><br><span class="line">    &#125;); </span><br><span class="line"><span class="comment">// res1: zzstriker1 </span></span><br><span class="line"><span class="comment">// res2: zzstriker2 </span></span><br><span class="line"><span class="comment">// res3: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回新的 Promise</span></span><br><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;zzstriker fulfilled 1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;zzstriker fulfilled 2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise1</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res1:&#x27;</span>, res);</span><br><span class="line">        <span class="keyword">return</span> promise2;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 监听 promise2 的成功状态</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res2:&#x27;</span>, res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res3&#x27;</span>, res);</span><br><span class="line">    &#125;); </span><br><span class="line"><span class="comment">// res1: zzstriker fulfilled 1 </span></span><br><span class="line"><span class="comment">// res2: zzstriker fulfilled 2 </span></span><br><span class="line"><span class="comment">// res3 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 thenable 对象</span></span><br><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;zzstriker fulfilled 1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myPromise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res1:&#x27;</span>, res);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">then</span>: <span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="string">&#x27;thenable fulfilled&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res2:&#x27;</span>, res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res3&#x27;</span>, res);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// res1: zzstriker fulfilled 1 </span></span><br><span class="line"><span class="comment">// res2: zzstriker fulfilled 2 </span></span><br><span class="line"><span class="comment">// res3 undefined</span></span><br></pre></td></tr></table></figure><h3 id="catch">catch()</h3><p><code>catch()</code>方法是<code>Promise</code>实例上的一个方法，可以接收一个参数。这个参数是一直处于<strong>监听状态</strong>的回调函数。当 Promise 的状态为 rejected（任务执行失败）时会立即执行这个回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;zzstriker reject&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res:&#x27;</span>, res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// err: zzstriker reject</span></span><br></pre></td></tr></table></figure><p><code>catch()</code>方法可以被多次调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myPromise.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败回调1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myPromise.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败回调2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">myPromise.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败回调3&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>catch()</code>返回<code>Promise</code>的状态</p><ol><li>当<code>catch()</code>方法中的回调函数在执行时，那么<code>Promise</code> 处于<code>pending</code>状态。</li><li>当<code>catch()</code>方法中的回调函数中，手动 return 一个返回值时，那么<code>Promise</code>的状态取决于返回值的类型。<ul><li>如果没有返回值（相当于 return undefined），或者返回值是<strong>普通值/普通对象</strong>，那么 Promise 的状态为fulfilled。这个值会作为<code>then()</code>回调函数的参数值。</li><li>如果返回值是<strong>另外一个新的 Promise</strong>，那么原 Promise 的状态将<strong>交给新的 Promise 决定</strong>，这两个Promise 的状态一致。</li><li>如果返回值是一个对象，并且这个对象里有实现then()方法（这种对象称为 <strong>thenable</strong> 对象），那就会执行该then()方法，并且根据<strong>then()方法的结果来决定Promise的状态</strong>。</li><li>当<code>catch()</code>方法传入的回调函数遇到异常或者手动抛出异常时，那么， Promise 处于rejected 状态。</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认返回值</span></span><br><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;zzstriker rejected&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myPromise</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err:&#x27;</span>, err);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res:&#x27;</span>, res);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// err: zzstriker rejected</span></span><br><span class="line"><span class="comment">// res: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回普通值</span></span><br><span class="line"><span class="keyword">const</span> myPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;zzstriker1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">myPromise</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err1:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;zzstriker2&#x27;</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res2:&#x27;</span>, res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res3:&#x27;</span>, res);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// err1: zzstriker1</span></span><br><span class="line"><span class="comment">// res2: zzstriker2</span></span><br><span class="line"><span class="comment">// res3: undefined</span></span><br></pre></td></tr></table></figure><h3 id="finally">finally()</h3><p><code>finally()</code>方法表示 Promise 对象无论变成 fulfilled 状态 还是 rejected 状态，<code>finally()</code>里传入的回调函数都会被执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;promise1 fulfilled&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;promise2 rejected&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise1</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res1:&#x27;</span>, res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err1:&#x27;</span>, err);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1 决议后都会执行的代码&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">promise2</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res2:&#x27;</span>, res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err2:&#x27;</span>, err);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2 决议后都会执行的代码&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// res1: promise1 fulfilled</span></span><br><span class="line"><span class="comment">// err2: promise2 rejected</span></span><br><span class="line"><span class="comment">// promise1 决议后都会执行的代码</span></span><br><span class="line"><span class="comment">// promise2 决议后都会执行的代码</span></span><br></pre></td></tr></table></figure><h2 id="Promise手写实现">Promise手写实现</h2><h3 id="构造函数实现">构造函数实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyPromise</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;pending&#x27;</span>;  <span class="comment">// 初始状态</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>;  <span class="comment">// 成功的值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span>; <span class="comment">// 失败的原因</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = [];  <span class="comment">// 存储成功的回调</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = [];   <span class="comment">// 存储失败的回调</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// resolve 函数：将状态改为 fulfilled，并执行成功回调</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reject 函数：将状态改为 rejected，并执行失败回调</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">executor</span>(resolve, reject);  <span class="comment">// 立即执行传入的函数</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(error);  <span class="comment">// 如果执行中发生错误，则调用 reject</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例方法实现">实例方法实现</h3><h4 id="then-方法实现"><code>then()</code>方法实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">    onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个新的 Promise，用于链式调用</span></span><br><span class="line">    <span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// 异步执行以确保 promise2 已经定义</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">                    <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(error);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">                    <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    <span class="title function_">reject</span>(error);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">                        <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">let</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">                        <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="catch-方法实现"><code>catch()</code>方法实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyPromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span>(<span class="params">onRejected</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, onRejected);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="支持链式调用">支持链式调用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (promise2 === x) &#123; <span class="comment">// 检测是否是 Promise 循环引用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> called;</span><br><span class="line">    <span class="comment">// 判断返回值 x 是否是对象或函数，可能含有 then 方法</span></span><br><span class="line">    <span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span>)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> then = x.<span class="property">then</span>; <span class="comment">// 获取 then 方法</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123; <span class="comment">// 判断 then 是否是函数</span></span><br><span class="line">                <span class="comment">// 调用 then 并递归处理</span></span><br><span class="line">                then.<span class="title function_">call</span>(x, <span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">                    called = <span class="literal">true</span>;</span><br><span class="line">                    <span class="title function_">resolvePromise</span>(promise2, y, resolve, reject);</span><br><span class="line">                &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">                    called = <span class="literal">true</span>;</span><br><span class="line">                    <span class="title function_">reject</span>(err);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(x); <span class="comment">// 如果 then 不是一个函数，那么 x 只是一个普通的对象或值，直接 resolve</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(x); <span class="comment">// x 不是对象或函数，直接 resolve</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类实现">类实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;pending&#x27;</span>; <span class="comment">// 初始状态</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>; <span class="comment">// fulfilled 状态时的值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span>; <span class="comment">// rejected 状态时的原因</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = []; <span class="comment">// 保存 then 的成功回调</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = [];  <span class="comment">// 保存 then 的失败回调</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">state</span> = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">fn</span> =&gt;</span> <span class="title function_">fn</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">executor</span>(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">        onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">        onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回一个新的 Promise 用于链式调用</span></span><br><span class="line">        <span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;fulfilled&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 异步执行，确保 promise2 被定义</span></span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>); <span class="comment">// 获取 then 返回的结果</span></span><br><span class="line">                        <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject); <span class="comment">// 处理链式调用返回的 Promise</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;rejected&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">                        <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                        <span class="title function_">reject</span>(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="string">&#x27;pending&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">                            <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                            <span class="title function_">reject</span>(error);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">                            <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                            <span class="title function_">reject</span>(error);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> promise2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态方法实现">静态方法实现</h3><h4 id="Promise-all-方法实现"><code>Promise.all()</code>方法实现</h4><p><code>Promise.all()</code> 接受一个 <code>Promise</code> 数组，只有当所有 <code>Promise</code> 都成功时，返回的 <code>Promise</code> 才会 <code>resolve</code>，否则返回 <code>reject</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyPromise</span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> resultArray = [];</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">processResult</span> = (<span class="params">index, value</span>) =&gt; &#123;</span><br><span class="line">            resultArray[index] = value;</span><br><span class="line">            count += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (count === promises.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(resultArray);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> promise = promises[i];</span><br><span class="line">            <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">                promise.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> <span class="title function_">processResult</span>(i, value), reject);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">processResult</span>(i, promise);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="Promise-race-方法实现"><code>Promise.race()</code>方法实现</h4><p><code>Promise.race()</code> 返回最先完成或失败的 <code>Promise</code> 的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyPromise</span>.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promises.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> promise = promises[i];</span><br><span class="line">            <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span>) &#123;</span><br><span class="line">                promise.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(promise);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(44)-new、call、apply、bind实现</title>
    <link href="/2024/08/29/JS%E5%AD%A6%E4%B9%A0(44)-new%E3%80%81call%E3%80%81apply%E3%80%81bind%E5%AE%9E%E7%8E%B0/"/>
    <url>/2024/08/29/JS%E5%AD%A6%E4%B9%A0(44)-new%E3%80%81call%E3%80%81apply%E3%80%81bind%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p><code>call、aplly、bind</code> 本质都是改变 <code>this</code> 的指向，不同点 <code>call、aplly</code> 是直接调用函数，<code>bind</code> 是返回一个新的函数。<code>call</code> 跟 <code>aplly</code> 就只有参数上不同。</p><span id="more"></span><h1>new、call、apply、bind实现</h1><h2 id="new">new</h2><p>在 JavaScript 中，<code>new</code> 操作符用于创建一个用户定义的对象类型的新实例。我们可以用 JavaScript 实现一个简化版的 <code>new</code> 操作符。</p><ol><li>创建一个新的空对象。</li><li>将这个新对象的 <code>__proto__</code> 指向构造函数的 <code>prototype</code>，建立对象与原型之间的关系。</li><li>使用 <code>apply</code> 或 <code>call</code> 方法将构造函数中的 <code>this</code> 绑定到这个新对象上，并执行构造函数。</li><li>根据构造函数的返回值来决定返回哪个对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">constructor, ...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 创建一个新的空对象</span></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 将这个空对象的 __proto__ 属性指向构造函数的 prototype 属性</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = constructor.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将构造函数中的 this 绑定到这个新对象上，并执行构造函数</span></span><br><span class="line">    <span class="keyword">const</span> result = constructor.<span class="title function_">apply</span>(obj, args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 如果构造函数返回一个对象，则返回该对象；否则，返回新创建的对象</span></span><br><span class="line">    <span class="keyword">return</span> result <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? result : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让我们使用这个 <code>myNew</code> 函数来创建一个对象，看看它是如何工作的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHello</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, and I am <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span> years old.`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="title function_">myNew</span>(<span class="title class_">Person</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// 输出: &quot;Alice&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>);  <span class="comment">// 输出: 25</span></span><br><span class="line">person.<span class="title function_">sayHello</span>();        <span class="comment">// 输出: &quot;Hello, my name is Alice, and I am 25 years old.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h2 id="call">call</h2><p><code>call</code> 方法是 JavaScript 中用于调用函数的一种方式，它允许你在调用函数时显式指定 <code>this</code> 的值，并且可以逐个传递参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">call</span>(thisArg, arg1, arg2, ...)</span><br></pre></td></tr></table></figure><ol><li>处理 <code>this</code> 的上下文：如果 <code>context</code> 是 <code>null</code> 或 <code>undefined</code>，则将 <code>this</code> 设置为全局对象；如果 <code>context</code> 是一个原始值（例如字符串、数字、布尔值），JavaScript 会自动将其转换为对应的对象类型（如 <code>String</code>、<code>Number</code>、<code>Boolean</code>）。</li><li>创建一个唯一的属性名：使用 <code>Symbol</code> 来创建一个唯一的属性名，以避免覆盖 <code>context</code> 对象上可能已经存在的属性。</li><li>将当前函数添加到 <code>context</code> 对象中：将当前的函数（即 <code>this</code>）作为 <code>context</code> 对象的一个属性，使得我们能够通过 <code>context[fnSymbol]()</code> 来调用它。</li><li>调用函数并传递参数：使用 <code>context</code> 对象调用函数，并传递参数。</li><li>删除临时添加的属性：在调用函数之后，删除我们之前在 <code>context</code> 对象上添加的属性，以保持对象的干净和完整。</li><li>返回函数调用的结果。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">context, ...args</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 如果 context 是 null 或 undefined，将 this 设置为全局对象（在浏览器中是 window，在 Node.js 中是 global）</span></span><br><span class="line">    <span class="comment">//    如果 context 是原始值（如字符串、数字、布尔值），将其转换为对象类型</span></span><br><span class="line">    context = context || globalThis;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建一个唯一的属性名，避免覆盖 context 对象的已有属性</span></span><br><span class="line">    <span class="keyword">const</span> fnSymbol = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将当前函数（即 this）作为 context 对象的一个属性</span></span><br><span class="line">    context[fnSymbol] = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 使用 context 对象调用这个函数，并传递参数</span></span><br><span class="line">    <span class="keyword">const</span> result = context[fnSymbol](...args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 删除之前添加的属性</span></span><br><span class="line">    <span class="keyword">delete</span> context[fnSymbol];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 返回函数调用的结果</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>让我们使用 <code>myCall</code> 方法来调用一个函数，并指定 <code>this</code> 值和参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">greeting, punctuation</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;greeting&#125;</span>, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span><span class="subst">$&#123;punctuation&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 myCall 方法</span></span><br><span class="line">greet.<span class="title function_">myCall</span>(person, <span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;!&#x27;</span>); <span class="comment">// 输出: &quot;Hello, my name is Alice!&quot;</span></span><br></pre></td></tr></table></figure><h2 id="apply">apply</h2><p><code>apply</code> 方法与 <code>call</code> 方法类似，它们的主要区别在于传递参数的方式。<code>apply</code> 方法接受两个参数：</p><ol><li><code>thisArg</code>：函数运行时使用的 <code>this</code> 值。</li><li><code>argsArray</code>：一个数组或类数组对象，包含函数的参数。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="title function_">apply</span>(thisArg, [argsArray])</span><br></pre></td></tr></table></figure><ol><li>处理 <code>this</code> 的上下文：如果 <code>context</code> 是 <code>null</code> 或 <code>undefined</code>，则将 <code>this</code> 设置为全局对象；如果 <code>context</code> 是一个原始值（例如字符串、数字、布尔值），JavaScript 会自动将其转换为对应的对象类型（如 <code>String</code>、<code>Number</code>、<code>Boolean</code>）。</li><li>创建一个唯一的属性名：使用 <code>Symbol</code> 来创建一个唯一的属性名，以避免覆盖 <code>context</code> 对象上可能已经存在的属性。</li><li>将当前函数添加到 <code>context</code> 对象中：将当前的函数（即 <code>this</code>）作为 <code>context</code> 对象的一个属性，使得我们能够通过 <code>context[fnSymbol]()</code> 来调用它。</li><li>调用函数并传递参数数组：使用 <code>context</code> 对象调用函数，并展开传入的参数数组。如果没有提供 <code>args</code>，则默认为空数组。</li><li>删除临时添加的属性：在调用函数之后，删除我们之前在 <code>context</code> 对象上添加的属性，以保持对象的干净和完整。</li><li>返回函数调用的结果。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">context, args</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 如果 context 是 null 或 undefined，将 this 设置为全局对象（在浏览器中是 window，在 Node.js 中是 global）</span></span><br><span class="line">    <span class="comment">//    如果 context 是原始值（如字符串、数字、布尔值），将其转换为对象类型</span></span><br><span class="line">    context = context || globalThis;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建一个唯一的属性名，避免覆盖 context 对象的已有属性</span></span><br><span class="line">    <span class="keyword">const</span> fnSymbol = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 将当前函数（即 this）作为 context 对象的一个属性</span></span><br><span class="line">    context[fnSymbol] = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 使用 context 对象调用这个函数，并传递参数数组</span></span><br><span class="line">    <span class="keyword">const</span> result = context[fnSymbol](...(args || []));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 删除之前添加的属性</span></span><br><span class="line">    <span class="keyword">delete</span> context[fnSymbol];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 返回函数调用的结果</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>让我们使用 <code>myApply</code> 方法来调用一个函数，并指定 <code>this</code> 值和参数数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">greeting, punctuation</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;greeting&#125;</span>, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span><span class="subst">$&#123;punctuation&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 myApply 方法</span></span><br><span class="line">greet.<span class="title function_">myApply</span>(person, [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;!&#x27;</span>]); <span class="comment">// 输出: &quot;Hello, my name is Alice!&quot;</span></span><br></pre></td></tr></table></figure><h2 id="bind">bind</h2><p><code>bind</code> 方法在 JavaScript 中用于创建一个新函数，这个新函数的 <code>this</code> 值被绑定到指定的对象上，并且可以预先设置一些参数。当调用这个新函数时，这些预设的参数会优先传入。与 <code>call</code> 和 <code>apply</code> 不同，<code>bind</code> 方法不会立即执行函数，而是返回一个新的函数。</p><ol><li>保存原始函数：<code>this</code> 在这里指的是原始函数，我们需要保存它以便在新的函数中使用。</li><li>返回一个新函数：<code>myBind</code> 返回的是一个新函数，这个新函数可以在调用时接受新的参数。</li><li>组合参数：将在 <code>bind</code> 中传入的参数（<code>args</code>）与新函数调用时传入的参数（<code>newArgs</code>）合并。</li><li>处理 <code>this</code> 的指向：如果新函数是作为构造函数使用（即通过 <code>new</code> 关键字调用），<code>this</code> 将指向新创建的对象，此时应忽略 <code>bind</code> 时绑定的 <code>context</code>，并将 <code>this</code> 指向新对象。</li><li>调用原始函数并绑定 <code>this</code>：在其他情况下，<code>this</code> 应指向绑定时指定的 <code>context</code>，并调用原始函数，传入组合后的参数。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span>(<span class="params">context, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Error&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保存调用 bind 的原始函数</span></span><br><span class="line">    <span class="keyword">const</span> fn = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个新的函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...newArgs</span>) &#123;</span><br><span class="line">        <span class="comment">// 组合绑定时传入的参数和调用时传入的参数</span></span><br><span class="line">        <span class="keyword">const</span> allArgs = args.<span class="title function_">concat</span>(newArgs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果新函数作为构造函数使用，this 将指向新创建的对象</span></span><br><span class="line">        <span class="comment">// 此时需要忽略绑定的 context，this 应该指向新对象</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> fn) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">fn</span>(...allArgs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则，this 指向绑定的 context</span></span><br><span class="line">        <span class="keyword">return</span> fn.<span class="title function_">apply</span>(context, allArgs);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>让我们使用 <code>myBind</code> 方法来创建一个绑定了 <code>this</code> 值的新函数，并在调用时传递参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">greeting, punctuation</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;greeting&#125;</span>, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span><span class="subst">$&#123;punctuation&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 myBind 方法创建一个新的函数</span></span><br><span class="line"><span class="keyword">const</span> greetPerson = greet.<span class="title function_">myBind</span>(person, <span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">greetPerson</span>(); <span class="comment">// 输出: &quot;Hello, my name is Alice!&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(43)-柯里化函数</title>
    <link href="/2024/08/28/JS%E5%AD%A6%E4%B9%A0(43)-%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0/"/>
    <url>/2024/08/28/JS%E5%AD%A6%E4%B9%A0(43)-%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>柯里化</strong>是一种将接受多个参数的函数转换为一系列接受一个参数的函数的技术。柯里化可以将一个多参数函数拆分成多个嵌套的单参数函数，每个函数接受一个参数，并返回下一个函数，直到所有参数都被处理完毕，最终返回结果。</p><span id="more"></span><h1>柯里化函数</h1><h2 id="基础">基础</h2><p>假设有一个函数 <code>add(a, b, c)</code>，它接受三个参数并返回结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>按照柯里化的定义，函数<code>add</code>的柯理化转换过程应该是<code>add(a,b,c) =&gt; curriedAdd(a)(b)(c)</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curriedAdd</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">c</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b + c</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行验证一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="进阶">进阶</h2><p>上面是基于极简场景的实现，思考一下下面场景的<code>curriedAdd</code>函数如何实现</p><ol><li>初始传入一个参数，<code>curriedAdd(1)(2,3)</code>或者 <code>curriedAdd(1)(2)(3)</code></li><li>初始传入两个参数，<code>curriedAdd(1,2)(3)</code></li><li>初始传入三个参数，<code>curriedAdd(1,2,3)</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">func</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.<span class="property">length</span> &gt;= func.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...nextArgs</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> curried.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args.<span class="title function_">concat</span>(nextArgs));</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> curriedAdd = <span class="title function_">currying</span>(add)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)) <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">1</span>)(<span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">1</span>, <span class="number">2</span>)(<span class="number">3</span>)) <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="应用场景">应用场景</h2><h3 id="参数复用">参数复用</h3><p>柯里化允许你创建一个预设参数的函数，用于在后续调用中重复使用这些参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">func</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">curried</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (args.<span class="property">length</span> &gt;= func.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...nextArgs</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> curried.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args.<span class="title function_">concat</span>(nextArgs));</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> double = <span class="title function_">curry</span>(multiply)(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">double</span>(<span class="number">5</span>)); <span class="comment">// 输出 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">double</span>(<span class="number">10</span>)); <span class="comment">// 输出 20</span></span><br></pre></td></tr></table></figure><h3 id="函数组合">函数组合</h3><p>柯里化有助于将多个函数组合在一起，形成复杂的操作链。例如，将不同的数据处理步骤组合在一起，每个步骤只处理一部分操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addAndMultiply</span> = (<span class="params">a</span>) =&gt; <span class="function">(<span class="params">b</span>) =&gt;</span> <span class="title function_">multiply</span>(a)(<span class="title function_">add</span>(a)(b));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addAndMultiply</span>(<span class="number">2</span>)(<span class="number">3</span>)); <span class="comment">// 输出 10 (2 + 3) * 2 = 10</span></span><br></pre></td></tr></table></figure><h2 id="优点">优点</h2><ol><li><strong>提高复用性</strong>：通过预设部分参数，柯里化函数可以更容易地复用，减少重复代码。</li><li><strong>灵活性</strong>：柯里化使得函数可以在多种场景下被调用，接收参数的方式更加灵活。</li><li><strong>函数组合</strong>：柯里化使得函数组合更自然，可以将多个函数串联起来，形成数据处理管道。</li></ol><h2 id="缺点">缺点</h2><ol><li><strong>复杂性增加</strong>：对于不熟悉柯里化的开发者，理解和调试柯里化函数可能比较困难。</li><li><strong>性能问题</strong>：在某些情况下，过度使用柯里化可能会导致性能下降，尤其是在需要处理大量嵌套函数时。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(42)-防抖和节流</title>
    <link href="/2024/08/27/JS%E5%AD%A6%E4%B9%A0(42)-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
    <url>/2024/08/27/JS%E5%AD%A6%E4%B9%A0(42)-%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<p><strong>防抖</strong>和<strong>节流</strong>是两个常见的性能优化技术，主要用于控制高频率事件的触发次数，如滚动、调整窗口大小、输入框输入等。它们都可以防止某些函数被过度频繁地调用，从而提高性能和用户体验，但它们的实现方式和应用场景有所不同。</p><span id="more"></span><h1>防抖和节流</h1><h2 id="防抖">防抖</h2><p><strong>防抖</strong>的基本原理是，当一个事件持续触发时，防抖函数会在事件停止触发后一段时间内才执行。如果在这段时间内事件再次触发，之前的计时会被清除，并重新开始计时。只有当事件不再触发，并且等待的时间结束后，函数才会被执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeoutId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="variable language_">this</span>; <span class="comment">// 保存this指向</span></span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>; <span class="comment">// 拿到event对象</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">        timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Window resized&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">500</span>));</span><br></pre></td></tr></table></figure><h3 id="立即执行模式">立即执行模式</h3><p>函数在第一次触发时立即执行，而不是等待 <code>delay</code> 毫秒后再执行。这种情况下，可以通过增加一个 <code>immediate</code> 参数来控制是否立即执行函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, delay, immediate</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeoutId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timeoutId) <span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">            <span class="keyword">let</span> callNow = !timeoutId;</span><br><span class="line">            timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                timeoutId = <span class="literal">null</span>;</span><br><span class="line">            &#125;, delay);</span><br><span class="line">            <span class="keyword">if</span> (callNow) func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            timeoutId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优点">优点</h3><ol><li>减少不必要的执行：防抖可以有效减少高频事件触发时的函数执行次数，特别是在需要频繁处理用户输入、滚动等事件时，可以显著提升性能。</li><li>节省资源：防抖技术在某些场景下可以减少网络请求或复杂计算的次数，节省服务器资源和客户端计算资源。</li></ol><h3 id="缺点">缺点</h3><ol><li>延迟响应：由于防抖会延迟函数的执行，在一些对响应速度要求较高的场景下，防抖可能不合适。</li><li>不适用于所有场景：对于一些需要持续处理的事件（如实时监控、动画等），防抖并不适用。</li></ol><h2 id="节流">节流</h2><p><strong>节流</strong>的基本原理是，限制一个函数在一定时间内只执行一次。无论事件如何频繁触发，节流函数都会在设定的时间间隔内只执行一次。节流函数的执行会定期触发，而不是事件停止后才触发。</p><h3 id="时间戳">时间戳</h3><p>使用时间戳写法，事件会立即执行，停止触发后没有办法再次执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context, args;</span><br><span class="line">    <span class="keyword">let</span> previous = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        context = <span class="variable language_">this</span>;</span><br><span class="line">        args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (now - previous &gt; delay) &#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">            previous = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定时器">定时器</h3><p>使用定时器写法，<code>delay</code>毫秒后第一次执行，第二次事件停止触发后依然会再一次执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> timeout;</span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        context = <span class="variable language_">this</span>;</span><br><span class="line">        args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">            timeout = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                timeout = <span class="literal">null</span>;</span><br><span class="line">                func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">            &#125;, delay)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优点-2">优点</h3><ol><li>控制执行频率：节流可以有效控制函数的执行频率，避免高频率事件触发时函数被频繁调用，减少性能损耗。</li><li>平滑体验：对于滚动、调整窗口大小等事件，节流可以提供更加平滑的用户体验，避免界面卡顿或响应过快。</li></ol><h3 id="缺点-2">缺点</h3><ol><li>不适用于需要精确响应的场景：节流会使得某些事件的响应不那么及时，在需要即时反馈的场景下（如实时输入）可能不适用。</li><li>复杂实现：节流实现较为复杂，特别是在处理各种特殊需求（如需要立即执行或最后一次执行）时，需要更精细的逻辑。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(41)-闭包</title>
    <link href="/2024/08/26/JS%E5%AD%A6%E4%B9%A0(41)-%E9%97%AD%E5%8C%85/"/>
    <url>/2024/08/26/JS%E5%AD%A6%E4%B9%A0(41)-%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p><strong>闭包</strong> 是 JavaScript 中的一个非常重要且常见的概念，它允许函数访问其词法作用域之外的变量，即使这个函数是在其外部作用域被调用的。简单来说，闭包是一个函数与其 <strong>“定义时”</strong> 的 <strong>外部环境</strong>（作用域）之间的绑定关系。</p><span id="more"></span><h1>闭包</h1><p>**闭包是指在函数内部定义的函数可以访问到函数外部的变量，即使这个外部函数已经执行完毕。**闭包的作用是将一个函数与该函数的 <strong>词法环境（Lexical Environment）</strong> 绑定在一起，使得该函数能够访问到其创建时的作用域中的变量。</p><h2 id="闭包关键点">闭包关键点</h2><ol><li><strong>函数嵌套</strong>：闭包通常是通过在一个函数内部定义另一个函数来创建的。</li><li><strong>访问外部作用域</strong>：内部函数可以访问外部函数的变量，即使外部函数已经执行完毕并返回。</li><li><strong>保持引用</strong>：即使外部函数的执行上下文已经销毁，只要内部函数存在，闭包会继续保存对外部函数变量的引用。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun1</span>();</span><br><span class="line"><span class="comment">// 调用外部函数，就能得到内部函数，并用 变量 result 接收</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">fun1</span>();</span><br><span class="line"><span class="comment">// 在 fun1函数的外部，执行了内部函数 fun2，并访问到了 fun2的内部变量a</span></span><br><span class="line"><span class="title function_">result</span>(); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h2 id="闭包工作原理">闭包工作原理</h2><p>JavaScript 中，每次函数执行时，都会创建一个 <strong>执行上下文（Execution Context）</strong>。当函数内部嵌套有另一个函数时，外部函数的变量被保存在 <strong>词法环境（Lexical Environment）</strong> 中。闭包可以保留对这些外部变量的引用，即使外部函数已经执行完毕并返回。</p><ol><li><strong>词法作用域</strong>：JavaScript 的作用域是词法作用域，这意味着变量的作用域在定义时就已经确定，而不是在执行时。</li><li><strong>作用域链</strong>：当内部函数被调用时，它首先会查找自己的作用域中的变量，如果找不到，则会沿着作用域链向上查找外部函数的变量，直到找到所需的变量或到达全局作用域。</li></ol><h2 id="闭包常见应用">闭包常见应用</h2><ol><li><p><strong>数据隐藏与封装</strong>：闭包可以用来 <strong>隐藏数据</strong>，防止外部代码直接修改某些变量，达到封装的效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createCounter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(count);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = <span class="title function_">createCounter</span>();  <span class="comment">// 创建一个计数器</span></span><br><span class="line"><span class="title function_">counter</span>();  <span class="comment">// 输出 1</span></span><br><span class="line"><span class="title function_">counter</span>();  <span class="comment">// 输出 2</span></span><br><span class="line"><span class="title function_">counter</span>();  <span class="comment">// 输出 3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>模拟私有变量</strong>：JavaScript 没有真正的私有变量，但可以通过闭包模拟私有变量，控制变量的访问权限。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> privateName = name;  <span class="comment">// 私有变量</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> privateName;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">setName</span> = <span class="keyword">function</span>(<span class="params">newName</span>) &#123;</span><br><span class="line">    privateName = newName;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>());  <span class="comment">// 输出 &#x27;Alice&#x27;</span></span><br><span class="line">person.<span class="title function_">setName</span>(<span class="string">&#x27;Bob&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>());  <span class="comment">// 输出 &#x27;Bob&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>回调与异步操作</strong>：闭包广泛应用于回调函数和异步操作中，尤其是在处理事件监听器或 <code>setTimeout</code> 等异步任务时，闭包能够保留对执行时环境的访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">delayedGreeting</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>);  <span class="comment">// 使用闭包访问 name</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">delayedGreeting</span>(<span class="string">&#x27;Alice&#x27;</span>);  <span class="comment">// 1 秒后输出: &quot;Hello, Alice!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>函数柯里化</strong>：闭包是实现 <strong>函数柯里化</strong> 的关键技术。柯里化是指将一个接受多个参数的函数转换为接受单个参数的函数，并返回接受余下参数的新函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> addFive = <span class="title function_">add</span>(<span class="number">5</span>);  <span class="comment">// 返回一个闭包，保留 x = 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addFive</span>(<span class="number">10</span>));  <span class="comment">// 输出 15</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="闭包优缺点">闭包优缺点</h2><h3 id="优点">优点</h3><ol><li><strong>数据持久化</strong>：闭包能够保持对外部变量的引用，实现数据的持久化。</li><li><strong>数据隐藏与封装</strong>：闭包可以隐藏内部变量，防止外部代码直接修改，形成封装。</li><li><strong>灵活性与代码复用</strong>：闭包能够实现许多高级的编程技巧，如柯里化、回调等，增强代码的灵活性和可复用性。</li></ol><h3 id="缺点">缺点</h3><ol><li><strong>内存泄漏风险</strong>：由于闭包会保留对外部变量的引用，如果不小心，可能导致不再需要的变量无法被垃圾回收器回收，导致内存泄漏。</li><li><strong>调试复杂</strong>：由于闭包保留了对多个作用域的引用，调试和定位错误可能变得更加复杂。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(40)-作用域</title>
    <link href="/2024/08/22/JS%E5%AD%A6%E4%B9%A0(40)-%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2024/08/22/JS%E5%AD%A6%E4%B9%A0(40)-%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<p>作用域是指程序中变量、函数和对象的可访问区域。作用域决定了代码中哪些部分可以访问哪些变量，防止不同部分的代码相互干扰。</p><span id="more"></span><h1>作用域</h1><h2 id="全局作用域">全局作用域</h2><p><strong>全局作用域</strong>是指在整个程序中都可以访问的作用域。在 JavaScript 中，全局作用域中的变量和函数可以在代码的任何地方被访问。</p><h3 id="全局变量">全局变量</h3><p>任何在函数、块或其他局部作用域外部声明的变量都会自动成为全局变量。全局变量可以通过 <code>var</code>、<code>let</code>、<code>const</code> 关键字定义，也可以通过直接赋值的方式定义。全局变量可以在任何地方访问和修改。</p><h3 id="全局对象">全局对象</h3><p>在浏览器环境中，所有的全局变量和函数都会自动成为 <code>window</code> 对象的属性或方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalVar = <span class="string">&quot;I&#x27;m a global variable&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">exampleFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalVar); <span class="comment">// 可以访问全局变量，输出: &quot;I&#x27;m a global variable&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">exampleFunction</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalVar); <span class="comment">// 在函数外部同样可以访问全局变量，输出: &quot;I&#x27;m a global variable&quot;</span></span><br></pre></td></tr></table></figure><h2 id="函数作用域">函数作用域</h2><p><strong>函数作用域</strong>是指变量和函数仅在其定义的函数内部可见和可访问的作用域。</p><ol><li><strong>变量仅在函数内部可见</strong>：在函数内部用 <code>var</code> 关键字声明的变量，只能在该函数内部访问。函数外部无法访问这些变量</li><li><strong>函数内部的嵌套作用域</strong>：如果一个函数内部再定义了其他函数，那么内部函数可以访问外部函数的变量（通过作用域链），但外部函数不能访问内部函数的变量</li><li><strong>变量提升</strong>：在函数作用域中，使用 <code>var</code> 声明的变量会被提升到作用域的顶部，但不会初始化。即变量声明会在作用域内的代码执行之前发生，但赋值操作仍然在代码的原位置进行。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> localVar = <span class="string">&quot;I&#x27;m a local variable&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(localVar); <span class="comment">// 输出: I&#x27;m a local variable</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">myFunction</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localVar); <span class="comment">// Error: localVar is not defined</span></span><br></pre></td></tr></table></figure><h3 id="变量提升">变量提升</h3><p>在 JavaScript 的函数作用域中，变量和函数声明都会被提升到作用域的顶部。这意味着可以在声明之前使用这些变量或函数，但只有 <code>var</code> 声明的变量会被提升为 <code>undefined</code>。对于 <code>let</code> 和 <code>const</code>在声明之前使用它们会导致 <code>ReferenceError</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hoistingExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(hoistedVar); <span class="comment">// 输出: undefined</span></span><br><span class="line">    <span class="keyword">var</span> hoistedVar = <span class="string">&quot;I&#x27;m hoisted!&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(hoistedVar); <span class="comment">// 输出: I&#x27;m hoisted!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hoistingExample</span>();</span><br></pre></td></tr></table></figure><h3 id="嵌套函数">嵌套函数</h3><p>函数作用域还支持嵌套作用域，即函数内部可以定义另一个函数。内部函数可以访问外部函数的变量，但外部函数不能访问内部函数的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> outerVar = <span class="string">&quot;I&#x27;m in the outer function&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">innerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> innerVar = <span class="string">&quot;I&#x27;m in the inner function&quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(outerVar); <span class="comment">// 输出: I&#x27;m in the outer function</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(innerVar); <span class="comment">// 输出: I&#x27;m in the inner function</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">innerFunction</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(innerVar); <span class="comment">// Error: innerVar is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">outerFunction</span>();</span><br></pre></td></tr></table></figure><h3 id="let和const">let和const</h3><p>在 ES6 之前，JavaScript 只有函数作用域，没有块级作用域。<code>let</code> 和 <code>const</code> 引入后，变量可以在块级作用域内声明，但 <code>let</code> 和 <code>const</code> 在函数内部仍然遵循函数作用域规则。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">blockScopeExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> varVariable = <span class="string">&quot;var variable&quot;</span>;</span><br><span class="line">        <span class="keyword">let</span> letVariable = <span class="string">&quot;let variable&quot;</span>;</span><br><span class="line">        <span class="keyword">const</span> constVariable = <span class="string">&quot;const variable&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(varVariable);  <span class="comment">// 输出: var variable</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(letVariable);  <span class="comment">// Error: letVariable is not defined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(constVariable);<span class="comment">// Error: constVariable is not defined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">blockScopeExample</span>();</span><br></pre></td></tr></table></figure><h2 id="块级作用域">块级作用域</h2><p><strong>块级作用域</strong>是指变量和函数在特定代码块内（通常是由花括号 <code>&#123;&#125;</code> 括起来的代码块）有效的作用域。在 JavaScript 中，块级作用域是由 <code>let</code> 和 <code>const</code> 关键字引入的，而 <code>var</code> 声明的变量不受块级作用域的限制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 输出: 0, 1, 2</span></span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="词法作用域">词法作用域</h2><p><strong>词法作用域</strong>，也称为<strong>静态作用域</strong>，是指变量的作用域在代码编写时就已经确定，而不是在代码执行时决定的。JavaScript 使用词法作用域规则，这意味着函数在定义时确定了它的作用域，而不是在调用时。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalVar = <span class="string">&quot;global&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> outerVar = <span class="string">&quot;outer&quot;</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">innerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> innerVar = <span class="string">&quot;inner&quot;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(innerVar);  <span class="comment">// 输出: &quot;inner&quot;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(outerVar);  <span class="comment">// 输出: &quot;outer&quot;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(globalVar); <span class="comment">// 输出: &quot;global&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">innerFunction</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">outerFunction</span>();</span><br></pre></td></tr></table></figure><h2 id="作用域链">作用域链</h2><p><strong>作用域链</strong>是指在 JavaScript 中，当一个函数执行时，它会创建一个上下文环境，并在这个环境中保存了一个引用列表，这个列表包含了当前执行环境及其所有父级环境的作用域。作用域链的作用是帮助 JavaScript 引擎确定变量的值。当一个变量在当前作用域中找不到时，JavaScript 会沿着作用域链向上查找，直到找到该变量或到达全局作用域为止。</p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(39)-原型</title>
    <link href="/2024/08/21/JS%E5%AD%A6%E4%B9%A0(39)-%E5%8E%9F%E5%9E%8B/"/>
    <url>/2024/08/21/JS%E5%AD%A6%E4%B9%A0(39)-%E5%8E%9F%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p><strong>原型</strong>（Prototype）是 JavaScript 中的一个核心概念，它涉及到对象和继承机制。每一个 JavaScript 对象都有一个原型对象（prototype），通过原型对象可以继承其他对象的属性和方法。这种机制被称为“原型链”（prototype chain），它是 JavaScript 实现继承的一种方式。</p><span id="more"></span><h1>原型</h1><h2 id="构造函数创建对象">构造函数创建对象</h2><p>我们先使用构造函数创建一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Kevin&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure><p>Person 就是一个构造函数，我们使用 new 创建了一个实例对象 person。</p><h2 id="prototype">prototype</h2><p>每个函数都有一个 <strong>prototype</strong> 属性，函数的 <strong>prototype</strong> 属性指向了一个对象，这个对象正是调用该构造函数而创建的<strong>实例对象</strong>的原型对象。在下面的例子中，Person 函数的<strong>prototype</strong>属性就是 person1、person2 的原型对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// prototype是函数才会有的属性</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Kevin&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>) <span class="comment">// Kevin</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">name</span>) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/JS/prototype.png" alt=""></p><h2 id="proto"><code>__proto__</code></h2><p>每一个JavaScript对象(除了 null )都具有<code>__proto__</code>属性，这个属性会指向该对象的原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/JS/proto.png" alt=""></p><h2 id="constructor">constructor</h2><p>一个构造函数可以生成多个实例，因此无法通过实例指向构造函数。但是可以通过原型对象指向构造函数，每个原型对象都有一个 <strong>constructor</strong> 属性指向关联的构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/JS/constructor.png" alt=""></p><p>从上面我们可以得出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">__proto__</span> == <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> == <span class="title class_">Person</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="实例与原型">实例与原型</h2><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Kevin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Daisy&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// Daisy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure><h2 id="原型的原型">原型的原型</h2><p>原型也是一个对象，原型对象通过 Object 构造函数生成的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Kevin&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>) <span class="comment">// Kevin</span></span><br></pre></td></tr></table></figure><p><img src="/imgs/JS/object.png" alt=""></p><h2 id="原型链">原型链</h2><p>通过往上溯源原型，我们找到了 Object.prototype，那什么时候停止往上查找呢，Object.prototype 的原型又是什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="literal">null</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>通过代码可以看出，Object.prototype 的原型是 null，null 表示“没有对象”，即该处不应该有值。所以 <code>Object.prototype.__proto__</code> 的值为 null 表示了 Object.prototype 没有原型，所以查找属性的时候查到 Object.prototype 就可以停止查找了。</p><p><img src="/imgs/JS/null.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(38)-模块</title>
    <link href="/2024/08/20/JS%E5%AD%A6%E4%B9%A0(38)-%E6%A8%A1%E5%9D%97/"/>
    <url>/2024/08/20/JS%E5%AD%A6%E4%B9%A0(38)-%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 模块是一种将代码分割为独立文件和模块的机制，每个模块只负责特定的功能。模块化的代码更易于维护、测试和重用。在现代 JavaScript 开发中，模块是组织代码的核心部分，尤其是在构建大型应用程序时。</p><span id="more"></span><h1>模块</h1><h2 id="CommonJS">CommonJS</h2><p>CommonJS 是一种模块化规范，最初是为服务器端 JavaScript 应用程序设计的，尤其是在 Node.js 中得到了广泛应用。它通过定义模块的格式和加载方式，帮助开发者将代码组织为独立、可复用的模块。</p><h3 id="核心概念">核心概念</h3><ol><li><p>模块导出 (module.exports)：在 CommonJS 中，每个文件都是一个模块，通过<code>module.exports</code> 将模块中的函数、对象或变量导出，以便在其他模块中使用。<code>module.exports</code> 是一个对象，默认情况下，模块导出的是一个空对象 <code>&#123;&#125;</code>，可以将任意内容赋值给它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出函数</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    add,</span><br><span class="line">    subtract</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// greet.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>模块导入 (require)：<code>require()</code> 是用于加载其他模块的函数。它接受模块的路径或名称作为参数，并返回 <code>module.exports</code> 导出的内容。使用 <code>require()</code> 导入模块时，Node.js 会同步读取并执行该模块的代码，并缓存导出的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&#x27;./math.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>));       <span class="comment">// 输出: 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">2</span>));  <span class="comment">// 输出: 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> greet = <span class="built_in">require</span>(<span class="string">&#x27;./greet.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">greet</span>(<span class="string">&#x27;World&#x27;</span>));       <span class="comment">// 输出: Hello, World!</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="特点">特点</h3><ol><li>同步加载：<code>require()</code> 是同步的，当调用 <code>require()</code> 时，Node.js 会立即加载并执行模块，直到模块的代码全部执行完毕后才继续执行后续代码。</li><li>每个文件都是模块：每个 JavaScript 文件都被视为一个独立的模块。模块内的变量和函数默认是私有的，除非通过 <code>module.exports</code>导出它们。</li><li>模块路径解析：<code>require()</code> 可以使用相对路径或绝对路径来加载模块。相对路径通常以 <code>./</code> 开头，表示当前目录下的模块。</li><li>模块缓存：模块在第一次加载后会被缓存。同一个模块多次使用 <code>require()</code> 只会加载一次，之后从缓存中读取。有助于提高性能。</li></ol><h2 id="AMD">AMD</h2><p>AMD（Asynchronous Module Definition）是一种 JavaScript 模块化规范，主要用于在浏览器中异步加载模块。它的设计目的是解决浏览器环境中的模块加载问题，使得可以并行加载多个模块，避免阻塞页面渲染。</p><h3 id="核心概念-2">核心概念</h3><ol><li><p>定义模块：使用 <code>define()</code> 函数来定义模块。<code>define()</code> 接受模块名、依赖数组和工厂函数作为参数。工厂函数的返回值就是模块导出的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="string">&#x27;math&#x27;</span>, [], <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">subtract</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        add,</span><br><span class="line">        subtract</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>加载模块：使用 <code>require()</code> 函数来加载模块并使用它们。<code>require()</code> 也接受依赖数组和一个回调函数，回调函数在依赖项加载完成后执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;math&#x27;</span>], <span class="keyword">function</span>(<span class="params">math</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>));       <span class="comment">// 输出: 5</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">2</span>));  <span class="comment">// 输出: 3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>带有依赖的模块：如果一个模块依赖其他模块，可以在定义时将依赖模块的名称作为数组传递给 <code>define()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// calculator.js</span></span><br><span class="line"><span class="title function_">define</span>(<span class="string">&#x27;calculator&#x27;</span>, [<span class="string">&#x27;math&#x27;</span>], <span class="keyword">function</span>(<span class="params">math</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">calculate</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> math.<span class="title function_">add</span>(a, b) * math.<span class="title function_">subtract</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">    calculate</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="特点-2">特点</h3><ol><li>异步加载：AMD支持异步加载，避免了页面在等待 JavaScript 加载时的阻塞现象，提高了页面性能。</li><li>依赖管理：AMD 可以显式地声明模块的依赖项，使模块加载顺序更加清晰，确保了在模块使用之前，它的依赖项已经加载完毕。</li></ol><h2 id="UMD">UMD</h2><p>UMD（Universal Module Definition）是一种 JavaScript 模块化规范，它的设计目标是让同一个模块能够在多种环境中使用，包括浏览器、Node.js 以及 AMD 加载器（如 RequireJS）等。这种通用性使得 UMD 非常适合用于需要跨平台兼容的 JavaScript 库和模块。</p><h3 id="工作原理">工作原理</h3><p>UMD 会先检测当前环境支持哪种模块系统，把所有逻辑包装在一个立即调用的函数表达式，并使用对应的方式导出模块。如果没有检测到任何模块系统，它会将模块挂载到全局对象上。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">root, factory</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span> &amp;&amp; define.<span class="property">amd</span>) &#123;</span><br><span class="line">        <span class="comment">// AMD。注册为匿名模块</span></span><br><span class="line">        <span class="title function_">define</span>([<span class="string">&#x27;moduleB&#x27;</span>], factory);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">module</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">exports</span>) &#123;</span><br><span class="line">        <span class="comment">// Node。不支持严格 CommonJS</span></span><br><span class="line">        <span class="comment">// 但可以在 Node 这样支持 module.exports 的</span></span><br><span class="line">        <span class="comment">// 类 CommonJS 环境下使用</span></span><br><span class="line">        <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">factory</span>(<span class="built_in">require</span>(<span class="string">&#x27; moduleB &#x27;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 浏览器全局上下文（root 是 window）</span></span><br><span class="line">        root.<span class="property">returnExports</span> = <span class="title function_">factory</span>(root. moduleB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(<span class="variable language_">this</span>, <span class="keyword">function</span> (<span class="params">moduleB</span>) &#123;</span><br><span class="line">    <span class="comment">// 以某种方式使用 moduleB</span></span><br><span class="line">    <span class="comment">// 将返回值作为模块的导出</span></span><br><span class="line">    <span class="comment">// 这个例子返回了一个对象</span></span><br><span class="line">    <span class="comment">// 但是模块也可以返回函数作为导出值</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;)); </span><br></pre></td></tr></table></figure><h2 id="ESM">ESM</h2><p>ESM（ECMAScript Modules，即 ES 模块）是 JavaScript 的官方模块系统，是 ES6 中引入的一项标准。</p><h3 id="导出模块内容">导出模块内容</h3><p>ESM 使用 <code>export</code> 关键字来导出模块内容。有两种导出方式：命名导出和默认导出。</p><ol><li><p>命名导出：在一个模块中导出多个命名变量或函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">subtract</span> = (<span class="params">a, b</span>) =&gt; a - b;</span><br></pre></td></tr></table></figure></li><li><p>默认导出：默认导出用于导出一个主要的函数、对象或类。每个模块只能有一个默认导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// multiply.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="导入模块内容">导入模块内容</h3><p>ESM 使用 <code>import</code> 关键字来导入模块内容。</p><ol><li><p>导入命名导出：使用大括号 <code>&#123;&#125;</code> 导入命名导出的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, subtract &#125; <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>));       <span class="comment">// 输出: 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">3</span>));  <span class="comment">// 输出: 2</span></span><br></pre></td></tr></table></figure></li><li><p>导入默认导出：默认导出可以直接导入，不需要使用大括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> multiply <span class="keyword">from</span> <span class="string">&#x27;./multiply.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">3</span>));  <span class="comment">// 输出: 6</span></span><br></pre></td></tr></table></figure></li><li><p>导入所有内容：使用 <code>* as</code> 语法将模块中的所有导出内容导入为一个命名空间对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">&#x27;./math.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>));       <span class="comment">// 输出: 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">3</span>));  <span class="comment">// 输出: 2</span></span><br></pre></td></tr></table></figure></li><li><p>动态导入：ESM 支持动态导入，允许在运行时按需加载模块。这通常用于条件加载或代码分割</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./math.js&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">math</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(math.<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 输出: 5</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="特点-3">特点</h3><ol><li>静态结构：ESM 的模块结构在编译时就确定了。JavaScript 引擎在加载模块时可以直接解析和链接模块，而不需要执行代码。</li><li>异步加载：ESM 在浏览器中是异步加载的，使用 <code>&lt;script type=&quot;module&quot;&gt;</code> 标签来加载模块。即使模块是异步加载的，依赖关系仍然可以被正确解析。</li><li>按值导出：模块的导出是按值导出的，而不是按引用。这意味着导出的值是动态绑定的，导入模块时可以随时获取到最新的值。</li><li>作用域：每个模块都有自己的独立作用域，模块内部的变量和函数不会污染全局作用域。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(37)-客户端存储</title>
    <link href="/2024/08/19/JS%E5%AD%A6%E4%B9%A0(37)-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8/"/>
    <url>/2024/08/19/JS%E5%AD%A6%E4%B9%A0(37)-%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<p>客户端存储指的是在用户的浏览器中存储数据的各种方法。这些技术允许Web应用程序在客户端持久化数据，从而在无需与服务器交互的情况下访问和使用这些数据。</p><span id="more"></span><h1>客户端存储</h1><h2 id="cookie">cookie</h2><p>cookie最初用于在客户端存储会话信息，服务器在响应 HTTP 请求时，通过发送 Set-Cookie HTTP 头部包含会话信息，浏览器会存储这些会话信息，并在之后的每个请求中都会通过 HTTP 头部 cookie 再将它们发回服务器。</p><ol><li>每个 cookie 的大小限制为约 4KB</li><li>每个域名下的 cookie 数量有限，一般最多 20-50 个</li></ol><h3 id="cookie-的构成">cookie 的构成</h3><ol><li>名称：唯一标识 cookie 的名称。cookie 名不区分大小写</li><li>值：存储在 cookie 里的字符串值</li><li>域：cookie 有效的域。发送到这个域的所有请求都会包含对应的 cookie</li><li>路径：请求 URL 中包含这个路径才会把 cookie 发送到服务器</li><li>过期时间：表示何时删除 cookie 的时间戳。默认情况下， 浏览器会话结束后会删除所有 cookie。</li><li>安全标志：设置之后，只在使用 SSL 安全连接的情况下才会把 cookie 发送到服务器。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Set</span>-<span class="title class_">Cookie</span>: username=<span class="title class_">JohnDoe</span>; <span class="title class_">Expires</span>=<span class="title class_">Wed</span>, <span class="number">13</span> <span class="title class_">Aug</span> <span class="number">2025</span> <span class="number">07</span>:<span class="number">28</span>:<span class="number">00</span> <span class="variable constant_">GMT</span>; <span class="title class_">Path</span>=/; secure</span><br></pre></td></tr></table></figure><h2 id="Web-Storage">Web Storage</h2><p>Web Storage 是一种浏览器提供的客户端存储机制，用于在用户的浏览器中存储数据。提供了更大的存储空间和更简单的 API，且数据不会自动随 HTTP 请求发送到服务器。Web Storage 包含两种存储方式：<code>localStorage</code> 和 <code>sessionStorage</code>。</p><h3 id="Storage类型">Storage类型</h3><p>Storage 类型用于保存名/值对数据，直至存储空间上限。</p><ol><li>clear()：删除所有值；</li><li>getItem(name)：取给定 name 的值</li><li>key(index)：取给定数值位置的名称</li><li>removeItem(name)：删除给定 name 的键值对</li><li>setItem(name, value)：设置给定 name 的值</li></ol><h3 id="sessionStorage">sessionStorage</h3><p><code>sessionStorage</code> 用于持久化存储数据，但数据仅在当前浏览器会话期间有效。当用户关闭浏览器标签页或窗口时，存储的数据会被删除。</p><ol><li><strong>会话性</strong>：数据只在当前会话（即浏览器窗口或标签页）中有效，关闭会话后数据将被清除</li><li><strong>独立性</strong>：每个标签页或窗口有各自独立的 <code>sessionStorage</code> 数据，即使在同一域名下，标签页间的数据也不共享</li><li><strong>存储空间</strong>：通常每个域名约 5MB</li></ol><h3 id="localStorage">localStorage</h3><p><code>localStorage</code> 用于持久化存储数据，除非被显式删除，否则数据不会过期。即使用户关闭浏览器或计算机，数据仍然会保留。</p><ol><li><strong>持久性</strong>：数据在浏览器会话之间持久保存，除非用户清除浏览器数据或通过代码删除。</li><li><strong>存储空间</strong>：通常每个域名可以存储约 5MB 数据</li><li><strong>数据类型</strong>：只能存储字符串，其他类型需要序列化为字符串后才能存储</li></ol><h2 id="IndexedDB">IndexedDB</h2><p>IndexedDB 是一种在用户的浏览器中存储大量结构化数据的客户端数据库技术。用于在Web应用程序中本地存储数据。IndexedDB支持事务性存储，它允许你存储几乎任何类型的数据，包括文件、blob、数组、对象等等，且容量较大（通常为几百MB或更多），可以用于离线存储和缓存。</p><ol><li><strong>键值对存储</strong>：IndexedDB是一个基于对象存储(Object Store)的键值对数据库，每个数据库可以包含多个对象存储。</li><li><strong>异步操作</strong>：IndexedDB 的所有操作都是异步的，这意味着你需要使用回调函数或 <code>Promise</code> 来处理查询结果。</li><li><strong>事务支持</strong>：所有的读写操作都必须在事务内进行，事务确保了操作的原子性和一致性。</li><li><strong>查询索引</strong>：IndexedDB支持为对象存储中的字段创建索引，从而可以加快查询速度。</li></ol><h3 id="对象存储">对象存储</h3><ol><li><p><code>open()</code>：传入一个要打开的数据库名称。如果给定名称的数据库已存在，则会发送一个打开它的请求；如果不存在，则会发送创建并打开这个数据库的请求。这个方法会返回 IDBRequest 的实例，可以在这个实例上添加 onerror 和 onsuccess 事件处理程序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> db, request, version = <span class="number">1</span>;</span><br><span class="line">request = indexedDB.<span class="title function_">open</span>(<span class="string">&quot;admin&quot;</span>, version);</span><br><span class="line">request.<span class="property">onerror</span> = <span class="function">(<span class="params">event</span>) =&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Failed to open: <span class="subst">$&#123;event.target.errorCode&#125;</span>`</span>);</span><br><span class="line">request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">db = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure></li><li><p><code>createObjectStore()</code>：<code>open()</code>操作会创建一个新数据库，然后触发 upgradeneeded 事件。可以为这个事件设置处理程序，并在处理程序中创建数据库模式。如果数据库存在，而你指定了一个升级版的版本号，则会立即触发 upgradeneeded 事件，因而可以在事件处理程序中更新数据库模式。</p></li><li><p><code>deleteObjectStore()</code>：用于在数据库模式升级时删除不再需要的对象存储（Object Store）。这个操作通常在 <code>onupgradeneeded</code> 事件中执行，当你需要删除某个对象存储以便更新数据库结构时使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onupgradeneeded</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> db = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">    <span class="keyword">if</span> (db.<span class="property">objectStoreNames</span>.<span class="title function_">contains</span>(<span class="string">&quot;users&quot;</span>)) &#123;</span><br><span class="line">    db.<span class="title function_">deleteObjectStore</span>(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    db.<span class="title function_">createObjectStore</span>(<span class="string">&quot;users&quot;</span>, &#123; <span class="attr">keyPath</span>: <span class="string">&quot;username&quot;</span> &#125;);</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure></li></ol><h3 id="事务">事务</h3><p>事务通过调用数据库对象的<code>transaction()</code>方法创建。任何时候，只要想要读取或修改数据，都要通过事务来操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果不指定参数，则对数据库中所有的对象存储有只读权限</span></span><br><span class="line"><span class="keyword">let</span> transaction = db.<span class="title function_">transaction</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定一个要访问的对象存储的名称</span></span><br><span class="line"><span class="keyword">let</span> transaction = db.<span class="title function_">transaction</span>(<span class="string">&quot;users&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问多个对象存储，可以给第一个参数传入一个字符串数组</span></span><br><span class="line"><span class="keyword">let</span> transaction = db.<span class="title function_">transaction</span>([<span class="string">&quot;users&quot;</span>, <span class="string">&quot;anotherStore&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个事务都以只读方式访问数据。要修改访问模式，可以传入第二个参数。&quot;readonly&quot;、&quot;readwrite&quot;或&quot;versionchange&quot;</span></span><br><span class="line"><span class="keyword">let</span> transaction = db.<span class="title function_">transaction</span>(<span class="string">&quot;users&quot;</span>, <span class="string">&quot;readwrite&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="操作对象">操作对象</h3><ol><li><code>get()</code>：获取对象</li><li><code>add()</code>：添加对象</li><li><code>put()</code>：更新对象</li><li><code>delete()</code>：删除对象</li><li><code>clear()</code>：删除所有对象</li></ol><h3 id="游标">游标</h3><p>使用事务可以通过一个已知键取得一条记录。如果想取得多条数据，则需要在事务中创建一个游标。 游标是一个指向结果集的指针，需要在对象存储上调用<code>openCursor()</code>方法创建游标。</p><ol><li><p><code>openCursor()</code>方法也返回一个请求，须添加 onsuccess 和 onerror 事件处理程序。游标可以以升序或降序（<code>next</code>、<code>prev</code>）进行遍历。在调用 onsuccess 事件处理程序时，可以通过 event.target.result 访问对象存储中的下一条记录，如果没有更多记录为 null。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> transaction = db.<span class="title function_">transaction</span>(<span class="string">&quot;users&quot;</span>),</span><br><span class="line">store = transaction.<span class="title function_">objectStore</span>(<span class="string">&quot;users&quot;</span>),</span><br><span class="line">request = store.<span class="title function_">openCursor</span>();</span><br><span class="line">request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 处理成功</span></span><br><span class="line">&#125;;</span><br><span class="line">request.<span class="property">onerror</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 处理错误</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure></li><li><p><code>update(value)</code> 方法使用指定的对象更新当前游标对应的值，调用 update()会创建一个新请求，因此如果想知道结果，需要为 onsuccess 和 onerror 赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cursor = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">    <span class="keyword">let</span> value,</span><br><span class="line">    updateRequest;</span><br><span class="line">    <span class="keyword">if</span> (cursor) &#123; <span class="comment">// 永远要检查</span></span><br><span class="line">        <span class="keyword">if</span> (cursor.<span class="property">key</span> == <span class="string">&quot;foo&quot;</span>) &#123;</span><br><span class="line">            value = cursor.<span class="property">value</span>; <span class="comment">// 取得当前对象</span></span><br><span class="line">            value.<span class="property">password</span> = <span class="string">&quot;magic!&quot;</span>; <span class="comment">// 更新密码</span></span><br><span class="line">            updateRequest = cursor.<span class="title function_">update</span>(value); <span class="comment">// 请求保存更新后的对象</span></span><br><span class="line">            updateRequest.<span class="property">onsuccess</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 处理成功</span></span><br><span class="line">            &#125;;</span><br><span class="line">            updateRequest.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 处理错误</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>调用<code>delelte()</code>来删除游标位置的记录，与<code>update()</code>一样，这也会创建一个请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> cursor = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">    <span class="keyword">let</span> value,</span><br><span class="line">    deleteRequest;</span><br><span class="line">    <span class="keyword">if</span> (cursor) &#123; <span class="comment">// 永远要检查</span></span><br><span class="line">        <span class="keyword">if</span> (cursor.<span class="property">key</span> == <span class="string">&quot;foo&quot;</span>) &#123;</span><br><span class="line">            deleteRequest = cursor.<span class="title function_">delete</span>(); <span class="comment">// 请求删除对象</span></span><br><span class="line">            deleteRequest.<span class="property">onsuccess</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 处理成功</span></span><br><span class="line">            &#125;;</span><br><span class="line">            deleteRequest.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 处理错误</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>continue(key)</code>方法移动到结果集中的下一条记录。参数 key 是可选的。如果没有指定 key，游标就移动到下一条记录；如果指定了，则游标移动到指定的键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> cursor = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">    <span class="keyword">if</span> (cursor) &#123; <span class="comment">// 永远要检查</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Key: <span class="subst">$&#123;cursor.key&#125;</span>, Value: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(cursor.value)&#125;</span>`</span>);</span><br><span class="line">        cursor.<span class="title function_">continue</span>(); <span class="comment">// 移动到下一条记录</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure></li><li><p>使用<code>advance(count)</code>方法使游标向前移动指定的 count 条记录</p></li><li><p>通过键范围来限制游标遍历的范围，<code>only(value)</code>方法只获取键为 value 的值，<code>bound()</code>方法获取结果集上限和下限的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = db.<span class="title function_">transaction</span>(<span class="string">&quot;users&quot;</span>).<span class="title function_">objectStore</span>(<span class="string">&quot;users&quot;</span>),</span><br><span class="line">range = <span class="title class_">IDBKeyRange</span>.<span class="title function_">bound</span>(<span class="string">&quot;007&quot;</span>, <span class="string">&quot;ace&quot;</span>);</span><br><span class="line">request = store.<span class="title function_">openCursor</span>(range);</span><br><span class="line">request.<span class="property">onsuccess</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> cursor = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">    <span class="keyword">if</span> (cursor) &#123; <span class="comment">// 永远要检查</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Key: <span class="subst">$&#123;cursor.key&#125;</span>, Value: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(cursor.value)&#125;</span>`</span>);</span><br><span class="line">        cursor.<span class="title function_">continue</span>(); <span class="comment">// 移动到下一条记录</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure></li></ol><h3 id="索引">索引</h3><h4 id="创建索引">创建索引</h4><p>调用<code>createIndex(indexName, keyPath, options)</code>创建索引</p><ul><li><code>indexName</code>：是索引的名称</li><li><code>keyPath</code>：是要索引的字段或字段数组（用于复合索引）</li><li><code>options</code>：是可选参数，如 <code>&#123; unique: true &#125;</code>，表示该索引值必须唯一</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> transaction = db.<span class="title function_">transaction</span>(<span class="string">&quot;users&quot;</span>),</span><br><span class="line">store = transaction.<span class="title function_">objectStore</span>(<span class="string">&quot;users&quot;</span>),</span><br><span class="line">index = store.<span class="title function_">createIndex</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;username&quot;</span>, &#123; <span class="attr">unique</span>: <span class="literal">true</span> &#125;); </span><br></pre></td></tr></table></figure><h4 id="查询数据">查询数据</h4><ol><li><code>index.get(key)</code>：根据索引查找单条记录。</li><li><code>index.getAll(key)</code>：根据索引查找所有匹配的记录。</li><li><code>index.openCursor(range)</code>：使用游标遍历索引中的记录。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> transaction = db.<span class="title function_">transaction</span>(<span class="string">&quot;users&quot;</span>),</span><br><span class="line">store = transaction.<span class="title function_">objectStore</span>(<span class="string">&quot;users&quot;</span>),</span><br><span class="line">index = store.<span class="title function_">index</span>(<span class="string">&quot;username&quot;</span>),</span><br><span class="line">request = index.<span class="title function_">get</span>(<span class="string">&quot;007&quot;</span>);</span><br><span class="line">request.<span class="property">onsuccess</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 处理成功</span></span><br><span class="line">&#125;;</span><br><span class="line">request.<span class="property">onerror</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 处理错误</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(36)-网络请求</title>
    <link href="/2024/08/18/JS%E5%AD%A6%E4%B9%A0(36)-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    <url>/2024/08/18/JS%E5%AD%A6%E4%B9%A0(36)-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，网络请求用于与服务器进行通信，获取或发送数据。常见的网络请求方法包括使用 <code>XMLHttpRequest</code>、<code>Fetch API</code>、以及一些第三方库如 <code>Axios</code></p><span id="more"></span><h1>网络请求</h1><h2 id="XMLHttpRequest-对象">XMLHttpRequest 对象</h2><p><code>XMLHttpRequest</code> 是一种传统的方式，用于在后台与服务器进行数据交换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure><h3 id="使用XHR">使用XHR</h3><ol><li><p><code>open()</code>：调用 open()不会实际发送请 求，只是为发送请求做好准备。这个方法接收 3 个参数：请求类型（“get”、&quot;post&quot;等）、 请求 URL，以及表示请求是否异步的布尔值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;https://jsonplaceholder.typicode.com/posts&#x27;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>send()</code>：接收一个参数，是作为请求体发送的数据。如果不需要发送请求体，则必须传 null， 因为这个参数在某些浏览器中是必需的。调用 send()之后，请求就会发送到服务器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>); </span><br></pre></td></tr></table></figure></li></ol><h3 id="XHR-对象属性">XHR 对象属性</h3><ol><li>status：响应的 HTTP 状态。</li><li>statusText：响应的 HTTP 状态描述。</li><li>responseText：作为响应体返回的文本。</li><li>responseXML：如果响应的内容类型是&quot;text/xml&quot;或&quot;application/xml&quot;，那就是包含响应数据的 XML DOM 文档。</li><li>readyState：表示当前处在请求/响应过程的哪个阶段<ul><li><code>0</code>：客户端已创建，但 <code>open()</code> 方法尚未调用。</li><li><code>1</code>：<code>open()</code> 方法已经调用，但请求还未发送。</li><li><code>2</code>：<code>send()</code> 方法已经调用，且头部和状态已经可获得。</li><li><code>3</code>：正在下载响应体。</li><li><code>4</code>：请求操作已经完成。</li></ul></li></ol><p>每次 readyState 从一个值变成另一个值，都会触发 readystatechange 事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) || xhr.<span class="property">status</span> == <span class="number">304</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Request was unsuccessful: &quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;example.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="HTTP头部">HTTP头部</h3><p>XHR 对象会通过一些方法暴露与请求和响应相关的头部字段。</p><ol><li>Accept：浏览器可以处理的内容类型</li><li>Accept-Charset：浏览器可以显示的字符集</li><li>Accept-Encoding：浏览器可以处理的压缩编码类型</li><li>Accept-Language：浏览器使用的语言</li><li>Connection：浏览器与服务器的连接类型</li><li>Cookie：页面中设置的 Cookie。</li><li>Host：发送请求的页面所在的域</li><li>Referer：发送请求的页面的 URI</li><li>User-Agent：浏览器的用户代理字符串</li></ol><p>如果需要发送额外的请求头部，可以使用<code>setRequestHeader()</code>方法，这个方法接收两个参数：头部字段的名称和值。为保证请求头部被发送，必须在<code>open()</code>之后、<code>send()</code>之前调用<code>setRequestHeader()</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) || xhr.<span class="property">status</span> == <span class="number">304</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Request was unsuccessful: &quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;example.php&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;MyHeader&quot;</span>, <span class="string">&quot;MyValue&quot;</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>); </span><br></pre></td></tr></table></figure><p>可以使用<code>getResponseHeader()</code>方法从 XHR 对象获取响应头部，只要传入要获取头部的名称即可。如果想取得所有响应头部，可以使用<code>getAllResponseHeaders()</code>方法，这个方法会返回包含所有响应头部的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myHeader = xhr.<span class="title function_">getResponseHeader</span>(<span class="string">&quot;MyHeader&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> allHeaders xhr.<span class="title function_">getAllResponseHeaders</span>();</span><br></pre></td></tr></table></figure><h3 id="FormData-类型">FormData 类型</h3><p>FormData 类型便于表单序列化，也便于创建与表单类似格式的数据然后通过 XHR 发送。<code>append()</code>方法接收两个参数：键和值，相当于表单字段名称和该字段的值。可以像这样添加任意多个键/值对数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">data.<span class="title function_">append</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;Nicholas&quot;</span>); </span><br></pre></td></tr></table></figure><h2 id="进度事件">进度事件</h2><p>进度事件（Progress Events）是用于追踪资源加载进度的事件，通常与 <code>XMLHttpRequest</code>、<code>File API</code>、以及其他需要跟踪数据加载的场景相关。</p><ol><li>loadstart：在接收到响应的第一个字节时触发</li><li>progress：在接收响应期间反复触发</li><li>error：在请求出错时触发</li><li>abort：在调用 abort()终止连接时触发</li><li>load：在成功接收完响应时触发</li><li>loadend：在通信完成时，且在 error、abort 或 load 之后触发</li></ol><p>每次请求都会首先触发 loadstart 事件，之后是一个或多个 progress 事件，接着是 error、abort 或 load 中的一个，最后以 loadend 事件结束。</p><h3 id="load-事件">load 事件</h3><p>load 事件在响应接收完成后立即触发，这样就不用检查 readyState 属性 了。onload 事件处理程序会收到一个 event 对象，其 target 属性设置为 XHR 实例。只要是从服务器收到响应，无论状态码是什么，都会触发 load 事件。这意味着还需要检查 status 属性才能确定数据是否有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) || xhr.<span class="property">status</span> == <span class="number">304</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Request was unsuccessful: &quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;altevents.php&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>); </span><br></pre></td></tr></table></figure><h3 id="progress-事件">progress 事件</h3><p>progress 事件，在浏览器接收数据期间，这个事件会反复触发。每次触发时，onprogress 事件处理程序都会收到 event 对象，其 target 属性是 XHR 对象，且包含 3 个额外属性：lengthComputable、position 和 totalSize。其中，lengthComputable 是 一个布尔值，表示进度信息是否可用；position 是接收到的字节数；totalSize 是响应的 ContentLength 头部定义的总字节数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) || xhr.<span class="property">status</span> == <span class="number">304</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Request was unsuccessful: &quot;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> divStatus = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;status&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">lengthComputable</span>) &#123;</span><br><span class="line">        divStatus.<span class="property">innerHTML</span> = <span class="string">&quot;Received &quot;</span> + event.<span class="property">position</span> + <span class="string">&quot; of &quot;</span> +</span><br><span class="line">        event.<span class="property">totalSize</span> + <span class="string">&quot; bytes&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;altevents.php&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>); </span><br></pre></td></tr></table></figure><h2 id="跨源资源共享">跨源资源共享</h2><p>XHR 只能访问与发起请求的页面在同一个域内的资源。这个安全限制可以防止某些恶意行为。不过，浏览器也需要支持合法跨源访问的能力。跨源资源共享（CORS，Cross-Origin Resource Sharing）定义了浏览器与服务器如何实现跨源通信。</p><h3 id="预检请求">预检请求</h3><p>预检请求是浏览器为了安全起见，在进行跨域资源共享（CORS）请求之前，自动发出的一个 HTTP 请求。预检请求用于询问目标服务器是否允许实际的跨域请求。当浏览器检测到一个跨域请求可能会对服务器有潜在影响时，它会首先发起一个 <code>OPTIONS</code> 请求，这个请求就叫做<strong>预检请求</strong>。</p><h2 id="Fetch-API">Fetch API</h2><p><code>Fetch API</code> 是用于发起网络请求的一种接口，它提供了一种更简单、更灵活的方式来获取资源。相比于传统的 <code>XMLHttpRequest</code>，<code>Fetch API</code> 更加直观，并且基于 <code>Promise</code>，更适合异步操作和链式调用。</p><h3 id="基本用法">基本用法</h3><p><code>Fetch API</code> 通常是通过调用全局的 <code>fetch()</code> 函数来发起请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(url, options)</span><br></pre></td></tr></table></figure><ol><li><strong>URL</strong>：要请求的资源地址</li><li><strong>options</strong>（可选）：一个包含自定义设置的对象，如请求方法、头部信息、请求体等<ul><li><strong>method</strong>：请求方法（如 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等）。</li><li><strong>headers</strong>：包含请求头的对象，如 <code>Content-Type</code>、<code>Authorization</code> 等。</li><li><strong>body</strong>：请求体，通常用于 <code>POST</code> 或 <code>PUT</code> 请求，可以是字符串、<code>FormData</code>、<code>Blob</code>、<code>ArrayBuffer</code> 等。</li><li><strong>mode</strong>：请求模式，常见值为 <code>cors</code>、<code>no-cors</code>、<code>same-origin</code>，用于确定请求的跨域策略。</li><li><strong>credentials</strong>：包含 <code>include</code>、<code>same-origin</code>、<code>omit</code>，用于控制是否发送凭据（如 cookies）。</li><li><strong>cache</strong>：控制缓存模式，如 <code>default</code>、<code>no-store</code>、<code>reload</code>、<code>no-cache</code>、<code>force-cache</code>、<code>only-if-cached</code>。</li></ul></li></ol><h3 id="响应处理">响应处理</h3><p><code>fetch()</code> 返回一个 <code>Promise</code>，解析为一个 <code>Response</code> 对象。这个对象包含了对响应的描述，可以用于进一步处理。</p><ol><li><strong><code>response.json()</code></strong>：解析并返回 JSON 对象。</li><li><strong><code>response.text()</code></strong>：解析并返回字符串形式的数据。</li><li><strong><code>response.blob()</code></strong>：解析并返回 <code>Blob</code> 对象，用于处理二进制数据。</li><li><strong><code>response.formData()</code></strong>：解析并返回 <code>FormData</code> 对象。</li><li><strong><code>response.arrayBuffer()</code></strong>：解析并返回 <code>ArrayBuffer</code> 对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/submit&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;John Doe&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(data))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error:&#x27;</span>, error));</span><br></pre></td></tr></table></figure><h2 id="Web-Socket">Web Socket</h2><p>Web Socket通过一个长时连接实现与服务器全双工、双向的通信。创建 Web Socket 时，一个 HTTP 请求会发送到服务器以初始化连接。服务器响应后，连接使用 HTTP 的 Upgrade 头部从 HTTP 协议切换到 Web Socket 协议。Web Socket使用了自定义协议，所以 URL方案要使用 ws://和 wss://。前者是不安全的连接，后者是安全连接。</p><h3 id="初始化">初始化</h3><p>创建一个新的 Web Socket，就要实例化一个 WebSocket 对象并传入提供连接的 URL</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://www.example.com/server.php&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="发送和接收数据">发送和接收数据</h3><p>使用<code>send()</code>方法可以连接发送数据，服务器向客户端发送消息时，WebSocket 对象上会触发 message 事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://www.example.com/server.php&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> stringData = <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> arrayBufferData = <span class="title class_">Uint8Array</span>.<span class="title function_">from</span>([<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]);</span><br><span class="line"><span class="keyword">let</span> blobData = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;o&#x27;</span>]);</span><br><span class="line">socket.<span class="title function_">send</span>(stringData);</span><br><span class="line">socket.<span class="title function_">send</span>(arrayBufferData.<span class="property">buffer</span>);</span><br><span class="line">socket.<span class="title function_">send</span>(blobData); </span><br><span class="line"></span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = event.<span class="property">data</span>;</span><br><span class="line">    <span class="comment">// 对数据执行某些操作</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="事件">事件</h3><ol><li>open：在连接成功建立时触发</li><li>error：在发生错误时触发。连接无法存续</li><li>close：在连接关闭时触发</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&quot;ws://www.example.com/server.php&quot;</span>);</span><br><span class="line">socket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connection established.&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">socket.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connection error.&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">socket.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connection closed.&quot;</span>);</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(35)-JSON</title>
    <link href="/2024/08/17/JS%E5%AD%A6%E4%B9%A0(35)-JSON/"/>
    <url>/2024/08/17/JS%E5%AD%A6%E4%B9%A0(35)-JSON/</url>
    
    <content type="html"><![CDATA[<p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，易于人类阅读和编写，同时也易于机器解析和生成。虽然 JSON 是基于 JavaScript 的子集，但它是语言无关的，并且已经被许多编程语言所支持，广泛用于数据传输。</p><span id="more"></span><h1>JSON</h1><p>JSON 没有变量、函数或对象实例的概念。JSON 的所有记号都只为表示结构化数据，JSON 语法支持表示 3 种类型的值。</p><ol><li>简单值：字符串、数值、布尔值和 null 可以在 JSON 中出现，就像在 JavaScript 中一样。特殊值 undefined 不可以。</li><li>对象：第一种复杂数据类型，对象表示有序键/值对。每个值可以是简单值，也可以是复杂类型。</li><li>数组：第二种复杂数据类型，数组表示可以通过数值索引访问的值的有序列表。数组的值可以 是任意类型，包括简单值、对象，甚至其他数组。</li></ol><h2 id="语法">语法</h2><h3 id="简单值">简单值</h3><ol><li><strong>字符串</strong>：必须使用双引号括起来。</li><li><strong>数字</strong>：可以是整数或浮点数，没有特殊的格式要求。</li><li><strong>布尔值</strong>：<code>true</code> 或 <code>false</code>。</li><li><strong>null</strong>：表示空值或未定义。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line"><span class="number">42</span></span><br><span class="line"><span class="number">3.14159</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="对象">对象</h3><p>JSON 中的对象必须使用双引号把属性名包围起来，每个键是一个字符串，后跟一个冒号，值可以是字符串、数字、布尔值、数组、对象或 <code>null</code>。 JavaScript 对象字面量相比，JSON 主要有两处不同。首先，没有变量声明；其次，最后没有分号。其次，最后没有分号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">29</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组">数组</h3><p>数组在 JSON 中使用 JavaScript 的数组字面量形式表示。数组和对象可以组合使用，以表示更加复杂的数据结构，同样没有变量，也没有分号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Professional JavaScript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;authors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;Nicholas C. Zakas&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Matt Frisbie&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;edition&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="string">&quot;year&quot;</span>: <span class="number">2017</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;Professional JavaScript&quot;</span>,</span><br><span class="line">        <span class="string">&quot;authors&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;Nicholas C. Zakas&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;edition&quot;</span>: <span class="number">3</span>,</span><br><span class="line">        <span class="string">&quot;year&quot;</span>: <span class="number">2011</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="解析与序列化">解析与序列化</h2><p>JSON 的迅速流行并不仅仅因为其语法与 JavaScript 类似，很大程度上还因为 JSON 可以直接被解析成可用的 JavaScript 对象。</p><h3 id="JSON对象">JSON对象</h3><p>JSON 对象有两个方法：<code>stringify()</code>和 <code>parse()</code>。这两个方法分别可以将 JavaScript 序列化为 JSON 字符串，以及将 JSON 解析为原生 JavaScript 值。</p><h3 id="序列化">序列化</h3><p><code>JSON.stringify()</code> 是 JavaScript 中将对象或其他可序列化值转换为 JSON 字符串的函数。</p><ol><li><p>value：要序列化的 JavaScript 值。它可以是一个对象、数组、数字、字符串、布尔值、或 <code>null</code>。这个参数是必需的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonString);  <span class="comment">// 输出: &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>replacer（可选）：是一个函数或数组，用于控制对象中哪些属性应该包含在 JSON 字符串中。</p><ul><li>作为函数使用时，会为对象的每个属性和数组的每个元素调用一次，并返回一个新的值，这个值将被包含在 JSON 字符串中。如果函数返回 <code>undefined</code>，则该属性会被忽略。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;secret&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj, <span class="keyword">function</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;password&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;  <span class="comment">// 忽略 &#x27;password&#x27; 属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonString);  <span class="comment">// 输出: &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30&#125;</span></span><br></pre></td></tr></table></figure><ul><li>作为数组使用时，只会包含数组中列出的属性。数组中的每一项应该是属性名的字符串。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj, [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;city&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonString);  <span class="comment">// 输出: &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;city&quot;:&quot;New York&quot;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>space：是一个数字或字符串，用于控制生成的 JSON 字符串的缩进和格式化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">age</span>: <span class="number">30</span>, <span class="attr">city</span>: <span class="string">&quot;New York&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 space 是一个数字，表示每一层嵌套缩进的空格数（最大为 10）</span></span><br><span class="line"><span class="keyword">const</span> jsonString1 = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj, <span class="literal">null</span>, <span class="number">2</span>);  <span class="comment">// 使用2个空格缩进</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonString1);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出:</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  &quot;name&quot;: &quot;Alice&quot;,</span></span><br><span class="line"><span class="comment">  &quot;age&quot;: 30,</span></span><br><span class="line"><span class="comment">  &quot;city&quot;: &quot;New York&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 space 是一个字符串（例如 &quot;\t&quot; 或 &quot; &quot;），那么该字符串会被用作缩进字符</span></span><br><span class="line"><span class="keyword">const</span> jsonString2 = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj, <span class="literal">null</span>, <span class="string">&quot;\t&quot;</span>);  <span class="comment">// 使用tab缩进</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonString2);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出:</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">&quot;name&quot;: &quot;Alice&quot;,</span></span><br><span class="line"><span class="comment">&quot;age&quot;: 30,</span></span><br><span class="line"><span class="comment">&quot;city&quot;: &quot;New York&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="解析">解析</h3><p><code>JSON.parse()</code> 方法用于将 JSON 格式的字符串转换为 JavaScript 对象</p><ol><li><p>text：必需。要解析的 JSON 字符串。该字符串必须是有效的 JSON，否则会抛出 <code>SyntaxError</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonString = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30, &quot;isStudent&quot;: false&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonString);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>);  <span class="comment">// 输出: Alice</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);   <span class="comment">// 输出: 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">isStudent</span>); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li><li><p>reviver：可选。一个转换结果的函数，可以用来对解析后的每个键值对进行操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonString = <span class="string">&#x27;&#123;&quot;name&quot;: &quot;Alice&quot;, &quot;age&quot;: 30&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonString, <span class="keyword">function</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === <span class="string">&#x27;age&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value + <span class="number">1</span>;  <span class="comment">// 修改 age 属性的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);  <span class="comment">// 输出: 31</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(34)-错误处理</title>
    <link href="/2024/08/16/JS%E5%AD%A6%E4%B9%A0(34)-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    <url>/2024/08/16/JS%E5%AD%A6%E4%B9%A0(34)-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 的错误处理机制提供了一些关键功能，使开发者能够捕获、处理和恢复由于代码中的错误而可能导致的异常情况。通过适当的错误处理，可以提高应用程序的稳定性和用户体验，减少未处理错误导致的崩溃或不良行为。</p><span id="more"></span><h1>错误处理</h1><h2 id="try-catch-语句">try/catch 语句</h2><p><code>try...catch</code> 是 JavaScript 中处理错误的基本结构。它允许你在 <code>try</code> 块中执行可能会抛出错误的代码，并在 <code>catch</code> 块中处理该错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 可能出错的代码</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line"><span class="comment">// 出错时要做什么</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>如果 try 块中有代码发生错误，代码会立即退出执行，并跳到 catch 块中。catch 块此时接收到一个对象，该对象包含发生错误的相关信息。</p><h3 id="finally">finally</h3><p>try/catch 语句中可选的 finally 语句始终运行。如果 try 块中的代码运行完，则接着执行 finally 块中的代码。如果出错并执行 catch 块中的代码，则 finally 块中的代码仍执行。try 或 catch 块无法阻止 finally 块执行，包括 return 语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">testFinally</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="错误类型">错误类型</h3><p>代码执行过程中会发生各种类型的错误。每种类型都会对应一个错误发生时抛出的错误对象。</p><ol><li>Error：Error 是基类型，其他错误类型继承该类型。浏览器很少会抛出 Error 类型的错误，该类型主要用于开 发者抛出自定义错误。</li><li>InternalError：底层 JavaScript 引擎抛出异常时由浏览器抛出。</li><li>EvalError：使用 eval()函数发生异常时抛出。</li><li>RangeError：数值越界时抛出。</li><li>ReferenceError：找不到对象时发生，这种错误经常是由访问不存在的变量而导致的</li><li>SyntaxError：在给 eval()传入的字符串包含 JavaScript 语法错误时发生</li><li>TypeError：变量不是预期类型，或者访问不存在的方法</li><li>URIError：在使用 encodeURI()或 decodeURI()但传入了格式错误的 URI 时发生</li></ol><h2 id="throw-操作符">throw 操作符</h2><p><code>throw</code> 操作符用于手动抛出自定义错误。throw 操作符必须有一个值，但值的类型不限。使用 throw 操作符时，代码立即停止执行，除非 try/catch 语句捕获了抛出的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Something bad happened.&quot;</span>); </span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">process</span>(<span class="params">values</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(values <span class="keyword">instanceof</span> <span class="title class_">Array</span>))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;process(): Argument must be an array.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    values.<span class="title function_">sort</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> values)&#123;</span><br><span class="line">        <span class="keyword">if</span> (value &gt; <span class="number">100</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="error-事件">error 事件</h2><p>任何没有被 try/catch 语句处理的错误都会在 window 对象上触发 error 事件。在 <code>onerror</code>事件处理程序中，任何浏览器都不会传入 event 对象。相反，会传入 3 个参数：错误消息、发生错误的 URL 和行号。大多数情 况下，只有错误消息有用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onerror</span> = <span class="function">(<span class="params">message, url, line</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure><h2 id="异步错误处理">异步错误处理</h2><h3 id="Promise">Promise</h3><p><code>Promise</code> 提供了 <code>catch</code> 方法来处理链中的错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">asyncFunction</span>()</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Success:&#x27;</span>, result);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="async-await">async/await</h3><p>使用 <code>async</code>/<code>await</code> 语法时，可以结合 <code>try...catch</code> 来处理异步函数中的错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;https://api.example.com/data&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Data:&#x27;</span>, data);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Failed to fetch data:&#x27;</span>, error.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fetchData</span>();</span><br></pre></td></tr></table></figure><h2 id="调试技术">调试技术</h2><h3 id="消息记录到控制台">消息记录到控制台</h3><ol><li><code>console.error(msg)</code>：在控制台中记录错误消息</li><li><code>console.info(msg)</code>：在控制台中记录信息性内容</li><li><code>console.log(msg)</code>：在控制台记录常规消息</li><li><code>console.warn(msg)</code>：在控制台中记录警告消息</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Entering sum(), arguments are $&#123;num1&#125;,$&#123;num2&#125;&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Before calculation&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> result = num1 + num2;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;After calculation&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Exiting sum()&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="JavaScript-调试器">JavaScript 调试器</h3><p>debugger 关键字，用于调用可能存在的调试功能。如果没有相关的功能，这条语句会被简单地跳过。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pauseExecution</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Will print before breakpoint&quot;</span>);</span><br><span class="line">    <span class="keyword">debugger</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Will not print until breakpoint continues&quot;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(33)-API</title>
    <link href="/2024/08/15/JS%E5%AD%A6%E4%B9%A0(33)-API/"/>
    <url>/2024/08/15/JS%E5%AD%A6%E4%B9%A0(33)-API/</url>
    
    <content type="html"><![CDATA[<p>JavaScript API 指的是浏览器和 JavaScript 提供的一系列接口（Application Programming Interface），这些接口允许开发者在网页中实现各种功能，比如操作 DOM、与服务器通信、存储数据等。</p><span id="more"></span><h1>JavaScript API</h1><h2 id="跨上下文消息">跨上下文消息</h2><p>跨文档消息是一种在不同执行上下文间传递信息的能力，简称为<strong>XDM</strong>（cross-document messaging），<strong>XDM</strong>的核心是<code>postMessage()</code>方法。</p><ol><li><p><code>postMessage()</code>：允许不同来源（即不同域名、端口或协议）的文档彼此发送消息的安全方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">targetWindow.<span class="title function_">postMessage</span>(message, targetOrigin, transfer);</span><br></pre></td></tr></table></figure><ul><li>message：要发送的数据，可以是字符串、对象、数组等。它会被序列化成字符串并发送。</li><li>targetOrigin：预期的目标窗口的来源（origin），通常包括协议、域名、端口，格式如 <code>&quot;https://example.com&quot;</code>。使用 <code>&quot;*&quot;</code> 表示不限制来源，但这在安全性上存在风险。</li><li>transfer（可选）：一组 Transferable 对象的列表。这个参数允许你将数据的所有权从发送者转移到接收者</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">// 事件对象的属性</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>);       <span class="comment">// 发送的消息内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">origin</span>);     <span class="comment">// 发送消息的窗口的来源</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">source</span>);     <span class="comment">// 发送消息的窗口对象</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="File-API">File API</h2><p>File API 是一组 Web API，允许 JavaScript 在客户端浏览器中处理用户文件。这些 API 提供了读取、选择和操作文件的能力。</p><h3 id="File-类型">File 类型</h3><p>HTML5 在 DOM 上为文件输入元素添加了 files 集合，当用户在文件字段中选择一个或多个文件时，这个 files 集合中会包含一组 File 对象，表示被选中的文件。</p><ol><li><strong>name</strong>：本地系统中的文件名</li><li><strong>size</strong>：以字节计的文件大小</li><li><strong>name</strong>：包含文件的MIME类型的字符串</li><li><strong>lastModifiedDate</strong>：表示文件最后修改时间的字符串</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> filesList = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;files-list&quot;</span>);</span><br><span class="line">filesList.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> files = event.<span class="property">target</span>.<span class="property">files</span>,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    len = files.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">        <span class="keyword">const</span> f = files[i];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;f.name&#125;</span> (<span class="subst">$&#123;f.type&#125;</span>, <span class="subst">$&#123;f.size&#125;</span> bytes)`</span>);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="FIleReader-类型">FIleReader 类型</h3><p>FileReader类型表示一种异步文件读取机制，用于从文件系统读取文件。</p><p><strong>方法</strong></p><ol><li><code>readAsText(file, encoding)</code>：从文件中读取纯文本内容并保存在 result 属性中。第二个 参数表示编码，是可选的</li><li><code>readAsDataURL(file)</code>：读取文件并将内容的数据 URI 保存在 result 属性中</li><li><code>readAsArrayBuffer(file)</code>：读取文件并将每个字符的二进制数据保存在 result 属性中</li><li><code>readAsBinaryString(file)</code>：：读取文件并将文件内容以 ArrayBuffer 形式保存在 result 属性</li></ol><p><strong>事件</strong></p><ol><li><code>onload</code>：当读取操作完成时触发</li><li><code>onerror</code>：当读取操作出错时触发</li><li><code>onprogress</code>：当读取操作进行时持续触发，用于监控读取进度</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inputElement = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input[type=&quot;file&quot;]&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line"></span><br><span class="line">reader.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File content:&#x27;</span>, event.<span class="property">target</span>.<span class="property">result</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">inputElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> file = event.<span class="property">target</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">    reader.<span class="title function_">readAsText</span>(file);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Blob">Blob</h2><p>Blob 表示二进制大对象（binary larget object），是 JavaScript 对不可修改二进制数据的封装类型。</p><h3 id="创建Blob">创建Blob</h3><p><code>new Blob(blobParts, options)</code>: 通过一个数组 <code>blobParts</code>（包含字符串、ArrayBuffer 等）和可选的 <code>options</code> 对象创建一个新的 <code>Blob</code> 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([<span class="string">&#x27;Hello, world!&#x27;</span>], &#123; <span class="attr">type</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(blob.<span class="property">size</span>);  <span class="comment">// 13 bytes</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(blob.<span class="property">type</span>);  <span class="comment">// text/plain</span></span><br></pre></td></tr></table></figure><h3 id="数据切分">数据切分</h3><p>Blob 对象有一个 size 属性和一个 type 属性，还有一个 slice()方法用于进一步切分数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> filesList = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;files-list&quot;</span>);</span><br><span class="line">filesList.<span class="title function_">addEventListener</span>(<span class="string">&quot;change&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    files = event.<span class="property">target</span>.<span class="property">files</span>,</span><br><span class="line">    blob = <span class="title function_">blobSlice</span>(files[<span class="number">0</span>], <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(32)-事件</title>
    <link href="/2024/08/14/JS%E5%AD%A6%E4%B9%A0(32)-%E4%BA%8B%E4%BB%B6/"/>
    <url>/2024/08/14/JS%E5%AD%A6%E4%B9%A0(32)-%E4%BA%8B%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，事件是用户或浏览器执行的某些动作，通常会触发特定的代码响应。这些动作可以是用户的输入（如点击、键盘输入、鼠标移动），也可以是浏览器的动作（如页面加载完成、元素变得可见等）。事件是构建交互式网页的重要机制。</p><span id="more"></span><h1>事件</h1><h2 id="事件流">事件流</h2><p>事件流描述了页面接收事件的顺序。</p><h3 id="事件冒泡">事件冒泡</h3><p>事件被定义为从最具体的元素开始触发，然后向上传播至没有那么具体的元素。所有现代浏览器都支持事件冒泡，只是在实现方式上会有一些变化，现代浏览器中的事件会一直冒泡到 window 对象。</p><h3 id="事件捕获">事件捕获</h3><p>事件捕获是为了在事件到达最终目标前拦截事件。事件捕获得到了所有现代浏览器的支持，所有浏览器都是从 window 对象开始捕获事件。</p><h3 id="DOM-事件流">DOM 事件流</h3><p>DOM 事件流中，实际的目标在捕获阶段不会接收到事件。这是因为捕获阶段从 document 到<code>&lt;html&gt;</code>再到<code>&lt;body&gt;</code>就结束了。下一阶段，在元素上触发事件的“到达目标” 阶段，通常在事件处理时被认为是冒泡阶段的一部分</p><h2 id="事件处理程序">事件处理程序</h2><p>事件意味着用户或浏览器执行的某种动作。比如，单击（click）、加载（load）、鼠标悬停 （mouseover）。为响应事件而调用的函数被称为事件处理程序（或事件监听器）。事件处理程序的名字 以&quot;on&quot;开头。</p><h3 id="HTML-事件处理程序">HTML 事件处理程序</h3><p>直接在 HTML 元素的属性中定义事件处理器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">&quot;alert(&#x27;Button clicked!&#x27;)&quot;</span>&gt;<span class="title class_">Click</span> me&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="DOM-事件处理程序">DOM 事件处理程序</h3><p>通过 <code>element.onclick</code> 或 <code>element.addEventListener</code> 来添加事件处理器。</p><h4 id="onclick">onclick</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myButton&#x27;</span>);</span><br><span class="line">button.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Button clicked!&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="addEventListener">addEventListener</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myButton&#x27;</span>);</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Button clicked!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="事件对象">事件对象</h2><p>当事件被触发时，会生成一个事件对象（<code>Event</code> 对象），它包含有关事件的详细信息。这个对象会被传递给事件处理器函数作为参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Clicked element:&#x27;</span>, event.<span class="property">target</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Event type:&#x27;</span>, event.<span class="property">type</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="事件类型">事件类型</h2><p>Web 浏览器中可以发生很多种事件，在 DOM 事件中定义了以下事件类型：</p><ol><li>用户界面事件：涉及与 BOM 交互的通用浏览器事件。</li><li>焦点事件：在元素获得和失去焦点时触发。</li><li>鼠标事件：使用鼠标在页面上执行某些操作时触发。</li><li>滚轮事件：使用鼠标滚轮（或类似设备）时触发。</li><li>输入事件：向文档中输入文本时触发。</li><li>键盘事件：使用键盘在页面上执行某些操作时触发。</li><li>合成事件：在使用某种输入法编辑器输入字符时触发。</li></ol><h3 id="用户界面事件">用户界面事件</h3><p>用户界面事件不一定跟用户操作有关</p><ol><li><p>load事件：在 window 对象上，load 事件会在整个页面（包括 所有外部资源如图片、JS 文件和 CSS 文件）加载完成后触发。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// JavaScript方式</span><br><span class="line">window.addEventListener(&quot;load&quot;, (event) =&gt; &#123;</span><br><span class="line">console.log(&quot;Loaded!&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// HTML方式</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Load Event Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;console.log(&#x27;Loaded!&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure></li><li><p>unload事件：会在文档卸载完成后触发，一般是在从一个页面导航到另一个页面时触发，最常用于清理引用，以避免内存泄漏。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// JavaScript方式</span><br><span class="line">window.addEventListener(&quot;unload&quot;, (event) =&gt; &#123;</span><br><span class="line">console.log(&quot;Unloaded!&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// HTML方式</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Unload Event Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span> <span class="attr">onunload</span>=<span class="string">&quot;console.log(&#x27;Unloaded!&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span> </span><br></pre></td></tr></table></figure></li><li><p>resize事件：当浏览器窗口被缩放到新高度或宽度时，会触发 resize 事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Resized&quot;</span>);</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure></li><li><p>scroll事件：页面中相应元素的变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;scroll&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">compatMode</span> == <span class="string">&quot;CSS1Compat&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure></li></ol><h3 id="焦点事件">焦点事件</h3><ol><li>blur：当元素失去焦点时触发。这个事件不冒泡，所有浏览器都支持。</li><li>focus：当元素获得焦点时触发。这个事件不冒泡，所有浏览器都支持。</li><li>focusin：当元素获得焦点时触发。这个事件是 focus 的冒泡版。</li><li>focusout：当元素失去焦点时触发。这个事件是 blur 的通用版。</li></ol><h3 id="鼠标和滚轮事件">鼠标和滚轮事件</h3><ol><li><code>click</code>：在用户单击鼠标主键或按键盘回车键时触发。</li><li><code>dblclick</code>：在用户双击鼠标主键时触发。</li><li><code>mousedown</code>：在用户按下任意鼠标键时触发。</li><li><code>mouseup</code>：在用户释放鼠标键时触发。</li><li><code>mousemove</code>：鼠标光标在元素上移动时反复触发。</li><li><code>mouseout</code>：在用户把鼠标光标从一个元素移到另一个元素上时触发。</li><li><code>mouseenter</code>：在用户把鼠标光标从元素外部移到元素内部时触发。</li><li><code>mouseleave</code>：在用户把鼠标光标从元素内部移到元素外部时触发。</li><li><code>mousewheel</code>：鼠标滚轮或带滚轮的类似设备上滚轮的交互。</li></ol><h3 id="键盘和输入事件">键盘和输入事件</h3><ol><li><code>keydown</code>：用户按下键盘上某个键时触发，而且持续按住会重复触发</li><li><code>keypress</code>：用户按下键盘上某个键并产生字符时触发，而且持续按住会重复触发。</li><li><code>keyup</code>：用户释放键盘上某个键时触发。</li></ol><h4 id="键码">键码</h4><p>对于 <code>keydown</code> 和 <code>keyup</code> 事件，<strong>event</strong> 对象的 <code>keyCode</code> 属性中会保存一个键码，对应键盘上特定的一个键。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> textbox = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myText&quot;</span>);</span><br><span class="line">textbox.<span class="title function_">addEventListener</span>(<span class="string">&quot;keyup&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">keyCode</span>);</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure><h3 id="触摸事件">触摸事件</h3><ol><li><code>touchstart</code>：手指放到屏幕上时触发</li><li><code>touchmove</code>：手指在屏幕上滑动时连续触发。</li><li><code>touchend</code>：手指从屏幕上移开时触发。</li><li><code>touchcancel</code>：系统停止跟踪触摸时触发。</li></ol><h2 id="事件委托">事件委托</h2><p>事件委托利用事件冒泡，可以只使用一个事件处理程序来管理一种类型的事件。可以为整个页面指定一个 onclick 事件处理程序，而不用为每个可点击元素分别指定事件处理程序。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;myLinks&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;goSomewhere&quot;</span>&gt;</span>Go somewhere<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span>Say hi<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> item1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;goSomewhere&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> item2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;doSomething&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> item3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sayHi&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">item1.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">location.<span class="property">href</span> = <span class="string">&quot;http:// www.wrox.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">item2.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&quot;I changed the document&#x27;s title&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript">item3.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;); </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 等价于</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> list = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myLinks&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">list.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> target = event.<span class="property">target</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">switch</span>(target.<span class="property">id</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&quot;doSomething&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&quot;I changed the document&#x27;s title&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&quot;goSomewhere&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            location.<span class="property">href</span> = <span class="string">&quot;http:// www.wrox.com&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">case</span> <span class="string">&quot;sayHi&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;); </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(31)-DOM</title>
    <link href="/2024/08/13/JS%E5%AD%A6%E4%B9%A0(31)-DOM/"/>
    <url>/2024/08/13/JS%E5%AD%A6%E4%B9%A0(31)-DOM/</url>
    
    <content type="html"><![CDATA[<p><strong>DOM</strong>（Document Object Model）是浏览器解析 HTML 或 XML 文档时生成的一种编程接口，通过它，开发者可以访问和操作文档的结构、内容和样式。DOM 将文档表示为一个结构化的树形节点，允许使用脚本语言（如 JavaScript）动态地更改文档内容。</p><span id="more"></span><h1>DOM</h1><p>任何 HTML 或 XML 文档都可以用 DOM 表示为一个由节点构成的层级结构。document 节点表示每个文档的根节点，，根节点的唯一子节点是元素，我们称之为文档元素（documentElement）。文档元素是文档最外层的元素，所有其他元素都存在于这个元素之内。每个文档只能有一个文档元素。</p><h2 id="Node-类型">Node 类型</h2><p><code>Node</code> 是 DOM 中的基本类型，代表文档树中的所有节点类型。DOM 树是由各种类型的节点组成的层次结构，每个节点都继承自 <code>Node</code> 对象。<code>Node</code> 类型定义了一些通用的属性和方法，这些属性和方法可以被文档中的不同节点类型共享。</p><h3 id="属性">属性</h3><ol><li><p><code>nodeType</code>：返回节点的类型，通常用来确定节点的类型。</p><ul><li><p>Node.ELEMENT_NODE</p></li><li><p>Node.ATTRIBUTE_NODE</p></li><li><p>Node.TEXT_NODE</p></li><li><p>Node.CDATA_SECTION_NODE</p></li><li><p>Node.ENTITY_REFERENCE_NODE</p></li><li><p>Node.ENTITY_NODE</p></li><li><p>Node.PROCESSING_INSTRUCTION_NODE</p></li><li><p>Node.COMMENT_NODE</p></li><li><p>Node.DOCUMENT_NODE</p></li><li><p>Node.DOCUMENT_TYPE_NODE</p></li><li><p>Node.DOCUMENT_FRAGMENT_NODE</p></li><li><p>Node.NOTATION_NODE</p></li></ul></li><li><p><code>nodeName</code>：返回节点的名称，对于元素节点，它是标签名；对于属性节点，它是属性名；对于文本节点，它是 <code>#text</code>。</p></li><li><p><code>nodeValue</code>：返回或设置节点的值，适用于文本节点、注释节点和属性节点。</p></li><li><p><code>parentNode</code>：返回当前节点的父节点</p></li><li><p><code>childNodes</code>：返回包含当前节点所有子节点的 <code>NodeList</code>，包括元素、文本和注释节点</p></li><li><p><code>firstChild</code>和<code>lastChild</code>：返回第一个和最后一个子节点</p></li></ol><h3 id="方法">方法</h3><ol><li><code>appendChild(node)</code>：将指定的节点添加为当前节点的最后一个子节点</li><li><code>insertBefore(newNode, referenceNode)</code>：在指定的参考节点之前插入新的子节点</li><li><code>removeChild(node)</code>：从当前节点的子节点列表中移除指定的子节点</li><li><code>replaceChild(newNode, oldNode)</code>：使用新的节点替换现有的子节点</li><li><code>cloneNode(deep)</code>：接收一个布尔值参数，表示是否深复制。在传入 true 参数时，会进行深复制， 即复制节点及其整个子 DOM 树。如果传入 false，则只会复制调用该方法的节点。</li></ol><h2 id="Document-类型">Document 类型</h2><p>Document 类型是 JavaScript 中表示文档节点的类型。在浏览器中，文档对象 document 是 HTMLDocument 的实例（HTMLDocument 继承 Document），表示整个 HTML 页面。document 是 window 对象的属性，因此是一个全局对象。</p><h3 id="文档子节点">文档子节点</h3><ol><li><code>document.documentElement</code>：访问文档的根元素，即 <code>&lt;html&gt;</code> 标签。</li><li><code>document.head</code>：访问文档的 <code>&lt;head&gt;</code> 元素。</li><li><code>document.body</code>：访问文档的 <code>&lt;body&gt;</code> 元素。</li></ol><h3 id="文档信息">文档信息</h3><ol><li><code>document.title</code>：获取或设置文档的标题（位于 <code>&lt;title&gt;</code> 标签中）。</li><li><code>document.URL</code>：当前页面的完整 URL</li><li><code>document.domain</code>：获取或设置页面的域名。</li><li><code>document.referrer</code>：链接到当前页面的那个页面的 URL</li></ol><h3 id="定位元素">定位元素</h3><ol><li><code>document.getElementById()</code>：通过元素的 <code>id</code> 属性获取特定元素</li><li><code>document.getElementsByTagName()</code>：获取指定标签名的所有元素，返回一个 HTMLCollection 对象</li><li><code>document.getElementsByName()</code>：根据元素的 <code>name</code> 属性值查找文档中的所有匹配元素，返回一个 HTMLCollection 对象</li></ol><h3 id="文档写入">文档写入</h3><ol><li><code>document.write()</code>：接收一个字符串参数，将内容写入文档流</li><li><code>document.writeln()</code>：接收一个字符串参数，将内容写入文档流，还会在字符串末尾追加一个换行符 （\n）。</li><li><code>document.open()</code>：开始对文档的写操作</li><li><code>document.close()</code>：结束对文档的写操作</li></ol><h2 id="Element-类型">Element 类型</h2><p>Element 类型是 DOM 中表示 HTML 或 XML 文档中元素节点的基本类型。它继承自 <code>Node</code> 类型，是所有具体元素节点的基类，每个 HTML 标签在 DOM 中都对应一个 <code>Element</code> 对象。</p><h3 id="HTML-元素">HTML 元素</h3><p>所有 HTML 元素都通过 HTMLElement 类型表示，包括其直接实例和间接实例。另外，HTMLElement 直接继承 Element 并增加了一些属性。</p><ol><li>id：元素在文档中的唯一标识符</li><li>title：包含元素的额外信息</li><li>lang：元素内容的语言代码</li><li>dir：语言的书写方向（&quot;ltr&quot;表示从左到右，&quot;rtl&quot;表示从右到左）</li><li>className：相当于 class 属性，用于指定元素的 CSS 类</li></ol><h3 id="属性操作">属性操作</h3><ol><li><code>getAttribute()</code>：获取元素的指定属性值</li><li><code>setAttribute()</code>：为元素设置指定的属性和值。如果属性已经存在，会以指定的值替换原来的值；如果属性不存在，会以指定的值创建该属性。</li><li><code>removeAttribute()</code>：移除元素的指定属性</li><li><code>hasAttribute()</code>：检查元素是否具有指定的属性</li></ol><h3 id="创建元素">创建元素</h3><ol><li><code>createElement()</code>：创建新元素，这个方法接收一个参数，即要创建元素的标签名。<code>createElement()</code> 创建的元素节点并不会自动添加到文档中。需要使用 <code>appendChild()</code>、<code>insertBefore()</code> 等方法手动将它插入到 DOM 树中。</li></ol><h2 id="Text-类型">Text 类型</h2><p>Text 类型是 DOM（文档对象模型）中用于表示文本节点的对象类型。文本节点是 DOM 树的一个基本组成部分，用于存储和操作位于 HTML 或 XML 元素内的文本内容。与元素节点（<code>Element</code>）不同，文本节点不包含任何标签或属性，仅包含纯文本。</p><h3 id="属性-2">属性</h3><ol><li><code>data</code>：获取或设置文本节点的文本内容，与 <code>nodeValue</code> 属性类似。</li><li><code>length</code>：返回文本节点中字符的数量。</li><li><code>nodeValue</code>：获取或设置文本节点的文本内容</li></ol><h3 id="创建文本">创建文本</h3><ol><li><code>createTextNode()</code>：来创建新文本节点，它接收一个参数，即要插入节点的文本。</li></ol><h3 id="拆分文本">拆分文本</h3><ol><li><code>splitText()</code>：将文本节点分割为两个节点，从指定的位置开始。原节点将包含指定位置之前的文本，新节点将包含剩余的文本。</li></ol><h2 id="Comment-类型">Comment 类型</h2><p>Comment 类型是 DOM（文档对象模型）中用于表示文档中的注释节点的对象类型。注释节点包含的内容不会显示在页面上，但它们存在于 DOM 树中，并且可以通过脚本进行操作。</p><h3 id="属性-3">属性</h3><ol><li><code>data</code>：获取或设置注释节点的文本内容，与 <code>nodeValue</code> 属性类似。</li><li><code>length</code>：返回注释节点中字符的数量。</li><li><code>nodeValue</code>：获取或设置注释节点的内容</li></ol><h3 id="创建注释">创建注释</h3><ol><li><code>createComment()</code>：创建一个新的注释节点</li></ol><h2 id="Attribute-类型">Attribute 类型</h2><p>Attribute 类型在 DOM（文档对象模型）中用于表示元素节点的属性。每个 HTML 或 XML 元素都可以拥有一组属性，这些属性以键值对的形式存在，用于定义元素的特性，如 <code>id</code>、<code>class</code>、<code>href</code> 等。</p><h3 id="属性-4">属性</h3><ol><li><code>name</code>：返回属性的名称</li><li><code>value</code>：返回或设置属性的值</li><li><code>specified</code>：返回一个布尔值，指示属性是否被显式指定。</li></ol><h2 id="Selectors-API">Selectors API</h2><p>用于在 DOM 中基于 CSS 选择器查找和操作 HTML 文档中的元素</p><ol><li><code>querySelector()</code>：返回文档中与指定的 CSS 选择器匹配的第一个元素。如果没有找到匹配的元素，则返回 <code>null</code>。</li><li><code>querySelectorAll()</code>：返回一个 <code>NodeList</code> 对象，包含文档中所有与指定的 CSS 选择器匹配的元素。如果没有找到匹配的元素，则返回一个空的 <code>NodeList</code>。</li></ol><h2 id="CSS-扩展">CSS 扩展</h2><p>HTML5 增 加了一些特性以方便使用 CSS 类</p><ol><li><code>getElementByClassName()</code>：接收一个参数，即包含一个或多个类名的字符串，返回类名中 包含相应类的元素的 NodeList。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(30)-BOM</title>
    <link href="/2024/08/12/JS%E5%AD%A6%E4%B9%A0(30)-BOM/"/>
    <url>/2024/08/12/JS%E5%AD%A6%E4%B9%A0(30)-BOM/</url>
    
    <content type="html"><![CDATA[<p>虽然 ECMAScript 把浏览器对象模型（BOM，Browser Object Model）描述为 JavaScript 的核心，但实际上 BOM 是使用 JavaScript 开发 Web 应用程序的核心。BOM 提供了与网页无关的浏览器功能对象。</p><span id="more"></span><h1>BOM</h1><p>BOM 是指浏览器提供的所有对象和接口的集合，用于与浏览器窗口进行交互。通过 BOM，可以操作浏览器窗口、控制浏览器的显示和导航，甚至与用户进行交互。BOM 主要是与浏览器窗口本身及其属性、事件、行为相关的。</p><h2 id="window对象">window对象</h2><p>BOM 的核心是 window 对象，表示浏览器的实例。window 对象在浏览器中有两重身份，一个是 ECMAScript 中的 Global 对象，另一个就是浏览器窗口的 JavaScript 接口。</p><h3 id="Global">Global</h3><p>因为 window 对象被复用为 ECMAScript 的 Global 对象，所以通过 var 声明的所有全局变量和函 数都会变成 window 对象的属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">29</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sayAge</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">age</span>); <span class="comment">// 29 </span></span><br><span class="line"><span class="title function_">sayAge</span>(); <span class="comment">// 29</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">sayAge</span>(); <span class="comment">// 29</span></span><br></pre></td></tr></table></figure><h3 id="窗口关系">窗口关系</h3><ol><li><code>window.top</code>：指向最顶层窗口的引用，即最高级的窗口对象。</li><li><code>window.parent</code>：指向当前窗口或<code>iframe</code>的父窗口的引用。</li><li><code>window.self</code>：对当前 <code>window</code> 对象的引用。通常直接使用 <code>window</code> 对象即可，但 <code>window.self</code> 可以用来明确表示当前窗口。</li><li><code>window.frames</code>：一个类数组对象，包含了当前窗口中所有子 <code>iframe</code> 的引用。</li><li><code>window.opener</code>：指向打开当前窗口的那个窗口的引用</li><li><code>window.closed</code>：是一个布尔属性，指示当前窗口是否已关闭。</li><li><code>window.name</code>：是一个字符串属性，表示当前窗口的名称。</li><li><code>window.length</code>：表示当前窗口中包含的 <code>iframe</code> 数量</li><li><code>window.open</code>：用于打开一个新的浏览器窗口或标签页。它返回新窗口的 <code>window</code> 对象。</li><li><code>window.close</code>：用于关闭当前窗口，或关闭由脚本打开的窗口。</li></ol><h3 id="窗口大小">窗口大小</h3><ol><li><code>window.innerWidth</code>：返回窗口内容区域（视口）的宽度</li><li><code>window.innerHeight</code>：返回窗口内容区域（视口）的高度</li><li><code>window.outerWidth</code>：返回浏览器窗口的整体宽度</li><li><code>window.outerHeight</code>：返回浏览器窗口的整体高度</li></ol><h3 id="窗口位置">窗口位置</h3><ol><li><code>window.scrollX</code>：返回窗口的水平滚动偏移量</li><li><code>window.scrollY</code>：返回垂直滚动偏移量</li><li><code>window.scrollTo(x, y)</code>：将窗口滚动到指定的坐标 <code>(x, y)</code></li><li><code>window.scrollBy(dx, dy)</code>：根据当前的滚动位置进行滚动</li></ol><h3 id="定时器">定时器</h3><ol><li><code>setTimeout()</code>：接收两个参数：要执行的代码和在执行回调函数前等待的时间（毫秒）。</li><li><code>clearTimeout()</code>：在指定时间到达之前调用<code>clearTimeout()</code>，就可以取消超时任务。在任务执行后再调用<code>clearTimeout()</code>没有效果。</li><li><code>setInterval()</code>：接收两个参数：要执行的代码和下一次执行定时代码的任务添加到队列要等待的时间（毫秒）。</li><li><code>clearInterval()</code>：取消定时</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置超时任务</span></span><br><span class="line"><span class="keyword">let</span> timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello world!&quot;</span>), <span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 取消超时任务</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timeoutId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>, intervalId = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> incrementNumber = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="comment">// 如果达到最大值，则取消所有未执行的任务</span></span><br><span class="line">    <span class="keyword">if</span> (num == max) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(intervalId);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Done&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">intervalId = <span class="built_in">setInterval</span>(incrementNumber, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><h3 id="系统对话框">系统对话框</h3><ol><li><code>alert()</code>：显示一个警告框，包含一段文本和一个确认按钮。</li><li><code>confirm()</code>：显示一个确认对话框，包含一段文本和“确定”和“取消”按钮。返回 <code>true</code> 或 <code>false</code>。</li><li><code>prompt()</code>：显示一个输入对话框，用户可以在对话框中输入文本。返回用户输入的文本，如果用户取消输入，则返回 <code>null</code>。</li></ol><h2 id="location对象">location对象</h2><p>location 提供了当前窗口中加载文档的信息，以及通常的导航功能。它既是 window 的属性，也是 document 的属性，window.location 和 document.location 指向同一个对象。</p><table><thead><tr><th>属性</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>location.hash</td><td>“#contents”</td><td>URL 散列值（井号后跟零或多个字符），如果没有则为空字符串</td></tr><tr><td>location.host</td><td>“<a href="http://www.wrox.com:80">www.wrox.com:80</a>”</td><td>服务器名及端口号</td></tr><tr><td>location.hostname</td><td>“<a href="http://www.wrox.com">www.wrox.com</a>”</td><td>服务器名</td></tr><tr><td>location.href</td><td>“<a href="http://www.wrox.com:80/WileyCDA/">http://www.wrox.com:80/WileyCDA/</a> ?q=javascript#contents”</td><td>当前加载页面的完整 URL</td></tr><tr><td>location.pathname</td><td>“/WileyCDA/”</td><td>URL 中的路径和文件名</td></tr><tr><td>location.port</td><td>“80”</td><td>请求的端口。如果 URL中没有端口，则返回空字符串</td></tr><tr><td>location.protocol</td><td>“http:”</td><td>页面使用的协议。通常是&quot;http:“或&quot;https:”</td></tr><tr><td>location.search</td><td>“?q=javascript”</td><td>URL 的查询字符串。这个字符串以问号开头</td></tr><tr><td>location.username</td><td>“foouser”</td><td>域名前指定的用户名</td></tr><tr><td>location.password</td><td>“barpassword”</td><td>域名前指定的密码</td></tr><tr><td>location.origin</td><td>“<a href="http://www.wrox.com">http://www.wrox.com</a>”</td><td>URL 的源地址。只读</td></tr></tbody></table><h2 id="navigator对象">navigator对象</h2><p>navigator 对象用来表示浏览器状态和身份的对象，它提供了有关浏览器的信息。</p><ol><li><code>navigator.userAgent</code>：返回当前浏览器的用户代理字符串</li><li><code>navigator.language</code>：返回一个字符串，表示用户的首选语言</li><li><code>navigator.onLine</code>：返回布尔值，表示浏览器是否连接到网络</li><li><code>navigator.geolocation</code>：允许网页访问用户的地理位置信息</li><li><code>navigator.cookieEnabled</code>：返回布尔值，表示是否启用了 cookie</li><li><code>navigator.hardwareConcurrency</code>：返回用户计算机上可用于运行线程的逻辑处理器数量</li><li><code>navigator.mediaDevices</code>：返回一个对象，提供与用户媒体输入设备</li><li><code>navigator.clipboard</code>：提供对系统剪贴板的访问功能</li><li><code>navigator.permissions</code>：允许查询和请求用户的权限状态</li><li><code>navigator.storage</code>：访问存储管理 API 的功能，用于检查存储的持久性和使用情况</li></ol><h2 id="history对象">history对象</h2><p>history 对象表示当前窗口首次使用以来用户的导航历史记录。history 是 window 的属性， 所以每个 window 都有自己的 history 对象。history 不会暴露用户访问过的 URL， 但可以通过它在不知道实际 URL 的情况下前进和后退。</p><ol><li><p><code>history.go()</code>：在用户历史记录中沿任何方向导航，可以前进也可以后退。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后退一页</span></span><br><span class="line">history.<span class="title function_">go</span>(-<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 前进一页</span></span><br><span class="line">history.<span class="title function_">go</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 前进两页</span></span><br><span class="line">history.<span class="title function_">go</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>history.back()</code>：用于模仿浏览器的后退按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后退一页</span></span><br><span class="line">history.<span class="title function_">back</span>();</span><br></pre></td></tr></table></figure></li><li><p><code>history.forward()</code>：用于模仿浏览器的前进按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前进一页</span></span><br><span class="line">history.<span class="title function_">forward</span>(); </span><br></pre></td></tr></table></figure></li><li><p><code>history.pushState()</code>：向当前浏览记录栈中添加一条新的历史记录，添加后页面不会重新加载。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="title function_">pushState</span>(state, title, url);</span><br></pre></td></tr></table></figure><ul><li>state：<strong>用于存储该 URL 对应的状态对象</strong>。该对象可通过 <code>history.state</code> 或 <code>popstate</code> 事件回调中的 event 对象获取。如果不需要这个对象，此处可以填 null。</li><li>title：<strong>新页面的标题</strong></li><li>url：<strong>URL 地址</strong>，不允许跨域。</li></ul></li><li><p><code>history.replaceState()</code>：向当前浏览记录栈中<strong>将当前历史记录替换掉</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="title function_">replaceState</span>(state, title, url);</span><br></pre></td></tr></table></figure><ul><li>state：<strong>用于存储该 URL 对应的状态对象</strong>。该对象可通过 <code>history.state</code> 或 <code>popstate</code> 事件回调中的 event 对象获取。如果不需要这个对象，此处可以填 null。</li><li>title：<strong>新页面的标题</strong></li><li>url：<strong>URL 地址</strong>，不允许跨域。</li></ul></li></ol><h2 id="screen对象">screen对象</h2><p>screen 对象表示一个屏幕窗口，往往指的是当前正在被渲染的 window 对象，可以使用 <code>window.screen</code> 获取它。</p><ol><li><code>screen.width</code> 和 <code>screen.height</code>：<code>screen.width</code> 返回屏幕的宽度，<code>screen.height</code> 返回屏幕的高度，单位是像素。这两个属性表示整个屏幕的分辨率。</li><li><code>screen.availWidth</code> 和 <code>screen.availHeight</code>：<code>screen.availWidth</code> 返回屏幕可用的宽度，<code>screen.availHeight</code> 返回屏幕可用的高度。这两个属性减去了操作系统中那些占用屏幕空间的元素（如任务栏或 Dock），表示实际可以用来显示内容的区域。</li><li><code>screen.colorDepth</code>：<code>colorDepth</code> 返回显示屏的颜色深度，以位为单位。颜色深度表示显示设备能够支持的每个像素的颜色位数。</li><li><code>screen.pixelDepth</code>：<code>pixelDepth</code> 返回屏幕的像素深度，通常与 <code>colorDepth</code> 相同。这是每个像素可以显示的位数。</li><li><code>screen.orientation</code>：<code>orientation</code> 返回一个 <code>ScreenOrientation</code> 对象，表示屏幕的当前方向（横向或纵向）以及锁定状态。它包含属性和方法来检查和更改屏幕方向。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(29)-Promise与异步</title>
    <link href="/2024/08/11/JS%E5%AD%A6%E4%B9%A0(29)-Promise%E4%B8%8E%E5%BC%82%E6%AD%A5/"/>
    <url>/2024/08/11/JS%E5%AD%A6%E4%B9%A0(29)-Promise%E4%B8%8E%E5%BC%82%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<p>在 ES6 及之后几个版本，JavaScript 逐步加大了对异步机制的支持，新增了 Promise 引用类型，还有 async 和 await 关键字定义异步函数的机制。</p><span id="more"></span><h1>异步</h1><p>异步是为了优化因计算量大而时间长的操作，通过异步操作可以避免等待而阻塞线程执行。</p><h2 id="同步与异步">同步与异步</h2><p>同步行为对应内存中顺序执行的处理器指令。每条指令都会严格按照它们出现的顺序来执行，这样的执行流程容易分析程序在执行到代码任意位置时的状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line">x = x + <span class="number">4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>异步行为类似于系统中断，即当前进程外部的实体可以触发代码执行。异步操作是必要的，因为强制进程等待一个长时间的操作通常是不可行的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> x = x + <span class="number">4</span>, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="以往的异步">以往的异步</h3><p>在早期的 JavaScript 中，只支持定义回调函数来表明异步操作完成。</p><ol><li><p>异步返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">double</span>(<span class="params">value, callback</span>) &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">callback</span>(value * <span class="number">2</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">double</span>(<span class="number">3</span>, <span class="function">(<span class="params">x</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`I was given: <span class="subst">$&#123;x&#125;</span>`</span>)); <span class="comment">// I was given: 6（大约 1000 毫秒之后）</span></span><br></pre></td></tr></table></figure></li><li><p>失败处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">double</span>(<span class="params">value, success, failure</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="string">&#x27;Must provide number as first argument&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">success</span>(<span class="number">2</span> * value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">failure</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">successCallback</span> = (<span class="params">x</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Success: <span class="subst">$&#123;x&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">failureCallback</span> = (<span class="params">e</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Failure: <span class="subst">$&#123;e&#125;</span>`</span>);</span><br><span class="line"><span class="title function_">double</span>(<span class="number">3</span>, successCallback, failureCallback); <span class="comment">// Success: 6（大约 1000 毫秒之后）</span></span><br><span class="line"><span class="title function_">double</span>(<span class="string">&#x27;b&#x27;</span>, successCallback, failureCallback); <span class="comment">// Failure: Must provide number as first argument（大约 1000 毫秒之后）</span></span><br></pre></td></tr></table></figure></li><li><p>嵌套异步回调</p><p>如果异步返值又依赖另一个异步返回值，那么回调的情况还会进一步变复杂。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">double</span>(<span class="params">value, success, failure</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="string">&#x27;Must provide number as first argument&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">success</span>(<span class="number">2</span> * value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">failure</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">successCallback</span> = (<span class="params">x</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">double</span>(x, <span class="function">(<span class="params">y</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Success: <span class="subst">$&#123;y&#125;</span>`</span>));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">failureCallback</span> = (<span class="params">e</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Failure: <span class="subst">$&#123;e&#125;</span>`</span>);</span><br><span class="line"><span class="title function_">double</span>(<span class="number">3</span>, successCallback, failureCallback);  <span class="comment">// Success: 12（大约 1000 毫秒之后）</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Promise">Promise</h2><p>Promise 是 JavaScript 中用于处理异步操作的对象，表示异步操作最终的完成（或失败）以及其结果值。</p><h3 id="Promise状态">Promise状态</h3><p><code>Promise</code> 对象有三种状态：</p><ol><li>待定（pending）：初始状态，既没有被兑现，也没有被拒绝。</li><li>已兑现（fulfilled）：操作成功完成，有时候也称为“解决”，resolved</li><li>已拒绝（rejected）：操作失败。</li></ol><p><code>pending</code>是 Promise 对象的初始状态，Promise 可以从<code>pending</code>转换为<code>resolved</code>或<code>rejected</code>，一旦状态转换，Promise 的状态就不再改变。Promise 的状态是私有的，状态也不能被外部的 JavaScript 代码修改。</p><h3 id="构造函数">构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(executor)</span><br></pre></td></tr></table></figure><ol><li>executor：在构造函数中执行的函数，接收两个函数作为参数：<code>resolveFunc</code> 和 <code>rejectFunc</code>。<code>executor</code> 中抛出的任何错误都会导致 Promise 被拒绝，并且返回值将被忽略。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 异步操作</span></span><br><span class="line">    <span class="keyword">let</span> success = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (success) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;成功的结果&#x27;</span>); <span class="comment">// 异步操作执行成功后的回调函数</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;失败的原因&#x27;</span>); <span class="comment">// 异步操作执行失败后的回调函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="实例方法">实例方法</h3><ol><li><code>then()</code>：最多接受两个参数：用于 Promise <code>resolved</code>和<code>rejected</code>情况的回调函数。返回一个 Promise 对象，允许链接到其他 Promise 方法，从而实现链式调用。</li><li><code>catch()</code>：用于注册一个在 Promise 被拒绝时调用的函数。返回一个 Promise 对象，允许链式调用其他 Promise 的方法。</li><li><code>finally()</code>：用于给 Promise 添加 onFinally 处理程序，在 Promise 转换为<code>resolved</code>或<code>rejected</code>状态时都会执行。</li></ol><h3 id="链式调用">链式调用</h3><p>把 Promise 逐个地串联起来，每个 Promise 实例的方法<code>then()</code>、<code>catch()</code>和 <code>finally()</code>都会返回一个新的 Promsie 对象，而这个新的Promise 又有自己的实例方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;first&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;second&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;third&#x27;</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fourth&#x27;</span>));</span><br><span class="line"><span class="comment">// first</span></span><br><span class="line"><span class="comment">// second</span></span><br><span class="line"><span class="comment">// third</span></span><br><span class="line"><span class="comment">// fourth</span></span><br></pre></td></tr></table></figure><h3 id="静态方法">静态方法</h3><ol><li><p><code>Promise.all()</code>：接受一个 Promise 可迭代对象作为输入，并返回一个 Promise。当所有输入的 Promise 都被<code>resolved</code>时，返回的 Promise 也将被<code>resolved</code>（即使传入的是一个空的可迭代对象），并返回一个包含所有<code>resolved</code>值的数组。如果输入的任何 Promise 被<code>rejected</code>，则返回的 Promise 将被<code>rejected</code>，并带有第一个被<code>rejected</code>的原因。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([promise1, promise2, promise3]).<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values); <span class="comment">// Array [3, 42, &quot;foo&quot;]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.allSettled()</code>：接受一个 Promise 可迭代对象作为输入，并返回一个 Promise。当所有的 Promise 状态都完成转换，返回描述每个 Promise 结果的对象数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span></span><br><span class="line"><span class="built_in">setTimeout</span>(reject, <span class="number">100</span>, <span class="string">&#x27;foo&#x27;</span>),</span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> promises = [promise1, promise2];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>(promises).<span class="title function_">then</span>(<span class="function">(<span class="params">results</span>) =&gt;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(results); <span class="comment">// Array [Object &#123; status: &quot;fulfilled&quot;, value: 3 &#125;, Object &#123; status: &quot;rejected&quot;, reason: &quot;foo&quot; &#125;]</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.any()</code>：将一个 Promise 可迭代对象作为输入，并返回一个 Promise，当输入的任何一个 Promise <code>resolved</code>时，这个返回的 Promise 将会<code>resolved</code>，并返回第一个<code>resolved</code>的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;quick&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;slow&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promises = [promise1, promise2, promise3];</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">any</span>(promises).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(value)); <span class="comment">// &#x27;quick&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Promise.race()</code>：接受一个 promise 可迭代对象作为输入，并返回一个 Promise，这个返回的 promise 的状态是第一个完成状态转换的 Promise 的状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([promise1, promise2]).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);  <span class="comment">// &#x27;two&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.reject()</code>：返回一个已拒绝（rejected）的 Promise 对象，拒绝原因为给定的参数。</p></li><li><p><code>Promise.resolve()</code>：将给定的值转换为一个 Promise，如果该值本身就是一个 Promise，那么该 Promise 将被返回</p></li></ol><h2 id="异步函数">异步函数</h2><p>在 ES8 中对函数进行了扩展，增加了两个新关键字：<code>async</code>和<code>await</code>。</p><h3 id="async">async</h3><p>async 关键字用于声明异步函数。这个关键字可以用在函数声明、函数表达式、箭头函数和方法上。可以让函数具有异步特征，但总体上其代码仍然是同步求值的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>); </span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>异步函数如果使用 return 关键字返回了值，这 个值会被 <code>Promise.resolve()</code>包装成一个 Promise 对象，异步函数始终返回期约对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>().<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3 </span></span><br></pre></td></tr></table></figure><h3 id="await">await</h3><p>使用 await 关键字可以暂停异步函数代码的执行，等待 Promise 解决。await 关键字会暂停执行异步函数后面的代码，让出 JavaScript 运行时的执行线程。这个行为与生成器函数中的 yield 关键字是一样的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"><span class="comment">// foo </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(28)-函数</title>
    <link href="/2024/08/10/JS%E5%AD%A6%E4%B9%A0(28)-%E5%87%BD%E6%95%B0/"/>
    <url>/2024/08/10/JS%E5%AD%A6%E4%B9%A0(28)-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，函数是一等公民，这意味着函数可以像变量一样被使用和操作。函数是 JavaScript 编程的核心之一，理解函数的基本概念、不同的声明方式、调用方式，以及高级用法（如闭包和高阶函数）对于掌握 JavaScript 至关重要。</p><span id="more"></span><h1>函数</h1><p>函数是一组封装的代码，它执行一个特定的任务，通常可以通过一个名称来引用，并且可以接受参数和返回值。函数的基本结构包括以下几个部分：</p><ul><li><strong>函数名称</strong>：用于标识函数的标识符。</li><li><strong>参数列表</strong>：可以传递给函数的输入值。</li><li><strong>函数体</strong>：包含执行任务的代码。</li><li><strong>返回值</strong>：函数可以返回一个值，调用者可以使用这个值。</li></ul><h2 id="函数声明方式">函数声明方式</h2><h3 id="函数声明">函数声明</h3><p>这是定义函数的最常见方式。使用 <code>function</code> 关键字来声明函数，并为其指定一个名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="函数表达式">函数表达式</h3><p>在函数表达式中，函数定义可以赋值给一个变量。这种方式没有函数提升的特性。函数表达式可以是匿名的，即不需要名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multiply = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数">箭头函数</h3><p>箭头函数是 ES6 引入的更简洁的函数表达方式，尤其适用于匿名函数。它使用 <code>=&gt;</code> 语法。<strong>箭头函数</strong>没有自己的 <code>this</code> 和 <code>arguments</code> 绑定，它们会捕获外层上下文的 <code>this</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">subtract</span> = (<span class="params">a, b</span>) =&gt; a - b;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">subtract</span>(<span class="number">5</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="立即调用函数表达式">立即调用函数表达式</h3><p>这种函数声明后立即执行，不需要显式调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This function runs immediately!&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="函数名以及调用">函数名以及调用</h2><p>函数名就是指向函数的指针，它们跟其他包含对象指针的变量具有相同的行为。这意味着一个函数可以有多个名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">10</span>, <span class="number">10</span>)); <span class="comment">// 20</span></span><br><span class="line"><span class="keyword">let</span> anotherSum = sum;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">anotherSum</span>(<span class="number">10</span>, <span class="number">10</span>)); <span class="comment">// 20 </span></span><br></pre></td></tr></table></figure><p>定义的函数并不会自动执行它。定义了函数仅仅是赋予函数以名称并明确函数被调用时该做些什么。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="title function_">sum</span>();</span><br></pre></td></tr></table></figure><p>如果定义了两个同名函数，则后定义的会覆盖先定义的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addSomeNumber</span>(<span class="params">num</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> num + <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addSomeNumber</span>(<span class="params">num</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> num + <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">addSomeNumber</span>(<span class="number">100</span>); <span class="comment">// 300 </span></span><br></pre></td></tr></table></figure><h2 id="函数参数">函数参数</h2><h3 id="默认参数">默认参数</h3><p>在 ES5.1 及以前，实现默认参数的一种常用方式就是检测某个参数是否等于 undefined， 如果是则意味着没有传这个参数，那就给它赋一个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeKing</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    name = (<span class="keyword">typeof</span> name !== <span class="string">&#x27;undefined&#x27;</span>) ? name : <span class="string">&#x27;Henry&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`King <span class="subst">$&#123;name&#125;</span> VIII`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">makeKing</span>()); <span class="comment">// &#x27;King Henry VIII&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">makeKing</span>(<span class="string">&#x27;Louis&#x27;</span>)); <span class="comment">// &#x27;King Louis VIII&#x27; </span></span><br></pre></td></tr></table></figure><p>ES6 之后，它支持显式定义默认参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeKing</span>(<span class="params">name = <span class="string">&#x27;Henry&#x27;</span></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`King <span class="subst">$&#123;name&#125;</span> VIII`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">makeKing</span>(<span class="string">&#x27;Louis&#x27;</span>)); <span class="comment">// &#x27;King Louis VIII&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">makeKing</span>()); <span class="comment">// &#x27;King Henry VIII&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="arguments对象">arguments对象</h3><p>函数不关心传入的参数个数，也不关心这些参数的数据类型。函数的参数在内部表现为一个数组，可以在函数（非箭头函数）内部访问 arguments 对象，从中取得传进来的每个参数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params">name, message</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello &quot;</span> + name + <span class="string">&quot;, &quot;</span> + message);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello &quot;</span> + <span class="variable language_">arguments</span>[<span class="number">0</span>] + <span class="string">&quot;, &quot;</span> + <span class="variable language_">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="参数扩展">参数扩展</h3><p>在 ES6 中，对可迭代对象应用扩展操作符，并将其作为一个参数传入，可以将可迭代对象拆分，并将迭代返回的每个值单独传入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> values = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; ++i) &#123;</span><br><span class="line">        sum += <span class="variable language_">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(...values)); <span class="comment">// 10 </span></span><br></pre></td></tr></table></figure><h3 id="收集参数">收集参数</h3><p>函数定义时，可以使用扩展操作符把不同长度的独立参数组合为一个数组。收集参数的前面如果还有命名参数，则只会收集其余的参数；如果没有则会得到空数组。因为收集 参数的结果可变，所以只能把它作为最后一个参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSum</span>(<span class="params">...values</span>) &#123;</span><br><span class="line">    <span class="comment">// 顺序累加 values 中的所有值</span></span><br><span class="line">    <span class="comment">// 初始值的总和为 0</span></span><br><span class="line">    <span class="keyword">return</span> values.<span class="title function_">reduce</span>(<span class="function">(<span class="params">x, y</span>) =&gt;</span> x + y, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getSum</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6 </span></span><br></pre></td></tr></table></figure><h3 id="函数作为参数">函数作为参数</h3><p>因为函数名是变量，所以函数可以用在任何可以使用变量的地方。这意味着不仅可以把函数作为参数传给另一个函数，而且还可以在一个函数中返回另一个函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callSomeFunction</span>(<span class="params">someFunction, someArgument</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">someFunction</span>(someArgument);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">callSomeFunction</span>(add, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 20 </span></span><br></pre></td></tr></table></figure><h2 id="函数体">函数体</h2><h3 id="arguments">arguments</h3><p>arguments 是一个类数组对象，包含调用函数时传入的所有参数。arguments 对象只有以 function 关键字定义函数时才会有</p><h3 id="this">this</h3><p>在标准函数中，this 引用的是把函数当成方法调用的上下文对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line"><span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayColor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在全局上下文中调用 sayColor()，此时 this 指向 window</span></span><br><span class="line"><span class="title function_">sayColor</span>(); <span class="comment">// &#x27;red&#x27;</span></span><br><span class="line"><span class="comment">// 把 sayColor() 赋值给 o 之后再调用 o.sayColor()，this 会指向 o</span></span><br><span class="line">o.<span class="property">sayColor</span> = sayColor;</span><br><span class="line">o.<span class="title function_">sayColor</span>(); <span class="comment">// &#x27;blue&#x27; </span></span><br></pre></td></tr></table></figure><p>在箭头函数中，this引用的是定义箭头函数的上下文。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">arrowFunction</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">arrowFunction</span>(); <span class="comment">// 输出 undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">  <span class="attr">greet</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="title function_">greet</span>(); <span class="comment">// 1秒后输出 &#x27;Hello, Alice&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="new-target">new.target</h3><p>函数可以作为构造函数实例化一个新对象，也可以作为普通函数被调用。如果函数是正常调用的，则 new.target 的值是 undefined；如果是使用 new 关键字调用的，则 new.target 将引用被调用的 构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">King</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">new</span>.<span class="property">target</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&#x27;King must be instantiated using &quot;new&quot;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;King instantiated using &quot;new&quot;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">King</span>(); <span class="comment">// King instantiated using &quot;new&quot;</span></span><br><span class="line"><span class="title class_">King</span>(); <span class="comment">// Error: King must be instantiated using &quot;new&quot; </span></span><br></pre></td></tr></table></figure><h2 id="实例属性">实例属性</h2><ol><li><p><strong>length</strong>：表示函数期望的参数数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sayName.<span class="property">length</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sayHi.<span class="property">length</span>); <span class="comment">// 0 </span></span><br></pre></td></tr></table></figure></li><li><p><strong>prototype</strong>：当函数作为构造函数与 new 运算符一起使用时，prototype 属性将用作新对象的原型</p></li><li><p><strong>name</strong>：表示函数在创建时指定的名称，或者如果函数是匿名函数，则名称可以是 <code>anonymous</code> 或 <code>''</code>（空字符串）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">baz</span> = (<span class="params"></span>) =&gt; &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">name</span>); <span class="comment">// foo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">name</span>); <span class="comment">// bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(baz.<span class="property">name</span>); <span class="comment">// baz</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="function">() =&gt;</span> &#123;&#125;).<span class="property">name</span>); <span class="comment">//（空字符串）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="keyword">new</span> <span class="title class_">Function</span>()).<span class="property">name</span>); <span class="comment">// anonymous</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><ol><li><p><code>apply()</code>：调用一个函数，并且在调用该函数时可以传递一个指定的 <code>this</code> 值以及一个数组或类数组对象作为参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = sum.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 7</span></span><br></pre></td></tr></table></figure></li><li><p><code>call()</code>：调用一个函数，并且在调用该函数时可以传递一个指定的 <code>this</code> 值以及一系列的参数，而不是一个数组或类数组对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = sum.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 7</span></span><br></pre></td></tr></table></figure></li><li><p><code>bind()</code>：创建一个新函数，当调用该新函数时，它会调用原始函数并将其 <code>this</code> 关键字设置为给定的值，同时，还可以传入一系列指定的参数，这些参数会插入到调用新函数时传入的参数的前面</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable language_">module</span> = &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">getX</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> unboundGetX = <span class="variable language_">module</span>.<span class="property">getX</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unboundGetX</span>()); <span class="comment">// 输出 undefined 因为 this 指向了全局对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boundGetX = unboundGetX.<span class="title function_">bind</span>(<span class="variable language_">module</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">boundGetX</span>()); <span class="comment">// 输出 42</span></span><br></pre></td></tr></table></figure></li><li><p><code>toString()</code>：返回一个表示该函数源码的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum.<span class="title function_">toString</span>()); <span class="comment">// function sum(a, b) &#123; return a + b; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="递归">递归</h2><p>递归指的是函数在其定义过程中直接或间接调用自身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span> (n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n-<span class="number">1</span>)+<span class="title function_">fibonacci</span>(n-<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacci</span>(<span class="number">10</span>)); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><h3 id="尾递归">尾递归</h3><p>即外部函数的返回值是一个内部函数的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fibonacci</span>(<span class="params">n, cur = <span class="number">1</span>, sum = <span class="number">1</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fibonacci</span>(n - <span class="number">1</span>, sum, cur + sum)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fibonacci</span>(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><h2 id="闭包">闭包</h2><p>闭包是指在一个函数内部定义的函数可以访问外部函数的变量，并且这些变量在外部函数执行完毕后依然可以被访问。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> outerVariable = <span class="string">&#x27;I am from the outer function&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">innerFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(outerVariable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> closure = <span class="title function_">outerFunction</span>();</span><br><span class="line"><span class="title function_">closure</span>(); <span class="comment">// 输出 &#x27;I am from the outer function&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(27)-代理和反射</title>
    <link href="/2024/08/09/JS%E5%AD%A6%E4%B9%A0(27)-%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
    <url>/2024/08/09/JS%E5%AD%A6%E4%B9%A0(27)-%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<p>代理和反射为开发者提供了拦截并向基本操作嵌入额外行为的能力。可以给目标对象定义一个关联的代理对象，而这个代理对象可以作为抽象的目标对象来使用。</p><span id="more"></span><h1>代理</h1><p>代理是目标对象的抽象，可以用作目标对象的替身，但又完全独立于目标对象。目标对象既可以直接被操作，也可以通过代理来操作。直接操作目标对象会绕过代理对象施予的行为。</p><h2 id="构造函数">构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><ol><li><strong>target</strong>：要使用 <code>Proxy</code> 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）</li><li><strong>handler</strong>：一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 <code>proxy</code> 的行为</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;target&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="comment">// id 属性会访问同一个值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">id</span>); <span class="comment">// target</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">id</span>); <span class="comment">// target</span></span><br><span class="line"><span class="comment">// 给目标属性赋值会反映在两个对象上</span></span><br><span class="line"><span class="comment">// 因为两个对象访问的是同一个值</span></span><br><span class="line">target.<span class="property">id</span> = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">id</span>); <span class="comment">// foo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">id</span>); <span class="comment">// foo</span></span><br><span class="line"><span class="comment">// 给代理属性赋值会反映在两个对象上</span></span><br><span class="line"><span class="comment">// 因为这个赋值会转移到目标对象</span></span><br><span class="line">proxy.<span class="property">id</span> = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">id</span>); <span class="comment">// bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">id</span>); <span class="comment">// bar </span></span><br></pre></td></tr></table></figure><h2 id="代理捕获器">代理捕获器</h2><p>使用代理的主要目的是可以定义<strong>捕获器</strong>，捕获器就是在处理程序对象中定义的“基本操作的拦截器”。每个处理程序对象可以包含零个或多个捕获器，每个捕获器都对应一种基本操作，可以直接或间接在代理对象上调用。每次在代理对象上调用这些基本操作时，代理可以在这些操作传播到目标对象之前先调用捕获器函数，从而拦截并修改相应的行为。</p><h3 id="捕获器不变式">捕获器不变式</h3><p>使用捕获器几乎可以改变所有基本方法的行为，但也不是没有限制。每个捕获的方法都知道目标对象上下文、捕获函数签名，而捕获处理程序的行为必须遵循“捕获器不变式”，防止捕获器定义出现过于反常的行为。</p><h3 id="get">get()</h3><p><code>get()</code>捕获器会在获取属性值的操作中被调用。</p><ol><li>返回值：返回值无限制</li><li>拦截的操作：<code>proxy.property</code>、<code>proxy[property]</code>、<code>Object.create(proxy)[property]</code></li><li>捕获器参数：<ul><li>target：目标对象</li><li>property：引用的目标对象上的字符串键属性</li><li>receiver：代理对象或继承代理对象的对象</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, property, receiver</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(target); <span class="comment">// &#123;foo: &#x27;bar&#x27;&#125;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(property); <span class="comment">// &#x27;foo&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(receiver); <span class="comment">// Proxy(Object) &#123;foo: &#x27;bar&#x27;&#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;handler override&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">foo</span>); <span class="comment">// bar</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">foo</span>); <span class="comment">// handler override</span></span><br></pre></td></tr></table></figure><h3 id="set">set()</h3><p><code>set()</code>捕获器会在设置属性值的操作中被调用。</p><ol><li>返回值：返回 true 表示成功；返回 false 表示失败</li><li>拦截的操作：<code>proxy.property  = value</code>、<code>proxy[property]  = value</code>、<code>Object.create(proxy)[property]  = value</code></li><li>捕获器参数：<ul><li>target：目标对象</li><li>property：引用的目标对象上的字符串键属性</li><li>value：要赋给属性的值</li><li>receiver：接收最初赋值的对象</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, property, value, receiver</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(target); <span class="comment">// &#123;foo: &#x27;bar&#x27;&#125;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(property); <span class="comment">// &#x27;foo&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// &#x27;baz&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(receiver); <span class="comment">// Proxy(Object) &#123;foo: &#x27;bar&#x27;&#125;</span></span><br><span class="line">        target[property] = value;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">foo</span>); <span class="comment">// bar</span></span><br><span class="line">proxy.<span class="property">foo</span> = <span class="string">&#x27;baz&#x27;</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">foo</span>); <span class="comment">// baz</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">foo</span>); <span class="comment">// baz</span></span><br></pre></td></tr></table></figure><h3 id="has">has()</h3><p><code>has()</code>捕获器会在 in 操作符中被调用。</p><ol><li>返回值：返回布尔值，表示属性是否存在。</li><li>拦截的操作：<code>property in proxy</code>、<code>property in Object.create(proxy)</code></li><li>捕获器参数：<ul><li>target：目标对象</li><li>property：引用的目标对象上的字符串键属性</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="comment">// 捕获器在处理程序对象中以方法名为键</span></span><br><span class="line">    <span class="title function_">has</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(target); <span class="comment">// &#123;foo: &#x27;bar&#x27;&#125;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(property); <span class="comment">// &#x27;foo&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(property <span class="keyword">in</span> target) <span class="comment">// true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="string">&#x27;foo&#x27;</span> <span class="keyword">in</span> proxy</span><br></pre></td></tr></table></figure><h3 id="defineProperty">defineProperty()</h3><p><code>defineProperty()</code>捕获器会在<code>Object.defineProperty()</code>中被调用。</p><ol><li>返回值：返回布尔值，表示属性是否成功定义。</li><li>拦截的操作：<code>Object.defineProperty(proxy, property, descriptor)</code></li><li>捕获器参数：<ul><li>target：目标对象</li><li>property：引用的目标对象上的字符串键属性</li><li>descriptor：包含可选的 enumerable、configurable、writable、value、get 和 set 定义的对象</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="comment">// 捕获器在处理程序对象中以方法名为键</span></span><br><span class="line">    <span class="title function_">defineProperty</span>(<span class="params">target, property, descriptor</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(target); <span class="comment">// &#123;foo: &#x27;bar&#x27;&#125;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(property); <span class="comment">// &#x27;foo&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor); <span class="comment">// &#x27;foo&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(proxy, <span class="string">&#x27;foo&#x27;</span>, &#123; <span class="attr">value</span>: <span class="string">&#x27;bar&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="getOwnPropertyDescriptor">getOwnPropertyDescriptor()</h3><p><code>getOwnPropertyDescriptor()</code>捕获器会在<code>Object.getOwnPropertyDescriptor()</code>中被调用。</p><ol><li>返回值：返回对象，或者在属性不存在时返回 undefined。</li><li>拦截的操作：<code>Object.getOwnPropertyDescriptor(proxy, property)</code></li><li>捕获器参数：<ul><li>target：目标对象</li><li>property：引用的目标对象上的字符串键属性</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="title function_">getOwnPropertyDescriptor</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">value</span>: <span class="string">&#x27;baz&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(proxy, <span class="string">&#x27;foo&#x27;</span>).<span class="property">value</span>); <span class="comment">// &#x27;baz&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="deleteProperty">deleteProperty()</h3><p><code>deleteProperty()</code>捕获器会在 delete 操作符中被调用。</p><ol><li>返回值：返回布尔值，表示删除属性是否成功。</li><li>拦截的操作：<code>delete proxy.property</code>、<code>delete proxy[property]</code></li><li>捕获器参数：<ul><li>target：目标对象</li><li>property：引用的目标对象上的字符串键属性</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="title function_">deleteProperty</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> target[property];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">foo</span>); <span class="comment">// bar</span></span><br><span class="line"><span class="keyword">delete</span> proxy.<span class="property">foo</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">foo</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="ownKeys">ownKeys()</h3><p><code>ownKeys()</code>捕获器会在<code>Object.keys()</code>及类似方法中被调用。</p><ol><li>返回值：返回包含字符串或符号的可枚举对象</li><li>拦截的操作：<code>Object.getOwnPropertyNames(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code></li><li>捕获器参数：<ul><li>target：目标对象</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="title function_">ownKeys</span>(<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(proxy)); <span class="comment">// [&#x27;foo&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="getPrototypeOf">getPrototypeOf()</h3><p><code>getPrototypeOf()</code>捕获器会在<code>Object.getPrototypeOf()</code>中被调用。</p><ol><li>返回值：返回对象或 null</li><li>拦截的操作：<code>Object.getPrototypeOf(proxy)</code>、<code>proxy.__proto__</code>、<code>Object.prototype.isPrototypeOf(proxy)</code>、<code>proxy instanceof Object</code></li><li>捕获器参数：<ul><li>target：目标对象</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="title function_">getPrototypeOf</span>(<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(target);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(proxy));</span><br></pre></td></tr></table></figure><h3 id="setPrototypeOf">setPrototypeOf()</h3><p><code>setPrototypeOf()</code>捕获器会在<code>Object.setPrototypeOf()</code>中被调用。</p><ol><li>返回值：返回布尔值，表示原型赋值是否成功。</li><li>拦截的操作：<code>Object.setPrototypeOf(proxy)</code></li><li>捕获器参数：<ul><li>target：目标对象</li><li>prototype：target 的替代原型，如果是顶级原型则为 null。</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="title function_">setPrototypeOf</span>(<span class="params">target, prototype</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(proxy, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="isExtensible">isExtensible()</h3><p><code>isExtensible()</code>捕获器会在<code>Object.isExtensible()</code>中被调用。</p><ol><li>返回值：返回布尔值，表示 target 是否可扩展。</li><li>拦截的操作：<code>Object.isExtensible(proxy)</code></li><li>捕获器参数：<ul><li>target：目标对象</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="title function_">isExtensible</span>(<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(target);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(proxy);</span><br></pre></td></tr></table></figure><h3 id="preventExtensions">preventExtensions()</h3><p><code>preventExtensions()</code>捕获器会在<code>Object.preventExtensions()</code>中被调用。</p><ol><li>返回值：返回布尔值，表示 target 是否已经不可扩展。</li><li>拦截的操作：<code>Object.preventExtensions(proxy)</code></li><li>捕获器参数：<ul><li>target：目标对象</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="title function_">preventExtensions</span>(<span class="params">target</span>) &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(target);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(proxy);</span><br></pre></td></tr></table></figure><h3 id="apply">apply()</h3><p><code>apply()</code>捕获器会在调用函数时中被调用。</p><ol><li>返回值：返回值无限制</li><li>拦截的操作：<code>proxy(...argumentsList)</code>、<code>Function.prototype.apply(thisArg, argumentsList)</code>、<code>Function.prototype.call(thisArg, ...argumentsList)</code></li><li>捕获器参数：<ul><li>target：目标对象</li><li>thisArg：调用函数时的 this 参数。</li><li>argumentsList：调用函数时的参数列表</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="title function_">apply</span>(<span class="params">target, thisArg, argumentsList</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(target); <span class="comment">// ƒ () &#123;&#125;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(thisArg); <span class="comment">// undefined</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(argumentsList); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">        <span class="keyword">return</span> argumentsList[<span class="number">0</span>] + argumentsList[<span class="number">1</span>] + argumentsList[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">proxy</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h3 id="construct">construct()</h3><p><code>construct()</code>捕获器会在 new 操作符中被调用。</p><ol><li>返回值：返回一个对象</li><li>拦截的操作：<code>new proxy(...argumentsList)</code></li><li>捕获器参数：<ul><li>target：目标构造函数</li><li>argumentsList：传给目标构造函数的参数列表</li><li>newTarget：最初被调用的构造函数</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="title function_">construct</span>(<span class="params">target, argumentsList, newTarget</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(target); <span class="comment">// ƒ () &#123;&#125;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(argumentsList); <span class="comment">// [1]</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(newTarget); <span class="comment">// Proxy(Function) &#123;length: 0, name: &#x27;target&#x27;, arguments: null, caller: null, prototype: &#123;…&#125;&#125;</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">value</span>: argumentsList[<span class="number">0</span>] * <span class="number">10</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title function_">proxy</span>(<span class="number">1</span>).<span class="property">value</span>); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h3 id="可撤销代理">可撤销代理</h3><p>有时候需要中断代理对象与目标对象之间的联系。对于使用 new Proxy()创建的普通代理来说，这种联系会在代理对象的生命周期内一直持续存在。 Proxy 也暴露了<code>revocable()</code>方法，这个方法支持撤销代理对象与目标对象的关联。撤销代理的操作是不可逆的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;intercepted&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> &#123; proxy, revoke &#125; = <span class="title class_">Proxy</span>.<span class="title function_">revocable</span>(target, handler);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">foo</span>); <span class="comment">// intercepted</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">foo</span>); <span class="comment">// bar</span></span><br><span class="line"><span class="title function_">revoke</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">foo</span>); <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><h2 id="反射">反射</h2><p><code>Reflect</code> 是一个内置对象，提供了一些静态方法来对对象进行常见的低级操作。这些操作与 <code>Proxy</code> 中的捕获器方法几乎一致。通过 <code>Reflect</code>，可以更轻松地在 <code>Proxy</code> 的捕获器中调用默认行为，而不需要直接调用原始对象。</p><h2 id="代理模式">代理模式</h2><h3 id="跟踪属性访问">跟踪属性访问</h3><p>通过捕获 get、set 和 has 等操作，可以知道对象属性什么时候被访问、被查询。把实现相应捕获器的某个对象代理放到应用中，可以监控这个对象何时在何处被访问过</p><h3 id="隐藏属性">隐藏属性</h3><p>代理的内部实现对外部代码是不可见的，因此可以隐藏目标对象上的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hiddenProperties = [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> targetObject = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">baz</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(targetObject, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hiddenProperties.<span class="title function_">includes</span>(property)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">has</span>(<span class="params">target, property</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hiddenProperties.<span class="title function_">includes</span>(property)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">has</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// get()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">foo</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">bar</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">baz</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// has()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span> <span class="keyword">in</span> proxy); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar&#x27;</span> <span class="keyword">in</span> proxy); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;baz&#x27;</span> <span class="keyword">in</span> proxy); <span class="comment">// true </span></span><br></pre></td></tr></table></figure><h3 id="属性验证">属性验证</h3><p>所有赋值操作都会触发<code>set()</code>捕获器，所以可以根据所赋的值决定是允许还是拒绝赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> target = &#123;</span><br><span class="line">    <span class="attr">onlyNumbersGoHere</span>: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, property, value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxy.<span class="property">onlyNumbersGoHere</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">onlyNumbersGoHere</span>); <span class="comment">// 1</span></span><br><span class="line">proxy.<span class="property">onlyNumbersGoHere</span> = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(proxy.<span class="property">onlyNumbersGoHere</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="参数验证">参数验证</h3><p>也可对函数和构造函数参数进行审查，让函数只接收某种类型的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">median</span>(<span class="params">...nums</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> nums.<span class="title function_">sort</span>()[<span class="title class_">Math</span>.<span class="title function_">floor</span>(nums.<span class="property">length</span> / <span class="number">2</span>)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(median, &#123;</span><br><span class="line">    <span class="title function_">apply</span>(<span class="params">target, thisArg, argumentsList</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> arg <span class="keyword">of</span> argumentsList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> arg !== <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="string">&#x27;Non-number argument provided&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">apply</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">proxy</span>(<span class="number">4</span>, <span class="number">7</span>, <span class="number">1</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">proxy</span>(<span class="number">4</span>, <span class="string">&#x27;7&#x27;</span>, <span class="number">1</span>)); <span class="comment">// Uncaught Non-number argument provided</span></span><br></pre></td></tr></table></figure><h3 id="数据绑定">数据绑定</h3><p>将被代理的类绑定到一个全局实例集合，让所有创建的实例都被添加到这个集合中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userList = [];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name_</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="title class_">User</span>, &#123;</span><br><span class="line">    <span class="title function_">construct</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> newUser = <span class="title class_">Reflect</span>.<span class="title function_">construct</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">        userList.<span class="title function_">push</span>(newUser);</span><br><span class="line">        <span class="keyword">return</span> newUser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">proxy</span>(<span class="string">&#x27;John&#x27;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">proxy</span>(<span class="string">&#x27;Jacob&#x27;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">proxy</span>(<span class="string">&#x27;Jingleheimerschmidt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userList); <span class="comment">// [User &#123;&#125;, User &#123;&#125;, User&#123;&#125;] </span></span><br></pre></td></tr></table></figure><h3 id="可观察对象">可观察对象</h3><p>以把集合绑定到一个事件分派程序，每次插入新实例时都会发送消息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> userList = [];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">emit</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(userList, &#123;</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, property, value, receiver</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(...<span class="variable language_">arguments</span>);</span><br><span class="line">        <span class="keyword">if</span> (result) &#123;</span><br><span class="line">            <span class="title function_">emit</span>(<span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, property, receiver));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxy.<span class="title function_">push</span>(<span class="string">&#x27;John&#x27;</span>); <span class="comment">// John</span></span><br><span class="line">proxy.<span class="title function_">push</span>(<span class="string">&#x27;Jacob&#x27;</span>); <span class="comment">// Jacob </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(26)-类</title>
    <link href="/2024/08/08/JS%E5%AD%A6%E4%B9%A0(26)-%E7%B1%BB/"/>
    <url>/2024/08/08/JS%E5%AD%A6%E4%B9%A0(26)-%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，<code>class</code> 是一种用于创建对象的语法糖。虽然 JavaScript 的本质是一种基于原型的语言，但 <code>class</code> 语法提供了类似于传统面向对象编程语言的结构，使得定义和使用类更直观、更易读。</p><span id="more"></span><h1>类</h1><p>使用 <code>class</code> 关键字来定义一个类。一个类可以包含构造函数、方法（包括静态方法）和访问器（getter 和 setter）。</p><h2 id="类定义">类定义</h2><p>定义类有两种主要方式：类声明和类表达式。这两种方式都使用 <strong>class</strong> 关键字加大括号：</p><ol><li><p>类声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>类表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Animal</span> = <span class="keyword">class</span> &#123;&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="构造函数">构造函数</h2><p><code>constructor</code>是用于创建和初始化类对象实例的特殊方法</p><h3 id="实例化">实例化</h3><p>使用 new 操作符实例化的操作等于使用 new 调用其构造函数，使用 new 调用类的构造函数会执行如下操作：</p><ol><li>在内存中创建一个新对象</li><li>新对象的[[Prototype]]被赋值为构造函数的<strong>prototype</strong>属性</li><li>构造函数内部的<strong>this</strong>被赋值为这个新对象（即this指向新对象）</li><li>执行构造函数内部的代码（给新对象添加属性）</li><li>如果构造函数返回非空对象，则返回该对象，否则返回刚创建的新对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>); <span class="comment">// null</span></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Jake&#x27;</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">name</span>); <span class="comment">// Jake</span></span><br></pre></td></tr></table></figure><p>类构造函数与构造函数的主要区别是，调用类构造函数必须使用 new 操作符。而普通构造函数如果不使用 new 调用，那么就会以全局的 this（通常是 window）作为内部对象。调用类构造函数时如果忘了使用 new 则会抛出错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123; &#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="title class_">Person</span>(); <span class="comment">// 把 window 作为 this 来构建实例</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Animal</span>(); <span class="comment">// TypeError: Class constructor Animal cannot be invoked without &#x27;new&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="类组成">类组成</h2><h3 id="实例属性">实例属性</h3><p>使用 new 操作调用类构造函数，在函数内部，可以为新创建的实例添加实例属性，在构造函数执行完毕后，仍然可以给实例继续添加新属性，每个实例都对应一个唯一的实例对象，所有的实例都不会在原型上共享。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 这个例子先使用对象包装类型定义一个字符串</span></span><br><span class="line">        <span class="comment">// 为的是在下面测试两个对象的相等性</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;Jack&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nicknames</span> = [<span class="string">&#x27;Jake&#x27;</span>, <span class="string">&#x27;J-Dog&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(),</span><br><span class="line">    p2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.<span class="title function_">sayName</span>(); <span class="comment">// Jack</span></span><br><span class="line">p2.<span class="title function_">sayName</span>(); <span class="comment">// Jack</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span> === p2.<span class="property">name</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">sayName</span> === p2.<span class="property">sayName</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">nicknames</span> === p2.<span class="property">nicknames</span>); <span class="comment">// false</span></span><br><span class="line">p1.<span class="property">name</span> = p1.<span class="property">nicknames</span>[<span class="number">0</span>];</span><br><span class="line">p2.<span class="property">name</span> = p2.<span class="property">nicknames</span>[<span class="number">1</span>];</span><br><span class="line">p1.<span class="title function_">sayName</span>(); <span class="comment">// Jake</span></span><br><span class="line">p2.<span class="title function_">sayName</span>(); <span class="comment">// J-Dog </span></span><br></pre></td></tr></table></figure><h3 id="原型方法">原型方法</h3><p>为了在实例间共享方法，类定义语法把在类块中定义的方法作为原型方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 添加到 this 的所有内容都会存在于不同的实例上</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">locate</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;instance&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在类块中定义的所有内容都会定义在类的原型上</span></span><br><span class="line">    <span class="title function_">locate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;prototype&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.<span class="title function_">locate</span>(); <span class="comment">// instance</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">locate</span>(); <span class="comment">// prototype </span></span><br></pre></td></tr></table></figure><h3 id="访问器">访问器</h3><p>类定义也支持获取和设置访问器。语法与行为跟普通对象一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">newName</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name_</span> = newName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name_</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;Jake&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">// Jake</span></span><br></pre></td></tr></table></figure><h3 id="静态成员">静态成员</h3><p>可以在类上定义静态属性、静态方法、静态访问器。使用 <strong>static</strong> 关键字作为前缀，使用了 <strong>static</strong> 关键字的属性、方法不能从实例中访问</p><h4 id="静态属性">静态属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name</span>); <span class="comment">// John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="静态方法">静态方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">locate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;class&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="title function_">locate</span>());</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class class Person &#123;</span></span><br><span class="line"><span class="comment">    static locate() &#123;</span></span><br><span class="line"><span class="comment">        console.log(&#x27;class&#x27;, this);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="title function_">locate</span>()); <span class="comment">// TypeError: p1.locate is not a function</span></span><br></pre></td></tr></table></figure><h3 id="私有成员">私有成员</h3><p>在类中，通过以 <code>#</code>（井号）开头的标识符来实现类成员的封装，私有成员只能在类的内部访问，而不能在类的实例或类的外部直接访问。这样可以保护类的内部状态，防止外部代码对其进行不正确的操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 私有字段</span></span><br><span class="line">    #name;</span><br><span class="line">    #age;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.#name = name;</span><br><span class="line">        <span class="variable language_">this</span>.#age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公共方法，可以访问私有字段</span></span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.#name&#125;</span>, and I am <span class="subst">$&#123;<span class="variable language_">this</span>.#age&#125;</span> years old.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Alice&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">person1.<span class="title function_">greet</span>(); <span class="comment">// &quot;Hello, my name is Alice, and I am 30 years old.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试访问私有字段会报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.#name); <span class="comment">// SyntaxError: Private field &#x27;#name&#x27; must be declared in an enclosing class</span></span><br></pre></td></tr></table></figure><h2 id="继承">继承</h2><p>在 ES6 之后支持了类继承，其原理依旧使用的是原型链，类继承使用<strong>extends</strong>关键字，就可以继承任何拥有[[Construct]]和原型的对象，这意味着不仅可以继承一个类，也可以继承构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123; &#125;</span><br><span class="line"><span class="comment">// 继承类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123; &#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Bus</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b <span class="keyword">instanceof</span> <span class="title class_">Bus</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b <span class="keyword">instanceof</span> <span class="title class_">Vehicle</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="comment">// 继承普通构造函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Engineer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123; &#125;</span><br><span class="line"><span class="keyword">let</span> e = <span class="keyword">new</span> <span class="title class_">Engineer</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e <span class="keyword">instanceof</span> <span class="title class_">Engineer</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// true </span></span><br></pre></td></tr></table></figure><h3 id="super">super</h3><p>派生类的方法可以通过 super 关键字引用它们的原型。这个关键字只能在派生类中使用，而且仅限于类构造函数、实例方法和静态方法。</p><p>在类构造函数中使用 super 可以调用父类构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hasEngine</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">identify</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vehicle&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 不要在调用 super()之前引用 this，否则会抛出 ReferenceError</span></span><br><span class="line">        <span class="variable language_">super</span>(); <span class="comment">// 相当于 super.constructor()</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Vehicle</span>); <span class="comment">// true</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">// Bus &#123; hasEngine: true &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">identify</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">identify</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Bus</span>(); </span><br><span class="line"><span class="title class_">Bus</span>.<span class="title function_">identify</span>(); <span class="comment">// vehicle</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li><p>super 只能在派生类构造函数、实例方法和静态方法中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="comment">// SyntaxError: &#x27;super&#x27; keyword unexpected here</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>调用<code>super()</code>会调用父类构造函数，并将返回的实例赋值给 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Vehicle</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Bus</span>(); <span class="comment">// true </span></span><br></pre></td></tr></table></figure></li><li><p><code>super()</code>的行为如同调用构造函数，如果需要给父类构造函数传参，则需要手动传入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">licensePlate</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">licensePlate</span> = licensePlate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">licensePlate</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(licensePlate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Bus</span>(<span class="string">&#x27;1337H4X&#x27;</span>)); <span class="comment">// Bus &#123; licensePlate: &#x27;1337H4X&#x27; &#125; </span></span><br></pre></td></tr></table></figure></li><li><p>如果没有定义类构造函数，在实例化派生类时会调用<code>super()</code>，而且会传入所有传给派生类的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">licensePlate</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">licensePlate</span> = licensePlate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123; &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Bus</span>(<span class="string">&#x27;1337H4X&#x27;</span>)); <span class="comment">// Bus &#123; licensePlate: &#x27;1337H4X&#x27; &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>在类构造函数中，不能在调用<code>super()</code>之前引用 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Bus</span>(); <span class="comment">// ReferenceError: Must call super constructor in derived class before accessing &#x27;this&#x27; or returning from derived constructor</span></span><br></pre></td></tr></table></figure></li><li><p>如果在派生类中显式定义了构造函数，则要么必须在其中调用<code>super()</code>，要么必须在其中返回一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vehicle</span> &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bus</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Van</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Vehicle</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Car</span>()); <span class="comment">// Car &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Bus</span>()); <span class="comment">// Bus &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Van</span>()); <span class="comment">// &#123;&#125; </span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(25)-继承</title>
    <link href="/2024/08/07/JS%E5%AD%A6%E4%B9%A0(25)-%E7%BB%A7%E6%89%BF/"/>
    <url>/2024/08/07/JS%E5%AD%A6%E4%B9%A0(25)-%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，对象继承是一个核心概念，它允许一个对象“继承”另一个对象的属性和方法。继承机制是通过原型链实现的，JavaScript 使用这种方式来实现对象的代码复用和共享行为。</p><span id="more"></span><h1>继承</h1><p>所有的 JavaScript 对象至少继承于一个对象。被继承的对象被称作原型，并且继承的属性可通过构造函数的 <code>prototype</code> 对象找到</p><h2 id="原型链">原型链</h2><p>每个对象都有一个私有属性指向另一个原型对象。原型对象也有一个自己的原型，层层向上直到一个对象的原型为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p><p>原型链扩展了原型搜索机制。在读取实例上的属性时，首先会在实例上搜索这个属性。如果没找到，则会继承搜索实例的原型。在通过原型链实现继承之后，搜索就可以继承向上， 搜索原型的原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">property</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSuperValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">property</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subproperty</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承 SuperType</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSubValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">subproperty</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> instance = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="title function_">getSuperValue</span>()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>子类有时候需要覆盖父类的方法，或者增加父类没有的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">property</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSuperValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">property</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">subproperty</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承 SuperType</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"><span class="comment">// 新方法</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSubValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">subproperty</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 覆盖已有的方法</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSuperValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> instance = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="title function_">getSuperValue</span>()); <span class="comment">// false </span></span><br></pre></td></tr></table></figure><p>原型链虽然是实现继承的强大工具，但它也有问题。原型中包含的引用值会在所有实例间共享，在使用原型实现继承时，原型实际上变成了另一个对象的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="comment">// 继承 SuperType</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">colors</span>); <span class="comment">// [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;black&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">colors</span>); <span class="comment">// [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;black&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="盗用构造函数">盗用构造函数</h2><p>为了解决原型包含引用值导致的继承问题，流行一种“盗用构造函数”的做法。在子类 构造函数中调用父类构造函数，使用 <code>apply()</code>和 <code>call()</code>方法以新创建的对象为上下文执行构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 继承 SuperType</span></span><br><span class="line">    <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">colors</span>); <span class="comment">// [&quot;red, blue, green, black&quot;]</span></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">colors</span>); <span class="comment">// [&quot;red, blue, green&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="传递参数">传递参数</h3><p>在子类构造函数中向父类构造函数传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 继承 SuperType 并传参</span></span><br><span class="line">    <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, <span class="string">&quot;Nicholas&quot;</span>);</span><br><span class="line">    <span class="comment">// 实例属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = <span class="number">29</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> instance = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">name</span>); <span class="comment">// &quot;Nicholas&quot;;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">age</span>); <span class="comment">// 29 </span></span><br></pre></td></tr></table></figure><h3 id="盗用构造函数的问题">盗用构造函数的问题</h3><p>父类构造函数中的方法不会被子类实例继承，因为方法通常定义在父类的原型上，而盗用构造函数只继承了父类的实例属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">greet</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 继承 SuperType 并传参</span></span><br><span class="line">    <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">    <span class="comment">// 实例属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> instance = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;Alice&#x27;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">name</span>); <span class="comment">// &quot;Alice&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">age</span>);  <span class="comment">// 10</span></span><br><span class="line">instance.<span class="title function_">greet</span>(); <span class="comment">// instance.greet is not a function</span></span><br></pre></td></tr></table></figure><h2 id="组合继承">组合继承</h2><p>组合继承综合了原型链和盗用构造函数，将两者的优点集中了起来。使用原型链继承原型上的属性和方法，通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 继承属性</span></span><br><span class="line">    <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承方法</span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>);</span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&quot;black&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">colors</span>); <span class="comment">// [&#x27;red&#x27;, &#x27;blue&#x27;, &#x27;green&#x27;, &#x27;black&#x27;]</span></span><br><span class="line">instance1.<span class="title function_">sayName</span>(); <span class="comment">// &quot;Nicholas&quot;;</span></span><br><span class="line">instance1.<span class="title function_">sayAge</span>(); <span class="comment">// 29</span></span><br></pre></td></tr></table></figure><h2 id="原型式继承">原型式继承</h2><p>原型式继承是一种基于原型链的继承模式，在一个函数内创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型，然后返回这个临时构造函数的实例。在原型式继承中，新的对象是从现有对象派生的，并且共享现有对象的属性和方法。这种机制允许对象创建基于其他对象的副本，从而实现属性和方法的继承。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>, <span class="string">&quot;Van&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anotherPerson = <span class="title function_">object</span>(person);</span><br><span class="line">anotherPerson.<span class="property">name</span> = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line">anotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;Rob&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> yetAnotherPerson = <span class="title function_">object</span>(person);</span><br><span class="line">yetAnotherPerson.<span class="property">name</span> = <span class="string">&quot;Linda&quot;</span>;</span><br><span class="line">yetAnotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;Barbie&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">friends</span>); <span class="comment">// [&#x27;Shelby&#x27;, &#x27;Court&#x27;, &#x27;Van&#x27;, &#x27;Rob&#x27;, &#x27;Barbie&#x27;]</span></span><br></pre></td></tr></table></figure><p><code>Object.create()</code>方法将原型式继承的概念规范化了。这个方法接收两个参数：作为新对象原型的对象，以及给新对象定义额外属性的对象（第二个可选）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>, <span class="string">&quot;Van&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anotherPerson = <span class="title class_">Object</span>.<span class="title function_">create</span>(person);</span><br><span class="line">anotherPerson.<span class="property">name</span> = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line">anotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;Rob&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> yetAnotherPerson = <span class="title class_">Object</span>.<span class="title function_">create</span>(person);</span><br><span class="line">yetAnotherPerson.<span class="property">name</span> = <span class="string">&quot;Linda&quot;</span>;</span><br><span class="line">yetAnotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;Barbie&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">friends</span>); <span class="comment">// [&#x27;Shelby&#x27;, &#x27;Court&#x27;, &#x27;Van&#x27;, &#x27;Rob&#x27;, &#x27;Barbie&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="寄生式继承">寄生式继承</h2><p>寄生式继承结合了原型式继承的特点，通过创建和返回一个基于现有对象作为原型的对象，以某种方式增强对象，然后返回这个对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createAnother</span>(<span class="params">original</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(original); <span class="comment">// 使用现有对象作为原型创建一个新对象</span></span><br><span class="line">    clone.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 以某种方式增强这个对象</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> clone; <span class="comment">// 返回这个对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>, <span class="string">&quot;Van&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> anotherPerson = <span class="title function_">createAnother</span>(person);</span><br><span class="line">anotherPerson.<span class="title function_">sayHi</span>(); <span class="comment">// &quot;hi&quot; </span></span><br></pre></td></tr></table></figure><h2 id="寄生式组合继承">寄生式组合继承</h2><p>寄生式组合继承结合了寄生式继承和组合继承优点的继承模式，通过寄生式继承创建一个基于父类原型的副本，将子类的原型设置为创建的对象，确保 <code>constructor</code> 属性指向子类，在子类构造函数中调用父类构造函数来初始化实例属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类原型方法</span></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">greet</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 寄生式继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createObject</span>(<span class="params">proto</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = proto;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">child, parent</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> prototype = <span class="title function_">createObject</span>(parent.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// 创建父类原型的副本</span></span><br><span class="line">    prototype.<span class="property">constructor</span> = child; <span class="comment">// 修复 constructor 属性</span></span><br><span class="line">    child.<span class="property"><span class="keyword">prototype</span></span> = prototype; <span class="comment">// 设置子类原型为副本</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); <span class="comment">// 盗用构造函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用寄生式组合继承</span></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">Child</span>, <span class="title class_">Parent</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类原型方法</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">study</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> is studying.`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">const</span> student1 = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;Alice&#x27;</span>, <span class="number">20</span>);</span><br><span class="line">student1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&#x27;yellow&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student1.<span class="property">name</span>); <span class="comment">// &quot;Alice&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student1.<span class="property">age</span>);  <span class="comment">// 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(student1.<span class="property">colors</span>); <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;]</span></span><br><span class="line"></span><br><span class="line">student1.<span class="title function_">greet</span>(); <span class="comment">// &quot;Hello, my name is Alice&quot;</span></span><br><span class="line">student1.<span class="title function_">study</span>(); <span class="comment">// &quot;Alice is studying.&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(24)-对象</title>
    <link href="/2024/08/06/JS%E5%AD%A6%E4%B9%A0(24)-%E5%AF%B9%E8%B1%A1/"/>
    <url>/2024/08/06/JS%E5%AD%A6%E4%B9%A0(24)-%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，对象是存储键值对的集合，键是字符串（或者符号），值可以是任意数据类型。对象是 JavaScript 中最重要的数据类型之一，用于组织和存储数据。</p><span id="more"></span><h1>对象</h1><p>对象是一组没有特定顺序的值。对象的每个属性或方法都由一个名称来标识，这个名称映射到一个值。</p><h2 id="创建对象">创建对象</h2><h3 id="对象字面量">对象字面量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="attr">greet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>); <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">person.<span class="title function_">greet</span>(); <span class="comment">// Hello, John</span></span><br></pre></td></tr></table></figure><h3 id="Object-构造函数">Object 构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;John&#x27;</span>;</span><br><span class="line">person.<span class="property">age</span> = <span class="number">30</span>;</span><br><span class="line">person.<span class="property">greet</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// John</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>); <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">person.<span class="title function_">greet</span>(); <span class="comment">// Hello, John</span></span><br></pre></td></tr></table></figure><h3 id="工厂模式">工厂模式</h3><p>工厂模式是一种设计模式，用于抽象创建特定对象的过程，工厂模式可以解决创建多个类似对象的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    o.<span class="property">name</span> = name;</span><br><span class="line">    o.<span class="property">age</span> = age;</span><br><span class="line">    o.<span class="property">job</span> = job;</span><br><span class="line">    o.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="title function_">createPerson</span>(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>, <span class="string">&quot;Software Engineer&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="title function_">createPerson</span>(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>, <span class="string">&quot;Doctor&quot;</span>); </span><br></pre></td></tr></table></figure><h3 id="构造函数模式">构造函数模式</h3><p>构造函数是用于创建特定类型对象，可以自定义构造函数，以函数的形式为对象类型定义属性和方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>, <span class="string">&quot;Software Engineer&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>, <span class="string">&quot;Doctor&quot;</span>);</span><br><span class="line">person1.<span class="title function_">sayName</span>(); <span class="comment">// Nicholas</span></span><br><span class="line">person2.<span class="title function_">sayName</span>(); <span class="comment">// Greg </span></span><br></pre></td></tr></table></figure><p>构造函数与工厂函数的区别：</p><ol><li>没有显式的创建对象</li><li>属性和方法直接赋值给了<strong>this</strong></li><li>没有<code>return</code></li></ol><p>调用构造函数创建实例，需要使用<code>new</code>操作符，这种方式会执行下面的操作：</p><ol><li>在内存中创建一个新对象</li><li>新对象的[[Prototype]]被赋值为构造函数的<strong>prototype</strong>属性</li><li>构造函数内部的<strong>this</strong>被赋值为这个新对象（即this指向新对象）</li><li>执行构造函数内部的代码（给新对象添加属性）</li><li>如果构造函数返回非空对象，则返回该对象，否则返回刚创建的新对象</li></ol><p>构造函数与普通函数的区别：</p><ol><li>任何函数只要使用 new 操作符调用就是构造函数，而不使用 new 操作符调用的函数就是普通函数</li><li>调用一个函数而没有明确设置 this 值的情况下（即没有作为对象的方法调用，或者没有使用 call()/apply()调用），this 始终指向 Global 对象（在浏览器中就是 window 对象）。</li></ol><h3 id="原型模式">原型模式</h3><p>每个函数都会创建一个 prototype 属性，这个属性是一个对象。这个对象就是通过调用构造函数创建的对象的原型，使用原型对象在它上面定义的属性和方法可以被对象实例共享</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">29</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">job</span> = <span class="string">&quot;Software Engineer&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person1.<span class="title function_">sayName</span>(); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person2.<span class="title function_">sayName</span>(); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">sayName</span> == person2.<span class="property">sayName</span>); <span class="comment">// true </span></span><br></pre></td></tr></table></figure><h4 id="原型">原型</h4><ol><li>创建一个函数，就会为这个函数创建一个 <strong>prototype</strong> 属性（指向原型对象），原型对象获得一个名为 <strong>constructor</strong> 的属性，指回与之关联的构造函数。</li><li>自定义构造函数时，原型对象默认只会获得 <strong>constructor</strong> 属性，其他的所有方法都继承自 <code>Object</code>。</li><li>调用构造函数创建一个新实例，这个实例的内部[[Prototype]]指针就会被赋值为构造函数的原型对象，在JavaScript中通过<code>__proto__</code>属性来访问对象的原型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数的原型对象的constructor属性指向函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义构造函数原型会继承Object，通过构造函数创建的对象通过__proto__来访问对象的原型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="对象属性描述">对象属性描述</h2><p>由为 JavaScript 实现引擎的规范定义的用一些内部特性来描述属性的特征，会用两个中括号把特性的名称括起来。</p><h3 id="数据属性">数据属性</h3><p>数据属性包含一个保存数据值的位置。值会从这个位置读取，也会写入到这个位置。数据属性有 4 个特性描述它们的行为</p><ol><li>[[Configurable]]：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。</li><li>[[Enumerable]]：表示属性是否可以通过 for-in 循环返回。</li><li>[[Writable]]：表示属性的值是否可以被修改。</li><li>[[Value]]：属性实际的值。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;Nicholas&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// &quot;Nicholas&quot;</span></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// &quot;Nicholas&quot; </span></span><br></pre></td></tr></table></figure><p>虽然可以对同一个属性多次调用 <code>Object.defineProperty()</code>，但在把 [[configurable]] 设置为 false 之后就会受限制了。在调用 <code>Object.defineProperty()</code>时，[[configurable]]、[[enumerable]] 和 [[writable]] 的值如果不指定，则都默认为 false。</p><h3 id="访问器属性">访问器属性</h3><p>访问器属性不包含数据值，包含一个获取<code>getter</code>函数和一个设置<code>setter</code>函数，不过这两个函数不是必需的。</p><ol><li>[[Configurable]]：表示属性是否可以通过 delete 删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。</li><li>[[Enumerable]]：表示属性是否可以通过 for-in 循环返回。</li><li>[[Get]]：获取函数，在读取属性时调用。默认值为 undefined。</li><li>[[Set]]：设置函数，在写入属性时调用。默认值为 undefined。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 直接在对象中使用get set方法 */</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Doe&#x27;</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">fullName</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> parts = name.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">firstName</span> = parts[<span class="number">0</span>];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lastName</span> = parts[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 getter</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">fullName</span>); <span class="comment">// John Doe</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 setter</span></span><br><span class="line">person.<span class="property">fullName</span> = <span class="string">&#x27;Jane Smith&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">firstName</span>); <span class="comment">// Jane</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">lastName</span>); <span class="comment">// Smith</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用Object.defineProperty()方法 */</span></span><br><span class="line"><span class="keyword">let</span> book = &#123;</span><br><span class="line">    <span class="attr">year_</span>: <span class="number">2017</span>,</span><br><span class="line">    <span class="attr">edition</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(book, <span class="string">&quot;year&quot;</span>, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">year_</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newValue &gt; <span class="number">2017</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">year_</span> = newValue;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">edition</span> += newValue - <span class="number">2017</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">book.<span class="property">year</span> = <span class="number">2018</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(book.<span class="property">year</span>); <span class="comment">// 2018</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(book.<span class="property">edition</span>); <span class="comment">// 2 </span></span><br></pre></td></tr></table></figure><h2 id="增强对象语法">增强对象语法</h2><h3 id="属性值简写">属性值简写</h3><p>在给对象添加变量的时候，属性名和变量名如果是一样的，使用简写属性名就可以被自动解释为同名的属性键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: name</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// &#123; name: &#x27;Matt&#x27; &#125;</span></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">name</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// &#123; name: &#x27;Matt&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="可计算属性">可计算属性</h3><p>在对象字面量中完成动态属性赋值。中括号包围的对象属性键运行时将其作为 JavaScript 表达式而不是字符串来求值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nameKey = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> ageKey = <span class="string">&#x27;age&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> jobKey = <span class="string">&#x27;job&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">person[nameKey] = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line">person[ageKey] = <span class="number">27</span>;</span><br><span class="line">person[jobKey] = <span class="string">&#x27;Software engineer&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// &#123; name: &#x27;Matt&#x27;, age: 27, job: &#x27;Software engineer&#x27; &#125;</span></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">const</span> nameKey = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> ageKey = <span class="string">&#x27;age&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> jobKey = <span class="string">&#x27;job&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    [nameKey]: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line">    [ageKey]: <span class="number">27</span>,</span><br><span class="line">    [jobKey]: <span class="string">&#x27;Software engineer&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person); <span class="comment">// &#123; name: &#x27;Matt&#x27;, age: 27, job: &#x27;Software engineer&#x27; &#125; </span></span><br></pre></td></tr></table></figure><h3 id="方法名简写">方法名简写</h3><p>在给对象定义方法时，通常都要写一个方法名、冒号，然后再引用一个匿名函数表达式。简写方法直接使用方法名和函数即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="title function_">sayName</span>(<span class="string">&#x27;Matt&#x27;</span>); <span class="comment">// My name is Matt</span></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="title function_">sayName</span>(<span class="params">name</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="title function_">sayName</span>(<span class="string">&#x27;Matt&#x27;</span>); <span class="comment">// My name is Matt</span></span><br></pre></td></tr></table></figure><h3 id="对象解构">对象解构</h3><p>使用与对象匹配的结构来实现对象属性赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Matt&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">27</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; name, job=<span class="string">&#x27;Software engineer&#x27;</span> &#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// Matt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(job); <span class="comment">// Software engineer</span></span><br></pre></td></tr></table></figure><h2 id="静态方法">静态方法</h2><h3 id="定义属性">定义属性</h3><ol><li><p><code>Object.defineProperty()</code>：直接在一个对象上定义一个新属性，或修改其现有属性，并返回此对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><ul><li>obj：要定义属性的对象</li><li>prop：要定义或修改的属性键</li><li>descriptor：要定义或修改的属性的描述符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&quot;Nicholas&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// &quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.defineProperties()</code>：直接在一个对象上定义或修改现有属性，并返回此对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj, props)</span><br></pre></td></tr></table></figure><ul><li>obj：要定义属性的对象</li><li>props：一个对象，其中每个键表示要定义或修改的属性的名称，每个值是描述该属性的对象。在 <code>props</code> 中的每个值必须是且只能是数据描述符或访问器描述符之一；不能同时为两者</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(book, &#123;</span><br><span class="line">    <span class="attr">year_</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">2017</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">edition</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">year</span>: &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">year_</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newValue &gt; <span class="number">2017</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">year_</span> = newValue;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">edition</span> += newValue - <span class="number">2017</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="读取属性特性">读取属性特性</h3><ol><li><p><code>Object.getOwnPropertyDescriptor()</code>：返回一个对象，该对象描述给定对象上特定属性（即直接存在于对象上而不在对象的原型链中的属性）的配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, prop)</span><br></pre></td></tr></table></figure><ul><li>obj：要查找其属性的对象</li><li>prop：要检索其描述的属性的名称</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(book, &#123;</span><br><span class="line">    <span class="attr">year_</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">2017</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">edition</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">year</span>: &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">year_</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newValue &gt; <span class="number">2017</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">year_</span> = newValue;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">edition</span> += newValue - <span class="number">2017</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">let</span> descriptor1 = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(book, <span class="string">&quot;year_&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor1.<span class="property">value</span>); <span class="comment">// 2017</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor1.<span class="property">configurable</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> descriptor1.<span class="property">get</span>); <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="keyword">let</span> descriptor2 = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(book, <span class="string">&quot;year&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor2.<span class="property">value</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor2.<span class="property">enumerable</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> descriptor2.<span class="property">get</span>); <span class="comment">// &quot;function&quot; </span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.getOwnPropertyDescriptors()</code>：返回给定对象的所有自有属性描述符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj)</span><br></pre></td></tr></table></figure><ul><li>obj：要获取其所有自有属性描述符的对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> book = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(book, &#123;</span><br><span class="line">    <span class="attr">year_</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">2017</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">edition</span>: &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">year</span>: &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">year_</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">newValue</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (newValue &gt; <span class="number">2017</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">year_</span> = newValue;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">edition</span> += newValue - <span class="number">2017</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(book));</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     &quot;year_&quot;: &#123;</span></span><br><span class="line"><span class="comment">//         &quot;value&quot;: 2017,</span></span><br><span class="line"><span class="comment">//             &quot;writable&quot;: false,</span></span><br><span class="line"><span class="comment">//                 &quot;enumerable&quot;: false,</span></span><br><span class="line"><span class="comment">//                     &quot;configurable&quot;: false</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">//     &quot;edition&quot;: &#123;</span></span><br><span class="line"><span class="comment">//         &quot;value&quot;: 1,</span></span><br><span class="line"><span class="comment">//             &quot;writable&quot;: false,</span></span><br><span class="line"><span class="comment">//                 &quot;enumerable&quot;: false,</span></span><br><span class="line"><span class="comment">//                     &quot;configurable&quot;: false</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">//     &quot;year&quot;: &#123;</span></span><br><span class="line"><span class="comment">//         &quot;enumerable&quot;: false,</span></span><br><span class="line"><span class="comment">//             &quot;configurable&quot;: false</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="合并对象">合并对象</h3><ol><li><p><code>Object.assign()</code>：将一个或者多个源对象中所有可枚举的自有属性复制到目标对象，并返回修改后的目标对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, ...sources)</span><br></pre></td></tr></table></figure><ul><li>target：需要应用源对象属性的目标对象，修改后将作为返回值</li><li>sources：一个或多个包含要应用的属性的源对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dest = &#123;&#125;;</span><br><span class="line">result = <span class="title class_">Object</span>.<span class="title function_">assign</span>(dest, &#123; <span class="attr">a</span>: <span class="string">&#x27;foo&#x27;</span> &#125;, &#123; <span class="attr">b</span>: <span class="string">&#x27;bar&#x27;</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// &#123; a: foo, b: bar &#125; </span></span><br></pre></td></tr></table></figure></li></ol><h3 id="对象相等判断">对象相等判断</h3><ol><li><p><code>Object.is()</code>：确定两个值是否为相同值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(value1, value2)</span><br></pre></td></tr></table></figure><ul><li>value1：要比较的第一个值</li><li>value2：要比较的第二个值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">1</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(-<span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(obj, &#123;&#125;)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="对象原型方法">对象原型方法</h3><ol><li><p><code>Object.getPrototypeOf()</code>：返回指定对象的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person) === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.setPrototypeOf()</code>：将一个指定对象的原型设置为另一个对象或<code>null</code>，这样会严重影响代码性能，推荐使用<code>Object.create()</code>方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person) === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> biped = &#123;</span><br><span class="line">    <span class="attr">numLegs</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;Matt&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(person, biped);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// Matt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">numLegs</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person) === biped); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.create()</code>：以一个现有对象作为原型，创建一个新对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> biped = &#123;</span><br><span class="line">    <span class="attr">numLegs</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person = <span class="title class_">Object</span>.<span class="title function_">create</span>(biped);</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// Matt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">numLegs</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person) === biped); <span class="comment">// true </span></span><br></pre></td></tr></table></figure></li></ol><h3 id="对象属性枚举">对象属性枚举</h3><ol><li><p><code>Object.hasOwn()</code>：确定对象自身属性中是否具有指定的属性，而不是继承自原型链的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(obj, <span class="string">&#x27;name&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">hasOwn</span>(obj, <span class="string">&#x27;toString&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.getOwnPropertyNames()</code>：返回一个数组，其包含给定对象中所有自有属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">29</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">job</span> = <span class="string">&quot;Software Engineer&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(keys); <span class="comment">// &quot;[constructor,name,age,job,sayName]&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.getOwnPropertySymbols()</code>：返回一个包含给定对象所有自有 Symbol 属性的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> k1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;k1&#x27;</span>),</span><br><span class="line">    k2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;k2&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    [k1]: <span class="string">&#x27;k1&#x27;</span>,</span><br><span class="line">    [k2]: <span class="string">&#x27;k2&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(o)); <span class="comment">// [Symbol(k1), Symbol(k2)] </span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.keys()</code>：返回一个由给定对象自身的可枚举的实例属性名组成的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">29</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">job</span> = <span class="string">&quot;Software Engineer&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(keys); <span class="comment">// &quot;name,age,job,sayName&quot;</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&quot;Rob&quot;</span>;</span><br><span class="line">p1.<span class="property">age</span> = <span class="number">31</span>;</span><br><span class="line"><span class="keyword">let</span> p1keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(p1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1keys); <span class="comment">// &quot;[name,age]&quot; </span></span><br></pre></td></tr></table></figure></li></ol><h3 id="对象迭代">对象迭代</h3><ol><li><p><code>Object.values()</code>：返回一个给定对象的自有可枚举字符串键属性值组成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">    <span class="attr">baz</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">qux</span>: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(o)); <span class="comment">// [&quot;bar&quot;, 1, &#123;&#125;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.entries()</code>：返回一个数组，包含给定对象自有的可枚举字符串键属性的键值对</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">    <span class="attr">baz</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">qux</span>: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(o)); <span class="comment">// [[&quot;foo&quot;, &quot;bar&quot;], [&quot;baz&quot;, 1], [&quot;qux&quot;, &#123;&#125;]] </span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.fromEntries()</code>：将键值对列表转换为对象。它是 <code>Object.entries()</code> 的逆操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> entries = [</span><br><span class="line">    [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;John&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;age&#x27;</span>, <span class="number">30</span>]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(entries);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; name: &#x27;John&#x27;, age: 30 &#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="对象冻结">对象冻结</h3><ol><li><p><code>Object.freeze()</code> ：冻结一个对象，使其不能被修改。冻结对象后，不能添加、删除或修改其属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">31</span>; <span class="comment">// 无效操作，属性不会被修改</span></span><br><span class="line">obj.<span class="property">city</span> = <span class="string">&#x27;New York&#x27;</span>; <span class="comment">// 无效操作，不能添加新属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; name: &#x27;John&#x27;, age: 30 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.isFrozen()</code>：判断一个对象是否被冻结</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(obj)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isFrozen</span>(obj)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="对象拓展">对象拓展</h3><ol><li><p><code>Object.isExtensible()</code>：判断一个对象是否可拓展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(obj)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(obj)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.preventExtensions()</code>：阻止对象扩展，即不能向对象添加新属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(obj);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">30</span>; <span class="comment">// 无效操作，不能添加新属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; name: &#x27;John&#x27; &#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="对象密封">对象密封</h3><ol><li><p><code>Object.isSealed()</code>：判断一个对象是否被密封（即不可拓展，所有自由属性不可配置）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(obj)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isSealed</span>(obj)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.seal()</code>：密封一个对象，阻止添加或删除属性，但可以修改现有属性的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(obj);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">31</span>; <span class="comment">// 有效操作，属性值被修改</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span>; <span class="comment">// 无效操作，属性不能被删除</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; name: &#x27;John&#x27;, age: 31 &#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="对象分组">对象分组</h3><ol><li><p><code>Object.groupBy()</code>：根据提供的回调函数返回的字符串值对给定可迭代对象中的元素进行分组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> people = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> groupedByAge = <span class="title class_">Object</span>.<span class="title function_">groupBy</span>(people, <span class="function"><span class="params">person</span> =&gt;</span> person.<span class="property">age</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(groupedByAge);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  21: [&#123; name: &#x27;Alice&#x27;, age: 21 &#125;, &#123; name: &#x27;Bob&#x27;, age: 21 &#125;],</span></span><br><span class="line"><span class="comment">  23: [&#123; name: &#x27;Charlie&#x27;, age: 23 &#125;]</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><ol><li><p><code>isPrototypeOf()</code>：用于检查一个对象是否存在于另一个对象的原型链中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(person)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>hasOwnProperty()</code>：返回一个布尔值，表示对象自有属性（而不是继承来的属性）中是否具有指定的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">29</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">job</span> = <span class="string">&quot;Software Engineer&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>); <span class="comment">// &quot;Greg&quot;，来自实例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">name</span>); <span class="comment">// &quot;Nicholas&quot;，来自原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="keyword">delete</span> person1.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>); <span class="comment">// &quot;Nicholas&quot;，来自原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// false </span></span><br></pre></td></tr></table></figure></li><li><p>``propertyIsEnumerable()`：返回一个布尔值，表示指定的属性是否是对象的可枚举实例属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;Nicholas&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">29</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">job</span> = <span class="string">&quot;Software Engineer&quot;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&quot;Greg&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;name&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">propertyIsEnumerable</span>(<span class="string">&#x27;age&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>toLocaleString()</code>：用于返回对象的本地化字符串表示形式，该方法可以被重写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;John&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Doe&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">    <span class="title function_">toLocaleString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="variable language_">this</span>.lastName&#125;</span>, Age: <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">toLocaleString</span>()); <span class="comment">// &quot;John Doe, Age: 30&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>valueOf()</code>：用于返回指定对象的原始值，该方法可以被重写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;John&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">valueOf</span>() === obj); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">valueOf</span>()); <span class="comment">// &#123; name: &#x27;John&#x27;, age: 30 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">valueOf</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;John&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(john.<span class="title function_">valueOf</span>()); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure></li><li><p><code>toString()</code>：用于返回对象的字符串表示，该方法可以被重写。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">toString</span>()); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">toString</span>()); <span class="comment">// &quot;1,2,3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`Person: <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, Age: <span class="subst">$&#123;<span class="variable language_">this</span>.age&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;John&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(john.<span class="title function_">toString</span>()); <span class="comment">// &quot;Person: John, Age: 30&quot;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(23)-生成器</title>
    <link href="/2024/08/05/JS%E5%AD%A6%E4%B9%A0(23)-%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/2024/08/05/JS%E5%AD%A6%E4%B9%A0(23)-%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>生成器是 JavaScript 中一种特殊的函数，可以用来控制函数的执行过程。</p><span id="more"></span><h1>生成器</h1><h2 id="生成器函数">生成器函数</h2><p>生成器的形式是一个函数，函数名称前面加一个星号（*）表示它是一个生成器。只要是可以定义函数的地方，就可以定义生成器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器函数声明</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 生成器函数表达式</span></span><br><span class="line"><span class="keyword">let</span> generatorFn = <span class="keyword">function</span>* () &#123;&#125;</span><br><span class="line"><span class="comment">// 作为对象字面量方法的生成器函数</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line"> * <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 作为类实例方法的生成器函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line"> * <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 作为类静态方法的生成器函数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span> &#123;</span><br><span class="line"> <span class="keyword">static</span> * <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="生成器对象">生成器对象</h2><p>调用生成器函数会产生一个<strong>生成器对象</strong>。生成器对象一开始处于暂停执行（suspended）的状态。与迭代器相似，生成器对象也实现了 <code>Iterator</code> 接口，因此具有<code>next()</code>方法。</p><h3 id="next-方法">next()方法</h3><p>调用这<code>next()</code>方法会让生成器开始或恢复执行。<code>next()</code>方法的返回值类似于迭代器，有一个 done 属性和一个 value 属性。函数体为空的生成器函数中间不会停留，调用一次<code>next()</code>就会让生成器到达 done: true 状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = <span class="title function_">generatorFn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generatorObject); <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generatorObject.<span class="title function_">next</span>()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure><p>value 属性是生成器函数的返回值，默认值为 undefined，可以通过生成器函数的返回值指定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = <span class="title function_">generatorFn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generatorObject); <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generatorObject.<span class="title function_">next</span>()); <span class="comment">// &#123; done: true, value: &#x27;foo&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="yield-关键字">yield 关键字</h3><p>yield 关键字可以让生成器停止和开始执行。生成器函数在遇到 yield 关键字之前会正常执行。遇到这个关键字后，执行会停止，函数作用域的状态会被保留。停止执行的生成器函数只能通过在生成器对象上调用 next()方法来恢复执行。通过 yield 关键字退出的生成器函数会处在 done: false 状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;baz&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = <span class="title function_">generatorFn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generatorObject.<span class="title function_">next</span>()); <span class="comment">// &#123; done: false, value: &#x27;foo&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generatorObject.<span class="title function_">next</span>()); <span class="comment">// &#123; done: false, value: &#x27;bar&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generatorObject.<span class="title function_">next</span>()); <span class="comment">// &#123; done: true, value: &#x27;baz&#x27; &#125; </span></span><br></pre></td></tr></table></figure><h3 id="yield">yield*</h3><p>使用星号增强 yield 的行为，让它能够迭代一个可迭代对象，从而一次产出一个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function* generatorFn() &#123;</span></span><br><span class="line"><span class="comment">//     for (const x of [1, 2, 3]) &#123;</span></span><br><span class="line"><span class="comment">//         yield x;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等价于 */</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span>* [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generatorObject = <span class="title function_">generatorFn</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> <span class="title function_">generatorFn</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>yield* 也可以委托给其他的生成器对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">innerGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">outerGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">yield</span>* <span class="title function_">innerGenerator</span>();</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = <span class="title function_">outerGenerator</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gen.<span class="title function_">next</span>()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><h2 id="终止生成器">终止生成器</h2><p>与迭代器类似，生成器也支持提前终止，。一个实现 <code>Iterator</code> 接口的对象一定有 <code>next()</code> 方法，还有一个可选的 <code>return()</code>方法用于提前终止迭代器。生成器对象除了有这两个方法，还有第三个方法：<code>throw()</code>。</p><ol><li><p><strong>return()</strong></p><p><code>return()</code>方法会强制生成器进入关闭状态。提供给<code>return()</code>方法的值，就是终止迭代器对象的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">        <span class="keyword">yield</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">generatorFn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g); <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="keyword">return</span>(<span class="number">4</span>)); <span class="comment">// &#123; done: true, value: 4 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g); <span class="comment">// generatorFn &#123;&lt;closed&gt;&#125; </span></span><br></pre></td></tr></table></figure><p>所有生成器对象都有<code>return()</code>方法，只要通过它进入关闭状态，就无法恢复了。 后续调用<code>next()</code>会显示 done: true 状态，而提供的任何返回值都不会被存储或传播</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">        <span class="keyword">yield</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">generatorFn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>()); <span class="comment">// &#123; done: false, value: 1 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="keyword">return</span>(<span class="number">4</span>)); <span class="comment">// &#123; done: true, value: 4 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>()); <span class="comment">// &#123; done: true, value: undefined &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>throw()</strong></p><p><code>throw()</code>方法会在暂停的时候将一个提供的错误注入到生成器对象中。如果错误未被处理，生成器就会关闭</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">        <span class="keyword">yield</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">generatorFn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g); <span class="comment">// generatorFn &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    g.<span class="keyword">throw</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e); <span class="comment">// foo</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g); <span class="comment">// generatorFn &#123;&lt;closed&gt;&#125; </span></span><br></pre></td></tr></table></figure><p>如果生成器函数内部处理了这个错误，那么生成器就不会关闭，而且还可以恢复执行。错误处理会跳过对应的 yield</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> x <span class="keyword">of</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">yield</span> x;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> g = <span class="title function_">generatorFn</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>()); <span class="comment">// &#123; done: false, value: 1&#125;</span></span><br><span class="line">g.<span class="keyword">throw</span>(<span class="string">&#x27;foo&#x27;</span>); <span class="comment">// foo</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g.<span class="title function_">next</span>()); <span class="comment">// &#123; done: false, value: 3&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="异步生成器">异步生成器</h2><p>异步生成器用于处理异步数据流。与普通生成器不同，异步生成器函数使用 <code>async function*</code> 语法定义，并且可以在函数体内使用 <code>await</code> 来等待异步操作的完成。异步生成器返回一个异步迭代器对象，该对象的 <code>next</code> 方法返回一个 <code>Promise</code>，解析为一个迭代结果对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">asyncGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">1000</span>));</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">2</span>), <span class="number">1000</span>));</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">3</span>), <span class="number">1000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">iterateAsyncGen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> value <span class="keyword">of</span> <span class="title function_">asyncGenerator</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">iterateAsyncGen</span>();</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// 1 (在1秒钟后)</span></span><br><span class="line"><span class="comment">// 2 (在2秒钟后)</span></span><br><span class="line"><span class="comment">// 3 (在3秒钟后)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(22)-迭代器</title>
    <link href="/2024/08/04/JS%E5%AD%A6%E4%B9%A0(22)-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <url>/2024/08/04/JS%E5%AD%A6%E4%B9%A0(22)-%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中有很多方法可以遍历数据结构。例如，使用 <code>for</code> 循环或使用 <code>while</code> 循环。迭代器具有类似的功能，但有显着差异。</p><span id="more"></span><h1>迭代器</h1><p>迭代器是给不同的数据结构提供统一的遍历访问机制，这种机制可以使得数据结构里的成员按照顺序依次被遍历访问</p><h2 id="迭代器协议">迭代器协议</h2><p>迭代器协议用于定义对象如何逐步迭代其值。实现了迭代器协议的对象被称为迭代器对象。迭代器协议规定了迭代器对象必须具有一个 <code>next</code> 方法，该方法返回一个包含 <code>value</code> 和 <code>done</code> 属性的对象。</p><p>要实现迭代器协议，一个对象必须实现以下要求：</p><ol><li><code>next</code> 方法：<code>next</code> 方法是一个无参数或接受一个参数的方法，它返回一个具有两个属性的对象：<ul><li><code>value</code>：迭代器返回的当前元素的值。</li><li><code>done</code>：一个布尔值，指示迭代器是否已经完成遍历。</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">limit</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">limit</span> = limit;</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">1</span>,</span><br><span class="line">            limit = <span class="variable language_">this</span>.<span class="property">limit</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (count &lt;= limit) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: count++ &#125;;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">return</span>() &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Exiting early&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> counter1 = <span class="keyword">new</span> <span class="title class_">Counter</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> counter1) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// Exiting early</span></span><br></pre></td></tr></table></figure><h2 id="可迭代协议">可迭代协议</h2><p>可迭代协议规定了对象如何成为可迭代对象。实现了可迭代协议的对象可以被 <code>for...of</code> 循环、扩展运算符 (<code>...</code>)、解构赋值等语法结构使用。要实现可迭代协议，一个对象必须实现<code>iterator</code>方法，该方法使用 <code>Symbol.iterator</code> 作为键。这个方法需要返回一个迭代器对象。迭代器对象本身必须实现迭代器协议。</p><ol><li><strong>对象必须实现 <code>Symbol.iterator</code> 方法</strong>：<code>Symbol.iterator</code> 是一个无参数的方法，返回一个迭代器对象。</li><li><strong>迭代器对象必须实现迭代器协议</strong>：迭代器对象必须具有一个 <code>next</code> 方法，<code>next</code> 方法返回一个包含 <code>value</code> 和 <code>done</code> 属性的对象。</li></ol><p>在 JavaScript 中很多内置类型都实现了 <code>Iterator</code> 方法：</p><ol><li>String</li><li>Array</li><li>Map</li><li>Set</li><li>arguments 对象</li><li>NodeList 等DOM集合类型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="comment">// 这两种类型没有实现迭代器工厂函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>).<span class="title function_">set</span>(<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>).<span class="title function_">set</span>(<span class="string">&#x27;c&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>().<span class="title function_">add</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">add</span>(<span class="string">&#x27;b&#x27;</span>).<span class="title function_">add</span>(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> els = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="comment">// 这些类型都实现了迭代器工厂函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]); <span class="comment">// ƒ [Symbol.iterator]() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(els[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]); <span class="comment">// f values() &#123; [native code] &#125;</span></span><br><span class="line"><span class="comment">// 调用这个工厂函数会生成一个迭代器</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()); <span class="comment">// StringIterator &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()); <span class="comment">// ArrayIterator &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()); <span class="comment">// MapIterator &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()); <span class="comment">// SetIterator &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(els[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()); <span class="comment">// ArrayIterator &#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="自定义迭代器">自定义迭代器</h2><p>任何实现 Iterator 接口的对象都可以作为迭代器使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RangeIterator</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">start, end</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">start</span> = start;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">end</span> = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">start</span>;</span><br><span class="line">        <span class="keyword">const</span> end = <span class="variable language_">this</span>.<span class="property">end</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (current &lt;= end) &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">value</span>: current++, <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rangeIterator = <span class="keyword">new</span> <span class="title class_">RangeIterator</span>(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rangeIterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rangeIterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rangeIterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rangeIterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rangeIterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rangeIterator.<span class="title function_">next</span>()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><h2 id="终止迭代器">终止迭代器</h2><p>迭代器使用<code>return()</code>方法执行提前终止迭代的逻辑，<code>return()</code>方法必须返回一个有效的可迭代结果对象，可以只返回{ done: true }。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异步迭代器">异步迭代器</h2><p>异步迭代器与普通迭代器类似，允许以异步的方式逐步访问集合中的元素，异步迭代器的 <code>next</code> 方法返回的是一个 <code>Promise</code> 对象，而不是直接返回一个结果对象。要实现异步迭代器协议，一个对象必须实现<code>asyncIterator</code> 方法，该方法使用 <code>Symbol.asyncIterator</code> 作为键。这个方法需要返回一个实现了异步迭代器协议的对象，即该对象具有一个 <code>next</code> 方法，该方法返回一个 <code>Promise</code>，<code>Promise</code> 解析为一个具有 <code>value</code> 和 <code>done</code> 属性的对象。</p><ol><li><strong>对象必须实现 <code>Symbol.asyncIterator</code> 方法</strong>：<code>Symbol.asyncIterator</code> 是一个无参数的方法，返回一个异步迭代器对象。</li><li><strong>异步迭代器对象必须实现异步迭代器协议</strong>：异步迭代器对象必须具有一个 <code>next</code> 方法，<code>next</code> 方法返回一个 <code>Promise</code> 对象，该 <code>Promise</code> 对象解析为一个包含 <code>value</code> 和 <code>done</code> 属性的对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncIterable = &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">asyncIterator</span>]() &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> data = <span class="variable language_">this</span>.<span class="property">data</span>;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="keyword">async</span> <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (index &lt; data.<span class="property">length</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="title function_">resolve</span>(&#123; <span class="attr">value</span>: data[index++], <span class="attr">done</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">                        &#125;, <span class="number">1000</span>); <span class="comment">// 模拟1秒钟的延迟</span></span><br><span class="line">                &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(&#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">iterateAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> value <span class="keyword">of</span> asyncIterable) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">iterateAsync</span>();</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(21)-Set</title>
    <link href="/2024/08/03/JS%E5%AD%A6%E4%B9%A0(21)-Set/"/>
    <url>/2024/08/03/JS%E5%AD%A6%E4%B9%A0(21)-Set/</url>
    
    <content type="html"><![CDATA[<p><code>Set</code> 是一种集合类型，可以存储任何类型的值，无论是原始值还是对象引用。</p><span id="more"></span><h1>Set</h1><p><code>Set</code> 对象是值的合集。<code>Set</code> 中的元素<strong>只会出现一次</strong>，即集合中的元素是唯一的，可以按照插入顺序迭代集合中的元素。</p><h2 id="构造函数">构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Set</span>(iterable)</span><br></pre></td></tr></table></figure><ol><li><strong>iterable</strong>（可选）：如果传入一个可迭代对象，它的所有元素将不重复地被添加到新的 <code>Set</code> 中。如果不指定此参数或其值为 <code>null</code>，则新的 <code>Set</code> 为空。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br></pre></td></tr></table></figure><h2 id="实例属性">实例属性</h2><ol><li><p><strong>size</strong>：返回 <code>Map</code> 中元素的数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet.<span class="property">size</span>); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><ol><li><p><code>add()</code>：向 <code>Set</code> 中添加一个新元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(5) &#123; 1, 2, 3, 4, 5 &#125;</span></span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(6) &#123; 1, 2, 3, 4, 5, 6 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>has()</code>：返回一个布尔值，检查 <code>Set</code> 中是否存在某个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet.<span class="title function_">has</span>(<span class="number">3</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet.<span class="title function_">has</span>(<span class="number">6</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>delete()</code>：从 <code>Set</code> 中删除一个元素，如果该值在集合中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(5) &#123; 1, 2, 3, 4, 5 &#125;</span></span><br><span class="line">mySet.<span class="title function_">delete</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(5) &#123; 1, 2, 3, 5 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>clear()</code>：移除该 <code>Set</code> 中的所有元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(5) &#123; 1, 2, 3, 4, 5 &#125;</span></span><br><span class="line">mySet.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySet); <span class="comment">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>entries()</code>：返回一个新的迭代器对象，该对象包含了此 Set 中的每个元素的 <code>[value, value]</code> 数组，按插入顺序排列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySet = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="number">42</span>);</span><br><span class="line">mySet.<span class="title function_">add</span>(<span class="string">&#x27;forty two&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 entries 迭代器</span></span><br><span class="line"><span class="keyword">let</span> entries = mySet.<span class="title function_">entries</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of 迭代 entries</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> entry <span class="keyword">of</span> entries) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(entry);</span><br><span class="line">    <span class="comment">// [42, 42]</span></span><br><span class="line"><span class="comment">// [&#x27;forty two&#x27;, &#x27;forty two&#x27;]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>forEach()</code>：按插入顺序对该 <code>Set</code> 中的每个值执行一次提供的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">forEach</span>(callbackFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callbackFn</code>：为 Set 中每个元素执行的函数。使用以下参数调用该函数<ul><li><code>value</code>：每个迭代的值</li><li><code>key</code>：每个迭代的键，与value相同</li><li><code>set</code>：正在迭代的 Set</li></ul></li><li><code>thisArg</code>：执行 <code>callbackFn</code> 时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;val1&quot;</span>, <span class="string">&quot;val2&quot;</span>, <span class="string">&quot;val3&quot;</span>]); </span><br><span class="line"></span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">val, dupVal</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;val&#125;</span> -&gt; <span class="subst">$&#123;dupVal&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// val1 -&gt; val1</span></span><br><span class="line"><span class="comment">// val2 -&gt; val2</span></span><br><span class="line"><span class="comment">// val3 -&gt; val3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>keys()</code>：是<code>values()</code>方法的别名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> set.<span class="title function_">keys</span>()) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>values()</code>：返回一个新的迭代器对象，该对象包含 <code>Set</code> 对象中每个元素的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> set.<span class="title function_">values</span>()) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>union()</code>：并集，返回一个新集合，该集合是两个集合中所有的唯一项元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> evens = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]);</span><br><span class="line"><span class="keyword">const</span> squares = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evens.<span class="title function_">union</span>(squares)); <span class="comment">// Set(6) &#123; 2, 4, 6, 8, 1, 9 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>intersection()</code>：交集，返回一个新集合，该集合是两个集合都存在的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> odds = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="keyword">const</span> squares = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(odds.<span class="title function_">intersection</span>(squares)); <span class="comment">// Set(2) &#123; 1, 9 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>difference()</code>：差集，返回一个新集合，返回集合A中不在集合B中的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> odds = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="keyword">const</span> squares = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(odds.<span class="title function_">difference</span>(squares)); <span class="comment">// Set(3) &#123; 3, 5, 7 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>symmetricDifference()</code>：返回一个新集合，返回只在集合A或集合B中的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> evens = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]);</span><br><span class="line"><span class="keyword">const</span> squares = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evens.<span class="title function_">symmetricDifference</span>(squares)); <span class="comment">// Set(5) &#123; 2, 6, 8, 1, 9 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>isSubsetOf()</code>：检查一个集合的所有元素是否都在另一个集合中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fours = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>]);</span><br><span class="line"><span class="keyword">const</span> evens = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fours.<span class="title function_">isSubsetOf</span>(evens)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>isSupersetOf()</code>：检查一个集合是否包含另一个集合中的所有元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> evens = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>, <span class="number">18</span>]);</span><br><span class="line"><span class="keyword">const</span> fours = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">16</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evens.<span class="title function_">isSupersetOf</span>(fours)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>isDisjointFrom()</code>：检查两个集合是否没有任何共同的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> primes = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>]);</span><br><span class="line"><span class="keyword">const</span> squares = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(primes.<span class="title function_">isDisjointFrom</span>(squares)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h1>WeakSet</h1><p><code>WeakSet</code> 是 JavaScript 中一种集合类型。<code>WeakSet</code>是 Set 的“兄弟”类型，其 API 也是 Map 的子集。</p><h2 id="特性">特性</h2><ol><li><p><code>WeakSet</code> 的元素只能是对象或 Symbol，不能是原始类型的值</p></li><li><p><code>WeakSet</code> 中对象的引用为弱引用。如果没有其他的对 <code>WeakSet</code> 中对象的引用存在，那么这些对象会被垃圾回收</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> val1 = &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,val2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;,val3 = &#123; <span class="attr">id</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> ws1 = <span class="keyword">new</span> <span class="title class_">WeakSet</span>([val1, val2, val3]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws1.<span class="title function_">has</span>(val1)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws1.<span class="title function_">has</span>(val2)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ws1.<span class="title function_">has</span>(val3)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ws2 = <span class="keyword">new</span> <span class="title class_">WeakSet</span>([val1, <span class="string">&quot;BADVAL&quot;</span>, val3]);</span><br><span class="line"><span class="comment">// TypeError: Invalid value used in WeakSet </span></span><br></pre></td></tr></table></figure></li><li><p>因为 <code>WeakSet</code> 中的值有可能被垃圾回收，所以<code>WeakSet</code>不可迭代</p></li></ol><h2 id="构造函数-2">构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">WeakSet</span>(iterable)</span><br></pre></td></tr></table></figure><ol><li><strong>iterable</strong>（可选）：如果传入了一个可迭代对象，这个对象的所有元素都会被添加到新的 <code>WeakSet</code> 对象中。<code>null</code> 会被视为 <code>undefined</code>。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> weakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>([obj1, obj2]);</span><br></pre></td></tr></table></figure><h2 id="实例方法-2">实例方法</h2><ol><li><p><code>add()</code>：向 <code>WeakSet</code> 中添加一个新对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> weakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>([obj1, obj2]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">name</span>: <span class="string">&quot;Charlie&quot;</span> &#125;;</span><br><span class="line">weakSet.<span class="title function_">add</span>(obj3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet.<span class="title function_">has</span>(obj3)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>has()</code>：检查 <code>WeakSet</code> 中是否存在某个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> weakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>([obj1, obj2]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet.<span class="title function_">has</span>(obj1)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet.<span class="title function_">has</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;)); <span class="comment">// false，不同的对象引用</span></span><br></pre></td></tr></table></figure></li><li><p><code>delete()</code>：从 <code>WeakSet</code> 中删除一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> weakSet = <span class="keyword">new</span> <span class="title class_">WeakSet</span>([obj1, obj2]);</span><br><span class="line">weakSet.<span class="title function_">delete</span>(obj2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakSet.<span class="title function_">has</span>(obj2)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(20)-Map</title>
    <link href="/2024/08/02/JS%E5%AD%A6%E4%B9%A0(20)-Map/"/>
    <url>/2024/08/02/JS%E5%AD%A6%E4%B9%A0(20)-Map/</url>
    
    <content type="html"><![CDATA[<p><code>Map</code> 是一种用于存储键值对的数据结构，类似于对象（Object），但具有一些显著的区别和优势。</p><span id="more"></span><h1>Map</h1><p><code>Map</code> 对象是键值对的集合。<code>Map</code> 中的一个键<strong>只能出现一次</strong>；键在 <code>Map</code> 的集合中是独一无二的。<code>Map</code> 对象按键值对迭代，在每次迭代后会返回一个形式为 <code>[key, value]</code> 的数组。迭代按插入顺序进行。</p><h2 id="构造函数">构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Map</span>(iterable)</span><br></pre></td></tr></table></figure><ol><li><strong>iterable</strong>（可选）：一个元素是键值对的数组或其他可迭代对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val3&quot;</span>]</span><br><span class="line">]); </span><br></pre></td></tr></table></figure><h2 id="实例属性">实例属性</h2><ol><li><p><strong>size</strong>：返回 <code>Map</code> 中元素的数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;val1&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;val2&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;key3&quot;</span>, <span class="string">&quot;val3&quot;</span>]</span><br><span class="line">]); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myMap.<span class="property">size</span>); <span class="comment">// 输出: 3</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><ol><li><p><code>set()</code>：向 <code>Map</code> 对象添加或更新一个指定的键值对</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 0</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;Matt&quot;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;lastName&quot;</span>, <span class="string">&quot;Frisbie&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// Matt</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 2 </span></span><br></pre></td></tr></table></figure></li><li><p><code>get()</code>：返回该 <code>Map</code> 中的指定元素，如果键相关联的值是一个对象，那么将获得该对象的引用，对该对象所做的任何更改都会有效地在 <code>Map</code> 对象中修改它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;Matt&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// Matt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>: <span class="string">&#x27;zzstriker&#x27;</span>&#125;</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;bar&#x27;</span>, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;bar&#x27;</span>)); <span class="comment">// zzstriker</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;bar&#x27;</span>)) <span class="comment">// test</span></span><br></pre></td></tr></table></figure></li><li><p><code>has()</code>：返回一个布尔值，指示具有指定键的元素是否存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;Matt&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>delete()</code>：从该 <code>Map</code> 中删除指定键的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;Matt&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">map.<span class="title function_">delete</span>(<span class="string">&quot;firstName&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&quot;firstName&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>clear()</code>：移除该 <code>Map</code> 中的所有元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;Matt&quot;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&quot;lastName&quot;</span>, <span class="string">&quot;Frisbie&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 2</span></span><br><span class="line">map.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure></li><li><p><code>entries()</code>：返回一个新的 Map 迭代器对象，该对象包含了此 Map 中的每个元素的 <code>[key, value]</code> 对，按插入顺序排列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;occupation&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 entries 迭代器</span></span><br><span class="line"><span class="keyword">let</span> entries = map.<span class="title function_">entries</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of 迭代 entries</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> entries) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Key: <span class="subst">$&#123;key&#125;</span>, Value: <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">    <span class="comment">// Key: name, Value: Alice</span></span><br><span class="line"><span class="comment">// Key: age, Value: 30</span></span><br><span class="line"><span class="comment">// Key: occupation, Value: Engineer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>forEach()</code>：按插入顺序对该 <code>Map</code> 中的每个键/值对执行一次提供的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">forEach</span>(callbackFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callbackFn</code>：为 map 中每个元素执行的函数。使用以下参数调用该函数<ul><li><code>value</code>：每个迭代的值</li><li><code>key</code>：每个迭代的键</li><li><code>map</code>：正在迭代的 Map</li></ul></li><li><code>thisArg</code>：执行 <code>callbackFn</code> 时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">stringMap.<span class="title function_">set</span>(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">stringMap.<span class="title function_">set</span>(<span class="string">&#x27;second&#x27;</span>, <span class="string">&#x27;World&#x27;</span>);</span><br><span class="line">stringMap.<span class="title function_">set</span>(<span class="string">&#x27;third&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 forEach 方法计算并输出每个字符串的长度</span></span><br><span class="line">stringMap.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`The length of the string at key &quot;<span class="subst">$&#123;key&#125;</span>&quot; is <span class="subst">$&#123;value.length&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// The length of the string at key &quot;first&quot; is 5</span></span><br><span class="line"><span class="comment">// The length of the string at key &quot;second&quot; is 5</span></span><br><span class="line"><span class="comment">// The length of the string at key &quot;third&quot; is 10</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>keys()</code>：返回一个新的 <code>Map</code> 迭代器对象，该对象包含了此 Map 中的每个元素的键，按插入顺序排列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Map</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;occupation&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 keys 迭代器</span></span><br><span class="line"><span class="keyword">let</span> keys = map.<span class="title function_">keys</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of 迭代 keys</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">    <span class="comment">// name</span></span><br><span class="line"><span class="comment">// age</span></span><br><span class="line"><span class="comment">// occupation</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>values()</code>：返回一个新的 <code>Map</code> 迭代器对象，该对象包含了此 Map 中的每个元素的值，按插入顺序排列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Map</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Alice&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;age&#x27;</span>, <span class="number">30</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;occupation&#x27;</span>, <span class="string">&#x27;Engineer&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 values 迭代器</span></span><br><span class="line"><span class="keyword">let</span> values = map.<span class="title function_">values</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 for...of 迭代 values</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> values) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    <span class="comment">// Alice</span></span><br><span class="line"><span class="comment">// 30</span></span><br><span class="line"><span class="comment">// Engineer</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Map和Object对比">Map和Object对比</h2><table><thead><tr><th></th><th>Map</th><th>Object</th></tr></thead><tbody><tr><td>默认键</td><td>Map 默认不包含任何键，只显式存入键值对</td><td>Object 有原型，包含默认的键，原型键名可能会与自己的键名冲突</td></tr><tr><td>键的类型</td><td>Map 的键可以为任何类型的值</td><td>Object 的键必须为 String 或 Symbol类型</td></tr><tr><td>键的顺序</td><td>Map 会维护键值对的插入顺序，可以根据插入顺序执行迭代操作</td><td>普通的 Object 的键是有序的，但情况并非总是如此，并且其排序比较复杂的</td></tr><tr><td>计算大小</td><td>Map 可以通过 size 属性获取 Map 的大小</td><td>Object 通常获取 Object.keys() 返回的数组长度来计算大小</td></tr><tr><td>操作性能</td><td>在涉及频繁添加和删除键值对的场景中表现更好。</td><td>未针对频繁添加和删除键值对进行优化。</td></tr></tbody></table><h1>WeakMap</h1><p><code>WeakMap</code> 是 JavaScript 中一种专门用于存储对象键值对的集合。WeakMap 是 Map 的“兄弟”类型，其 API 也是 Map 的子集。</p><h2 id="特性">特性</h2><ol><li><p>键必须是对象或 Symbol，值可以是任意的数据类型</p></li><li><p>如果键中的对象只被 <code>WeakMap</code>引用，没有其他引用，那么这个对象会被垃圾回收，只要键没有被垃圾回收，键值对就会存在于<code>WeakMap</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line">weakMap.<span class="title function_">set</span>(&#123;&#125;, <span class="string">&quot;val&quot;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">has</span>(&#123;&#125;));   <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> container = &#123;</span><br><span class="line"> <span class="attr">key</span>: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">weakMap.<span class="title function_">set</span>(container.<span class="property">key</span>, <span class="string">&quot;val&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">has</span>(container.<span class="property">key</span>));   <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure></li><li><p>因为 <code>WeakMap</code> 中的键值对有可能被垃圾回收，所以<code>WeakMap</code>不可迭代</p></li></ol><h2 id="构造函数-2">构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">WeakMap</span>(iterable)</span><br></pre></td></tr></table></figure><ol><li><strong>iterable</strong>（可选）：一个元素是键值对的数组或其他可迭代对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key1 = &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;, key2 = &#123;<span class="attr">id</span>: <span class="number">2</span>&#125;, key3 = &#123;<span class="attr">id</span>: <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([</span><br><span class="line">    [key1, <span class="string">&quot;val1&quot;</span>],</span><br><span class="line">    [key2, <span class="string">&quot;val2&quot;</span>],</span><br><span class="line">    [key3, <span class="string">&quot;val3&quot;</span>]</span><br><span class="line">]); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">get</span>(key1)); <span class="comment">// val1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">get</span>(key2)); <span class="comment">// val2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">get</span>(key3)); <span class="comment">// val3</span></span><br></pre></td></tr></table></figure><h2 id="实例方法-2">实例方法</h2><ol><li><p><code>set()</code>：向 <code>WeakMap</code> 对象添加或更新一个指定的键值对</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;;</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj1, <span class="string">&#x27;Object 1&#x27;</span>);</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj2, <span class="string">&#x27;Object 2&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>get()</code>：返回该 <code>WeakMap</code>中的指定元素，如果找不到该键，则返回 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;;</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj1, <span class="string">&#x27;Object 1&#x27;</span>);</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj2, <span class="string">&#x27;Object 2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">get</span>(obj1)); <span class="comment">// 输出: &#x27;Object 1&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">get</span>(obj2)); <span class="comment">// 输出: &#x27;Object 2&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><code>has()</code>：返回一个布尔值，指示具有指定键的元素是否存在</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;;</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj1, <span class="string">&#x27;Object 1&#x27;</span>);</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj2, <span class="string">&#x27;Object 2&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">has</span>(obj1)); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">has</span>(&#123;&#125;));   <span class="comment">// 输出: false (不同的对象引用)</span></span><br></pre></td></tr></table></figure></li><li><p><code>delete()</code>：从该 <code>WeakMap</code> 中删除指定键的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> weakMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;&#125;;</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj1, <span class="string">&#x27;Object 1&#x27;</span>);</span><br><span class="line">weakMap.<span class="title function_">set</span>(obj2, <span class="string">&#x27;Object 2&#x27;</span>);</span><br><span class="line">weakMap.<span class="title function_">delete</span>(obj1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(weakMap.<span class="title function_">has</span>(obj1)); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(19)-结构化数据</title>
    <link href="/2024/08/01/JS%E5%AD%A6%E4%B9%A0(19)-%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/"/>
    <url>/2024/08/01/JS%E5%AD%A6%E4%B9%A0(19)-%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>ArrayBuffer 和 SharedArrayBuffer 对象表示一段二进制数据，用来模拟内存里面的数据。通过这个对象，JavaScript 可以读写二进制数据。</p><span id="more"></span><h1>结构化数据</h1><h2 id="ArrayBuffer">ArrayBuffer</h2><p><code>ArrayBuffer</code>表示通用的原始二进制数据缓冲区，它是一个字节数组。不能直接操作 <code>ArrayBuffer</code> 中的内容，需要通过<code>TypedArray</code>或<code>DataView</code>对象来操作。</p><h3 id="构造函数">构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(length, options)</span><br></pre></td></tr></table></figure><ol><li><code>length</code>：要创建的数组缓冲区的大小（以字节为单位）</li><li><code>options</code>（可选）：一个对象，可以包含<strong>maxByteLength</strong>属性，表示数据缓冲区可以调整的最大大小，以字节为单位</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>, &#123; <span class="attr">maxByteLength</span>: <span class="number">16</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="静态方法">静态方法</h3><ol><li><p><code>isView()</code>：判断传入值是否是 <code>ArrayBuffer</code> 视图之一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 ArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建各种 TypedArray 视图</span></span><br><span class="line"><span class="keyword">const</span> int8View = <span class="keyword">new</span> <span class="title class_">Int8Array</span>(buffer);</span><br><span class="line"><span class="keyword">const</span> float32View = <span class="keyword">new</span> <span class="title class_">Float32Array</span>(buffer);</span><br><span class="line"><span class="keyword">const</span> dataView = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个普通对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查视图和普通对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ArrayBuffer</span>.<span class="title function_">isView</span>(int8View));   <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ArrayBuffer</span>.<span class="title function_">isView</span>(float32View)); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ArrayBuffer</span>.<span class="title function_">isView</span>(dataView));   <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ArrayBuffer</span>.<span class="title function_">isView</span>(obj));        <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="实例属性">实例属性</h3><ol><li><p><strong>byteLength</strong>：返回该数组缓冲区的长度（以字节为单位）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure></li><li><p><strong>maxByteLength</strong>：返回该数组缓冲区可调整到的最大长度（以字节为单位）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>, &#123; <span class="attr">maxByteLength</span>: <span class="number">16</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">maxByteLength</span>); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure></li><li><p><strong>resizable</strong>：返回此数组缓冲区是否可以调整大小</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer1 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>, &#123; <span class="attr">maxByteLength</span>: <span class="number">16</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> buffer2 = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer1.<span class="property">resizable</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer2.<span class="property">resizable</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="实例方法">实例方法</h3><ol><li><p><code>resize()</code>：将 <code>ArrayBuffer</code> 调整为指定的大小，以字节为单位</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">8</span>, &#123; <span class="attr">maxByteLength</span>: <span class="number">16</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">// 8</span></span><br><span class="line">buffer.<span class="title function_">resize</span>(<span class="number">12</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">// 12</span></span><br></pre></td></tr></table></figure></li><li><p><code>slice()</code>：返回一个新的 <code>ArrayBuffer</code>，包含原 <code>ArrayBuffer</code> 实例中从 <code>begin</code>（包含）到 <code>end</code>（不含）的所有字节的副本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向 ArrayBuffer 中写入数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">  view[i] = i * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新 ArrayBuffer，包含原始缓冲区的一部分</span></span><br><span class="line"><span class="keyword">const</span> newBuffer = buffer.<span class="title function_">slice</span>(<span class="number">4</span>, <span class="number">12</span>);</span><br><span class="line"><span class="keyword">const</span> newView = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(newBuffer);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view); <span class="comment">// 输出: Uint8Array(16) [ 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30 ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newView); <span class="comment">// 输出: Uint8Array(8) [ 8, 10, 12, 14, 16, 18, 20, 22 ]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="视图">视图</h2><h3 id="TypedArray">TypedArray</h3><ol><li><p><code>Int8Array</code>：表示 8 位带符号整数的数组，每个元素占用 1 字节，范围从 -128 到 127。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> int8Array = <span class="keyword">new</span> <span class="title class_">Int8Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, -<span class="number">4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int8Array); <span class="comment">// 输出: Int8Array(4) [1, 2, 3, -4]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Uint8Array</code>：表示 8 位无符号整数的数组，每个元素占用 1 字节，范围从 0 到 255。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uint8Array = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">255</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uint8Array); <span class="comment">// 输出: Uint8Array(4) [1, 2, 3, 255]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Uint8ClampedArray</code>：表示 8 位无符号整数的数组，每个元素占用 1 字节，范围从 0 到 255，超出范围的值会被裁剪。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uint8ClampedArray = <span class="keyword">new</span> <span class="title class_">Uint8ClampedArray</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">300</span>, -<span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uint8ClampedArray); <span class="comment">// 输出: Uint8ClampedArray(4) [1, 2, 255, 0]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Int16Array</code>：表示 16 位带符号整数的数组，每个元素占用 2 字节，范围从 -32768 到 32767。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> int16Array = <span class="keyword">new</span> <span class="title class_">Int16Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, -<span class="number">32768</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int16Array); <span class="comment">// 输出: Int16Array(4) [1, 2, 3, -32768]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Uint16Array</code>：表示 16 位无符号整数的数组，每个元素占用 2 字节，范围从 0 到 65535。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uint16Array = <span class="keyword">new</span> <span class="title class_">Uint16Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">65535</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uint16Array); <span class="comment">// 输出: Uint16Array(4) [1, 2, 3, 65535]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Int32Array</code>：表示 32 位带符号整数的数组，每个元素占用 4 字节，范围从 -2,147,483,648 到 2,147,483,647。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> int32Array = <span class="keyword">new</span> <span class="title class_">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, -<span class="number">2147483648</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32Array); <span class="comment">// 输出: Int32Array(4) [1, 2, 3, -2147483648]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Uint32Array</code>：表示 32 位无符号整数的数组，每个元素占用 4 字节，范围从 0 到 4,294,967,295。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uint32Array = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4294967295</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uint32Array); <span class="comment">// 输出: Uint32Array(4) [1, 2, 3, 4294967295]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Float32Array</code>：表示 32 位浮点数的数组，每个元素占用 4 字节，精度约为 7 位十进制数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> float32Array = <span class="keyword">new</span> <span class="title class_">Float32Array</span>([<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, -<span class="number">4.4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(float32Array); <span class="comment">// 输出: Float32Array(4) [1.1, 2.2, 3.3, -4.4]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Float64Array</code>：表示 64 位浮点数的数组，每个元素占用 8 字节，精度约为 15 位十进制数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> float64Array = <span class="keyword">new</span> <span class="title class_">Float64Array</span>([<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, -<span class="number">4.4</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(float64Array); <span class="comment">// 输出: Float64Array(4) [1.1, 2.2, 3.3, -4.4]</span></span><br></pre></td></tr></table></figure></li><li><p><code>BigInt64Array</code>：表示 64 位带符号大整数的数组，每个元素占用 8 字节，范围从 $ -2^{63} $ 到  $ 2^{63} - 1 $​​。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigInt64Array = <span class="keyword">new</span> <span class="title class_">BigInt64Array</span>([<span class="title class_">BigInt</span>(<span class="number">1</span>), <span class="title class_">BigInt</span>(<span class="number">2</span>), <span class="title class_">BigInt</span>(-<span class="number">3</span>)]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigInt64Array); <span class="comment">// 输出: BigInt64Array(3) [1n, 2n, -3n]</span></span><br></pre></td></tr></table></figure></li><li><p><code>BigUint64Array</code>：表示 64 位无符号大整数的数组，每个元素占用 8 字节，范围从 0 到  $ 2^{64} - 1 $​。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigUint64Array = <span class="keyword">new</span> <span class="title class_">BigUint64Array</span>([<span class="title class_">BigInt</span>(<span class="number">1</span>), <span class="title class_">BigInt</span>(<span class="number">2</span>), <span class="title class_">BigInt</span>(<span class="number">3</span>)]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigUint64Array); <span class="comment">// 输出: BigUint64Array(3) [1n, 2n, 3n]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="DataView">DataView</h3><h4 id="构造函数-2">构造函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">DataView</span>(buffer, byteOffset, byteLength)</span><br></pre></td></tr></table></figure><ol><li><code>buffer</code>： 要创建视图的 <code>ArrayBuffer</code> 对象。这个缓冲区是 <code>DataView</code> 将用于读取和写入数据的基础</li><li><code>byteOffset</code>（可选）：从 <code>ArrayBuffer</code> 的哪个字节偏移量开始创建 <code>DataView</code>。默认值是 <code>0</code></li><li><code>byteLength</code>（可选）：字节数组中的元素数。如果未指定，则视图的长度将与缓冲区的长度匹配。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>); <span class="comment">// 创建一个长度为 16 字节的 ArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer); <span class="comment">// 创建一个 DataView，覆盖整个 ArrayBuffer</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="property">byteLength</span>); <span class="comment">// 输出: 16</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>); <span class="comment">// 创建一个长度为 16 字节的 ArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer, <span class="number">4</span>, <span class="number">8</span>); <span class="comment">// 从偏移量 4 开始创建 DataView，长度为 8 字节</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="property">byteLength</span>); <span class="comment">// 输出: 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="property">byteOffset</span>); <span class="comment">// 输出: 4</span></span><br></pre></td></tr></table></figure><h4 id="实例方法-2">实例方法</h4><ol><li><code>get/setInt8</code>：读取/写入指定偏移量的 8 位带符号整数</li><li><code>get/setUint8</code>：读取/写入指定偏移量的 8 位无符号整数</li><li><code>get/setInt16</code>：读取/写入指定偏移量的 16 位带符号整数</li><li><code>get/setUint16</code>：读取/写入指定偏移量的 16 位无符号整数</li><li><code>get/setInt32</code>：读取/写入指定偏移量的 32 位带符号整数</li><li><code>get/setUint32</code>：读取/写入指定偏移量的 32 位无符号整数</li><li><code>get/setFloat16</code>：读取/写入指定偏移量的 16 位浮点数</li><li><code>get/setFloat32</code>：读取/写入指定偏移量的 32 位浮点数</li><li><code>get/setFloat64</code>：读取/写入指定偏移量的 64 位浮点数</li><li><code>get/setBigInt64</code>：读取/写入指定偏移量的 64 位带符号大整数</li><li><code>get/setBigUint64</code>：读取/写入指定偏移量的 64 位无符号大整数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 ArrayBuffer 和 DataView</span></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">16</span>); <span class="comment">// 创建一个长度为 16 字节的 ArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入数据</span></span><br><span class="line">view.<span class="title function_">setUint8</span>(<span class="number">0</span>, <span class="number">255</span>);           <span class="comment">// 在偏移量 0 处写入 8 位无符号整数 255</span></span><br><span class="line">view.<span class="title function_">setInt16</span>(<span class="number">1</span>, -<span class="number">12345</span>, <span class="literal">true</span>);  <span class="comment">// 在偏移量 1 处写入 16 位带符号整数 -12345，使用小端序</span></span><br><span class="line">view.<span class="title function_">setFloat32</span>(<span class="number">3</span>, <span class="number">3.14</span>, <span class="literal">false</span>); <span class="comment">// 在偏移量 3 处写入 32 位浮点数 3.14，使用大端序</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取数据</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="title function_">getUint8</span>(<span class="number">0</span>));        <span class="comment">// 输出: 255</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="title function_">getInt16</span>(<span class="number">1</span>, <span class="literal">true</span>));  <span class="comment">// 输出: -12345</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="title function_">getFloat32</span>(<span class="number">3</span>, <span class="literal">false</span>)); <span class="comment">// 输出: 3.140000104904175</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li><p><code>get()</code>有两个参数：第一个参数表示偏移量，第二个参数表示字节序；<code>set()</code>有三个参数：第一个参数表示偏移量，第二个参数表示要设置的值，第三个参数表示数据以什么字节序格式来存储</p></li><li><p><code>Int8</code>和<code>Uint8</code>没有字节序，因此<code>get()</code>只有一个参数，<code>set()</code>有两个参数</p></li><li><p>字节序指的是在存储多字节数据时，字节的顺序排列方式。通常用布尔值表示，<code>true</code>表示小端序，<code>false</code>表示大端序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假设我们有一个 <span class="number">32</span> 位（<span class="number">4</span> 字节）整数 <span class="number">0x12345678</span>。</span><br><span class="line">大端序：<span class="number">0x12</span> <span class="number">0x34</span> <span class="number">0x56</span> <span class="number">0x78</span></span><br><span class="line">小端序：<span class="number">0x78</span> <span class="number">0x56</span> <span class="number">0x34</span> <span class="number">0x12</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="SharedArrayBuffer">SharedArrayBuffer</h2><p><code>SharedArrayBuffer</code>表示通用的原始二进制数据缓冲区，类似于 <code>ArrayBuffer</code> 对象，需要通过<code>TypedArray</code>或<code>DataView</code>对象来操作。、</p><h3 id="构造函数-3">构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(length, options)</span><br></pre></td></tr></table></figure><ol><li><code>length</code>：要创建的数组缓冲区的大小（以字节为单位）</li><li><code>options</code>（可选）：一个对象，可以包含<strong>maxByteLength</strong>属性，表示数据缓冲区可以调整的最大大小，以字节为单位</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">8</span>, &#123; <span class="attr">maxByteLength</span>: <span class="number">16</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="实例属性-2">实例属性</h3><ol><li><p><strong>byteLength</strong>：返回该数组缓冲区的长度（以字节为单位）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure></li><li><p><strong>maxByteLength</strong>：返回该数组缓冲区可调整到的最大长度（以字节为单位）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">8</span>, &#123; <span class="attr">maxByteLength</span>: <span class="number">16</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">maxByteLength</span>); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="实例方法-3">实例方法</h3><ol><li><p><code>slice()</code>：返回一个新的 <code>SharedArrayBuffer</code>，包含原 <code>ArrayBuffer</code> 实例中从 <code>begin</code>（包含）到 <code>end</code>（不含）的所有字节的副本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 SharedArrayBuffer</span></span><br><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 Int32Array 视图</span></span><br><span class="line"><span class="keyword">const</span> view = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 slice 获取部分缓冲区</span></span><br><span class="line"><span class="keyword">const</span> partialBuffer = sharedBuffer.<span class="title function_">slice</span>(<span class="number">4</span>, <span class="number">12</span>); <span class="comment">// 这里的偏移量和长度以字节为单位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建新的视图</span></span><br><span class="line"><span class="keyword">const</span> partialView = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(partialBuffer);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(partialView.<span class="property">byteLength</span>); <span class="comment">// 输出: 8（从字节 4 到 12 是 8 字节）</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="ArrayBuffer与SharedArrayBuffer区别">ArrayBuffer与SharedArrayBuffer区别</h2><ol><li>创建和大小<ul><li><code>ArrayBuffer</code>：通过 <code>new ArrayBuffer(size)</code> 创建，其中<code>size</code>是缓冲区的字节大小，一旦创建，<code>ArrayBuffer</code> 的大小不可更改</li><li><code>SharedArrayBuffer</code>：通过 <code>new SharedArrayBuffer(size)</code> 创建，其中 <code>size</code> 是缓冲区的字节大小，<code>SharedArrayBuffer</code> 的大小在创建时固定，无法动态调整</li></ul></li><li>并发和内存共享<ul><li><code>ArrayBuffer</code>：单线程环境中使用的固定大小的内存缓冲区。它不支持直接在多个线程之间共享数据</li><li><code>SharedArrayBuffer</code>：可以在多个线程之间共享内存。它允许不同线程访问相同的内存区域</li></ul></li><li>安全和兼容性<ul><li><code>ArrayBuffer</code>：在所有现代浏览器中都被广泛支持，不受特别的安全限制</li><li><code>SharedArrayBuffer</code>：<code>SharedArrayBuffer</code> 在某些浏览器中可能会由于安全性问题被禁用。需要设置特定的 HTTP 头部（<code>Cross-Origin-Opener-Policy</code> 和 <code>Cross-Origin-Embedder-Policy</code>）才能启用。浏览器可能需要在一些环境中进行额外的配置。</li></ul></li></ol><h2 id="Atomics">Atomics</h2><p><code>Atomics</code> 提供了一组原子操作的方法，用于在多线程环境中操作共享内存。这些操作可以在 <code>SharedArrayBuffer</code> 上执行，以确保数据的一致性和正确性。</p><ol><li><p><code>Atomics.load()</code>：从 <code>typedArray</code> 的指定 <code>index</code> 位置读取值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">42</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Atomics</span>.<span class="title function_">load</span>(int32View, <span class="number">0</span>)); <span class="comment">// 输出: 42</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.store(typedArray, index, value)</code>：将 <code>value</code> 存储到 <code>typedArray</code> 的指定 <code>index</code> 位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">42</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 42</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.add(typedArray, index, value)</code>：将 <code>value</code> 加到 <code>typedArray</code> 的指定 <code>index</code> 位置的当前值，并返回旧值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> oldValue = <span class="title class_">Atomics</span>.<span class="title function_">add</span>(int32View, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 15</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.sub(typedArray, index, value)</code>：从 <code>typedArray</code> 的指定 <code>index</code> 位置的当前值中减去 <code>value</code>，并返回旧值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">const</span> oldValue = <span class="title class_">Atomics</span>.<span class="title function_">sub</span>(int32View, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue); <span class="comment">// 输出: 20</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 15</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.and(typedArray, index, value)</code>：对 <code>typedArray</code> 的指定 <code>index</code> 位置的当前值进行位与操作（<code>&amp;</code>），并返回旧值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">15</span>); <span class="comment">// 1111 in binary</span></span><br><span class="line"><span class="keyword">const</span> oldValue = <span class="title class_">Atomics</span>.<span class="title function_">and</span>(int32View, <span class="number">0</span>, <span class="number">7</span>); <span class="comment">// 0111 in binary</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue); <span class="comment">// 输出: 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 7</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.or(typedArray, index, value)</code>：对 <code>typedArray</code> 的指定 <code>index</code> 位置的当前值进行位或操作（<code>|</code>），并返回旧值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">10</span>); <span class="comment">// 1010 in binary</span></span><br><span class="line"><span class="keyword">const</span> oldValue = <span class="title class_">Atomics</span>.<span class="title function_">or</span>(int32View, <span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 0011 in binary</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 11</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.xor(typedArray, index, value)</code>：对 <code>typedArray</code> 的指定 <code>index</code> 位置的当前值进行位异或操作（<code>^</code>），并返回旧值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">10</span>); <span class="comment">// 1010 in binary</span></span><br><span class="line"><span class="keyword">const</span> oldValue = <span class="title class_">Atomics</span>.<span class="title function_">xor</span>(int32View, <span class="number">0</span>, <span class="number">3</span>); <span class="comment">// 0011 in binary</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 9</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.exchange(typedArray, index, value)</code>：将 <code>typedArray</code> 的指定 <code>index</code> 位置的值替换为 <code>value</code>，并返回旧值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> oldValue = <span class="title class_">Atomics</span>.<span class="title function_">exchange</span>(int32View, <span class="number">0</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(oldValue); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 20</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.compareExchange(typedArray, index, expectedValue, newValue)</code>：将 <code>typedArray</code> 的指定 <code>index</code> 位置的值替换为 <code>newValue</code>，当且仅当当前位置的值等于 <code>expectedValue</code>。返回当前值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> currentValue = <span class="title class_">Atomics</span>.<span class="title function_">compareExchange</span>(int32View, <span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(currentValue); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(int32View[<span class="number">0</span>]); <span class="comment">// 输出: 20</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.wait(typedArray, index, value, timeout)</code>：阻塞当前线程，直到 <code>typedArray</code> 的指定 <code>index</code> 位置的值变为 <code>value</code>，或者超时（如果指定了 <code>timeout</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在另一个线程中：</span></span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">wait</span>(int32View, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1000</span>); <span class="comment">// 等待直到值变为 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.waitAsync(typedArray, index, value, timeout)</code>：异步等待，直到 <code>typedArray</code> 的指定 <code>index</code> 位置的值变为 <code>value</code>，或者超时（如果指定了 <code>timeout</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个共享内存缓冲区</span></span><br><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储初始值</span></span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步函数，使用 Atomics.waitAsync() 等待值变化</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">waitForValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Waiting for value to change...&#x27;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Atomics</span>.<span class="title function_">waitAsync</span>(int32View, <span class="number">0</span>, <span class="number">0</span>, <span class="number">5000</span>); <span class="comment">// 最多等待 5 秒</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Value changed to:&#x27;</span>, <span class="title class_">Atomics</span>.<span class="title function_">load</span>(int32View, <span class="number">0</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error or timeout:&#x27;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用异步函数</span></span><br><span class="line"><span class="title function_">waitForValue</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟值变化</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// 修改共享内存中的值</span></span><br><span class="line">    <span class="title class_">Atomics</span>.<span class="title function_">notify</span>(int32View, <span class="number">0</span>); <span class="comment">// 唤醒等待中的线程</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Value updated and waiting thread notified&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.isLockFree(size)</code>：检测当前平台是否能够在不使用锁的情况下执行<code>size</code>大小的原子操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Atomics</span>.<span class="title function_">isLockFree</span>(<span class="number">1</span>)); <span class="comment">// 检查是否支持 8 位的原子操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Atomics</span>.<span class="title function_">isLockFree</span>(<span class="number">2</span>)); <span class="comment">// 检查是否支持 16 位的原子操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Atomics</span>.<span class="title function_">isLockFree</span>(<span class="number">4</span>)); <span class="comment">// 检查是否支持 32 位的原子操作</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Atomics</span>.<span class="title function_">isLockFree</span>(<span class="number">8</span>)); <span class="comment">// 检查是否支持 64 位的原子操作</span></span><br></pre></td></tr></table></figure></li><li><p><code>Atomics.notify(typedArray, index, count)</code>：唤醒在共享内存中的某个位置上等待的线程。这个方法与 <code>Atomics.wait()</code> 配合使用，用于在多线程环境中管理线程间的同步</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个共享内存缓冲区</span></span><br><span class="line"><span class="keyword">const</span> sharedBuffer = <span class="keyword">new</span> <span class="title class_">SharedArrayBuffer</span>(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">const</span> int32View = <span class="keyword">new</span> <span class="title class_">Int32Array</span>(sharedBuffer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储初始值</span></span><br><span class="line"><span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在另一个线程中，线程 A 等待共享内存中的值变为 1</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;worker.js&#x27;</span>); <span class="comment">// 假设有一个 worker.js 文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// worker.js 内容示例</span></span><br><span class="line">self.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="title class_">Atomics</span>.<span class="title function_">wait</span>(int32View, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 等待直到值变为 1</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Worker: Value changed to&#x27;</span>, <span class="title class_">Atomics</span>.<span class="title function_">load</span>(int32View, <span class="number">0</span>));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在主线程中，设置一个超时，模拟对共享内存的更改</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Atomics</span>.<span class="title function_">store</span>(int32View, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// 修改共享内存中的值</span></span><br><span class="line">    <span class="title class_">Atomics</span>.<span class="title function_">notify</span>(int32View, <span class="number">0</span>); <span class="comment">// 唤醒等待中的线程</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Main thread: Value updated and worker notified&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="JSON">JSON</h2><p>JSON 是一种语法，用来序列化对象、数组、数值、字符串、布尔值和 null。基于 JavaScript 语法，但与之不同</p><h3 id="基本语法">基本语法</h3><ol><li>数据以键值对形式出现<ul><li>键（key）是字符串</li><li>值（value）可以是字符串、数字、布尔值、<code>null</code>、对象（JSON 对象）、数组（JSON 数组）</li></ul></li><li>键值之间以冒号分隔</li><li>每个键值对之间用逗号分隔</li><li>JSON 数据使用大括号 <code>&#123;&#125;</code> 表示对象，使用方括号 <code>[]</code> 表示数组</li></ol><h3 id="静态方法-2">静态方法</h3><ol><li><p><code>JSON.stringify()</code>：将 JavaScript 对象或数组转换为 JSON 字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="attr">courses</span>: [<span class="string">&quot;Math&quot;</span>, <span class="string">&quot;Science&quot;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jsonString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonString);</span><br><span class="line"><span class="comment">// 输出: &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:25,&quot;courses&quot;:[&quot;Math&quot;,&quot;Science&quot;]&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>JSON.parse()</code>：将 JSON 字符串转换为 JavaScript 对象或数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jsonString = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:25,&quot;courses&quot;:[&quot;Math&quot;,&quot;Science&quot;]&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonString);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="comment">// 输出: &#123; name: &#x27;Alice&#x27;, age: 25, courses: [ &#x27;Math&#x27;, &#x27;Science&#x27; ] &#125;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(18)-Array</title>
    <link href="/2024/07/31/JS%E5%AD%A6%E4%B9%A0(18)-Array/"/>
    <url>/2024/07/31/JS%E5%AD%A6%E4%B9%A0(18)-Array/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 中数组是一组有序的数据，数组中每个槽位可以存储任意类型的数据。数组也是动态大小的，会随着数据添加而自动增长。JavaScript 中数组的索引是从 0 开始，数组的复制操作是浅拷贝。</p><span id="more"></span><h1>Array</h1><p>JavaScript中的<code>Array</code>对象是一个用于创建和操作数组的全局对象。数组是一种高阶的数据结构，可以存储多个值并按索引进行访问。</p><h2 id="数组字面量">数组字面量</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h2 id="构造函数">构造函数</h2><p><code>Array()</code> 构造函数用于创建 Array 对象，调用 <code>Array()</code> 时可以使用或不使用 new都会创建一个新的 <code>Array</code> 实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(element0)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(element0, element1, … , elementN)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(arrayLength)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>()</span><br><span class="line"><span class="title class_">Array</span>(element0)</span><br><span class="line"><span class="title class_">Array</span>(element0, element1,  … , elementN)</span><br><span class="line"><span class="title class_">Array</span>(arrayLength)</span><br></pre></td></tr></table></figure><ol><li><p><strong>elementN</strong>：根据给定的元素创建数组，但是当仅有一个参数且为数字时除外</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayOfOne = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;2&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayOfOne.<span class="property">length</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayOfOne); <span class="comment">// [&#x27;2&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>arrayLength</strong>：创建该属性设置的长度的空数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayEmpty = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayEmpty.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrayEmpty); <span class="comment">// [empty × 2]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="静态方法">静态方法</h2><ol><li><p><code>Array.from()</code>：用于将类数组结构转换为数组实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike, mapFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>arrayLike</code>：想要转换成数组的类数组对象或可迭代对象。</li><li><code>mapFn</code>（可选）：如果指定了该参数，则新数组中的每个元素会执行该回调函数。</li><li><code>thisArg</code>（可选）：执行 <code>mapFn</code> 函数时 <code>this</code> 对象。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要转换成数组的类数组或可迭代对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">// [&#x27;f&#x27;, &#x27;o&#x27;, &#x27;o&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数为可选的映射函数，函数中第一个参数是数组当前处理的元素，第二个参数为数组索引</span></span><br><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(a1, <span class="function"><span class="params">x</span> =&gt;</span> x**<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a2); <span class="comment">// [1, 4, 9, 16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三个参数为映射函数中this的值，在箭头函数中不适用</span></span><br><span class="line"><span class="keyword">const</span> a3 = <span class="title class_">Array</span>.<span class="title function_">from</span>(a1, <span class="keyword">function</span>(<span class="params">x</span>) &#123;<span class="keyword">return</span> x**<span class="variable language_">this</span>.<span class="property">exponent</span>&#125;, &#123;<span class="attr">exponent</span>: <span class="number">2</span>&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a3); <span class="comment">// [1, 4, 9, 16] </span></span><br></pre></td></tr></table></figure></li><li><p><code>Array.fromAsync()</code>：与<code>from()</code>方法类似，但是可以操作异步可迭代对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncIterable = (<span class="keyword">async</span> <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">10</span> * i));</span><br><span class="line">    <span class="keyword">yield</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">fromAsync</span>(asyncIterable).<span class="title function_">then</span>(<span class="function">(<span class="params">array</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(array)); <span class="comment">// [0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Array.isArray()</code>：用于确定传递的值是否是一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>])); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(<span class="string">&#x27;[]&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Array.of()</code>：通过可变数量的参数创建一个新的 <code>Array</code> 实例，而不考虑参数的数量或类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;bar&#x27;</span>, <span class="literal">true</span>)); <span class="comment">// [&#x27;foo&#x27;, 2, &#x27;bar&#x27;, true]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">of</span>()); <span class="comment">// []</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例属性">实例属性</h2><ol><li><p><strong>length</strong>：表示该数组中元素的个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 输出: 3</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><h3 id="迭代器方法">迭代器方法</h3><ol><li><p><code>keys()</code>：返回数组索引的迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>, <span class="string">&quot;qux&quot;</span>]; </span><br><span class="line"><span class="keyword">const</span> aKeys = <span class="title class_">Array</span>.<span class="title function_">from</span>(a.<span class="title function_">keys</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aKeys); <span class="comment">// [0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><code>values()</code>：返回数组元素的迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>, <span class="string">&quot;qux&quot;</span>]; </span><br><span class="line"><span class="keyword">const</span> aValues = <span class="title class_">Array</span>.<span class="title function_">from</span>(a.<span class="title function_">values</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aValues); <span class="comment">//  [&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;, &quot;qux&quot;] </span></span><br></pre></td></tr></table></figure></li><li><p><code>entries()</code>：返回索引/值对的迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>, <span class="string">&quot;qux&quot;</span>]; </span><br><span class="line"><span class="keyword">const</span> aEntries = <span class="title class_">Array</span>.<span class="title function_">from</span>(a.<span class="title function_">entries</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aEntries); <span class="comment">//   [[0, &quot;foo&quot;], [1, &quot;bar&quot;], [2, &quot;baz&quot;], [3, &quot;qux&quot;]]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="复制填充方法">复制填充方法</h3><ol><li><p><code>fill()</code>：向一个已有的数组中插入全部或部分相同的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">fill</span>(value, start, end)</span><br></pre></td></tr></table></figure><ul><li><code>value</code>：用来填充数组元素的值。</li><li><code>start</code>（可选）：开始填充的位置，默认为 <code>0</code>。</li><li><code>end</code>（可选）：停止填充的位置（不包括该位置），默认为 <code>this.length</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [0, 0, 0, 0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 0, 0, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>copyWithin()</code>：复制数组的一部分到同一数组中的另一个位置，并返回它，而不修改其大小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">copyWithin</span>(target, start, end)</span><br></pre></td></tr></table></figure><ul><li><code>target</code>：开始替换的目标位置。</li><li><code>start</code>（可选）：要复制的元素序列的起始位置，默认为 <code>0</code>。</li><li><code>end</code>（可选）：要复制的元素序列的结束位置（不包括该位置），默认为数组的长度。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">copyWithin</span>(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [4, 5, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr.<span class="title function_">copyWithin</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 4, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="转换方法">转换方法</h3><ol><li><p><code>toLocaleString()</code>：返回一个字符串表示数组的元素，每个元素通过调用它们自己的 <code>toLocaleString</code> 方法转换为字符串，并且使用特定于语言环境的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">toLocaleString</span>(locales, options)</span><br></pre></td></tr></table></figure><ul><li><code>locales</code>（可选）：一种 BCP 47 语言标签的字符串或字符串数组，表示所需的语言环境。</li><li><code>options</code>（可选）：一个对象，其属性是配置语言环境中某些特定格式化行为的属性。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;21 Dec 1997 14:12:00 UTC&#x27;</span>)];</span><br><span class="line"><span class="keyword">let</span> localeString = arr.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;en&#x27;</span>, &#123; <span class="attr">timeZone</span>: <span class="string">&#x27;UTC&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localeString); <span class="comment">// &quot;1,a,12/21/1997, 2:12:00 PM&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toString()</code>：返回一个字符串，表示指定的数组及其元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1a&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">toString</span>()); <span class="comment">// &quot;1,2,a,1a&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>valueOf()</code>：用于返回数组对象本身</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> value = arr.<span class="title function_">valueOf</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出: [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>join()</code>：将一个数组的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。如果数组只有一个元素，那么将返回该元素而不使用分隔符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">join</span>(separator)</span><br></pre></td></tr></table></figure><ul><li><code>separator</code>（可选）：指定一个字符串来分隔数组的每个元素。如果省略，数组元素用逗号（<code>,</code>）分隔。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">join</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出: &quot;Hello,world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;JavaScript&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;awesome&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)); <span class="comment">// 输出: &quot;Hello-world-JavaScript-is-awesome&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>)); <span class="comment">// 输出: &quot;Hello|world|JavaScript|is|awesome&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));  <span class="comment">// 输出: &quot;HelloworldJavaScriptisawesome&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="栈方法">栈方法</h3><ol><li><p><code>pop()</code>：删除数组末尾的一个元素，返回该元素，会更改数组的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> lastElement = arr.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lastElement); <span class="comment">// 输出: 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2]</span></span><br></pre></td></tr></table></figure></li><li><p><code>push()</code>：将指定的元素添加到数组的末尾，并返回新的数组长度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="队列方法">队列方法</h3><ol><li><p><code>shift()</code>：从数组中删除<strong>第一个</strong>元素，并返回该元素的值。会更改数组的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> firstElement = arr.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstElement); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><code>unshift()</code>：将指定元素添加到数组的开头，并返回数组的新长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [0, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="迭代方法">迭代方法</h3><ol><li><p><code>forEach()</code>：对数组的每个元素执行一次给定的函数，没有返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">forEach</span>(<span class="title function_">callback</span>(currentValue, index, array), thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：forEach 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123;</span><br><span class="line">  array[index] = element * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// 输出: [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">multiplier</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr2.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(element * <span class="variable language_">this</span>.<span class="property">multiplier</span>);</span><br><span class="line">&#125;, obj);</span><br></pre></td></tr></table></figure></li><li><p><code>every()</code>：测试数组中的所有元素是否都通过了指定函数的测试。该方法返回一个布尔值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">every</span>(<span class="title function_">callback</span>(element, index, array), thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：every 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> allEven = arr1.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(allEven); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">min</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">20</span>];</span><br><span class="line"><span class="keyword">let</span> allGreaterThanMin = arr2.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="variable language_">this</span>.<span class="property">min</span>;</span><br><span class="line">&#125;, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(allGreaterThanMin); <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure></li><li><p><code>filter()</code>：创建一个新数组，新数组中的元素是通过测试的所有数组元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">filter</span>(<span class="title function_">callback</span>(element, index, array), thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：filter 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> evenNumbers = arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(evenNumbers); <span class="comment">// 输出: [2, 4]</span></span><br></pre></td></tr></table></figure></li><li><p><code>map()</code>：创建一个新数组，新数组中的元素是通过调用提供的函数对每个元素进行处理的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">map</span>(<span class="title function_">callback</span>(element, index, array), thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：map 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> doubled = arr1.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(doubled); <span class="comment">// 输出: [2, 4, 6, 8, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> squared = arr2.<span class="title function_">map</span>(<span class="function"><span class="params">element</span> =&gt;</span> element ** <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(squared); <span class="comment">// 输出: [1, 4, 9, 16, 25]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> names = people.<span class="title function_">map</span>(<span class="function"><span class="params">person</span> =&gt;</span> person.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names); <span class="comment">// 输出: [&#x27;Alice&#x27;, &#x27;Bob&#x27;, &#x27;Charlie&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">factor</span>: <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> multiplied = arr3.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element * <span class="variable language_">this</span>.<span class="property">factor</span>;</span><br><span class="line">&#125;, obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(multiplied); <span class="comment">// 输出: [10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure></li><li><p><code>some()</code>：测试数组中是否至少有一个元素通过了由提供的函数实现的测试。如果在数组中找到一个元素使得提供的函数返回 true，则返回 true；否则返回 false。它不会修改数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">some</span>(<span class="title function_">callback</span>(element, index, array), thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：some 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> hasEven = arr1.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hasEven); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> hasYoungPerson = people.<span class="title function_">some</span>(<span class="function"><span class="params">person</span> =&gt;</span> person.<span class="property">age</span> &lt; <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hasYoungPerson); <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="归并方法">归并方法</h3><ol><li><p><code>reduce()</code>：将数组中的所有元素按某种规则累计成一个单一的值。这个方法会遍历数组中的每个元素，执行提供的函数，并将结果汇总为最终的单一值。<code>reduce</code> 方法不会改变原数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">reduce</span>(<span class="title function_">callback</span>(accumulator, currentValue, currentIndex, array), initialValue)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受四个参数<ul><li><code>accumulator</code>：上一次调用 <code>callback</code> 时返回的值。第一次调用时，如果指定了 <code>initialValue</code> 则为指定的值，否则为 <code>array[0]</code> 的值。</li><li><code>currentValue</code>：当前元素的值。在第一次调用时，如果指定了 <code>initialValue</code>，则为 <code>array[0]</code> 的值，否则为 <code>array[1]</code>。</li><li><code>currentIndex</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：reduce 方法正在操作的数组</li></ul></li><li><code>initialValue</code>（可选）：指定第一次调用 <code>callback</code> 时 <code>accumulator</code> 的初始值。如果没有提供，<code>accumulator</code> 将使用数组中的<code>array[0]</code> 的值，<code>currentValue</code> 是<code>array[1]</code> 的值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> sum = arr1.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">accumulator, currentValue</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum); <span class="comment">// 输出: 15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> product = arr2.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">accumulator, currentValue</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator * currentValue;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(product); <span class="comment">// 输出: 120</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> totalAge = people.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">accumulator, person</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + person.<span class="property">age</span>;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(totalAge); <span class="comment">// 输出: 90</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> max = arr3.<span class="title function_">reduce</span>(<span class="function">(<span class="params">accumulator, currentValue</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(accumulator, currentValue);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max); <span class="comment">// 输出: 5</span></span><br></pre></td></tr></table></figure></li><li><p><code>reduceRight()</code>：与 <code>reduce()</code> 方法类似，都是用于将数组中的所有元素按某种规则累计成一个单一的值。不同的是，<code>reduceRight()</code> 从数组的最后一个元素开始向前遍历，直到第一个元素。</p></li></ol><h3 id="排序方法">排序方法</h3><ol><li><p><code>reverse()</code>：反转数组中的元素，并返回数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure></li><li><p><code>sort()</code>：对数组的元素进行排序并返回数组，默认排序是将元素转换为字符串，然后按照它们的 UTF-16 码元值升序排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">sort</span>(compareFn)</span><br></pre></td></tr></table></figure><ul><li><code>compareFn</code>（可选）：一个用于排序的比较函数。它接受两个参数 <code>a</code> 和 <code>b</code>，并根据它们的顺序来确定排序顺序。如果未提供 <code>compareFn</code>，则默认按照字符串的 Unicode 编码顺序进行排序。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">10</span>, <span class="number">5</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">50</span>];</span><br><span class="line">numbers.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// 输出: [1, 5, 10, 50, 100]</span></span><br></pre></td></tr></table></figure></li><li><p><code>toReversed()</code>：返回一个新数组，反转数组中的元素，而原始数组不会被修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> reversed = numbers.<span class="title function_">toReversed</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reversed); <span class="comment">// 输出: [5, 4, 3, 2, 1]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// 输出: [1, 2, 3, 4, 5] (原始数组未被修改)</span></span><br></pre></td></tr></table></figure></li><li><p><code>toSorted()</code>：返回一个新数组，反转数组中的元素，而原始数组不会被修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">toSorted</span>(compareFn);</span><br></pre></td></tr></table></figure><ul><li><code>compareFn</code>（可选）：一个用于排序的比较函数。它接受两个参数 <code>a</code> 和 <code>b</code>，并根据它们的顺序来排序元素。如果未提供 <code>compareFn</code>，则默认为升序排序。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> sorted = numbers.<span class="title function_">toSorted</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sorted); <span class="comment">// 输出: [1, 2, 3, 5, 8]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// 输出: [5, 3, 8, 1, 2] (原始数组未被修改)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">10</span>, <span class="number">5</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">let</span> sorted = numbers.<span class="title function_">toSorted</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sorted); <span class="comment">// 输出: [1, 5, 10, 50, 100]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// 输出: [10, 5, 100, 1, 50]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="操作方法">操作方法</h3><ol><li><p><code>concat()</code>：用于合并两个或更多的数组或值，并返回一个新的数组。该方法不会改变原始数组，而是返回一个新的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">concat</span>(value1, value2, ..., valueN)</span><br></pre></td></tr></table></figure><ul><li><code>value1, value2, ..., valueN</code>：要合并到数组中的值或数组。可以是任意数量的数组或值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> combined = arr1.<span class="title function_">concat</span>(arr2, arr3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(combined); <span class="comment">// 输出: [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure></li><li><p><code>slice()</code>：从数组中返回选定的元素，生成一个新数组。它不会修改原始数组，而是返回一个包含选定元素的新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">slice</span>(begin, end)</span><br></pre></td></tr></table></figure><ul><li><code>begin</code>（可选）：从哪个索引开始选择元素。包括该索引。默认为 <code>0</code>。</li><li><code>end</code>（可选）：在哪个索引停止选择元素。排除该索引。默认为数组的长度。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newArr1 = arr1.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr1); <span class="comment">// 输出: [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newArr2 = arr2.<span class="title function_">slice</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr2); <span class="comment">// 输出: [3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>splice()</code>：用于在数组中添加、删除或替换元素，并返回被删除的元素。<code>splice()</code> 方法会修改原始数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">splice</span>(start, deleteCount, item1, item2, ..., itemN)</span><br></pre></td></tr></table></figure><ul><li><code>start</code>：从哪个索引开始改变数组。负值表示从数组的末尾开始计算位置。</li><li><code>deleteCount</code>（可选）：要删除的元素个数。如果省略或为 <code>0</code>，则不会删除元素。</li><li><code>item1, item2, ..., itemN</code>（可选）：要添加到数组中的元素。如果没有提供，则只删除元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> removed1 = arr1.<span class="title function_">splice</span>(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// 输出: [1, 2, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed1); <span class="comment">// 输出: [3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr3.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3); <span class="comment">// 输出: [1, &#x27;a&#x27;, &#x27;b&#x27;, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>toSpliced()</code>：返回一个新数组，该数组是通过对原始数组进行指定的删除和插入操作得到的，而原始数组不会被修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">toSpliced</span>(start, deleteCount, ...items)</span><br></pre></td></tr></table></figure><ul><li><code>start</code>：从哪个索引开始改变数组。负值表示从数组的末尾开始计算位置。</li><li><code>deleteCount</code>（可选）：要删除的元素个数。如果省略或为 <code>0</code>，则不会删除元素。</li><li><code>item1, item2, ..., itemN</code>（可选）：要添加到数组中的元素。如果没有提供，则只删除元素。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newArray = numbers.<span class="title function_">toSpliced</span>(<span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArray); <span class="comment">// 输出: [1, 2, 6, 7, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers); <span class="comment">// 输出: [1, 2, 3, 4, 5] (原始数组未被修改)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="搜索和位置方法">搜索和位置方法</h3><ol><li><p><code>indexOf()</code>：返回数组中第一次出现给定元素的下标，如果不存在则返回 -1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">indexOf</span>(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><ul><li><code>searchElement</code>：要查找的元素。</li><li><code>fromIndex</code>（可选）：开始搜索的索引位置。默认为 <code>0</code>。如果 <code>fromIndex</code> 为负数，它会从数组的末尾开始计算位置。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> index1 = arr1.<span class="title function_">indexOf</span>(<span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index1); <span class="comment">// 输出: 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> index2 = arr2.<span class="title function_">indexOf</span>(<span class="number">7</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index2); <span class="comment">// 输出: -1</span></span><br></pre></td></tr></table></figure></li><li><p><code>lastIndexOf()</code>：返回数组中给定元素最后一次出现的索引，如果不存在则返回 -1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">lastIndexOf</span>(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><ul><li><code>searchElement</code>：要查找的元素。</li><li><code>fromIndex</code>（可选）：开始搜索的索引位置。默认为 <code>0</code>。如果 <code>fromIndex</code> 为负数，它会从数组的末尾开始计算位置。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> index1 = arr1.<span class="title function_">lastIndexOf</span>(<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index1); <span class="comment">// 输出: 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> index2 = arr2.<span class="title function_">lastIndexOf</span>(<span class="number">7</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index2); <span class="comment">// 输出: -1</span></span><br></pre></td></tr></table></figure></li><li><p><code>includes()</code>：判断数组是否包含指定的元素。如果数组中包含该元素，则返回 <code>true</code>；否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">includes</span>(searchElement, fromIndex)</span><br></pre></td></tr></table></figure><ul><li><code>searchElement</code>：要查找的元素。</li><li><code>fromIndex</code>（可选）：开始搜索的索引位置。默认为 <code>0</code>。如果 <code>fromIndex</code> 为负数，它会从数组的末尾开始计算位置。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> includes1 = arr1.<span class="title function_">includes</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(includes1); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> includes2 = arr2.<span class="title function_">includes</span>(<span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(includes2); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li><li><p><code>find()</code>：返回数组中第一个满足提供测试函数的元素。如果没有找到满足条件的元素，则返回 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">find</span>(callbackFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：find 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">let</span> found1 = numbers1.<span class="title function_">find</span>(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(found1); <span class="comment">// 输出: 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people2 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> ageThreshold = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> person2 = people2.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">p</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> p.<span class="property">age</span> &gt; <span class="variable language_">this</span>;</span><br><span class="line">&#125;, ageThreshold);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2); <span class="comment">// 输出: &#123; name: &#x27;Charlie&#x27;, age: 35 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>findIndex()</code>：返回数组中第一个满足提供测试函数的元素的索引。如果没有找到符合条件的元素，则返回 <code>-1</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">findIndex</span>(callbackFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：findIndex 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">let</span> index1 = numbers1.<span class="title function_">findIndex</span>(<span class="function"><span class="params">element</span> =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index1); <span class="comment">// 输出: 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people2 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> ageThreshold = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> index4 = people2.<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">p</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> p.<span class="property">age</span> &gt; <span class="variable language_">this</span>;</span><br><span class="line">&#125;, ageThreshold);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index4); <span class="comment">// 输出: 2</span></span><br></pre></td></tr></table></figure></li><li><p><code>findLast()</code>：返回数组中最后一个满足提供测试函数的元素。如果没有找到满足条件的元素，则返回 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">findLast</span>(callbackFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：findLast 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> found1 = numbers1.<span class="title function_">findLast</span>(<span class="function"><span class="params">element</span> =&gt;</span> element === <span class="number">8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(found1); <span class="comment">// 输出: 8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people1 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Diana&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> person1 = people1.<span class="title function_">findLast</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">age</span> === <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1); <span class="comment">// 输出: &#123; name: &#x27;Diana&#x27;, age: 30 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people2 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Diana&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> ageThreshold = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> person2 = people2.<span class="title function_">findLast</span>(<span class="keyword">function</span>(<span class="params">p</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> p.<span class="property">age</span> === <span class="variable language_">this</span>;</span><br><span class="line">&#125;, ageThreshold);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2); <span class="comment">// 输出: &#123; name: &#x27;Diana&#x27;, age: 30 &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><code>findLastIndex()</code>：返回数组中最后一个满足提供测试函数的元素的索引。如果没有找到满足条件的元素，则返回 <code>-1</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">findLastIndex</span>(callbackFn, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：对每个元素执行的函数。它接受三个参数<ul><li><code>currentValue</code>：数组中正在处理的当前元素</li><li><code>index</code>（可选）：数组中正在处理的当前元素的索引</li><li><code>array</code>（可选）：findLastIndex 方法正在操作的数组</li></ul></li><li><code>thisArg</code>（可选）：执行回调时用作 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> index1 = numbers1.<span class="title function_">findLastIndex</span>(<span class="function"><span class="params">element</span> =&gt;</span> element === <span class="number">8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index1); <span class="comment">// 输出: 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people1 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Diana&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> index2 = people1.<span class="title function_">findLastIndex</span>(<span class="function"><span class="params">p</span> =&gt;</span> p.<span class="property">age</span> === <span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index2); <span class="comment">// 输出: 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people2 = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Bob&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Charlie&#x27;</span>, <span class="attr">age</span>: <span class="number">35</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&#x27;Diana&#x27;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> ageThreshold = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">let</span> index4 = people2.<span class="title function_">findLastIndex</span>(<span class="keyword">function</span>(<span class="params">p</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> p.<span class="property">age</span> === <span class="variable language_">this</span>;</span><br><span class="line">&#125;, ageThreshold);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(index4); <span class="comment">// 输出: 3</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="扁平化方法">扁平化方法</h3><ol><li><p><code>flat()</code>：创建一个新的数组，并根据指定深度递归地将所有子数组元素拼接到新的数组中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">flat</span>(depth);</span><br></pre></td></tr></table></figure><ul><li><strong><code>depth</code></strong>（可选）：一个整数，表示递归的深度。默认值是 <code>1</code>。如果 <code>depth</code> 为 <code>Infinity</code>，则会递归所有嵌套的数组。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nestedArray = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>]]]];</span><br><span class="line"><span class="keyword">let</span> flatArray = nestedArray.<span class="title function_">flat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flatArray); <span class="comment">// 输出: [1, 2, [3, [4]]]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> deeplyNestedArray = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>]]]]];</span><br><span class="line"><span class="keyword">let</span> flatArray3 = deeplyNestedArray.<span class="title function_">flat</span>(<span class="title class_">Infinity</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flatArray3); <span class="comment">// 输出: [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li><li><p><code>flatMap()</code>：对数组中的每个元素应用给定的回调函数，然后将结果展开一级，返回一个新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">flatMap</span>(callback, thisArg)</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>：一个生产新数组元素的函数。接收三个参数：<ul><li><code>currentValue</code>: 当前数组元素。</li><li><code>index</code>（可选）：当前元素的索引。</li><li><code>array</code>（可选）：原始数组。</li></ul></li><li><code>thisArg</code>（可选）：执行 <code>callback</code> 函数时 <code>this</code> 的值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">flatMap</span>(<span class="function"><span class="params">x</span> =&gt;</span> [x, x * <span class="number">2</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// 输出: [1, 2, 2, 4, 3, 6, 4, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> newArr2 = arr2.<span class="title function_">flatMap</span>(<span class="function"><span class="params">x</span> =&gt;</span> x % <span class="number">2</span> === <span class="number">0</span> ? [x] : []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr2); <span class="comment">// 输出: [2, 4]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="其他操作方法">其他操作方法</h3><ol><li><p><code>at()</code>：使用正负整数索引来访问数组中的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> element = array.<span class="title function_">at</span>(index);</span><br></pre></td></tr></table></figure><ul><li><code>index</code>: 一个整数，表示要访问的元素的索引。可以是正数或负数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用正索引</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(<span class="number">0</span>));  <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(<span class="number">2</span>));  <span class="comment">// 输出: 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(<span class="number">4</span>));  <span class="comment">// 输出: 50</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(<span class="number">5</span>));  <span class="comment">// 输出: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用负索引</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(-<span class="number">1</span>)); <span class="comment">// 输出: 50</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(-<span class="number">2</span>)); <span class="comment">// 输出: 40</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(-<span class="number">5</span>)); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">at</span>(-<span class="number">6</span>)); <span class="comment">// 输出: undefined</span></span><br></pre></td></tr></table></figure></li><li><p><code>with()</code>：返回一个新的数组，该数组是对原始数组进行指定索引位置的元素替换后的结果，而不修改原始数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArray = array.<span class="title function_">with</span>(index, value);</span><br></pre></td></tr></table></figure><ul><li><code>index</code>: 要替换的元素的索引。如果是负数，表示从数组末尾开始计数。</li><li><code>value</code>: 要替换的新值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">with</span>(<span class="number">2</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// 输出: [1, 2, 10, 4, 5]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 3, 4, 5] (原始数组未被修改)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newArr2 = arr.<span class="title function_">with</span>(-<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr2); <span class="comment">// 输出: [1, 2, 3, 4, 10]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// 输出: [1, 2, 3, 4, 5] (原始数组未被修改)</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(17)-Global</title>
    <link href="/2024/07/30/JS%E5%AD%A6%E4%B9%A0(17)-Global/"/>
    <url>/2024/07/30/JS%E5%AD%A6%E4%B9%A0(17)-Global/</url>
    
    <content type="html"><![CDATA[<p>Global 对象代码不会显式地访问它。Global 对象针对的是不属于任何对象的属性和方法。全局作用域中定义的变量和函数都会变成 Global 对象的属性 。包括 <code>isNaN()</code>、<code>isFinite()</code>、<code>parseInt()</code>和 <code>parseFloat()</code>，实际上都是 Global 对象的方法。除了这些，Global 对象上还有另外一些方法。</p><span id="more"></span><h1>Global</h1><p>JavaScript 中的 Global 对象提供了许多全局属性和方法，这些属性和方法在任何 JavaScript 代码中都可以直接访问，无需导入或引用。</p><h2 id="全局对象">全局对象</h2><ol><li><p><code>Infinity</code>：表示正无穷大，超出了 JavaScript 能表示的最大数值范围。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span>); <span class="comment">// 输出: Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> / <span class="number">0</span>); <span class="comment">// 输出: Infinity</span></span><br></pre></td></tr></table></figure></li><li><p><code>NaN</code>：表示一个非数字值，通常用于表示无法计算的数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>); <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> / <span class="number">0</span>); <span class="comment">// 输出: NaN</span></span><br></pre></td></tr></table></figure></li><li><p><code>undefined</code>：表示一个未定义的值，通常用于尚未赋值的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: undefined</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="全局函数">全局函数</h2><ol><li><p><code>isFinite()</code>：检查传入的值是否为有限数值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="number">10</span>)); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>)); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li><li><p><code>isNaN()</code>：检查传入的值是否为 <code>NaN</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="number">10</span>)); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li><li><p><code>parseFloat()</code>：将一个字符串解析为浮点数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&quot;10.5&quot;</span>)); <span class="comment">// 输出: 10.5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(<span class="string">&quot;10&quot;</span>)); <span class="comment">// 输出: 10</span></span><br></pre></td></tr></table></figure></li><li><p><code>parseInt()</code>：将一个字符串解析为整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;10.5&quot;</span>)); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>)); <span class="comment">// 输出: 10</span></span><br></pre></td></tr></table></figure></li><li><p><code>encodeURI()</code>：用于对整个 URI 进行编码，不会编码属于 URL 组件的特殊字符，比如冒号、斜杠、问号、 井号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;https://www.example.com/?key=value with spaces&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> encodedUri = <span class="built_in">encodeURI</span>(uri);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(encodedUri); <span class="comment">// 输出: https://www.example.com/?key=value%20with%20spaces</span></span><br></pre></td></tr></table></figure></li><li><p><code>decodeURI()</code>：只对使用 <code>encodeURI()</code>编码过的字符解码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;https://www.example.com/?key=value with spaces&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> encodedUri = <span class="built_in">encodeURI</span>(uri);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(encodedUri); <span class="comment">// 输出: https://www.example.com/?key=value%20with%20spaces</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decodedUri = <span class="built_in">decodeURI</span>(encodedUri);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(decodedUri); <span class="comment">// 输出: https://www.example.com/?key=value with spaces</span></span><br></pre></td></tr></table></figure></li><li><p><code>encodeURIComponent()</code>：会编码它发现的所有非标准字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;http://www.example.com/#start&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> encodedUriComponent = <span class="built_in">encodeURIComponent</span>(uri);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(encodedUriComponent); <span class="comment">// &quot;http%3A%2F%2Fwww.example.com%2F%23start&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>decodeURIComponent()</code>：解码所有 被 <code>encodeURIComponent()</code>编码的字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uri = <span class="string">&quot;http://www.example.com/#start&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> encodedUriComponent = <span class="built_in">encodeURIComponent</span>(uri);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(encodedUriComponent); <span class="comment">// &quot;http%3A%2F%2Fwww.example.com%2F%23start&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decodedUriComponent = <span class="built_in">decodeURIComponent</span>(encodedUriComponent);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(decodedUriComponent); <span class="comment">// &quot;http://www.example.com/#start&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>eval()</code>：将传入的字符串作为 JavaScript 代码执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> code = <span class="string">&#x27;console.log(&quot;Hello, World!&quot;)&#x27;</span>;</span><br><span class="line"><span class="built_in">eval</span>(code); <span class="comment">// 输出: Hello, World!</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(16)-BigInt</title>
    <link href="/2024/07/29/JS%E5%AD%A6%E4%B9%A0(16)-BigInt/"/>
    <url>/2024/07/29/JS%E5%AD%A6%E4%B9%A0(16)-BigInt/</url>
    
    <content type="html"><![CDATA[<p><code>BigInt</code> 是一种内置对象，它提供了一种方法来表示大于 $2^{53} - 1 $ 的整数。 Javascript 中用 <code>Number</code> 表示数字。<code>BigInt</code> 可以表示任意大的整数。</p><span id="more"></span><h1>BigInt</h1><p><code>BigInt</code>类似于<code>Number</code>，但是<code>BigInt</code>不能用于<code>Math</code>对象中的方法，不能和任何<code>Number</code>实例混合运算。</p><h2 id="字面量">字面量</h2><p>在一个整数字面量后面加 <code>n</code> 的方式定义一个 <code>BigInt</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bigInt1 = <span class="number">1234567890123456789012345678901234567890n</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigInt1); <span class="comment">// 输出: 1234567890123456789012345678901234567890n</span></span><br></pre></td></tr></table></figure><h2 id="构造函数">构造函数</h2><p><code>BigInt()</code> 构造函数用来创建 BigInt 对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">BigInt</span>(value)</span><br></pre></td></tr></table></figure><ol><li><strong>value</strong>：被创建的对象的数值。可以是字符串或整数。</li></ol><h2 id="静态方法">静态方法</h2><ol><li><p><code>BigInt.asIntN()</code>：将BigInt值截断为给定的最低有效位数，并将该值作为有符号整数返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bigInt = <span class="number">128n</span>;</span><br><span class="line"><span class="keyword">let</span> intN = <span class="title class_">BigInt</span>.<span class="title function_">asIntN</span>(<span class="number">8</span>, bigInt);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(intN); <span class="comment">// 输出: -128n</span></span><br></pre></td></tr></table></figure></li><li><p><code>BigInt.asUnitN()</code>：将BigInt值截断为给定的最低有效位数，并将该值作为无符号整数返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bigInt = <span class="number">128n</span>;</span><br><span class="line"><span class="keyword">let</span> intN = <span class="title class_">BigInt</span>.<span class="title function_">asUintN</span>(<span class="number">8</span>, bigInt);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(intN); <span class="comment">// 输出: 128n</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><ol><li><p><code>toLocaleString()</code>：返回一个表示给定 BigIng 对象的字符串，该字符串格式因不同语言而不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigint = <span class="number">123456789123456789n</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigint.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;de-DE&#x27;</span>)); <span class="comment">// 123.456.789.123.456.789</span></span><br></pre></td></tr></table></figure></li><li><p><code>toString()</code>：返回一个字符串，表示指定 BigInt 对象，后面的<code>n</code>不是字符串的一部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1024n</span>.<span class="title function_">toString</span>()); <span class="comment">// 1024</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1024n</span>.<span class="title function_">toString</span>(<span class="number">2</span>)); <span class="comment">// 10000000000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1024n</span>.<span class="title function_">toString</span>(<span class="number">16</span>)); <span class="comment">// 400</span></span><br></pre></td></tr></table></figure></li><li><p><code>valueOf()</code>：返回 BigInt 对象包装的原始值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bigIntObj = <span class="title class_">BigInt</span>(<span class="string">&quot;1234567890123456789012345678901234567890&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> originalValue = bigIntObj.<span class="title function_">valueOf</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigIntObj);         <span class="comment">// 输出: 1234567890123456789012345678901234567890n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(originalValue);     <span class="comment">// 输出: 1234567890123456789012345678901234567890n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> originalValue); <span class="comment">// 输出: bigint</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(15)-Symbol</title>
    <link href="/2024/07/28/JS%E5%AD%A6%E4%B9%A0(15)-Symbol/"/>
    <url>/2024/07/28/JS%E5%AD%A6%E4%B9%A0(15)-Symbol/</url>
    
    <content type="html"><![CDATA[<p><code>Symbol</code> 是 ES6 引入的一种新的原始数据类型。每个 <code>Symbol</code> 值都是唯一的，用于生成独一无二的标识符。它是通过调用 <code>Symbol</code> 函数创建的，<code>Symbol</code> 函数不能作为构造函数使用。</p><span id="more"></span><h1>Symbol</h1><p>每个从 <code>Symbol()</code> 返回的 symbol 值都是唯一的。一个 symbol 值能作为对象属性的标识符</p><h2 id="构造函数">构造函数</h2><p><code>Symbol()</code> 构造函数返回一个 <strong>symbol</strong> 类型的值，但是它并不完全支持构造函数的语法，因为它不支持 <code>new Symbol()</code> 语法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="title class_">Symbol</span>(<span class="number">42</span>);</span><br><span class="line"><span class="keyword">const</span> symbol3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> symbol1); <span class="comment">// &#x27;symbol&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbol2 === <span class="number">42</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbol3.<span class="title function_">toString</span>()); <span class="comment">// &#x27;Symbol(foo)&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="静态方法">静态方法</h2><ol><li><p><code>Symbol.for()</code>：<code>Symbol.for()</code> 方法会根据给定的键，来从运行时的 Symbol 注册表中找到对应的 Symbol，如果找到了，则返回它，否则，新建一个与该键关联的 Symbol，并放入全局 Symbol 注册表中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>Symbol.for</code> 与 <code>Symbol</code> 这两种写法，都会生成新的 Symbol。它们的区别是：前者会被登记在全局环境中供搜索，后者不会。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3 === s4); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s3); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.keyFor()</code>：<code>Symbol.keyFor(sym)</code> 方法用来获取全局 symbol 注册表中与某个 symbol 关联的键。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个全局 Symbol</span></span><br><span class="line"><span class="keyword">var</span> globalSym = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(globalSym); <span class="comment">// &quot;foo&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> localSym = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(localSym); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="静态属性">静态属性</h2><ol><li><p><code>Symbol.asyncIterator</code>：指定了一个对象的默认异步迭代器。如果一个对象设置了这个属性，它就是异步可迭代对象，可用于for await…of 循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myAsyncIterable = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">myAsyncIterable[<span class="title class_">Symbol</span>.<span class="property">asyncIterator</span>] = <span class="keyword">async</span> <span class="keyword">function</span>* () &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;async&quot;</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;iteration!&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> x <span class="keyword">of</span> myAsyncIterable) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">        <span class="comment">//    &quot;hello&quot;</span></span><br><span class="line">        <span class="comment">//    &quot;async&quot;</span></span><br><span class="line">        <span class="comment">//    &quot;iteration!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.hasInstance</code>：用于判断某对象是否为某构造器的实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Array1</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](instance) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">isArray</span>(instance);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.isConcatSpreadable</code>：用于配置对象作为 <code>Array.prototype.concat()</code> 方法的参数时是否展开其数组元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> alpha = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> numeric = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> alphaNumeric = alpha.<span class="title function_">concat</span>(numeric);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphaNumeric); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">numeric[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">false</span>;</span><br><span class="line">alphaNumeric = alpha.<span class="title function_">concat</span>(numeric);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphaNumeric); <span class="comment">// [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, Array [1, 2, 3]]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.iterator</code>：为每一个对象定义了默认的迭代器。该迭代器可以被 for…of 循环使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iterable1 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">iterable1[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...iterable1]); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.species</code>：用于设置创建对象时使用的构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> get [<span class="title class_">Symbol</span>.<span class="property">species</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">MyArray</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">let</span> mapped = arr.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped <span class="keyword">instanceof</span> <span class="title class_">MyArray</span>); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.toPrimitive</code>：修改对象转换的原始值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+obj1); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;obj1&#125;</span>`</span>); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 + <span class="string">&quot;&quot;</span>); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接下面声明一个对象，手动赋予了 Symbol.toPrimitive 属性</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>](hint) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hint === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (hint === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+obj2); <span class="comment">// 10  — hint 参数值是 &quot;number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;obj2&#125;</span>`</span>); <span class="comment">// &quot;hello&quot;   — hint 参数值是 &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2 + <span class="string">&quot;&quot;</span>); <span class="comment">// &quot;true&quot;    — hint 参数值是 &quot;default&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Symbol.toStringTag</code>：修改 <code>Object.prototype.toString</code> 的默认行为，使其返回自定义标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  get [<span class="title class_">Symbol</span>.<span class="property">toStringTag</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;MyCustomClass&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(myObj)); <span class="comment">// 输出: [object MyCustomClass]</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><ol><li><p><code>toString</code>：返回当前 symbol 对象的字符串表示。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>(<span class="string">&quot;foo&quot;</span>).<span class="title function_">toString</span>() + <span class="string">&quot;bar&quot;</span>)</span><br><span class="line"><span class="comment">// &quot;Symbol(foo)bar&quot;，就相当于下面的：</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>(<span class="title class_">Symbol</span>(<span class="string">&quot;foo&quot;</span>)).<span class="title function_">toString</span>() + <span class="string">&quot;bar&quot;</span>)</span><br><span class="line"><span class="comment">// &quot;Symbol(foo)bar&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>valueOf()</code>：返回当前 symbol 对象的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> symbol1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>(symbol1)); <span class="comment">// Symbol &#123;Symbol(foo), description: &#x27;foo&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>(symbol1).<span class="title function_">valueOf</span>()); <span class="comment">// Symbol(foo)</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例属性">实例属性</h2><ol><li><p><code>description</code>：是一个只读属性，它会返回 Symbol 对象的可选描述的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;desc&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;desc&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym1 === sym2); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym1.<span class="property">description</span>); <span class="comment">// 输出: &#x27;desc&#x27;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(14)-RegExp</title>
    <link href="/2024/07/27/JS%E5%AD%A6%E4%B9%A0(14)-RegExp/"/>
    <url>/2024/07/27/JS%E5%AD%A6%E4%B9%A0(14)-RegExp/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，<code>RegExp</code> 对象用于匹配字符串中的模式。可以通过字面量或者构造函数创建 <code>RegExp</code> 对象，用于执行匹配、搜索和替换操作。</p><span id="more"></span><h1>RegExp</h1><p>正则表达式是用于匹配字符串中字符组合的模式。</p><h2 id="正则字面量">正则字面量</h2><p>由斜杠 (/) 包围而不是引号包围。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/abc/</span>;</span><br></pre></td></tr></table></figure><h2 id="构造函数">构造函数</h2><p><strong><code>RegExp</code></strong> 用于创建正则表达式对象，该对象用于将文本与一个模式匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">RegExp</span>(pattern [, flags])</span><br></pre></td></tr></table></figure><ol><li><strong>pattern</strong>：要匹配的字符串模式</li><li><strong>flags</strong>：可选的标志字符串</li></ol><h3 id="修饰符">修饰符</h3><ol><li><code>g</code>：全局匹配</li><li><code>i</code>：忽略大小写</li><li><code>m</code>：多行匹配</li><li><code>s</code>：允许 <code>.</code> 匹配换行符</li><li><code>u</code>：Unicode 模式</li><li><code>y</code>：粘性匹配</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/abc/i</span>; <span class="comment">// 忽略大小写匹配 &quot;abc&quot;</span></span><br><span class="line"><span class="keyword">let</span> patternGlobal = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;g&#x27;</span>); <span class="comment">// 全局匹配 &quot;abc&quot;</span></span><br></pre></td></tr></table></figure><h2 id="实例方法">实例方法</h2><ol><li><p><code>test()</code>：执行一个检索，用来查看正则表达式与指定的字符串是否匹配，返回布尔值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/hello/</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="title function_">test</span>(<span class="string">&#x27;Hello world&#x27;</span>)); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern.<span class="title function_">test</span>(<span class="string">&#x27;hello world&#x27;</span>)); <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure></li><li><p><code>exec()</code>：在一个指定字符串中执行一个搜索匹配。返回一个结果数组（未匹配则返回 <code>null</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/hello/</span>;</span><br><span class="line"><span class="keyword">let</span> result = pattern.<span class="title function_">exec</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出: [ &#x27;hello&#x27;, index: 0, input: &#x27;hello world&#x27;, groups: undefined ]</span></span><br></pre></td></tr></table></figure></li><li><p><code>toString()</code>：返回一个表示该正则表达式的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myExp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;a+b+c&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myExp.<span class="title function_">toString</span>()); <span class="comment">// &quot;/a+b+c/&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例属性">实例属性</h2><ol><li><code>global</code>：布尔值，表示是否设置了 g 标记。</li><li><code>ignoreCase</code>：布尔值，表示是否设置了 i 标记。</li><li><code>unicode</code>：布尔值，表示是否设置了 u 标记。</li><li><code>sticky</code>：布尔值，表示是否设置了 y 标记。</li><li><code>lastIndex</code>：整数，表示在源字符串中下一次搜索的开始位置，始终从 0 开始。</li><li><code>multiline</code>：布尔值，表示是否设置了 m 标记。</li><li><code>dotAll</code>：布尔值，表示是否设置了 s 标记。</li><li><code>source</code>：正则表达式的字面量字符串，没有开头和结尾的 斜杠。</li><li><code>flags</code>：正则表达式的标记字符串。始终以字面量而非传入构造函数的字符串模式形式返回</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pattern1 = <span class="regexp">/\[bc\]at/i</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern1.<span class="property">global</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern1.<span class="property">ignoreCase</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern1.<span class="property">multiline</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern1.<span class="property">lastIndex</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern1.<span class="property">source</span>); <span class="comment">// &quot;\[bc\]at&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern1.<span class="property">flags</span>); <span class="comment">// &quot;i&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pattern2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\[bc\\]at&quot;</span>, <span class="string">&quot;i&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern2.<span class="property">global</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern2.<span class="property">ignoreCase</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern2.<span class="property">multiline</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern2.<span class="property">lastIndex</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern2.<span class="property">source</span>); <span class="comment">// &quot;\[bc\]at&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pattern2.<span class="property">flags</span>); <span class="comment">// &quot;i&quot; </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(13)-Math</title>
    <link href="/2024/07/26/JS%E5%AD%A6%E4%B9%A0(13)-Math/"/>
    <url>/2024/07/26/JS%E5%AD%A6%E4%B9%A0(13)-Math/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，<code>Math</code> 对象拥有一些数学常数属性和数学函数方法。<code>Math</code> 对象用于 Number 类型，不支持 BigInt。</p><span id="more"></span><h1>Math</h1><p><code>Math</code> 对象的方法和属性是静态的，可以直接调用而无需创建 <code>Math</code> 对象的实例。</p><h2 id="静态属性">静态属性</h2><ol><li><code>Math.PI</code>：圆周率 π 的值（约等于 3.14159）。</li><li><code>Math.E</code>：自然对数的底数 e（约等于 2.718）。</li><li><code>Math.LN2</code>：2 的自然对数（约等于 0.693）。</li><li><code>Math.LN10</code>：10 的自然对数（约等于 2.302）。</li><li><code>Math.LOG2E</code>：以 2 为底的 e 的对数（约等于 1.442）。</li><li><code>Math.LOG10E</code>：以 10 为底的 e 的对数（约等于 0.434）。</li><li><code>Math.SQRT1_2</code>：1/2 的平方根（约等于 0.707）。</li><li><code>Math.SQRT2</code>：2 的平方根（约等于 1.414）。</li></ol><h2 id="静态方法">静态方法</h2><ol><li><p><code>Marh.abs(x)</code>：返回数值的绝对值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">5</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="number">5</span>));  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.ceil(x)</code>：向上取整，返回大于等于 x 的最小整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">4.2</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(-<span class="number">4.2</span>)); <span class="comment">// -4</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.floor(x)</code>：向下取整，返回小于等于 x 的最大整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">4.8</span>)); <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(-<span class="number">4.8</span>)); <span class="comment">// -5</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.round(x)</code>：四舍五入，返回最接近 x 的整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.5</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">4.4</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.random()</code>：返回一个大于等于 0 且小于 1 的伪随机浮点数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()); <span class="comment">// 随机数（例如: 0.123456789）</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.max(...values)</code>：返回给定一组数中的最大值，如果没有参数，则返回 -Infinity。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.min(...values)</code>：返回给定一组数中的最小值，如果没有参数，则返回 Infinity。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.pow(base, exponent)</code>：返回 base 的 exponent 次幂。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.sqrt(x)</code>：返回 x 的平方根。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="number">16</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.cbrt(x)</code>：返回 x 的立方根。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">cbrt</span>(<span class="number">8</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.hypot(...values)</code>：返回所有参数的平方和的平方根</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">hypot</span>(<span class="number">3</span>, <span class="number">4</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.trunc(x)</code>：返回数字的整数部分，去除小数部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">4.9</span>)); <span class="comment">// 输出: 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(-<span class="number">4.9</span>)); <span class="comment">// 输出: -4</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.sin(x)</code>：返回 x 的正弦值，x 是以弧度表示的角度。</p></li><li><p><code>Marh.cos(x)</code>：返回 x 的余弦值，x 是以弧度表示的角度。</p></li><li><p><code>Marh.tan(x)</code>：返回 x 的正切值，x 是以弧度表示的角度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sin</span>(<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">cos</span>(<span class="title class_">Math</span>.<span class="property">PI</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">tan</span>(<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">4</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>Marh.asin(x)</code>：返回 x 的反正弦值，返回值在 -π/2 到 π/2 之间。</p></li><li><p><code>Marh.acos(x)</code>：返回 x 的反余弦值，返回值在 0 到 π 之间。</p></li><li><p><code>Marh.atan(x)</code>：返回 x 的反正切值，返回值在 -π/2 到 π/2 之间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">asin</span>(<span class="number">1</span>)); <span class="comment">// π/2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">acos</span>(<span class="number">1</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">atan</span>(<span class="number">1</span>)); <span class="comment">// π/4</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(12)-Date</title>
    <link href="/2024/07/25/JS%E5%AD%A6%E4%B9%A0(12)-Date/"/>
    <url>/2024/07/25/JS%E5%AD%A6%E4%B9%A0(12)-Date/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，<code>Date</code> 对象是用于处理日期和时间的内置对象。它允许创建、操作和格式化日期和时间。<code>Date</code> 对象提供了多种方法来获取和设置日期、时间、时区等信息。</p><span id="more"></span><h1>Date</h1><p>内置对象 Date 用来处理日期和时间。</p><h2 id="构造函数">构造函数</h2><p><strong><code>Date()</code></strong> 构造函数可以创建一个 Date 实例或返回代表当前时间的字符串，<code>Date()</code>构造函数有四种基本形式</p><ol><li><p>没有参数：表示实例化时刻的日期和时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(now); <span class="comment">// Thu Jul 25 2024 10:02:28 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>UNIX时间戳：从 1970-01-01T00:00:00Z 到给定时间的毫秒数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timestamp = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1721836800000</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(timestamp); <span class="comment">// Thu Jul 25 2024 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>日期字符串：格式能被<code>Date.parse()</code>方法所识别就行（符合<a href="https://datatracker.ietf.org/doc/html/rfc2822#page-14">IEFT  RFC 2822 timestamps</a>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dateString = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2024-07-25T00:00:00Z&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dateString); <span class="comment">// Thu Jul 25 2024 08:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li><li><p>使用具体的年、月、日、时、分、秒、毫秒：年、月是必须的值，月是从0开始计数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> specificDate = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2024</span>, <span class="number">6</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(specificDate); <span class="comment">// Thu Jul 25 2024 00:00:00 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="静态方法">静态方法</h2><ol><li><p><code>Date.now()</code>：返回自 1970 年 1 月 1 日 00:00:00 (UTC) 到当前时间的毫秒数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timestamp = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(timestamp); <span class="comment">// 1721872958000</span></span><br></pre></td></tr></table></figure></li><li><p><code>Date.parse()</code>：解析一个表示某个日期的字符串，并返回从 1970-1-1 00:00:00 UTC 到该日期对象（该日期对象的 UTC 时间）的毫秒数，如果该字符串无法识别，则返回值为 NaN。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unixTimeZero = <span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="string">&#x27;01 Jan 1970 00:00:00 GMT&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(unixTimeZero); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> javaScriptRelease = <span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="string">&#x27;04 Dec 1995 00:12:00 GMT&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(javaScriptRelease); <span class="comment">// 818035920000</span></span><br></pre></td></tr></table></figure></li><li><p><code>Date.UTC()</code>：返回自 1970 年 1 月 1 日 00:00:00 (UTC) 到当前UTC时间的毫秒数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> utcDate1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">96</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(utcDate1.<span class="title function_">toUTCString</span>()); <span class="comment">// Fri, 02 Feb 1996 03:04:05 GMT</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><h3 id="获取日期和时间">获取日期和时间</h3><ol><li><code>getFullYear()</code>: 获取4位的年份</li><li><code>getMonth()</code>: 获取月份（0-11）</li><li><code>getDate()</code>: 获取月份中的第几天（1-31）</li><li><code>getDay()</code>: 获取星期几（0-6）</li><li><code>getHours()</code>: 获取小时（0-23）</li><li><code>getMinutes()</code>: 获取分钟（0-59）</li><li><code>getSeconds()</code>: 获取秒数（0-59）</li><li><code>getMilliseconds()</code>: 获取毫秒数（0-999）</li><li><code>getUTCFullYear()</code>: 以UTC时间为标准，获取4位的年份</li><li><code>getUTCMonth()</code>: 以UTC时间为标准，获取月份（0-11）</li><li><code>getUTCDate()</code>: 以UTC时间为标准，获取月份中的第几天（1-31）</li><li><code>getUTCDay()</code>: 以UTC时间为标准，获取星期几（0-6）</li><li><code>getUTCHours()</code>: 以UTC时间为标准，获取小时（0-23）</li><li><code>getUTCMinutes()</code>: 以UTC时间为标准，获取分钟（0-59）</li><li><code>getUTCSeconds()</code>: 以UTC时间为标准，获取秒数（0-59）</li><li><code>getUTCMilliseconds()</code>: 以UTC时间为标准，获取毫秒数（0-999）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2024</span>, <span class="number">6</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getFullYear</span>()); <span class="comment">// 2024</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMonth</span>()); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDate</span>()); <span class="comment">// 25</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getDay</span>()); <span class="comment">// 4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getHours</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMinutes</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getSeconds</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getMilliseconds</span>()); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCFullYear</span>()); <span class="comment">// 2024</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCMonth</span>()); <span class="comment">// 6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCDate</span>()); <span class="comment">// 24</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCDay</span>()); <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCHours</span>()); <span class="comment">// 16</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCMinutes</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCSeconds</span>()); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">getUTCMilliseconds</span>()); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="设置日期和时间">设置日期和时间</h3><ol><li><code>setFullYear()</code>: 设置年份</li><li><code>setMonth()</code>: 设置月份（0-11）</li><li><code>setDate()</code>: 设置月份中的第几天（1-31）</li><li><code>setHours()</code>: 设置小时（0-23）</li><li><code>setMinutes()</code>: 设置分钟（0-59）</li><li><code>setSeconds()</code>: 设置秒数（0-59）</li><li><code>setMilliseconds()</code>: 设置毫秒数（0-999）</li><li><code>setUTCFullYear()</code>: 以UTC时间为标准，设置年份</li><li><code>setUTCMonth()</code>: 以UTC时间为标准，设置月份（0-11）</li><li><code>setUTCDate()</code>: 以UTC时间为标准，设置月份中的第几天（1-31）</li><li><code>setUTCHours()</code>: 以UTC时间为标准，设置小时（0-23）</li><li><code>setUTCMinutes()</code>: 以UTC时间为标准，设置分钟（0-59）</li><li><code>setUTCSeconds()</code>: 以UTC时间为标准，设置秒数（0-59）</li><li><code>setUTCMilliseconds()</code>: 以UTC时间为标准，设置毫秒数（0-999）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">date.<span class="title function_">setFullYear</span>(<span class="number">2022</span>);</span><br><span class="line">date.<span class="title function_">setMonth</span>(<span class="number">11</span>);</span><br><span class="line">date.<span class="title function_">setDate</span>(<span class="number">25</span>);</span><br><span class="line">date.<span class="title function_">setHours</span>(<span class="number">7</span>);</span><br><span class="line">date.<span class="title function_">setMinutes</span>(<span class="number">30</span>);</span><br><span class="line">date.<span class="title function_">setSeconds</span>(<span class="number">45</span>);</span><br><span class="line">date.<span class="title function_">setMilliseconds</span>(<span class="number">500</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// Sun Dec 25 2022 07:30:45 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line">date.<span class="title function_">setUTCFullYear</span>(<span class="number">2022</span>);</span><br><span class="line">date.<span class="title function_">setUTCMonth</span>(<span class="number">11</span>);</span><br><span class="line">date.<span class="title function_">setUTCDate</span>(<span class="number">25</span>);</span><br><span class="line">date.<span class="title function_">setUTCHours</span>(<span class="number">7</span>);</span><br><span class="line">date.<span class="title function_">setUTCMinutes</span>(<span class="number">30</span>);</span><br><span class="line">date.<span class="title function_">setUTCSeconds</span>(<span class="number">45</span>);</span><br><span class="line">date.<span class="title function_">setUTCMilliseconds</span>(<span class="number">500</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date); <span class="comment">// Sun Dec 25 2022 15:30:45 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure><h3 id="日期和时间运算">日期和时间运算</h3><ol><li><code>getTime()</code>: 获取自1970-01-01T00:00:00Z以来的毫秒数</li><li><code>setTime(time)</code>: 设置自1970-01-01T00:00:00Z以来的毫秒数</li><li><code>getTimezoneOffset</code>：返回本地时间与 UTC 之间的时差（单位：分钟）。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getTime()</span></span><br><span class="line"><span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2022</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> diff = date1.<span class="title function_">getTime</span>() - date2.<span class="title function_">getTime</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(diff); <span class="comment">// 输出两个日期之间的毫秒数差异</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// setTime()</span></span><br><span class="line"><span class="keyword">const</span> launchDate = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;July 1, 1999, 12:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> futureDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">futureDate.<span class="title function_">setTime</span>(launchDate.<span class="title function_">getTime</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(futureDate); <span class="comment">// Thu Jul 01 1999 12:00:00 GMT+0800 (中国标准时间)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getTimeOffset()</span></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">let</span> offset = date.<span class="title function_">getTimezoneOffset</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(offset); <span class="comment">// -480</span></span><br></pre></td></tr></table></figure><h3 id="格式化日期和时间">格式化日期和时间</h3><ol><li><code>toLocaleString()</code>：返回与浏览器 运行的本地环境一致的日期和时间。</li><li><code>toString()</code>：返回一个字符串，以本地的时区表示</li><li><code>valueOf()</code>：返回 Date 对象的原始值，即从 1970 年 1 月 1 日 0 时 0 分 0 秒（UTC）到该日期的毫秒数。</li><li><code>toDateString()</code>: 将日期转换为字符串格式</li><li><code>toTimeString()</code>: 将时间转换为字符串格式</li><li><code>toISOString()</code>: 将日期转换为ISO 8601格式的字符串</li><li><code>toLocaleDateString()</code>: 根据本地格式将日期转换为字符串</li><li><code>toLocaleTimeString()</code>: 根据本地格式将时间转换为字符串</li><li><code>toUTCString()</code>：将日期转换为一个字符串，使用 UTC 时区。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toLocaleString</span>()); <span class="comment">// 2024/7/25 10:28:22</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toString</span>()); <span class="comment">// Thu Jul 25 2024 10:28:22 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">valueOf</span>()); <span class="comment">// 1721874502812</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toDateString</span>()); <span class="comment">// Thu Jul 25 2024</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toTimeString</span>()); <span class="comment">// 10:28:22 GMT+0800 (中国标准时间)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toISOString</span>()); <span class="comment">// 2024-07-25T02:28:22.812Z</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toLocaleDateString</span>()); <span class="comment">// 2024/7/25</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toLocaleTimeString</span>()); <span class="comment">// 10:28:22</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date.<span class="title function_">toUTCString</span>()); <span class="comment">// Thu, 25 Jul 2024 02:28:22 GMT</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(11)-String</title>
    <link href="/2024/07/24/JS%E5%AD%A6%E4%B9%A0(11)-String/"/>
    <url>/2024/07/24/JS%E5%AD%A6%E4%B9%A0(11)-String/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，<code>String</code> 类型用于表示和操作文本数据。字符串可以使用单引号 (<strong>'</strong>)、双引号 (<strong>&quot;</strong>)、或者反引号（<strong>`</strong>）包围。</p><span id="more"></span><h1>String</h1><h2 id="字符串字面量">字符串字面量</h2><p>字符串可以通过字符串字面量创建为原始值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;Hello, World!&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str3 = <span class="string">`Hello, World!`</span>; <span class="comment">// 反引号用于模板字符串</span></span><br></pre></td></tr></table></figure><h2 id="构造函数">构造函数</h2><p><strong><code>String()</code></strong> 构造函数创建 String 对象。当作为函数调用时，它返回 String 类型的原始值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">String</span>(thing)</span><br><span class="line"><span class="title class_">String</span>(thing)</span><br></pre></td></tr></table></figure><ol><li><strong>thing</strong>：任何要转换为字符串的内容。</li></ol><p>当 <code>String</code> 作为构造函数（使用 <code>new</code>）被调用时，它会创建一个 String 对象，该对象<strong>不是</strong>原始类型。当 <code>String</code> 作为函数被调用时，它会将参数强制转换为一个字符串原始类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> strPrim = <span class="string">&quot;foo&quot;</span>; <span class="comment">// 字面量是一个字符串原始值</span></span><br><span class="line"><span class="keyword">const</span> strPrim2 = <span class="title class_">String</span>(<span class="number">1</span>); <span class="comment">// 被强制转换为字符串原始值“1”</span></span><br><span class="line"><span class="keyword">const</span> strPrim3 = <span class="title class_">String</span>(<span class="literal">true</span>); <span class="comment">// 被强制转换为字符串原始值“true”</span></span><br><span class="line"><span class="keyword">const</span> strObj = <span class="keyword">new</span> <span class="title class_">String</span>(strPrim); <span class="comment">// 使用 `new` 关键字调用 `String` 构造函数返回一个字符串包装对象。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> strPrim); <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> strPrim2); <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> strPrim3); <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> strObj); <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure><h2 id="实例属性">实例属性</h2><ol><li><p><strong>length</strong>：表示字符串中字符的数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringValue = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringValue.<span class="property">length</span>); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="静态方法">静态方法</h2><ol><li><p><code>String.fromCharCode()</code>：返回由指定的 UTF-16 代码单元序列创建的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>); <span class="comment">// ABC</span></span><br><span class="line"><span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">0x2014</span>); <span class="comment">// -</span></span><br></pre></td></tr></table></figure></li><li><p><code>String.fromCodePoint()</code>：返回使用指定的代码点序列创建的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="title function_">fromCodePoint</span>(<span class="number">65</span>, <span class="number">90</span>); <span class="comment">// &quot;AZ&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>String.raw()</code>：处理模板字符串的标签函数，用于获取模板字符串中原始、未转义的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Alice&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> str = <span class="title class_">String</span>.<span class="property">raw</span><span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>\nHow are you?`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// 输出: Hello, Alice\nHow are you?</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实例方法">实例方法</h2><h3 id="获取字符串的值">获取字符串的值</h3><ol><li><p><code>toString()</code>：返回该字符串的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringObj = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringObj); <span class="comment">// String &#123;&#x27;foo&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringObj.<span class="title function_">toString</span>()); <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><code>valueOf()</code>：返回 String 对象的字符串值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringObj = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringObj); <span class="comment">// String &#123;&#x27;foo&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringObj.<span class="title function_">valueOf</span>()); <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="获取字符串指定位置的值">获取字符串指定位置的值</h3><ol><li><p><code>at()</code>：用于在字符串中根据指定的索引返回字符，支持负索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello, world!&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">at</span>(<span class="number">0</span>)); <span class="comment">// 输出: H</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">at</span>(-<span class="number">7</span>)); <span class="comment">// 输出: w</span></span><br></pre></td></tr></table></figure></li><li><p><code>charAt()</code>：返回指定位置的字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">str.<span class="title function_">charAt</span>(<span class="number">1</span>)  <span class="comment">// 输出结果：e </span></span><br></pre></td></tr></table></figure></li><li><p><code>charCodeAt()</code>：返回指定索引位置字符的 UTF-16 值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">1</span>)); <span class="comment">// &quot;b&quot; --&gt; 98</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="字符串包含方法">字符串包含方法</h3><ol><li><p><code>indexOf()</code>：返回第一次出现指定字符串的位置，如果没有找到则返回 -1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;World&quot;</span>)); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure></li><li><p><code>lastIndexOf()</code>：返回指定字符串在字符串中最后一次出现的位置，如果没有找到则返回 -1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World! Hello!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;Hello&quot;</span>)); <span class="comment">// 14</span></span><br></pre></td></tr></table></figure></li><li><p><code>startsWith()</code>：判断当前字符串是否以指定字符串开头，如果是则返回 <code>true</code>，否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&quot;He&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><code>endsWith()</code>：判断一个字符串是否以指定字符串结尾，如果是则返回 <code>true</code>，否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">endsWith</span>(<span class="string">&quot;He&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>includes()</code>：判断一个字符串是否包含另一个字符串，返回布尔值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">includes</span>(<span class="string">&quot;World&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="字符串操作方法">字符串操作方法</h3><ol><li><p><code>concat()</code>：连接一个或多个字符串，并返回新的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> result = str1.<span class="title function_">concat</span>(<span class="string">&quot;, &quot;</span>, str2, <span class="string">&quot;!&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>slice()</code>：提取字符串的一部分，并返回一个新的字符串。不修改原始字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">5</span>)); <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>subString()</code>：提取字符串中两个指定的索引之间的字符。如果未提供结束索引，则返回到字符串末尾的部分。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">0</span>, <span class="number">5</span>)); <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">0</span>)); <span class="comment">// &quot;Hello, World!&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="重复字符串">重复字符串</h3><ol><li><p><code>repeat()</code>：返回一个新字符串，表示将原字符串重复n次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mood = <span class="string">&#x27;Happy! &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`I feel <span class="subst">$&#123;mood.repeat(<span class="number">3</span>)&#125;</span>`</span>); <span class="comment">// I feel Happy! Happy! Happy! </span></span><br></pre></td></tr></table></figure></li></ol><h3 id="补充字符串长度">补充字符串长度</h3><ol><li><p><code>padStart()</code>：用于头部补全。该方法有两个参数，其中第一个参数是一个数字，表示字符串补齐之后的长度；第二个参数是用来补全的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;5&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&#x27;0&#x27;</span>)); <span class="comment">// &quot;05&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>padEnd()</code>：用于尾部补全。该方法也是接收两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;Breaded Mushrooms&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">padEnd</span>(<span class="number">25</span>, <span class="string">&#x27;.&#x27;</span>)); <span class="comment">// &quot;Breaded Mushrooms........&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="移出字符串空白字符">移出字符串空白字符</h3><ol><li><p><code>trim()</code>：字符串的两端移除空白字符，并返回一个新的字符串，不会修改原始字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">&#x27;   Hello world!   &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting); <span class="comment">// &quot;   Hello world!  &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting.<span class="title function_">trim</span>()); <span class="comment">// &quot;Hello world!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>trimEnd()</code>：字符串的结尾移除空白字符，并返回一个新的字符串，不会修改原始字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">&#x27;   Hello world!   &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting); <span class="comment">// &quot;   Hello world!  &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting.<span class="title function_">trimEnd</span>()); <span class="comment">// &quot;   Hello world!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>trimStart()</code>：字符串的开头移除空白字符，并返回一个新的字符串，不会修改原始字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> greeting = <span class="string">&#x27;   Hello world!   &#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting); <span class="comment">// &quot;   Hello world!  &quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeting.<span class="title function_">trimStart</span>()); <span class="comment">// &quot;Hello world!   &quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="字符串转换">字符串转换</h3><ol><li><p><code>toLowerCase()</code>：将字符串转换为小写形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLowerCase</span>()); <span class="comment">// &quot;hello, world!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toLocaleLowerCase()</code>：根据特定区域设置的大小写映射规则，将字符串转换为小写形式并返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLocaleLowerCase</span>()); <span class="comment">// &quot;hello, world!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toUpperCase()</code>：将字符串转换为大写形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toUpperCase</span>()); <span class="comment">// &quot;HELLO, WORLD!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toLocaleUpperCase()</code>：根据特定区域设置的大小写映射规则，将字符串转换为大写形式并返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">toLocaleUpperCase</span>()); <span class="comment">// &quot;HELLO, WORLD!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>isWellFormed()</code>：检测字符串是否是有效的 UTF-16 编码序列。此方法返回一个布尔值，表示字符串是否包含任何无效的 Unicode 代码点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validEmojiString = <span class="string">&quot;😀&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">isWellFormed</span>(validEmojiString)); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> invalidSurrogatePair = <span class="string">&quot;😀\uD800&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">isWellFormed</span>(invalidSurrogatePair)); <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> loneLowSurrogate = <span class="string">&quot;\uDC00&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">isWellFormed</span>(loneLowSurrogate)); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure></li><li><p><code>toWellFormed()</code>：将给定字符串转换为一个有效的 UTF-16 编码序列。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> invalidString = <span class="string">&quot;Hello, world!\uD800&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> wellFormedString = <span class="title class_">String</span>.<span class="title function_">toWellFormed</span>(invalidString);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(wellFormedString); <span class="comment">// 输出: Hello, world!� (或其他替换字符)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="字符串模式匹配">字符串模式匹配</h3><ol><li><p><code>split()</code>：用于把一个字符串分割成字符串数组。该方法不会改变原始字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.<span class="title function_">split</span>(separator,limit)</span><br></pre></td></tr></table></figure><p>该方法有两个参数：</p><ul><li>separator：必需。字符串或正则表达式，从该参数指定的地方分割 string。</li><li>limit：可选。该参数可指定返回的数组的最大长度</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">str.<span class="title function_">split</span>(<span class="string">&quot;c&quot;</span>);    <span class="comment">// [&quot;ab&quot;, &quot;def&quot;]</span></span><br><span class="line">str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>, <span class="number">4</span>)   <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;] </span></span><br></pre></td></tr></table></figure></li><li><p><code>search()</code>：在 String 对象中执行正则表达式的搜索，寻找匹配项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> paragraph = <span class="string">&quot;I think Ruth&#x27;s dog is cuter than your dog!&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/[^\w\s&#x27;]/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(paragraph.<span class="title function_">search</span>(regex)); <span class="comment">// 41</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(paragraph[paragraph.<span class="title function_">search</span>(regex)]); <span class="comment">// &quot;!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>replace()</code>：用于使用指定字符串替换当前字符串中匹配指定正则表达式模式的子字符串，并返回完成替换后的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> paragraph = <span class="string">&quot;I think Ruth&#x27;s dog is cuter than your dog!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(paragraph.<span class="title function_">replace</span>(<span class="string">&quot;dog&quot;</span>, <span class="string">&#x27;ferret&#x27;</span>)); <span class="comment">// &quot;I think Ruth&#x27;s ferret is cuter than your dog!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>replaceAll()</code>：用于使用指定字符串替换所有当前字符串中匹配指定正则表达式模式的子字符串，并返回完成替换后的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> paragraph = <span class="string">&quot;I think Ruth&#x27;s dog is cuter than your dog!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(paragraph.<span class="title function_">replace</span>(<span class="string">&quot;dog&quot;</span>, <span class="string">&#x27;ferret&#x27;</span>)); <span class="comment">// &quot;I think Ruth&#x27;s ferret is cuter than your ferret!&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>match()</code>：使用指定的正则表达式模式在当前字符串中进行匹配查找，并返回数组形式的查找结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> paragraph = <span class="string">&#x27;The quick brown fox jumps over the lazy dog. It barked.&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/[A-Z]/g</span>;</span><br><span class="line"><span class="keyword">const</span> found = paragraph.<span class="title function_">match</span>(regex);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(found); <span class="comment">// [&#x27;T&#x27;, &#x27;I&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>matchAll()</code>：返回一个包含所有匹配正则表达式的结果及分组捕获组的迭代器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;table football foosball&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regexp = <span class="title class_">RegExp</span>(<span class="string">&#x27;foo[a-z]*&#x27;</span>, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> matches = str.<span class="title function_">matchAll</span>(regexp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> match <span class="keyword">of</span> matches) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(match[<span class="number">0</span>], match.<span class="property">index</span>, match.<span class="property">index</span> + match[<span class="number">0</span>].<span class="property">length</span>); <span class="comment">// football 6 14 foosball 15 23</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(10)-Boolean</title>
    <link href="/2024/07/23/JS%E5%AD%A6%E4%B9%A0(10)-Boolean/"/>
    <url>/2024/07/23/JS%E5%AD%A6%E4%B9%A0(10)-Boolean/</url>
    
    <content type="html"><![CDATA[<p>在JavaScript中，<code>Boolean</code>类型用于表示两个值：<code>true</code> 和 <code>false</code>。布尔值在逻辑运算、条件判断以及控制代码执行路径中非常重要。</p><span id="more"></span><h1>Boolean</h1><p>JavaScript 的 <code>Boolean</code> 内置对象是一个用于包装布尔值的对象。它可以将布尔值 <code>true</code> 或 <code>false</code> 包装成对象，通常情况下，我们直接使用布尔值，而不是 <code>Boolean</code> 对象。</p><h2 id="构造函数">构造函数</h2><p><code>Boolean()</code> 构造函数可以创建 Boolean对象或返回布尔类型的原始值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Boolean</span>([value])</span><br></pre></td></tr></table></figure><ol><li><strong>value</strong>：可选参数。任何值。如果省略或其值为 <code>0</code>, <code>-0</code>,  <code>0n</code>, <code>null</code>, <code>false</code>, <code>NaN</code>, <code>undefined</code> 或者空字符串（“”），则该对象的初始值为 <code>false</code>。所有其他的值，包括任何对象、空数组（<code>[]</code>）或字符串 <code>&quot;false&quot;</code>，都会创建一个初始值为 <code>true</code> 的对象。</li></ol><h2 id="实例方法">实例方法</h2><ol><li><p><code>toString()</code>：返回表示指定的布尔对象的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> boolObj = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(boolObj.<span class="title function_">toString</span>()); <span class="comment">// &quot;true&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>valueOf()</code>： 返回一个Boolean 对象的原始值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">Boolean</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">valueOf</span>()); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> y = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="string">&#x27;Mozilla&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y.<span class="title function_">valueOf</span>()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(9)-Number</title>
    <link href="/2024/07/22/JS%E5%AD%A6%E4%B9%A0(9)-Number/"/>
    <url>/2024/07/22/JS%E5%AD%A6%E4%B9%A0(9)-Number/</url>
    
    <content type="html"><![CDATA[<p>在 JavaScript 中，<code>Number</code> 类型是用于表示数字的基本数据类型。它可以表示整数、浮点数、正数、负数、以及一些特殊的值如 <code>Infinity</code> 和 <code>NaN</code>。JavaScript 中所有数字都是以64位双精度浮点数（IEEE 754标准）存储的。</p><span id="more"></span><h1>Number</h1><p><code>Number</code> 构造函数包含常量和处理数值的方法。其他类型的值可以使用 <code>Number()</code> 函数转换为数字。</p><h2 id="数字字面量">数字字面量</h2><p>JavaScript 支持多种表示数字的方式：</p><ol><li><p><strong>十进制</strong>：常见的数字表示方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decimal = <span class="number">42</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>浮点数</strong>：包含小数点的数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> float = <span class="number">3.14</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>科学计数法</strong>：用于表示非常大的或非常小的数字。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> largeNumber = <span class="number">6.022e23</span>; <span class="comment">// 6.022 × 10^23</span></span><br></pre></td></tr></table></figure></li><li><p><strong>数字分隔符</strong>：使用下划线 <code>_</code> 作为分隔符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> billion = <span class="number">1_000_000_000</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>八进制</strong>：以 <code>0o</code> 或 <code>0O</code> 开头。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> octal = <span class="number">0o755</span>; <span class="comment">// 八进制 755</span></span><br></pre></td></tr></table></figure></li><li><p><strong>十六进制</strong>：以 <code>0x</code> 或 <code>0X</code> 开头。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hex = <span class="number">0x2A</span>; <span class="comment">// 十六进制 2A，即 42</span></span><br></pre></td></tr></table></figure></li><li><p><strong>二进制</strong>：以 <code>0b</code> 或 <code>0B</code> 开头。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> binary = <span class="number">0b101010</span>; <span class="comment">// 二进制 101010，即 42</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="特殊值">特殊值</h2><ol><li><p><strong>Infinity 和 -Infinity</strong>：表示无穷大和负无穷大。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> positiveInfinity = <span class="title class_">Infinity</span>;</span><br><span class="line"><span class="keyword">let</span> negativeInfinity = -<span class="title class_">Infinity</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>NaN</strong>(Not-a-Number)：表示一个非数字的值，通常是非法数学操作的结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notANumber = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> / <span class="number">0</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Number对象">Number对象</h2><p>JavaScript 提供了一个<code>Number</code>对象，用于包装数字类型，并提供了一些静态属性和方法。</p><h3 id="构造函数">构造函数</h3><p>Number 是对应数值的引用类型。要创建一个 Number 对象，就使用 Number 构造函数并传入一个 数值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Number</span>([value]);</span><br></pre></td></tr></table></figure><ol><li><strong>value</strong>：可选，任意类型，表示数字的任意值，默认为0</li></ol><h3 id="静态属性">静态属性</h3><ol><li><p><strong>Number.EPSILON</strong>：判断两个浮点数是否“足够接近”，从而认为它们相等，因为在 JavaScript 中，直接比较两个浮点数是否相等可能会导致意外结果，因为浮点数的表示精度有限。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">areFloatsEqual</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">abs</span>(a - b) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num1 = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">let</span> num2 = <span class="number">0.3</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">areFloatsEqual</span>(num1, num2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.MAX_SAFE_VALUE</strong>：JavaScript 中最大的安全整数，即 $ 2^{53} - 1 $ 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>); <span class="comment">// 9007199254740991</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.MAX_VALUE</strong>：JavaScript 中能表示的最大数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>); <span class="comment">// 1.7976931348623157e+308</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.MIN_SAFE_VALUE</strong>：JavaScript 中最小的安全整数，即 $ - 2^{53} + 1 $  。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_SAFE_INTEGER</span>); <span class="comment">// -9007199254740991</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.MIN_VALUE</strong>：JavaScript 中能表示的最小的正数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>); <span class="comment">// 5e-324</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.NaN</strong>：表示 NaN。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">NaN</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.NEGATIVE_INFINITY</strong>：表示负无穷大。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">NEGATIVE_INFINITY</span>); <span class="comment">// -Infinity</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Number.POSITIVE_INFINITY</strong>：表示正无穷大。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">POSITIVE_INFINITY</span>); <span class="comment">// Infinity</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="静态方法">静态方法</h3><ol><li><p><code>Number.isFinite(value)</code>：检查值是否是有限的（非 <code>Infinity</code>、<code>-Infinity</code> 或 <code>NaN</code>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">42</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Number.isInteger(value)</code>：检查值是否是整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">42</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">3.14</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Number.isNaN(value)</code>：检查值是否是 <code>NaN</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">42</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Number.isSafeInteger(value)</code>：判断传入的值是否为安全整数 ( $ -2^{53} + 1 $ 至 $ 2^{53} - 1 $ 之间)。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isSafeInteger</span>(<span class="number">9007199254740992</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li><li><p><code>Number.parseFloat(string)</code>：解析一个参数（必要时先转换为字符串）为浮点数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.14&#x27;</span>)); <span class="comment">// 3.14</span></span><br></pre></td></tr></table></figure></li><li><p><code>Number.parseInt(string, [radix])</code>：将字符串解析为指定基数的十进制整数，<code>radix</code> 是进制基数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;0xFF&#x27;</span>, <span class="number">16</span>)); <span class="comment">// 255</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="实例方法">实例方法</h3><ol><li><p><code>toExponential(fractionDigits)</code>：将数字格式化为指数计数法的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">42</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toExponential</span>(<span class="number">2</span>)); <span class="comment">// &quot;4.20e+1&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toFixed(digits)</code>：将数字格式化为固定小数位的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">3.14159</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toFixed</span>(<span class="number">2</span>)); <span class="comment">// &quot;3.14&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toLocaleString(digits)</code>：将数字格式化为固定小数位的字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">1234567.89</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;de-DE&#x27;</span>)); </span><br><span class="line"><span class="comment">// 输出: &quot;1.234.567,89&quot; （德国格式）</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(number.<span class="title function_">toLocaleString</span>(<span class="string">&#x27;ja-JP&#x27;</span>)); </span><br><span class="line"><span class="comment">// 输出: &quot;1,234,567.89&quot; （日本格式）</span></span><br></pre></td></tr></table></figure></li><li><p><code>toPrecision(precision)</code>：将数字格式化为本地化字符串表示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">42.12345</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toPrecision</span>(<span class="number">5</span>)); <span class="comment">// &quot;42.123&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>toString(radix)</code>：将数字转换为字符串，<code>radix</code> 是进制基数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">42</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">2</span>)); <span class="comment">// &quot;101010&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">16</span>)); <span class="comment">// &quot;2a&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>valueOf()</code>：返回指定对象的原始值，通常是隐式调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numObj = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">42</span>);</span><br><span class="line"><span class="keyword">let</span> result = numObj + <span class="number">8</span>; <span class="comment">// numObj.valueOf() 隐式调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出: 50</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(8)-跳转语句</title>
    <link href="/2024/07/21/JS%E5%AD%A6%E4%B9%A0(8)-%E8%B7%B3%E8%BD%AC%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/07/21/JS%E5%AD%A6%E4%B9%A0(8)-%E8%B7%B3%E8%BD%AC%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<p>跳转语句用于改变程序执行的顺序。它们可以在程序的不同部分之间跳转，通常用于控制流程、异常处理和循环控制。常见的跳转语句包括 <code>break</code>、<code>continue</code>、<code>return</code> 和 <code>throw</code>。</p><span id="more"></span><h1>跳转语句</h1><p>跳转语句用于改变代码执行的顺序。</p><h2 id="标签语句">标签语句</h2><p>标签语句用于给语句加标签，在后面通过<code>break</code>或<code>continue</code>语句引用，标签语句的典型应用场景是嵌套循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">start</span>: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="break">break</h2><p><code>break</code> 语句用于立即退出最内层的 <code>for</code>、<code>while</code> 或 <code>switch</code> 语句。，强制执行下一条语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p><code>break</code> 语句可以与标签语句一起使用，使<code>break</code> 语句退出到标签标识的语句位置，多用于嵌套循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="attr">outermost</span>: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span> outermost;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><h2 id="continue">continue</h2><p><code>continue</code> 语句用于跳过当前迭代并进入下一次循环迭代，仅适用于循环语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p><code>continue</code> 语句也可以与标签语句一起使用，使<code>continue</code> 语句跳到标签标识的语句位置，多用于嵌套循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="attr">outermost</span>: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span> outermost;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><h2 id="return">return</h2><p><code>return</code> 语句用于退出当前函数并返回一个值。如果函数没有显式返回值，则返回 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b; <span class="comment">// 返回 a 和 b 的和</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">sum</span>(<span class="number">5</span>, <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 return 提前退出函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAge</span>(<span class="params">age</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (age &lt; <span class="number">18</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Minor&quot;</span>; <span class="comment">// 提前退出函数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Adult&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkAge</span>(<span class="number">15</span>)); <span class="comment">// 输出 &quot;Minor&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkAge</span>(<span class="number">20</span>)); <span class="comment">// 输出 &quot;Adult&quot;</span></span><br></pre></td></tr></table></figure><h2 id="with">with</h2><p><code>with</code>语句的用途是将代码作用域设置为特定的对象，使用<code>with</code>语句的主要场景是针对一个对象反复操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> (obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出 1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出 2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 输出 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(7)-循环语句</title>
    <link href="/2024/07/20/JS%E5%AD%A6%E4%B9%A0(7)-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/07/20/JS%E5%AD%A6%E4%B9%A0(7)-%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<p>循环语句用于重复执行某段代码，直到满足某个条件为止。循环语句可以帮助减少代码冗余，使代码更加简洁和高效。</p><span id="more"></span><h1>循环语句</h1><p>循环语句用于重复执行某段代码，直到满足某个条件为止。</p><h2 id="for-语句">for 语句</h2><p><code>for</code> 循环通常用于已知循环次数的情况。它由初始化语句、条件表达式和迭代语句组成。</p><ol><li><strong>初始化语句</strong>：在循环开始前执行一次，通常用于初始化计数器变量。</li><li><strong>条件表达式</strong>：在每次迭代开始前进行求值，如果条件为真，则执行循环体；如果条件为假，则退出循环。</li><li><strong>迭代语句</strong>：在每次循环体执行后执行，用于更新计数器变量。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 输出 0 到 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="while-语句">while 语句</h2><p><code>while</code> 循环用于未知循环次数的情况，当条件表达式为真时执行循环体。</p><ol><li><strong>条件表达式</strong>：在每次迭代开始前进行求值，如果条件为真，则执行循环体；如果条件为假，则退出循环。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">5</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 输出 0 到 4</span></span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="do-whiile-语句">do-whiile 语句</h2><p><code>do-while</code> 循环与 <code>while</code> 循环类似，但会先执行一次循环体，然后再检查条件表达式。</p><ol><li><strong>循环体</strong>：无条件执行一次，然后重复执行，直到条件表达式为假为止。</li><li><strong>条件表达式</strong>：在每次循环体执行后进行求值，如果条件为真，则继续执行循环体；如果条件为假，则退出循环。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 输出 0 到 4</span></span><br><span class="line">    i++;</span><br><span class="line">&#125; <span class="keyword">while</span> (i &lt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure><h2 id="for-in-语句">for-in 语句</h2><p><code>for-in</code> 循环用于遍历对象的可枚举属性。</p><ol><li><strong>key</strong>：在每次迭代时，变量 <code>key</code> 被赋值为对象的一个属性名。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(key, obj[key]); <span class="comment">// 输出 &quot;a 1&quot;, &quot;b 2&quot;, &quot;c 3&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-of-语句">for-of 语句</h2><p><code>for-of</code> 循环用于遍历可迭代对象（如数组、字符串、Map、Set 等）的元素。</p><ol><li><strong>value</strong>：在每次迭代时，变量 <code>value</code> 被赋值为可迭代对象的一个元素。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出 1, 2, 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-await-of-语句">for-await-of 语句</h2><p><code>for-await-of</code>循环用于处理异步可迭代对象，它允许在循环中等待每个异步操作完成</p><ol><li><strong>variable</strong>: 在每次迭代时，变量被赋值为异步可迭代对象的一个值。</li><li><strong>iterable</strong>: 一个实现了 <code>Symbol.asyncIterator</code> 方法的异步可迭代对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个异步生成器函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">asyncGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">delay</span> = ms =&gt; <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">setTimeout</span>(resolve, ms));</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>); <span class="comment">// 模拟异步操作</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">delay</span>(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 for-await-of 循环迭代异步生成器</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> value <span class="keyword">of</span> <span class="title function_">asyncGenerator</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 输出 1, 2, 3，每个值之间间隔 1 秒</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟一个返回异步可迭代对象的函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>* <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> urls = [</span><br><span class="line">        <span class="string">&quot;https://api.example.com/data1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://api.example.com/data2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://api.example.com/data3&quot;</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> url <span class="keyword">of</span> urls) &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">        <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span><br><span class="line">        <span class="keyword">yield</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 for-await-of 循环处理异步数据流</span></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">let</span> data <span class="keyword">of</span> <span class="title function_">fetchData</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 逐个输出从 API 获取的数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><code>for-await-of</code> 只能用于异步可迭代对象，不能用于普通的同步可迭代对象。</li><li>必须在 <code>async</code> 函数中使用 <code>for-await-of</code> 循环。</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(6)-条件语句</title>
    <link href="/2024/07/19/JS%E5%AD%A6%E4%B9%A0(6)-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/07/19/JS%E5%AD%A6%E4%B9%A0(6)-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的，可以通过控制语句的执行顺序来实现想要的业务逻辑和功能。</p><span id="more"></span><h1>条件语句</h1><p>条件语句用于根据某个条件的真假来决定执行哪个代码块</p><h2 id="代码块">代码块</h2><p>代码块是由一对大括号 <code>&#123;&#125;</code> 包围的一组语句。代码块用于定义一组逻辑上相关的语句，使它们可以一起执行。代码块通常用于控制语句、函数和类的定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 这是一个代码块</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition is true&quot;</span>);</span><br><span class="line">    <span class="comment">// 这里可以包含多个语句</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 另一个代码块</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition is false&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 这是一个代码块</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    <span class="comment">// 这里可以包含多个语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 这是一个代码块</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Looping&quot;</span>);</span><br><span class="line">    <span class="comment">// 这里可以包含多个语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="comment">// 这是一个代码块</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, &quot;</span> + name);</span><br><span class="line">    <span class="comment">// 这里可以包含多个语句</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayHello</span>(<span class="string">&quot;Alice&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="if语句">if语句</h2><p><code>if</code> 语句有三种形式，<code>if</code> 语句条件可以是任何表达式，并且求值结果不一定是布尔值。JavaScript 会自动调用<code>Boolean()</code>函数将这个表达式的值转换为布尔值。</p><h3 id="if">if</h3><p>根据条件判断是否执行某段代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 当 condition 为 true 时执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition is true&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if-else">if-else</h3><p>根据条件的真假执行不同的代码块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 当 condition 为 true 时执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition is true&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 当 condition 为 false 时执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition is false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="else-if">else-if</h3><p>用于检查多个条件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">    <span class="comment">// 当 condition1 为 true 时执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition1 is true&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition2) &#123;</span><br><span class="line">    <span class="comment">// 当 condition1 为 false 且 condition2 为 true 时执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Condition2 is true&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 当 condition1 和 condition2 都为 false 时执行</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Both conditions are false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch语句">switch语句</h2><p><code>switch</code> 语句允许一个程序求一个表达式的值并且尝试去匹配表达式的值到一个 <code>case</code> 标签。如果匹配成功，这个程序执行相关的语句。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">value1</span>:</span><br><span class="line">        <span class="comment">// 当 expression === value1 时执行</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Value is value1&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">value2</span>:</span><br><span class="line">        <span class="comment">// 当 expression === value2 时执行</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Value is value2&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="comment">// 当 expression 不等于上面的值时执行</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Value does not match&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><ol><li>计算出表达式的值，和各个 <code>case</code> 依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中，遇到 <code>break</code> 就会结束。</li><li>如果所有的 <code>case</code> 都和表达式的值不匹配，就会执行 <code>default</code> 语句。</li><li>如果没有找到 <code>default</code>，程序会继续执行 <code>switch</code> 语句后面的语句</li></ol>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(5)-类型转换</title>
    <link href="/2024/07/18/JS%E5%AD%A6%E4%B9%A0(5)-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2024/07/18/JS%E5%AD%A6%E4%B9%A0(5)-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<p>Javascript 是一种弱类型语言，这意味着变量是没有明确类型的，而是由 JavaScript 引擎在编译时隐式完成，类型转换是将一种数据类型转换为另一种数据类型。</p><span id="more"></span><h1>类型转换</h1><p>任何数据类型，无论是原始类型还是对象，都可以进行类型转换。尽管原始类型和对象的转换逻辑各不相同，但是都只能转换为三种类型：<strong>字符串（string）、数字（number）、布尔值（boolean）</strong>。</p><p>JavaScript 中的类型转换有两种方式：</p><ol><li>**隐式类型转换：**由 JavaScript 编译器完成的自动类型转换。</li><li>**显式类型转换：**由开发人员完成的手动类型转换。</li></ol><h2 id="显式类型转换">显式类型转换</h2><p>通过 JavaScript 内置的一些 API 将一种类型转换为另一种类型，这称为显式类型转化。</p><h3 id="String类型转换">String类型转换</h3><p>使用<code>String()</code>和<code>.toString()</code>可以将不同类型的值转换为字符串，<code>String()</code>函数可以将任何类型的值转换为字符串，需要注意的是，<code>null</code> 和 <code>undefined</code> 没有 <code>toString()</code> 方法，直接调用会导致错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 String() 函数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(<span class="number">123</span>));        <span class="comment">// &quot;123&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(<span class="literal">true</span>));       <span class="comment">// &quot;true&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));  <span class="comment">// &quot;1,2,3&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(&#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;)); <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(<span class="literal">null</span>));        <span class="comment">// &quot;null&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(<span class="literal">undefined</span>));       <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 toString() 方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">123</span>).<span class="title function_">toString</span>());       <span class="comment">// &quot;123&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="literal">true</span>).<span class="title function_">toString</span>());      <span class="comment">// &quot;true&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">toString</span>());   <span class="comment">// &quot;1,2,3&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((&#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;).<span class="title function_">toString</span>()); <span class="comment">// &quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Number类型转换">Number类型转换</h3><p>有3个函数可以把非数值转换为数值，<code>Number()</code>、<code>parseInt()</code>和<code>parseFloat()</code>。<code>Number()</code>可以用于任何数据类型，另外两个用于把字符串转换成数值。</p><ol><li><p><code>Number()</code>：可以用于任何数据类型</p><ul><li><p>如果是 Boolean 值，true 和 false 分别被转换为 1 和 0</p></li><li><p>如果是 null 值，返回 0</p></li><li><p>如果是 undefined，返回 NaN</p></li><li><p>如果是字符串，遵循下列规则：</p><ul><li>如果字符串中只包含数字（有效的进制数值），则将其转换为十进制数值</li><li>如果字符串中包含有效的浮点格式，则将其转换为对应的浮点数值</li><li>如果字符串是空的，则将其转换为 0</li><li>如果字符串包含除上述格式之外的字符，则将其转换为 NaN</li></ul></li><li><p>如果是对象，调用 <code>valueOf()</code>方法，并按照上述规则转换返回的值。如果转换结果是 NaN，则调用 <code>toString()</code>方法，再按照转换字符串的规则转换</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="title class_">Number</span>(<span class="literal">true</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="title class_">Number</span>(<span class="literal">false</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="title class_">Number</span>(<span class="literal">null</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="title class_">Number</span>(<span class="literal">undefined</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="title class_">Number</span>(<span class="string">&quot;000011&quot;</span>); <span class="comment">// 11</span></span><br><span class="line"><span class="keyword">let</span> num6 = <span class="title class_">Number</span>(<span class="string">&quot;0xf&quot;</span>); <span class="comment">// 15</span></span><br><span class="line"><span class="keyword">let</span> num7 = <span class="title class_">Number</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> num8 = <span class="title class_">Number</span>(<span class="string">&quot;Hello world!&quot;</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure></li><li><p><code>parseInt()</code>：用于把字符串转换成整数</p><ul><li>如果第一个字符不是数值字符、加号或减号，返回 NaN。</li><li>空字符串也会返回 NaN</li><li>如果第一个字符是数值字符、加号或减号，则继续依次检测每个字符，直到字符串末尾，或碰到非数值字符</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseInt</span>(<span class="string">&quot;1234blue&quot;</span>); <span class="comment">// 1234</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseInt</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">parseInt</span>(<span class="string">&quot;0xA&quot;</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>); <span class="comment">// 22</span></span><br></pre></td></tr></table></figure></li><li><p><code>parseFloat()</code>：用于把字符串转换成浮点数</p><ul><li>如果第一个字符是数值字符、加号或减号，则继续依次检测每个字符，直到字符串末尾，或碰到无效的浮点数值字符</li><li>忽略字符串开头的零</li><li>十六进制数值始终会返回 0</li><li>如果字符串表示整数（没有小数点或者小数点后面只有一个零），则 parseFloat()返回整数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseFloat</span>(<span class="string">&quot;+1234blue&quot;</span>); <span class="comment">// 1234</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseFloat</span>(<span class="string">&quot;22.34.5&quot;</span>); <span class="comment">// 22.34</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">parseFloat</span>(<span class="string">&quot;0908.5&quot;</span>); <span class="comment">// 908.5 </span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">parseFloat</span>(<span class="string">&quot;0xA&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> num5 = <span class="built_in">parseFloat</span>(<span class="string">&quot;22.0&quot;</span>); <span class="comment">// 22</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Boolean类型转换">Boolean类型转换</h3><p>任何数据类型的值调用<code>Boolean()</code>函数，总是会返回一个 Boolean 值，至于返回的是<code>true</code>还是<code>false</code>，取决于要转换值的数据类型及其实际值，下表是各类型对应转换的规则：</p><table><thead><tr><th>数据类型</th><th>转换为true的值</th><th>转换为false的值</th></tr></thead><tbody><tr><td>Boolean</td><td>true</td><td>false</td></tr><tr><td>String</td><td>任何非空的字符串</td><td>“”（空字符串）</td></tr><tr><td>Number</td><td>任何非零数字值（包括无穷大）</td><td>0和NaN</td></tr><tr><td>Object</td><td>任何对象</td><td>null</td></tr><tr><td>undefined</td><td>不适用</td><td>undefined</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&quot;hello world&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="string">&quot;&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="title class_">Infinity</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">1234</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="title class_">NaN</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(&#123;<span class="attr">key</span>: <span class="string">&#x27;key1&#x27;</span>, <span class="attr">value</span>: <span class="string">&#x27;val1&#x27;</span>&#125;)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">null</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Boolean</span>(<span class="literal">undefined</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="隐式类型转换">隐式类型转换</h2><p>隐式类型转换是指 JavaScript 引擎在遇到不同类型的数据时自动进行类型转换，以便进行相应的操作。</p><h3 id="加号运算符">加号运算符</h3><p>当遇到加号运算符的时候，会按照以下规则进行转换，优先级从高到低</p><ol><li>如果只有一侧有值，会将该值转换为<code>Number</code>类型</li><li>当一侧为<code>String</code>类型，被识别为字符串拼接，并会优先将另一侧转换为字符串类型。</li><li>当一侧为<code>Number</code>类型，另一侧为原始类型，则将原始类型转换为<code>Number</code>类型。</li><li>当一侧为<code>Number</code>类型，另一侧为引用类型，将引用类型和<code>Number</code>类型转换成字符串后拼接。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="string">&#x27; &#x27;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="string">&#x27;String&#x27;</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="literal">true</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="literal">undefined</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="literal">null</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+&#123;&#125;); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+[]); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> + <span class="number">1</span>); <span class="comment">// &#x27;11&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> + <span class="literal">true</span>); <span class="comment">// &#x27;1true&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> + <span class="string">&quot;string&quot;</span>); <span class="comment">// &#x27;1string&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> + <span class="literal">null</span>); <span class="comment">// &#x27;1null&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> + <span class="literal">undefined</span>); <span class="comment">// &#x27;1undefined&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;1&#x27;</span> + &#123;&#125;); <span class="comment">// &#x27;1[object Object]&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="number">1</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="literal">true</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="literal">null</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + <span class="literal">undefined</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> + &#123;&#125;); <span class="comment">// &#x27;1[object Object]&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="减乘除运算符">减乘除运算符</h3><p>对各种非<code>Number</code>类型运用数学运算符(<code>- * /</code>)时，会先将非<code>Number</code>类型转换为<code>Number</code>类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> - <span class="literal">false</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5&#x27;</span> - <span class="number">0</span>); <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;5&#x27;</span> * <span class="literal">false</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;10&#x27;</span> / <span class="literal">true</span>); <span class="comment">// 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> * <span class="literal">undefined</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> - <span class="literal">null</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="相等运算符">相等运算符</h3><ol><li><code>NaN</code>和其他任何类型比较永远返回<code>false</code>（包括NaN）</li><li><code>Boolean</code> 和其他任何类型比较，<code>Boolean</code>首先被转换为<code>Number</code>类型</li><li><code>String</code>和<code>Number</code>比较，先将<code>String</code>转换为<code>Number</code>类型。</li><li><code>null == undefined</code>比较结果是<code>true</code>，除此之外，<code>null</code>、<code>undefined</code>和其他任何结果的比较值都为<code>false</code>。</li><li><code>原始类型</code>和<code>引用类型</code>做比较时，引用类型会依照<code>ToPrimitive</code>规则转换为原始类型，即遵循先<code>valueOf</code>后<code>toString</code>的模式期望得到一个原始类型，如果得不到原始类型，就会抛出 <code>TypeError</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="string">&quot;string&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> == <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> == <span class="string">&#x27;2&#x27;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> == <span class="string">&#x27;1&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">false</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[object Object]&#x27;</span> == &#123;&#125;); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(4)-运算符</title>
    <link href="/2024/07/17/JS%E5%AD%A6%E4%B9%A0(4)-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2024/07/17/JS%E5%AD%A6%E4%B9%A0(4)-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>运算符是编程语言中用于执行各种操作的符号或关键词。JavaScript 中的运算符涵盖了算术运算、赋值、比较、逻辑运算等多种操作</p><span id="more"></span><h1>运算符</h1><p>运算符也叫操作符，是一种符号。通过运算符可以对一个或多个值进行运算，并获取运算结果。</p><h2 id="一元运算符">一元运算符</h2><p>只操作一个值的操作符叫一元操作符，一元操作符是 ECMAScript中最简单的操作符。</p><h3 id="递增运算符">递增运算符(<code>++</code>)</h3><p>avaScript 中的递增操作符 <code>++</code> 用于将变量的值增加 1。它有两种形式：前置递增（<code>++x</code>）和后置递增（<code>x++</code>）。这两种形式在操作顺序和返回值上有些许不同。</p><ol><li>对于字符串，如果是有效的数值形式，则转换为数值再应用改变。变量类型从字符串变成数值。</li><li>对于字符串，如果不是有效的数值形式，则将变量的值设置为 NaN 。变量类型从字符串变成 数值。</li><li>对于布尔值，如果是 false，则转换为 0 再应用改变，如果是 true，则转换为 1 再应用改变。变量类型从布尔值变成数值。</li><li>对于浮点值，直接应用</li><li>如果是对象，则调用其<code>valueOf()</code>方法取得可以操作的值。对得到的值应用上述规则。如果是 NaN，则调用<code>toString()</code>并再次应用其他规则。变量类型从对象变成数值。</li></ol><h4 id="前置递增（-x）">前置递增（++x）</h4><p>前置递增操作符会先将变量的值增加 1，然后返回增加后的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = a++ + <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">// 输出: 4，因为 a 已经增加了 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">// 输出: 5，因为 b = 3 + 2，a 的初始值是 3</span></span><br></pre></td></tr></table></figure><h4 id="后置递增（x-）">后置递增（x++）</h4><p>后置递增操作符会先返回变量的当前值，然后将变量的值增加 1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> d = ++c + <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);  <span class="comment">// 输出: 4，因为 c 已经增加了 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);  <span class="comment">// 输出: 6，因为 d = 4 + 2，c 的值增加后变为 4</span></span><br></pre></td></tr></table></figure><h3 id="递减运算符">递减运算符(<code>--</code>)</h3><p>avaScript 中的递减操作符 <code>--</code> 用于将变量的值减 1。它有两种形式：前置递减（<code>--x</code>）和后置递减（<code>x--</code>）。这两种形式在操作顺序和返回值上有些许不同。</p><ol><li>对于字符串，如果是有效的数值形式，则转换为数值再应用改变。变量类型从字符串变成数值。</li><li>对于字符串，如果不是有效的数值形式，则将变量的值设置为 NaN 。变量类型从字符串变成 数值。</li><li>对于布尔值，如果是 false，则转换为 0 再应用改变，如果是 true，则转换为 1 再应用改变。变量类型从布尔值变成数值。</li><li>对于浮点值，直接应用</li><li>如果是对象，则调用其<code>valueOf()</code>方法取得可以操作的值。对得到的值应用上述规则。如果是 NaN，则调用<code>toString()</code>并再次应用其他规则。变量类型从对象变成数值。</li></ol><h4 id="前置递减（–x）">前置递减（–x）</h4><p>前置递减操作符会先将变量的值减 1，然后返回减后的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = a-- + <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">// 输出: 2，因为 a 已经减了1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">// 输出: 5，因为 b = 3 + 2，a 的初始值是3</span></span><br></pre></td></tr></table></figure><h4 id="后置递减（x–）">后置递减（x–）</h4><p>后置递减操作符会先返回变量的当前值，然后将变量的值减1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> d = --c + <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);  <span class="comment">// 输出: 2，因为 c 已经减了1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);  <span class="comment">// 输出: 4，因为 d = 2 + 2，c 的值减后变为2</span></span><br></pre></td></tr></table></figure><h3 id="typeof">typeof</h3><p><code>typeof</code>运算符用于返回操作数的数据类型。它的返回值是一个字符串，表示操作数的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">// 输出: &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);      <span class="comment">// 输出: &quot;boolean&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">42</span>);        <span class="comment">// 输出: &quot;number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">10n</span>);       <span class="comment">// 输出: &quot;bigint&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;Hello&quot;</span>);   <span class="comment">// 输出: &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&quot;id&quot;</span>)); <span class="comment">// 输出: &quot;symbol&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);      <span class="comment">// 输出: &quot;object&quot; (这是一个历史遗留问题)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;);          <span class="comment">// 输出: &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []);          <span class="comment">// 输出: &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;); <span class="comment">// 输出: &quot;function&quot;</span></span><br></pre></td></tr></table></figure><h3 id="delete">delete</h3><p><code>delete</code> 操作符用于删除对象的属性，返回一个布尔值。如果删除成功，返回 <code>true</code>，如果删除不成功，返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&quot;Doe&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">firstName</span>); <span class="comment">// 输出: &quot;John&quot;</span></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">firstName</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">firstName</span>); <span class="comment">// 输出: undefined</span></span><br></pre></td></tr></table></figure><ol><li><p>如果删除的属性不存在，那么 <code>delete</code> 将不会起任何作用，并且返回 <code>true</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> obj.<span class="property">b</span>); <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure></li><li><p><code>delete</code> 只影响自身属性。如果对象的原型链上有一个与待删除属性同名的属性，那么删除属性之后，对象会使用原型链上的那个属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bar</span> = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.bar 指代了自身属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 foo 对象的自身属性</span></span><br><span class="line"><span class="keyword">delete</span> foo.<span class="property">bar</span>; <span class="comment">// 返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// foo.bar 仍然在原型链上可用。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>); <span class="comment">//42</span></span><br></pre></td></tr></table></figure></li><li><p>删除一个数组元素时，数组的长度不受影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 输出: 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> arr[<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]);    <span class="comment">// 输出: undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>); <span class="comment">// 输出: 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);        <span class="comment">// 输出: [1, empty, 3]</span></span><br></pre></td></tr></table></figure></li><li><p>直接定义在全局对象上的属性或通过 <code>Object.defineProperty</code> 定义为不可配置的属性，<code>delete</code> 不会有任何效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;x&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">delete</span> obj.<span class="property">x</span>); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">x</span>);        <span class="comment">// 输出: 0</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="void">void</h3><p><code>void</code> 操作符用于计算一个表达式并返回 <code>undefined</code>。它主要用于在不希望返回任何值的情况下执行表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">void</span> <span class="number">0</span>);          <span class="comment">// 输出: undefined</span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0)&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Link clicked!&#x27;)&quot;</span>&gt;</span>Click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">void</span> <span class="title function_">doSomething</span>()); <span class="comment">// 输出: undefined</span></span><br></pre></td></tr></table></figure><h2 id="算数运算符">算数运算符</h2><h3 id="加法运算符">加法运算符(<code>+</code>)</h3><p>加法操作符（+）用于求两个数的和，加性操作符拥有一些特殊的行为，会产生不同数据类型的转换。</p><p>如果两个操作数都是数值，加法操作符执行加法运算并根据如下规则返回结果：</p><ol><li>如果有任一操作数是 NaN，则返回 NaN；</li><li>如果是 Infinity 加 Infinity，则返回 Infinity；</li><li>如果是-Infinity 加-Infinity，则返回-Infinity；</li><li>如果是 Infinity 加-Infinity，则返回 NaN；</li><li>如果是+0 加+0，则返回+0；</li><li>如果是-0 加+0，则返回+0；</li><li>如果是-0 加-0，则返回-0</li></ol><p>如果有一个操作数是字符串，则要应用如下规则：</p><ol><li>如果两个操作数都是字符串，则将第二个字符串拼接到第一个字符串后面；</li><li>如果只有一个操作数是字符串，则将另一个操作数转换为字符串，再将两个字符串拼接在一起。</li><li>如果有任一操作数是对象、数值或布尔值，则调用<code>toString()</code>方法获取字符串，然后再应用前面的关于字符串的规则。</li><li>对于<code>undefined</code>和<code>null</code>，则调用<code>String()</code>函数，分别获取 “undefined&quot;和&quot;null”</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="number">5</span> + <span class="number">5</span>; <span class="comment">// 两个数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">// 10</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="number">5</span> + <span class="string">&quot;5&quot;</span>; <span class="comment">// 一个数值和一个字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// &quot;55&quot;</span></span><br></pre></td></tr></table></figure><h3 id="减法运算符">减法运算符(<code>-</code>)</h3><p>减法操作符（-）用于求两个数的差，减法操作符和加法操作符一样，也会产生数据类型的转换。</p><ol><li>如果两个操作数都是数值，则执行数学减法运算并返回结果。</li><li>如果有任一操作数是 NaN，则返回 NaN。</li><li>如果是 Infinity 减 Infinity，则返回 NaN。</li><li>如果是-Infinity 减-Infinity，则返回 NaN。</li><li>如果是 Infinity 减-Infinity，则返回 Infinity。</li><li>如果是-Infinity 减 Infinity，则返回-Infinity。</li><li>如果是+0 减+0，则返回+0。</li><li>如果是+0 减-0，则返回-0。</li><li>如果是-0 减-0，则返回+0。</li><li>如果有任一操作数是字符串、布尔值、<code>null</code>或<code>undefined</code>，则先在后台使用<code>Number()</code>将其转换为数值，然后再根据前面的规则执行数学运算。如果转换结果是 NaN，则减法计算的结果是 NaN。</li><li>如果有任一操作数是对象，则调用其 valueOf()方法取得表示它的数值。如果该值是 NaN，则 减法计算的结果是 NaN。如果对象没有 <code>valueOf()</code>方法，则调用其<code>toString()</code>方法，然后再 将得到的字符串转换为数值。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="number">5</span> - <span class="literal">true</span>; <span class="comment">// true 被转换为 1，所以结果是 4</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title class_">NaN</span> - <span class="number">1</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="number">5</span> - <span class="number">3</span>; <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> result4 = <span class="number">5</span> - <span class="string">&quot;&quot;</span>; <span class="comment">// &quot;&quot;被转换为 0，所以结果是 5</span></span><br><span class="line"><span class="keyword">let</span> result5 = <span class="number">5</span> - <span class="string">&quot;2&quot;</span>; <span class="comment">// &quot;2&quot;被转换为 2，所以结果是 3</span></span><br><span class="line"><span class="keyword">let</span> result6 = <span class="number">5</span> - <span class="literal">null</span>; <span class="comment">// null 被转换为 0，所以结果是 5</span></span><br></pre></td></tr></table></figure><h3 id="乘法运算符">乘法运算符(<code>*</code>)</h3><p>乘法操作符由一个星号（*）表示，可以用于计算两个数值的乘积。</p><ol><li>如果操作数都是数值，则执行常规的乘法运算</li><li>如果有任一操作数是 NaN，则返回 NaN。</li><li>如果是 Infinity 乘以 0，则返回 NaN。</li><li>如果是 Infinity 乘以非 0的有限数值，则根据第二个操作数的符号返回 Infinity 或-Infinity。</li><li>如果是 Infinity 乘以 Infinity，则返回 Infinity。</li><li>如果有不是数值的操作数，则先在后台用 Number()将其转换为数值，然后再应用上述规则。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="number">5</span> * <span class="literal">true</span>; <span class="comment">// true 被转换为 1，所以结果是 5</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title class_">NaN</span> * <span class="number">1</span>; <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="number">5</span> * <span class="number">3</span>; <span class="comment">// 15</span></span><br><span class="line"><span class="keyword">let</span> result4 = <span class="number">5</span> * <span class="string">&quot;&quot;</span>; <span class="comment">// &quot;&quot;被转换为 0，所以结果是 0</span></span><br><span class="line"><span class="keyword">let</span> result5 = <span class="number">5</span> * <span class="string">&quot;2&quot;</span>; <span class="comment">// &quot;2&quot;被转换为 2，所以结果是 10</span></span><br><span class="line"><span class="keyword">let</span> result6 = <span class="number">5</span> * <span class="literal">null</span>; <span class="comment">// null 被转换为 0，所以结果是 0</span></span><br></pre></td></tr></table></figure><h3 id="除法运算符">除法运算符(<code>/</code>)</h3><p>除法操作符由一个斜杠（/）表示，用于计算第一个操作数除以第二个操作数的商</p><ol><li>如果操作数都是数值，则执行常规的除法运算</li><li>如果有任一操作数是 NaN，则返回 NaN。</li><li>如果是 Infinity 除以 Infinity，则返回 NaN。</li><li>如果是 0 除以 0，则返回 NaN。</li><li>如果是非 0 的有限值除以 0，则根据第一个操作数的符号返回 Infinity 或-Infinity。</li><li>如果是 Infinity 除以任何数值，则根据第二个操作数的符号返回 Infinity 或-Infinity。</li><li>如果有不是数值的操作数，则先在后台用 Number()函数将其转换为数值，然后再应用上述规则</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> / <span class="number">2</span>);          <span class="comment">// 输出: 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> / <span class="number">2</span>);         <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> / <span class="title class_">NaN</span>);        <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span> / <span class="title class_">Infinity</span>); <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> / <span class="number">0</span>);           <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> / <span class="number">0</span>);          <span class="comment">// 输出: Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="number">10</span> / <span class="number">0</span>);         <span class="comment">// 输出: -Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span> / <span class="number">10</span>);   <span class="comment">// 输出: Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span> / -<span class="number">10</span>);  <span class="comment">// 输出: -Infinity</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;20&quot;</span> / <span class="number">2</span>);        <span class="comment">// 字符串转换为数值，输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> / <span class="number">2</span>);        <span class="comment">// 布尔值转换为数值，输出: 0.5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> / <span class="number">2</span>);   <span class="comment">// undefined 转换为数值 NaN，输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> / <span class="number">2</span>);        <span class="comment">// null 被转换为 0，输出: 0</span></span><br></pre></td></tr></table></figure><h3 id="取模运算符">取模运算符(<code>%</code>)</h3><p>取模（余数）操作符由一个百分比符号（%）表示</p><ol><li>如果操作数是数值，则执行常规除法运算，返回余数。</li><li>如果被除数是无限值，除数是有限值，则返回 NaN。</li><li>如果被除数是有限值，除数是 0，则返回 NaN。</li><li>如果是 Infinity 除以 Infinity，则返回 NaN。</li><li>如果被除数是有限值，除数是无限值，则返回被除数。</li><li>如果被除数是 0，除数不是 0，则返回 0。</li><li>如果有不是数值的操作数，则先在后台用 Number()函数将其转换为数值，然后再应用上述规则</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> % <span class="number">3</span>);               <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span> % <span class="number">10</span>);        <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> % <span class="number">0</span>);               <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Infinity</span> % <span class="title class_">Infinity</span>);  <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> % <span class="title class_">Infinity</span>);        <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> % <span class="number">10</span>);               <span class="comment">// 输出: 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;20&quot;</span> % <span class="number">3</span>);             <span class="comment">// 字符串转换为数值，输出: 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> % <span class="number">2</span>);             <span class="comment">// 布尔值转换为数值，输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> % <span class="number">2</span>);        <span class="comment">// undefined 转换为数值 NaN，输出: NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> % <span class="number">2</span>);             <span class="comment">// null 被转换为 0，输出: 0</span></span><br></pre></td></tr></table></figure><h3 id="指数运算符">指数运算符(<code>**</code>)</h3><p>指数操作符由一个百分比符号（**）表示，等同于<code>Math.pow()</code>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">3</span>, <span class="number">2</span>); <span class="comment">// 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> ** <span class="number">2</span>); <span class="comment">// 9 </span></span><br></pre></td></tr></table></figure><h2 id="关系运算符">关系运算符</h2><p>关系操作符执行比较两个值的操作，包括小于（&lt;）、大于（&gt;）、小于等于（&lt;=）和大于等于（&gt;=），这几个操作符都返回布尔值</p><ol><li>如果操作数都是数值，则执行数值比较。</li><li>如果操作数都是字符串，则逐个比较字符串中对应字符的编码。</li><li>如果有任一操作数是数值，则将另一个操作数转换为数值，执行数值比较。</li><li>如果有任一操作数是对象，则调用其<code>valueOf()</code>方法，取得结果后再根据前面的规则执行比较。 如果没有<code>valueOf()</code>方法，则调用<code>toString()</code>方法，取得结果后再根据前面的规则执行比较。</li><li>如果有任一操作数是布尔值，则将其转换为数值再执行比较。</li></ol><h3 id="大于">大于(<code>&gt;</code>)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt; <span class="number">5</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apple&quot;</span> &gt; <span class="string">&quot;banana&quot;</span>);   <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值和字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> &gt; <span class="number">5</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象比较</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">10</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 &gt; <span class="number">5</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3 &gt; <span class="number">0</span>);      <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure><h3 id="小于">小于(<code>&lt;</code>)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="number">7</span>);         <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cat&quot;</span> &lt; <span class="string">&quot;dog&quot;</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apple&quot;</span> &lt; <span class="string">&quot;apple pie&quot;</span>);<span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值和字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &lt; <span class="string">&quot;7&quot;</span>);       <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象比较</span></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">toString</span>: <span class="function">() =&gt;</span> <span class="string">&quot;5&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2 &lt; <span class="number">7</span>);      <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h3 id="大于等于">大于等于(<code>&gt;=</code>)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt;= <span class="number">5</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span> &gt;= <span class="number">7</span>);         <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt;= <span class="number">8</span>);         <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apple&quot;</span> &gt;= <span class="string">&quot;banana&quot;</span>);   <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cat&quot;</span> &gt;= <span class="string">&quot;cat&quot;</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apple&quot;</span> &gt;= <span class="string">&quot;apple pie&quot;</span>);<span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值与字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> &gt;= <span class="number">5</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> &gt;= <span class="string">&quot;7&quot;</span>);       <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> &gt;= <span class="number">10</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span> &gt;= <span class="number">10</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔值比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &gt;= <span class="number">1</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &gt;= <span class="number">0</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &gt;= <span class="number">0</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &gt;= <span class="number">1</span>);     <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象比较</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">10</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">5</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 &gt;= obj2);   <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">toString</span>: <span class="function">() =&gt;</span> <span class="string">&quot;5&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3 &gt;= <span class="number">3</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj4 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">2</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj4 &gt;= <span class="number">5</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊情况</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &gt;= <span class="string">&#x27;a&#x27;</span>);      <span class="comment">// &#x27;a&#x27; 转换为 NaN，NaN 与任何值比较结果都是 false，输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> &gt;= <span class="number">10</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> &gt;= <span class="number">0</span>);      <span class="comment">// null 转换为 0，输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> &gt;= <span class="number">0</span>); <span class="comment">// undefined 转换为 NaN，输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &gt;= <span class="literal">false</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &gt;= <span class="literal">true</span>);      <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h3 id="小于等于">小于等于(<code>&lt;=</code>)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span> &lt;= <span class="number">10</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span> &lt;= <span class="number">7</span>);         <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &lt;= <span class="number">3</span>);        <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apple&quot;</span> &lt;= <span class="string">&quot;banana&quot;</span>);   <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cat&quot;</span> &lt;= <span class="string">&quot;cat&quot;</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;apple&quot;</span> &lt;= <span class="string">&quot;apple pie&quot;</span>);<span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数值与字符串比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> &lt;= <span class="number">15</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">20</span> &lt;= <span class="string">&quot;25&quot;</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;30&quot;</span> &lt;= <span class="number">30</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span> &lt;= <span class="number">3</span>);       <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔值比较</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &lt;= <span class="number">1</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &lt;= <span class="number">0</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> &lt;= <span class="number">0</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">false</span> &lt;= <span class="number">1</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象比较</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">10</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1 &lt;= obj2);   <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">toString</span>: <span class="function">() =&gt;</span> <span class="string">&quot;10&quot;</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj3 &lt;= <span class="number">15</span>);    <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj4 = &#123; <span class="attr">valueOf</span>: <span class="function">() =&gt;</span> <span class="number">20</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj4 &lt;= <span class="number">10</span>);    <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊情况</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> &lt;= <span class="string">&#x27;a&#x27;</span>);      <span class="comment">// &#x27;a&#x27; 转换为 NaN，NaN 与任何值比较结果都是 false，输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> &lt;= <span class="number">10</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> &lt;= <span class="number">0</span>);      <span class="comment">// null 转换为 0，输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span> &lt;= <span class="number">0</span>); <span class="comment">// undefined 转换为 NaN，输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &lt;= <span class="literal">false</span>);    <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> &lt;= <span class="literal">true</span>);     <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h3 id="instanceof">instanceof</h3><p><code>instanceof</code> 操作符用于检测对象是否为某个构造函数的实例。它在原型链上查找对象，确认对象是否派生自某个构造函数的 <code>prototype</code> 属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测对象是否为某个构造函数的实例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(john <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Person</span>);  <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测内置对象的实例</span></span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>);    <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>);   <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date <span class="keyword">instanceof</span> <span class="title class_">Date</span>);    <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date <span class="keyword">instanceof</span> <span class="title class_">Object</span>);  <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h3 id="in">in</h3><p><code>in</code> 操作符用于检查某个属性是否存在于对象中。它可以用于检测对象是否具有特定的属性（包括那些从原型链继承的属性）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查对象的直接属性</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> person); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;age&quot;</span> <span class="keyword">in</span> person);  <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;gender&quot;</span> <span class="keyword">in</span> person); <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查继承的属性</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;toString&quot;</span> <span class="keyword">in</span> obj); <span class="comment">// 输出: true，因为 toString 是从 Object.prototype 继承的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于数组，in 操作符可以检查某个索引是否存在（即该位置是否有元素）。</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> <span class="keyword">in</span> arr); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span> <span class="keyword">in</span> arr); <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hasOwnProperty 只检查对象自身的属性，而不检查原型链上的属性。</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;name&quot;</span>)); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;toString&quot;</span>)); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;toString&quot;</span> <span class="keyword">in</span> person); <span class="comment">// 输出: true，因为 toString 是继承的</span></span><br></pre></td></tr></table></figure><h2 id="相等运算符">相等运算符</h2><h3 id="等于-和不等于">等于(<code>==</code>)和不等于(<code>!=</code>)</h3><p>等于操作符用两个等于号（==）表示，如果操作数相等，则会返回 true。不等于 操作符用叹号和等于号（!=）表示，如果两个操作数不相等，则会返回 true。这两个操作符都会先进 行类型转换（通常称为强制类型转换）再确定操作数是否相等。</p><ol><li>如果任一操作数是布尔值，则将其转换为数值再比较是否相等。false 转换为 0，true 转换 为 1。</li><li>如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否 相等。</li><li>如果一个操作数是对象，另一个操作数不是，则调用对象的 valueOf()方法取得其原始值，再 根据前面的规则进行比较。</li><li>null 和 undefined 相等。</li><li>null 和 undefined 不能转换为其他类型的值再进行比较。</li><li>如果有任一操作数是 NaN，则相等操作符返回 false，不相等操作符返回 true。即使两 个操作数都是 NaN，相等操作符也返回 false，因为按照规则，NaN 不等于 NaN。</li><li>如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象， 则相等操作符返回 true。否则，两者不相等。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等于 (==)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> == <span class="number">10</span>);       <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> == <span class="number">10</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> == <span class="number">1</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; == &#123;&#125;);       <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不等于 (!=)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> != <span class="number">5</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> != <span class="number">5</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> != <span class="number">1</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> != <span class="literal">undefined</span>); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; != &#123;&#125;);       <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h3 id="全等-和不全等">全等(<code>===</code>)和不全等(<code>!==</code>)</h3><p>全等和不全等操作符与相等和不相等操作符类似，只不过它们在比较相等时不转换操作数。全等操作符由 3 个等于号（===）表示，只有两个操作数在不转换的前提下相等才返回 true。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全等于 (===)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> === <span class="number">10</span>);       <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> === <span class="number">10</span>);     <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> === <span class="number">1</span>);      <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; === &#123;&#125;);       <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">2</span>] === [<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// 输出: false，因为不同的数组是不同的对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不全等于 (!==)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span> !== <span class="number">5</span>);        <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;10&quot;</span> !== <span class="number">10</span>);     <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> !== <span class="number">1</span>);      <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> !== <span class="literal">undefined</span>); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; !== &#123;&#125;);       <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">2</span>] !== [<span class="number">1</span>,<span class="number">2</span>]); <span class="comment">// 输出: true，因为不同的数组是不同的对象</span></span><br></pre></td></tr></table></figure><h2 id="逻辑运算符">逻辑运算符</h2><h3 id="逻辑非">逻辑非(<code>!</code>)</h3><p>逻辑非运算符用于取反一个布尔值。如果操作数为真，则返回假；如果操作数为假，则返回真。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取反布尔值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">true</span>); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">false</span>); <span class="comment">// 输出: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取反非布尔值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="number">0</span>); <span class="comment">// 输出: true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="string">&quot;Hello&quot;</span>); <span class="comment">// 输出: false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="title class_">NaN</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="string">&quot;&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="number">12345</span>); <span class="comment">// false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">null</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!<span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(!&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="逻辑与">逻辑与(<code>&amp;&amp;</code>)</h3><p>逻辑与操作符可用于任何类型的操作数，不限于布尔值。逻辑与操作符是一种短路操作符，意思就是如果第一个操作数决定了结果，那么永远不会对第二个操作数求值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> result1 = obj1 &amp;&amp; <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">// 输出: 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> result2 = <span class="literal">true</span> &amp;&amp; obj2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// 输出: &#123; key: &#x27;value&#x27; &#125;</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="literal">false</span> &amp;&amp; obj2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3); <span class="comment">// 输出: false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">key1</span>: <span class="string">&#x27;value1&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj4 = &#123; <span class="attr">key2</span>: <span class="string">&#x27;value2&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> result4 = obj3 &amp;&amp; obj4;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result4); <span class="comment">// 输出: &#123; key2: &#x27;value2&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result5 = <span class="literal">null</span> &amp;&amp; <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result5); <span class="comment">// 输出: null</span></span><br><span class="line"><span class="keyword">let</span> result6 = <span class="number">10</span> &amp;&amp; <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result6); <span class="comment">// 输出: null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result7 = <span class="title class_">NaN</span> &amp;&amp; <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result7); <span class="comment">// 输出: NaN</span></span><br><span class="line"><span class="keyword">let</span> result8 = <span class="number">10</span> &amp;&amp; <span class="title class_">NaN</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result8); <span class="comment">// 输出: NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result9 = <span class="literal">undefined</span> &amp;&amp; <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result9); <span class="comment">// 输出: undefined</span></span><br><span class="line"><span class="keyword">let</span> result10 = <span class="number">10</span> &amp;&amp; <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result10); <span class="comment">// 输出: undefined</span></span><br></pre></td></tr></table></figure><h3 id="逻辑或">逻辑或(<code>||</code>)</h3><p>逻辑或操作符可用于任何类型的操作数，不限于布尔值。逻辑或操作符是一种短路操作符，意思就是如果第一个操作数求值为 true，第二个操作数就不会再被求值了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">key</span>: <span class="string">&#x27;value&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> result1 = obj1 || <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">// 输出: &#123; key: &#x27;value&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="literal">false</span> || <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// 输出: 10</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="number">0</span> || <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3); <span class="comment">// 输出: &#x27;default&#x27;</span></span><br><span class="line"><span class="keyword">let</span> result4 = <span class="string">&#x27;&#x27;</span> || <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result4); <span class="comment">// 输出: &#x27;default&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">key1</span>: <span class="string">&#x27;value1&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj3 = &#123; <span class="attr">key2</span>: <span class="string">&#x27;value2&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> result5 = obj2 || obj3;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result5); <span class="comment">// 输出: &#123; key1: &#x27;value1&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result6 = <span class="literal">null</span> || <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result6); <span class="comment">// 输出: null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result7 = <span class="title class_">NaN</span> || <span class="title class_">NaN</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result7); <span class="comment">// 输出: NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result8 = <span class="literal">undefined</span> || <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result8); <span class="comment">// 输出: undefined</span></span><br></pre></td></tr></table></figure><h2 id="位运算符">位运算符</h2><p>位操作符是用于对数字的二进制表示进行直接操作的运算符。JavaScript 中所有数值都以 IEEE 754 64 位格式存储，但位操作并不直接应用到 64 位表示，而是先把值转换为 32 位整数，再进行位操作，之后再把结果转换为 64 位。</p><h3 id="按位非">按位非(<code>~</code>)</h3><p>按位非操作会将操作数的每个位进行取反操作（0 变 1，1 变 0）。</p><h4 id="正数按位取反">正数按位取反</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~num); <span class="comment">// -2</span></span><br><span class="line"><span class="number">1.</span>十进制转为二进制原码</span><br><span class="line"><span class="number">1</span> =&gt; <span class="number">0000</span> <span class="number">0001</span></span><br><span class="line"><span class="number">2.</span>二进制原码按位取反</span><br><span class="line"><span class="number">0000</span> <span class="number">0001</span> =&gt; <span class="number">1111</span> <span class="number">1110</span></span><br><span class="line"><span class="number">3.</span>取反后的二进制转为原码(符号位保留，其余位取反+<span class="number">1</span>)</span><br><span class="line"><span class="number">1111</span> <span class="number">1110</span> =&gt; <span class="number">1000</span> <span class="number">0001</span> =&gt; <span class="number">1000</span> <span class="number">0010</span></span><br><span class="line"><span class="number">4.</span>将原码二进制转为十进制</span><br><span class="line"><span class="number">1000</span> <span class="number">0010</span> =&gt; -<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="负数按位取反">负数按位取反</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = -<span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~num); <span class="comment">// 1</span></span><br><span class="line"><span class="number">1.</span>十进制转为二进制原码</span><br><span class="line">-<span class="number">2</span> =&gt; <span class="number">1000</span> <span class="number">0010</span></span><br><span class="line"><span class="number">2.</span>符号位保留，其余位取反+<span class="number">1</span></span><br><span class="line"><span class="number">1000</span> <span class="number">0010</span> =&gt; <span class="number">1111</span> <span class="number">1101</span> =&gt; <span class="number">1111</span> <span class="number">1110</span></span><br><span class="line"><span class="number">3.</span>二进制原码按位取反</span><br><span class="line"><span class="number">1111</span> <span class="number">1110</span> =&gt; <span class="number">0000</span> <span class="number">0001</span></span><br><span class="line"><span class="number">4.</span>将原码二进制转为十进制</span><br><span class="line"><span class="number">0000</span> <span class="number">0001</span> =&gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="按位与">按位与(<code>&amp;</code>)</h3><p>按位与操作会将两个操作数的每个位进行与操作（两个位都为 1 时，结果为 1，否则为 0）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>; <span class="comment">// 二进制：0101</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>; <span class="comment">// 二进制：0011</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = a &amp; b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：1 (二进制：0001)</span></span><br></pre></td></tr></table></figure><h3 id="按位或">按位或(<code>|</code>)</h3><p>按位或操作会将两个操作数的每个位进行或操作（任一位为 1 时，结果为 1，否则为 0）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>; <span class="comment">// 二进制：0101</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>; <span class="comment">// 二进制：0011</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = a | b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：7 (二进制：0111)</span></span><br></pre></td></tr></table></figure><h3 id="按位异或">按位异或(<code>^</code>)</h3><p>按位异或操作会将两个操作数的每个位进行异或操作（两个位不同时，结果为 1，否则为 0）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>; <span class="comment">// 二进制：0101</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>; <span class="comment">// 二进制：0011</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = a ^ b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：6 (二进制：0110)</span></span><br></pre></td></tr></table></figure><h3 id="左移">左移(<code>&lt;&lt;</code>)</h3><p>左移操作会将第一个操作数的所有位向左移动指定的位数，右侧用零填充。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>; <span class="comment">// 二进制：0101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = a &lt;&lt; <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：10 (二进制：1010)</span></span><br></pre></td></tr></table></figure><h3 id="有符号右移">有符号右移(<code>&gt;&gt;</code>)</h3><p>右移操作会将第一个操作数的所有位向右移动指定的位数，左侧用操作数的符号位填充（即保留符号）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">64</span>; <span class="comment">// 二进制：1000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = a &gt;&gt; <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出：2 (二进制：10)</span></span><br></pre></td></tr></table></figure><h3 id="无符号右移">无符号右移(<code>&gt;&gt;&gt;</code>)</h3><p>无符号右移操作会将第一个操作数的所有位向右移动指定的位数，左侧用零填充，忽略符号位。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = -<span class="number">64</span>; <span class="comment">// 二进制：11111111111111111111111111000000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = a &gt;&gt;&gt; <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="title function_">toString</span>(<span class="number">2</span>)); <span class="comment">// 输出：134217726 (二进制：111111111111111111111111110)</span></span><br></pre></td></tr></table></figure><h2 id="条件（三元）运算符">条件（三元）运算符(<code>?:</code>)</h2><p>条件（三元）运算符是 JavaScript 唯一使用三个操作数的运算符：一个条件后跟一个问号（<code>?</code>），如果条件为真值，则执行冒号（<code>:</code>）前的表达式；若条件为假值，则执行最后的表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">condition ? expr1 : expr2</span><br></pre></td></tr></table></figure><ol><li><code>condition</code>：一个表达式，求值结果为 <code>true</code> 或 <code>false</code>。</li><li><code>expr1</code>：如果 <code>condition</code> 为 <code>true</code>，则返回的值。</li><li><code>expr2</code>：如果 <code>condition</code> 为 <code>false</code>，则返回的值。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">let</span> canVote = age &gt;= <span class="number">18</span> ? <span class="string">&quot;Yes&quot;</span> : <span class="string">&quot;No&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(canVote); <span class="comment">// &quot;Yes&quot;</span></span><br></pre></td></tr></table></figure><h2 id="赋值操作符">赋值操作符</h2><p>赋值操作符用于给变量赋值，通常结合其他运算符来进行数学运算和赋值。</p><h3 id="赋值">赋值(<code>=</code>)</h3><p>将右侧的值赋给左侧的变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 10</span></span><br></pre></td></tr></table></figure><h3 id="加法赋值">加法赋值(<code>+=</code>)</h3><p>将右侧的值加到左侧变量上，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">x += <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 15</span></span><br></pre></td></tr></table></figure><h3 id="减法赋值">减法赋值(<code>-=</code>)</h3><p>将右侧的值从左侧变量中减去，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">x -= <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 5</span></span><br></pre></td></tr></table></figure><h3 id="乘法赋值">乘法赋值(<code>*=</code>)</h3><p>将左侧变量与右侧的值相乘，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">x *= <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 50</span></span><br></pre></td></tr></table></figure><h3 id="除法赋值">除法赋值(<code>/=</code>)</h3><p>将左侧变量除以右侧的值，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">x /= <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 2</span></span><br></pre></td></tr></table></figure><h3 id="取模赋值">取模赋值(<code>%=</code>)</h3><p>将左侧变量取右侧的值的模，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">10</span>;</span><br><span class="line">x %= <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 1</span></span><br></pre></td></tr></table></figure><h3 id="指数赋值">指数赋值(<code>**=</code>)</h3><p>将左侧变量取右侧值的幂，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">2</span>;</span><br><span class="line">x **= <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 8</span></span><br></pre></td></tr></table></figure><h3 id="按位与赋值">按位与赋值(<code>&amp;=</code>)</h3><p>将左侧变量按位与右侧值，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>; <span class="comment">// 二进制: 0101</span></span><br><span class="line">x &amp;= <span class="number">3</span>;    <span class="comment">// 二进制: 0011</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 1 (二进制: 0001)</span></span><br></pre></td></tr></table></figure><h3 id="按位或赋值">按位或赋值(<code>|=</code>)</h3><p>将左侧变量按位或右侧值，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>; <span class="comment">// 二进制: 0101</span></span><br><span class="line">x |= <span class="number">3</span>;    <span class="comment">// 二进制: 0011</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 7 (二进制: 0111)</span></span><br></pre></td></tr></table></figure><h3 id="按位异或赋值">按位异或赋值(<code>^=</code>)</h3><p>将左侧变量按位异或右侧值，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>; <span class="comment">// 二进制: 0101</span></span><br><span class="line">x ^= <span class="number">3</span>;    <span class="comment">// 二进制: 0011</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 6 (二进制: 0110)</span></span><br></pre></td></tr></table></figure><h3 id="左移赋值">左移赋值(<code>&lt;&lt;=</code>)</h3><p>将左侧变量按位左移右侧指定的位数，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>; <span class="comment">// 二进制: 0101</span></span><br><span class="line">x &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 10 (二进制: 1010)</span></span><br></pre></td></tr></table></figure><h3 id="右移赋值">右移赋值(<code>&gt;&gt;=</code>)</h3><p>将左侧变量按位右移右侧指定的位数，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>; <span class="comment">// 二进制: 0101</span></span><br><span class="line">x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 2 (二进制: 0010)</span></span><br></pre></td></tr></table></figure><h3 id="无符号右移赋值">无符号右移赋值(<code>&gt;&gt;&gt;=</code>)</h3><p>将左侧变量按位右移右侧指定的位数，左侧补零，并将结果赋值给左侧变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = -<span class="number">5</span>; <span class="comment">// 二进制: 11111111111111111111111111111011</span></span><br><span class="line">x &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 输出: 2147483645 (二进制: 01111111111111111111111111111101)</span></span><br></pre></td></tr></table></figure><h3 id="逻辑与赋值">逻辑与赋值(<code>&amp;&amp;=</code>)</h3><p>当左侧的值为真时，才将右侧的值赋给左侧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 a 为真时，将 b 的值赋给 a</span></span><br><span class="line">a &amp;&amp;= b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure><h3 id="逻辑或赋值">逻辑或赋值(<code>||=</code>)</h3><p>当左侧的值为假时，才将右侧的值赋给左侧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">a ||= b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: true</span></span><br></pre></td></tr></table></figure><h3 id="逻辑空赋值">逻辑空赋值(<code>??=</code>)</h3><p>当左侧的值为<code>null</code>或<code>undefined</code>时，才将右侧的值赋给左侧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">a ??= b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: 42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="literal">undefined</span>;</span><br><span class="line">c ??= b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">// 输出: 42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d = <span class="number">0</span>;</span><br><span class="line">d ??= b;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">// 输出: 0</span></span><br></pre></td></tr></table></figure><h3 id="解构赋值">解构赋值</h3><p>解构赋值可以将数组或对象中的数据解构为变量。</p><h4 id="解构数组">解构数组</h4><p>数组解构允许我们通过模式匹配来从数组中提取值，并将其赋给变量。</p><ol><li><p>模式匹配：只要等号两边的模式相同，左边变量就会被赋予对应的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出: 2</span></span><br></pre></td></tr></table></figure></li><li><p>剩余属性：剩余属性（<code>...rest</code>）结束解构模式。此模式会将对象或数组的所有剩余属性存储到新的对象或数组中，剩余属性必须是模式中的最后一个，并且不能有尾随逗号。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rest); <span class="comment">// 输出: [2, 3, 4]</span></span><br></pre></td></tr></table></figure></li><li><p>跳过属性：在解构模式中使用逗号（<code>,</code>）来跳过数组中的某些元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, , b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出: 3</span></span><br></pre></td></tr></table></figure></li><li><p>默认值：每个解构属性都有一个默认值。当属性不存在或值为 <code>undefined</code> 时，将使用默认值。如果属性的值为 <code>null</code>，则不使用它。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">5</span>, b = <span class="number">7</span>] = [<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出: 7</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="解构对象">解构对象</h4><p>对象解构允许我们通过匹配对象属性来从对象中提取值，并将其赋给变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b&#125; = &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出: 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// 输出: 2</span></span><br></pre></td></tr></table></figure><h2 id="拓展操作符">拓展操作符</h2><p>拓展运算符是 ES6 中引入的一种语法，通过在数组或对象前加上三个点（<code>...</code>），可以展开数组或对象。拓展运算符在函数调用、数组构造、对象字面量等场景中非常有用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在函数中调用展开数组</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(...numbers)); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并数组</span></span><br><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mergedArray = [...arr1, ...arr2];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mergedArray); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝数组(浅拷贝)</span></span><br><span class="line"><span class="keyword">const</span> originalArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> copiedArray = [...originalArray];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(copiedArray); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串转数组</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> strArray = [...str];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(strArray); <span class="comment">// [&quot;H&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并对象或添加新属性</span></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mergedObject = &#123; ...obj1, ...obj2 &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mergedObject); <span class="comment">// &#123; a: 1, b: 2, c: 3, d: 4 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="空值合并操作符">空值合并操作符</h2><p>空值合并运算符（<code>??</code>）是 ES11 引入的一个逻辑运算符，当左侧的操作数为 <code>null</code> 或者 <code>undefined</code> 时，返回其右侧操作数，否则返回左侧操作数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = value1 ?? value2;</span><br></pre></td></tr></table></figure><ol><li><code>value1</code>：第一个值。</li><li><code>value2</code>：第二个值，当 <code>value1</code> 为 <code>null</code> 或 <code>undefined</code> 时返回 <code>value2</code>。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user;</span><br><span class="line"><span class="keyword">let</span> userName = user ?? <span class="string">&quot;Guest&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userName); <span class="comment">// &quot;Guest&quot;</span></span><br></pre></td></tr></table></figure><h2 id="可选链操作符">可选链操作符</h2><p>可选链运算符（<code>?.</code>）用于简化对嵌套对象属性的访问，可以安全地访问对象属性，即使中间的属性是 <code>null</code> 或 <code>undefined</code>，也不会引发错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">profile</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user?.<span class="property">profile</span>?.<span class="property">name</span>); <span class="comment">// &quot;Alice&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user?.<span class="property">address</span>?.<span class="property">street</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="逗号操作符">逗号操作符</h2><p>逗号运算符允许在一个表达式中包含多个表达式，并在求值时按从左到右的顺序依次求值，并最终返回最后一个表达式的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x, y, z;</span><br><span class="line"></span><br><span class="line">x = (y = <span class="number">5</span>, z = <span class="number">6</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(3)-数据类型</title>
    <link href="/2024/07/16/JS%E5%AD%A6%E4%B9%A0(3)-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2024/07/16/JS%E5%AD%A6%E4%B9%A0(3)-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 是一种“动态类型语言”，即定义的变量并不会在定义后，被限制为某一数据类型。</p><span id="more"></span><h1>数据类型</h1><p>在 JavaScript 中有 8 种基本的数据类型（7 种基本数据类型和 1 种引用数据类型）。</p><ol><li>基本数据类型<ul><li>Undefined类型</li><li>Null类型</li><li>Boolean类型</li><li>Number类型</li><li>BigInt类型</li><li>String类型</li><li>Symbol类型</li></ul></li><li>引用数据类型<ul><li>Object类型</li></ul></li></ol><h2 id="Undefined-类型">Undefined 类型</h2><p>Undefined 类型只有一个值，即<code>undefined</code>，当使用 var 或 let 声明了变量但没有初始化时，就相当于给变量赋予了<code>undefined</code>值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="Null-类型">Null 类型</h2><p>Null 类型只有一个值，即<code>null</code>，<code>null</code>值表示一个空对象指针（变量未指向任何对象），变量要保存对象，而当时又没有那个对象可保存，就要用<code>null</code>来填充该变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p><code>undefined</code>值是派生自<code>null</code>值的，因此<code>null</code>和<code>undefined</code>表面上相等</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="Boolean-类型">Boolean 类型</h2><p>Boolean 类型包含两个值：<code>true</code> 和 <code>false</code>，通常用于条件运算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(state); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isGreater = <span class="number">4</span> &gt; <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(isGreater); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Number-类型">Number 类型</h2><p>Number 类型表示整数和浮点数。</p><h3 id="数值进制">数值进制</h3><p>整数除了以十进制表示以外，还可以通过八进制或十六进制等表示。</p><ol><li><strong>二进制</strong>：在ES6 之前不支持直接用二进制字面量表示数值，在ES6 之后使用<code>0b</code>前缀标识二进制</li><li><strong>八进制</strong>：在ES6 之前使用<code>0</code>前缀标识八进制，在ES6 之后使用<code>0o</code>前缀标识八进制</li><li><strong>十六进制</strong>：使用<code>0x</code>前缀标识八进制</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0b11111111</span>); <span class="comment">// 255</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0o377</span>); <span class="comment">// 255</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0xff</span>); <span class="comment">// 255</span></span><br></pre></td></tr></table></figure><h3 id="浮点数">浮点数</h3><p>浮点数必须包含一个小数点，并且小数点至少有一个数字。因为存储浮点值使用的内存空间是存储整数值的两倍，因此在小数点后面没有数字的情况下，数值就会变成整数。类似地，如果数值本身就是整数，只是小数点后面跟着<code>0</code>，那它也会被转换为整数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> floatNum1 = <span class="number">1.</span>;</span><br><span class="line"><span class="keyword">let</span> floatNum2 = <span class="number">10.0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(floatNum1); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(floatNum2); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h3 id="数值范围">数值范围</h3><p>在 JavaScript 中并不能包含所有的数值，最小数值保存在<code>Number.MIN_VALUE</code>中，最大数值保存在<code>Number.MAX_VALUE</code>中，如果一个数值超出了 Number 类型的取值范围，通常使用<code>Infinity</code>和<code>-Infinity</code>来表示无穷大和无穷小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>); <span class="comment">// 1.7976931348623157e+308</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>); <span class="comment">// 5e-324</span></span><br></pre></td></tr></table></figure><p><code>isFinite()</code> 检测值是否为有限数（介于最小值和最大值之间），而 <code>Number.isFinite()</code> 只在值为有限数并且类型是 <code>number</code> 时返回 <code>true</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="number">123</span>));            <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>));       <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isFinite</span>(<span class="string">&#x27;123&#x27;</span>));          <span class="comment">// true (字符串被转换为数值)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">123</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>));<span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="string">&#x27;123&#x27;</span>));   <span class="comment">// false (字符串不会被转换为数值)</span></span><br></pre></td></tr></table></figure><h3 id="NaN">NaN</h3><p><code>NaN</code>代表不是一个数字。它是一个特殊的数值，表示无效的数字。</p><ol><li>任何带有 <code>NaN</code>的操作都返回 <code>NaN</code></li><li><code>NaN</code>不等于任何值，包括它自己</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a&#x27;</span> / <span class="number">2</span>); <span class="comment">// NaN;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> / <span class="number">2</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> == <span class="title class_">NaN</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>isNaN()</code> 可以检测值是否为 <code>NaN</code>，而 <code>Number.isNaN()</code> 只在值真正是 <code>NaN</code> 时返回 <code>true</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>));           <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">isNaN</span>(<span class="string">&#x27;hello&#x27;</span>));       <span class="comment">// true (非数字字符串会被转换为 NaN)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>));    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&#x27;hello&#x27;</span>));<span class="comment">// false (非数字字符串不会被转换为 NaN)</span></span><br></pre></td></tr></table></figure><h2 id="BigInt-类型">BigInt 类型</h2><p>在 JavaScript 中，Number 类型无法安全地表示大于 $ 2^{53}-1 $ 或小于 $ -2^{53}+1 $ 的整数，BigInt 用于表示任意长度的整数。创建 BigInt 的方式有两种：</p><ol><li>在一个整数字面量后面加 <code>n</code></li><li>调用 <code>BigInt</code> 函数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bigint = <span class="number">1234567890123456789012345678901234567890n</span>;</span><br><span class="line"><span class="keyword">const</span> sameBigint = <span class="title class_">BigInt</span>(<span class="string">&quot;1234567890123456789012345678901234567890&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bigint === sameBigint); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>BigInt 大多数情况下可以像常规数字类型一样使用，BigInt 和 Number 不能混合使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1n</span> + <span class="number">2n</span>); <span class="comment">// 3n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1n</span> + <span class="number">2</span>); <span class="comment">// TypeError: Cannot mix BigInt and other types, use explicit conversions</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2n</span> &gt; <span class="number">1n</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2n</span> &gt; <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1n</span> == <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1n</span> === <span class="number">1</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="String-类型">String 类型</h2><p>字符串是一串表示文本值的字符序列，在 JavaScript 中，字符串可以由双引号（&quot;）、单引号（'）或反引号（`）表示。</p><p>单引号和双引号基本相同，使用反引号声明的字符串是一种特殊字符串，被称为模板字符串。在大多数情况下，模板字符串与普通字符串类似，但它具有一些特殊的属性：</p><ol><li>允许通过<code>$&#123;...&#125;</code>将变量或表达式嵌入到字符串中</li><li>允许字符串跨行</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`1 + 2 = <span class="subst">$&#123;sum(<span class="number">1</span>, <span class="number">2</span>)&#125;</span>`</span>); <span class="comment">// 1 + 2 = 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newline = <span class="string">`这是第一行，</span></span><br><span class="line"><span class="string">第二行……`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newline);</span><br></pre></td></tr></table></figure><h2 id="Symbol-类型">Symbol 类型</h2><p>Symbol 类型是在ES6中新增的数据类型，Symbol 实例是唯一、不可变的。使用 <code>Symbol()</code> 函数创建一个新的 Symbol。可以选择传入一个描述，用于调试和日志记录目的，但这个描述对 Symbol 的唯一性没有影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;description&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> sym3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;description&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym1); <span class="comment">// Symbol()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym2); <span class="comment">// Symbol(description)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym3); <span class="comment">// Symbol(description)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym2 === sym3); <span class="comment">// false，两个Symbol即使描述相同也不相等</span></span><br></pre></td></tr></table></figure><h2 id="Object-类型">Object 类型</h2><p>Object 类型是一组数据和功能的集合，对象通过执行 new 操作符后跟对象类型的名称来创建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br></pre></td></tr></table></figure><p>Object 的每个实例都具有下列的属性和方法：</p><ol><li>constructor：构造函数，保存用于创建当前对象的函数</li><li>hasOwnProperty(propertyName)：用于判断当前对象实例上是否存在给定的属性，属性名必须是字符串或符号</li><li>isPrototypeOf(object)：用于判断当前对象是否为另一个对象的原型。</li><li>propertyIsEnumerable(propertyName)：用于判断给定的属性是否可以使用 for-in 语句枚举，属性名必须是字符串</li><li>toLocaleString()：返回对象的字符串表示，反应对象所在的本地化执行环境。</li><li>toString()：返回对象的字符串表示</li><li>valueOf()：返回对象对应的字符串、数值或布尔值表示</li></ol><h2 id="数据类型检测">数据类型检测</h2><h3 id="typeof">typeof</h3><p><code>typeof</code> 操作符是检测数据类型的最常用方法。它适用于大多数基本数据类型，其中数组、对象、null都会被判断为 Object</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123</span>);             <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;hello&#x27;</span>);         <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);            <span class="comment">// &quot;boolean&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);       <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>(<span class="string">&#x27;sym&#x27;</span>));   <span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">123n</span>);            <span class="comment">// &quot;bigint&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;);              <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []);              <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);            <span class="comment">// &quot;object&quot; (特殊情况)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);    <span class="comment">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure><h3 id="instanceof">instanceof</h3><p><code>instanceof</code> 用于检测对象的具体类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>);           <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>);          <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>() <span class="keyword">instanceof</span> <span class="title class_">Date</span>);    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Function</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CustomType</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> customInstance = <span class="keyword">new</span> <span class="title class_">CustomType</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(customInstance <span class="keyword">instanceof</span> <span class="title class_">CustomType</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Object-prototype-toString-call">Object.prototype.toString.call()</h3><p>这是一个通用方法，可以准确检测各种数据类型。通过调用对象的 <code>toString</code> 方法，并返回标准的类型标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">123</span>));            <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="string">&#x27;hello&#x27;</span>));        <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">true</span>));           <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">undefined</span>));      <span class="comment">// &quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="literal">null</span>));           <span class="comment">// &quot;[object Null]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Symbol</span>(<span class="string">&#x27;sym&#x27;</span>)));  <span class="comment">// &quot;[object Symbol]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">123n</span>));           <span class="comment">// &quot;[object BigInt]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(&#123;&#125;));             <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>([]));             <span class="comment">// &quot;[object Array]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()));     <span class="comment">// &quot;[object Date]&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;));   <span class="comment">// &quot;[object Function]&quot;</span></span><br></pre></td></tr></table></figure><h3 id="constructor">constructor</h3><p>每个对象都有一个 <code>constructor</code> 属性，可以用来检测对象的构造函数。如果一个对象改变其原型，<code>constructor</code>就不能判断数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">123</span>).<span class="property">constructor</span> === <span class="title class_">Number</span>);          <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="string">&#x27;hello&#x27;</span>).<span class="property">constructor</span> === <span class="title class_">String</span>);      <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="literal">true</span>).<span class="property">constructor</span> === <span class="title class_">Boolean</span>);        <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((&#123;&#125;).<span class="property">constructor</span> === <span class="title class_">Object</span>);           <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(([]).<span class="property">constructor</span> === <span class="title class_">Array</span>);            <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="property">constructor</span> === <span class="title class_">Date</span>);     <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;).<span class="property">constructor</span> === <span class="title class_">Function</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(2)-变量</title>
    <link href="/2024/07/15/JS%E5%AD%A6%E4%B9%A0(2)-%E5%8F%98%E9%87%8F/"/>
    <url>/2024/07/15/JS%E5%AD%A6%E4%B9%A0(2)-%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>变量，就是一个用于存放数值的容器。这个数值可能是一个用于累加计算的数字，或者是一个句子中的字符串。变量的独特之处在于它存放的数值是可以改变的。</p><span id="more"></span><h1>变量</h1><p>变量可以用于保存任何类型的数据。每个变量只不过是一个用于保存任意值的命名占位符。有 3 个关键字可以声明变量：<code>var</code>、<code>const </code>和<code>let</code>。<code>var</code>在 ECMAScript 的所有版本中都可以使用，而<code>const</code>和<code>let</code>只能在 ECMAScript 6 及更晚的版本中使用。</p><h2 id="var-声明">var 声明</h2><h3 id="声明变量">声明变量</h3><p>要定义变量，可以使用<code>var</code>关键字，后跟变量名（即标识符）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message;</span><br></pre></td></tr></table></figure><h3 id="变量赋值">变量赋值</h3><p>用 <code>var</code>声明的变量，在变量名之后跟上一个<code>=</code>，然后是变量值，就完成了赋值，如果没有赋值，则变量值为 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myName1 = <span class="string">&quot;zzstriker&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> myName2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName1); <span class="comment">// zzstriker</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName2); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>变量赋值后，也可以更改变量值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">&quot;Chris&quot;</span>;</span><br><span class="line">myName = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">// Bob</span></span><br></pre></td></tr></table></figure><p><code>var</code>可以多次声明同一个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">26</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">36</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 36</span></span><br></pre></td></tr></table></figure><p>如果一个变量没有声明，直接赋值，默认是使用了<code>var</code>声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><h3 id="声明作用域">声明作用域</h3><p><code>var</code> 声明的变量具有函数作用域或全局作用域</p><p>使用<code>var</code>在一个函数内部定义一个变量，就意味着该变量将在函数退出时被销毁，该变量是局部变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> message = <span class="string">&quot;hi&quot;</span>; <span class="comment">// 局部变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// ReferenceError: message is not defined</span></span><br></pre></td></tr></table></figure><p>在函数内没有使用<code>var</code>声明的变量或在函数体外使用<code>var</code>声明的变量，该变量是全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数内没有使用var声明变量</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">    message = <span class="string">&quot;hi&quot;</span>; <span class="comment">// 全局变量</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">test</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">// &#x27;hi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数外使用var声明变量</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> msg = <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">// &#x27;hi&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">// &#x27;hi&#x27;</span></span><br></pre></td></tr></table></figure><p>使用<code>var</code>在全局作用域中声明的变量会成为 window 对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">name</span>); <span class="comment">// &#x27;Matt&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="声明提升">声明提升</h3><p>使用<code>var</code>声明的变量会自动提升到作用域顶部</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myName = <span class="string">&quot;Chris&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> myName;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">// Chris</span></span><br></pre></td></tr></table></figure><h2 id="let-声明">let 声明</h2><h3 id="声明变量-2">声明变量</h3><p>要定义变量，可以使用<code>let</code>关键字，后跟变量名（即标识符）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message;</span><br></pre></td></tr></table></figure><h3 id="变量赋值-2">变量赋值</h3><p>用 <code>let</code>声明的变量，在变量名之后跟上一个<code>=</code>，然后是变量值，就完成了赋值，如果没有赋值，则变量值为 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName1 = <span class="string">&quot;zzstriker&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> myName2;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName1); <span class="comment">// zzstriker</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName2); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>变量赋值后，也可以更改变量值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName = <span class="string">&quot;Chris&quot;</span>;</span><br><span class="line">myName = <span class="string">&quot;Bob&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myName); <span class="comment">// Bob</span></span><br></pre></td></tr></table></figure><p><code>let</code><strong>不</strong>可以多次声明同一个变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// SyntaxError: Identifier &#x27;age&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><h3 id="声明作用域-2">声明作用域</h3><p><code>let</code> 声明的变量是块级作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">// &#x27;hi&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">// ReferenceError: msg is not defined</span></span><br></pre></td></tr></table></figure><p><code>let</code> 在全局作用域中声明的变量<strong>不</strong>会成为 window 对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">age</span>); <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure><h3 id="暂时性死区">暂时性死区</h3><p><code>let</code> 声明的变量不会在作用域中提升，变量没有声明之前的区域，被称为<strong>暂时性死区</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// name 会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;Matt&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// age 不会被提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">// ReferenceError: Cannot access &#x27;age&#x27; before initialization</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">26</span>;</span><br></pre></td></tr></table></figure><h2 id="const-声明">const 声明</h2><p><code>const</code> 创建的是常量。常量标识符的命名规则和变量相同。</p><ol><li><p>常量不可以通过重新赋值改变其值，也不可以在代码运行时重新声明。它必须被初始化为某个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myBirthday = <span class="string">&#x27;18.04.1982&#x27;</span>;</span><br><span class="line">myBirthday = <span class="string">&#x27;01.01.2001&#x27;</span>; <span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure></li><li><p>常量的作用域规则与 <code>let</code> 块级作用域变量相同。若省略 <code>const</code> 关键字，则该标识符将被视为变量。</p></li><li><p>在同一作用域中，不能使用与变量名或函数名相同的名字来命名常量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myBirthday = <span class="string">&#x27;01.01.2001&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> myBirthday = <span class="string">&#x27;18.04.1982&#x27;</span>; <span class="comment">// SyntaxError: Identifier &#x27;myBirthday&#x27; has already been declared</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="字面量">字面量</h2><p>字面量是指在代码中直接写出来的固定值。这些值可以是数字、字符串、布尔值等，直接在代码中使用，而不是通过变量或表达式计算得到的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数字字面量</span></span><br><span class="line"><span class="keyword">let</span> age = <span class="number">25</span>;       <span class="comment">// 整数字面量</span></span><br><span class="line"><span class="keyword">let</span> pi = <span class="number">3.14</span>;      <span class="comment">// 浮点数字面量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串字面量</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Alice&quot;</span>;        <span class="comment">// 双引号字符串字面量</span></span><br><span class="line"><span class="keyword">let</span> greeting = <span class="string">&#x27;Hello&#x27;</span>;    <span class="comment">// 单引号字符串字面量</span></span><br><span class="line"><span class="keyword">let</span> template = <span class="string">`Hi <span class="subst">$&#123;name&#125;</span>`</span>; <span class="comment">// 模板字符串字面量（反引号）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 布尔字面量</span></span><br><span class="line"><span class="keyword">let</span> isStudent = <span class="literal">true</span>;  </span><br><span class="line"><span class="keyword">let</span> hasGraduated = <span class="literal">false</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组字面量</span></span><br><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象字面量</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">25</span></span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数字面量</span></span><br><span class="line"><span class="keyword">let</span> greet = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则表达式字面量</span></span><br><span class="line"><span class="keyword">let</span> pattern = <span class="regexp">/abc/</span>; </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS学习(1)-JS介绍</title>
    <link href="/2024/07/14/JS%E5%AD%A6%E4%B9%A0(1)-JS%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/07/14/JS%E5%AD%A6%E4%B9%A0(1)-JS%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 是一种脚本编程语言，它可以在网页上实现复杂的功能，网页展现给你的不再是简单的静态信息，而是实时的内容更新。</p><span id="more"></span><h1>JS</h1><p>JavaScript 是一种编程语言，最初设计用于与网页元素交互。JavaScript 由三个主要部分组成：</p><ul><li>ECMAScript：提供核心功能</li><li>文档对象模型（<strong>DOM</strong>）：提供与网页内容交互的方法和接口</li><li>浏览器对象模型（<strong>BOM</strong>）：提供与浏览器交互的方法和接口</li></ul><h2 id="引用方式">引用方式</h2><p>将 JavaScript 插入 HTML 的主要方法是使用<code>&lt;script&gt;</code>元素</p><h3 id="内部">内部</h3><p>要嵌入行内 JavaScript 代码，直接把代码放在<code>&lt;script&gt;</code>元素中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 在此编写 JavaScript 代码</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="外部">外部</h3><p>包含外部文件中的 JavaScript，就必须使用 <strong>src</strong> 属性。这个属性的值是一个 URL，指向包含 JavaScript 代码的文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="执行顺序">执行顺序</h2><p>执行 JavaScript 代码时，通常会按从上往下的顺序执行代码。解释 JavaScript 代码会引起页面阻塞，需要让脚本调用的时机符合预期。</p><ol><li><p>内部调用：监听浏览器的 <code>DOMContentLoaded</code> 事件，标志 HTML 文档完全加载和解析。JavaScript 代码在事件被触发后才会运行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// …</span></span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>外部引用：通过在 <code>&lt;script&gt;</code>元素上增加 <strong>async</strong> 和 <strong>defer</strong> 属性，决策脚本何时加载执行</p><ul><li>async：浏览器遇到 <code>async</code> 时不会阻塞页面渲染，而是直接下载，一旦下载完成，脚本就会执行，从而阻止页面渲染。</li><li>defer：<code>defer</code> 属性加载的脚本将按照它们在页面上出现的顺序加载，在页面内容全部加载完毕之后，脚本才会执行。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="区分大小写">区分大小写</h2><p>JavaScript 是<strong>区分大小写</strong>的，无论是变量、函数名还是操作符，都区分大小写，例如：变量名 <code>test</code>和<code>Test</code>分别表示两个不同的变量。</p><h2 id="标识符">标识符</h2><p>所谓<strong>标识符</strong>，就是变量、函数、属性或函数参数的名称，标识符不能使用关键字和保留字。标识符可以由一或多个下列字符组成：</p><ol><li>第一个字符必须是一个字母、下划线或美元符号</li><li>剩下的其他字符可以是字母、下划线、美元符号或数字</li></ol><h2 id="注释">注释</h2><p>JavaScript 代码中也可以添加注释，浏览器会忽略它们。</p><ol><li><p>在双斜杠（//）后添加单行注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 这是一个单行注释</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>/*</code> 和 <code>*/</code> 之间添加多行注释</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">这里是</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">多行注释</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="严格模式">严格模式</h2><p>ECMAScript 5引入了严格模式的概念，严格模式是一种不同的 JavaScript 解析和执行模型，一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。脚本启用严格模式需要在脚本顶部添加<code>&quot;use strict&quot;</code>。</p><h2 id="语句">语句</h2><p>语句是指程序中的一条指令或命令，用于执行某种操作。在 JavaScript 中，如果一条语句独占一行的话，那么分号是可以省略的（不建议这么做），如果一行中有多条语句，那么这些语句必须以分号分开。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> tmp = <span class="string">&quot;语句&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关键字">关键字</h2><p>ECMA 描述了一组具有特定用途的<strong>关键字</strong>，这些关键字可用于表示控制语句的开始或结束，或者是执行特性操作，关键字不能用作标识符</p><table><thead><tr><th>break</th><th>do</th><th>in</th><th>typeof</th></tr></thead><tbody><tr><td>case</td><td>else</td><td>instanceof</td><td>var</td></tr><tr><td>catch</td><td>export</td><td>new</td><td>void</td></tr><tr><td>class</td><td>extends</td><td>return</td><td>while</td></tr><tr><td>const</td><td>finally</td><td>super</td><td>with</td></tr><tr><td>continue</td><td>for</td><td>switch</td><td>yield</td></tr><tr><td>debugger</td><td>function</td><td>this</td><td></td></tr><tr><td>default</td><td>if</td><td>throw</td><td></td></tr><tr><td>delete</td><td>import</td><td>try</td><td></td></tr></tbody></table><h2 id="保留字">保留字</h2><p>ECMA 描述了一组不能用作标识符的<strong>保留字</strong>，保留字暂时还没有特定的用途，有可能在将来被用作关键字</p><table><thead><tr><th>enum</th><th>package</th><th>static</th></tr></thead><tbody><tr><td>implements</td><td>protected</td><td>await</td></tr><tr><td>interface</td><td>private</td><td></td></tr><tr><td>let</td><td>public</td><td></td></tr></tbody></table><h2 id="输出方式">输出方式</h2><h3 id="alert">alert</h3><p><code>alert()</code>弹出警告框，在弹窗里显示一条信息，并等待用户按下确定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;测试文本&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="prompt">prompt</h3><p><code>prompt()</code>就是专门弹出能够让用户输入的对话框。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">prompt</span>(<span class="string">&quot;请输入内容&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="console">console</h3><p><code>console.log()</code>表示在控制台中输出。console 表示“控制台”，log 表示“输出”。括号里可以写字符串、数字、变量。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印了一些内容&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="confirm">confirm</h3><p><code>confirm()</code>弹出一个弹框，弹窗上有“确认”和“取消”两个按钮，点击“确定”返回 <code>true</code>，点击“取消”返回 <code>false</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">confirm</span>(<span class="string">&quot;确定关闭么？&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(22)-BFC</title>
    <link href="/2024/07/13/CSS%E5%AD%A6%E4%B9%A0(22)-BFC/"/>
    <url>/2024/07/13/CSS%E5%AD%A6%E4%B9%A0(22)-BFC/</url>
    
    <content type="html"><![CDATA[<p>在页面开发中，CSS布局是一个至关重要的部分。而块格式化上下文（Block Formatting Context，BFC）作为CSS中的一个核心概念，对于理解和解决许多布局问题至关重要。</p><span id="more"></span><h1>BFC</h1><p>块格式化上下文（BFC）是CSS中的一种布局机制，它为包含的元素创建了一个独立的渲染区域。这个区域内的元素布局不会影响到区域外的元素，反之亦然。简单来说，BFC可以看作是一个隔离盒子，它将内部和外部的布局逻辑分开。</p><h2 id="BFC特性">BFC特性</h2><ol><li>BFC内部，盒子由上至下按顺序进行排列，当<strong>同一个BFC</strong>中的两个盒子同时具有相对方向的外边距时，会产生外边距折叠</li><li>BFC内部，无论是浮动盒子还是普通盒子，其子元素左外边距与包含块的左边界相接触</li><li>BFC 区域<strong>不会</strong>与float box区域相重叠</li><li>BFC内外布局<strong>不会</strong>相互影响</li><li>计算BFC高度的时候，浮动元素的高度也计算在内</li></ol><h2 id="创建BFC">创建BFC</h2><ol><li>根元素默认创建BFC</li><li>设置浮动（即 <strong>float</strong> 值<em>不</em>为 none 的元素）</li><li>绝对或固定定位（即 <strong>position</strong> 值为 <code>absolute</code> 或 <code>fixed</code> 的元素）</li><li>行内块元素（即 <strong>display</strong> 值为 <code>inline-block</code> 的元素）</li><li>设置overflow（即 <strong>overflow</strong> 值<em>不</em>为 <code>visible</code> 或 <code>clip</code> 的元素）</li><li>使用 <code>display: flow-root</code></li></ol><h2 id="BFC解决的问题">BFC解决的问题</h2><h3 id="外边距折叠">外边距折叠</h3><p>当<strong>同一个BFC</strong>中的两个盒子同时具有相对方向的外边距时，外边距会发生<strong>折叠</strong>。解决外边距折叠，可以给子元素加一个父元素，并设置该父元素为 BFC。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.blue</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: transparent;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;red&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="清除浮动">清除浮动</h3><p>浮动元素是会脱离文档流（ <strong>position</strong> 值为 <code>absolute</code> 或 <code>fixed</code> 的元素会脱离文档流）。如果一个没有高度或者 <code>height</code> 是 <code>auto</code> 的容器的子元素是浮动元素，则该容器的高度是不会被撑开的。我们通常会利用伪元素（<code>:after</code> 或者 <code>:before</code>）来解决这个问题。BFC 能包含浮动，也能解决容器高度不会被撑开的问题。</p><ol><li><strong>使用 <code>overflow: auto</code></strong></li><li><strong>使用 <code>display: flow-root</code></strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-attr">[style]</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">5px</span> solid steelblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.float</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>我是浮动的盒子！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是容器内的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;overflow:auto&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>我是浮动的盒子！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是 <span class="tag">&lt;<span class="name">code</span>&gt;</span>overflow:auto<span class="tag">&lt;/<span class="name">code</span>&gt;</span> 容器内部的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:flow-root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>我是浮动的盒子！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是 <span class="tag">&lt;<span class="name">code</span>&gt;</span>display:flow-root<span class="tag">&lt;/<span class="name">code</span>&gt;</span> 容器内部的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自适应布局">自适应布局</h3><p>使用<code>display: flow-root</code>和浮动实现双列布局，正常文档流中建立的 BFC 不得与元素本身所在的块格式化上下文中的浮动元素重叠。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">224</span>, <span class="number">206</span>, <span class="number">247</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">5px</span> solid rebeccapurple;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-attr">[style]</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aliceblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">5px</span> solid steelblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.float</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-right</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.75</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>试试重新调整这个外部浮动元素的大小<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>普通<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>试试重新调整这个外部浮动元素的大小<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:flow-root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>display:flow-root<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(21)-常用布局</title>
    <link href="/2024/07/12/CSS%E5%AD%A6%E4%B9%A0(21)-%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80/"/>
    <url>/2024/07/12/CSS%E5%AD%A6%E4%B9%A0(21)-%E5%B8%B8%E7%94%A8%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p>布局（Layout）在网页设计和开发中指的是将网页内容有序地组织和排列，以便用户能够更容易地阅读和理解。布局决定了页面元素（如文本、图像、导航菜单、侧边栏等）的排列方式和相对位置，直接影响用户体验和页面美观性。</p><span id="more"></span><h1>常用布局</h1><h2 id="双栏布局">双栏布局</h2><p>双栏布局是一种常见的网页布局形式，通常用于创建左右两栏的布局结构，例如导航栏和内容区。</p><h3 id="float-margin">float+margin</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="float-overflow">float+overflow</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="position">position</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex">flex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="grid">grid</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="table">table</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三栏布局">三栏布局</h2><p>三栏布局是一种常见的网页布局形式，通常用于创建左中右三个栏的布局结构，常见于门户网站、博客等页面。</p><h3 id="float">float</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-left&quot;</span>&gt;</span>左侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-right&quot;</span>&gt;</span>右侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="position-2">position</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* margin: 0 200px; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-left&quot;</span>&gt;</span>左侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-right&quot;</span>&gt;</span>右侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex-2">flex</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-left&quot;</span>&gt;</span>左侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-right&quot;</span>&gt;</span>右侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="grid-2">grid</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">200px</span> <span class="number">1</span>fr <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-left&quot;</span>&gt;</span>左侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-right&quot;</span>&gt;</span>右侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="table-2">table</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightcoral;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar-right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-left&quot;</span>&gt;</span>左侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>内容区<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-right&quot;</span>&gt;</span>右侧栏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(20)-居中布局</title>
    <link href="/2024/07/11/CSS%E5%AD%A6%E4%B9%A0(20)-%E5%B1%85%E4%B8%AD%E5%B8%83%E5%B1%80/"/>
    <url>/2024/07/11/CSS%E5%AD%A6%E4%B9%A0(20)-%E5%B1%85%E4%B8%AD%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p>居中布局在响应式设计中表现尤为出色，能够自动适应不同屏幕尺寸，确保内容始终居中显示，提升用户在各种设备上的体验。</p><span id="more"></span><h1>居中布局</h1><p>居中布局是指将一个或多个元素在其父容器中进行对齐，使其在水平、垂直或同时在水平和垂直方向上居中显示。这种布局方式常用于使页面内容在视觉上更具吸引力和对称性。</p><h2 id="水平居中">水平居中</h2><p>水平居中是指将一个元素在其父容器内水平方向上居中对齐。</p><h3 id="内联元素">内联元素</h3><p>利用 <code>text-align: center</code> 可以实现块级元素内部的内联元素水平居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inline</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="块级元素">块级元素</h3><p>将 <code>margin-left</code> 和 <code>margin-right</code> 设置为 <code>auto</code> 来实现块联元素水平居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用弹性布局，实现水平居中，其中 <code>justify-content</code> 用于设置弹性盒子元素在主轴方向上的对齐方式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用绝对定位和 <code>left: 50%</code> 及 <code>transform: translateX(-50%)</code>进行偏移来实现块联元素水平居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="垂直居中">垂直居中</h2><p>垂直居中是指将一个元素在其父容器内垂直方向上居中对齐。</p><h3 id="内联元素-2">内联元素</h3><h4 id="单行内联元素">单行内联元素</h4><p>对于单行文本，可以使用 <code>line-height</code> 来实现垂直居中。将 <code>line-height</code> 设置为与元素高度相同。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多行内联元素">多行内联元素</h4><p>对于多行文本，可以使用表格布局的 <code>vertical-align: middle</code> 可以实现子元素的垂直居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inline</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用弹性布局实现垂直居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    或者</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="块级元素-2">块级元素</h3><p>利用弹性布局实现垂直居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用绝对定位和 <code>top: 50%</code> 及 <code>transform: translateY(-50%)</code>进行偏移来实现块联元素垂直居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="垂直水平居中">垂直水平居中</h2><p>垂直水平居中是指将一个元素在其父容器内同时在垂直和水平方向上居中对齐。</p><h3 id="内联元素-3">内联元素</h3><p>通过设置父元素容器 <code>text-align</code> 实现水平居中，设置一致的高度（<code>height</code>）和行高（<code>line-height</code>）实现对子元素的垂直居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inline</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inline&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="块级元素-3">块级元素</h3><p>使用绝对定位和 <code>top: 50%</code>、<code>left: 50%</code> 及 <code>transform: translate(-50%, -50%)</code>进行偏移来实现块联元素垂直水平居中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用弹性布局，将 <code>justify-content</code> 和 <code>align-items</code> 设置为 <code>center</code> 实现垂直水平居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用网格布局，将 <code>margin</code> 设置为 <code>auto</code> 实现垂直水平居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.block</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;block&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(19)-动画</title>
    <link href="/2024/07/10/CSS%E5%AD%A6%E4%B9%A0(19)-%E5%8A%A8%E7%94%BB/"/>
    <url>/2024/07/10/CSS%E5%AD%A6%E4%B9%A0(19)-%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<p>在CSS中，<code>transform</code>、<code>transition</code> 和 <code>animation</code> 是用于实现视觉效果和交互动画的关键属性。</p><span id="more"></span><h1>转换</h1><p>CSS 转换可以在不影响正常文档流的情况下改变作用内容的位置。通常使用 <strong>transform</strong> 和 <strong>transform-origin</strong> 属性来定义 CSS 转换。</p><ol><li><strong>transform-origin</strong>：指定原点的位置，默认是元素的中心</li><li><strong>transform</strong>：指定作用在元素上的转换，多个转换使用空格分隔，转换从右到左执行</li></ol><h2 id="transform-style">transform-style</h2><p><strong>transform-style</strong> 属性设置元素是位于 3D 空间中还是平面中。</p><p><strong>属性值</strong>：</p><ol><li><strong>flat</strong>：设置元素位于平面中</li><li><strong>preserve-3d</strong>：设置元素位于 3D 空间中</li></ol><h2 id="translate">translate</h2><p><code>translate()</code>方法将元素从当前位置进行平移</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>translateX(x)</code></td><td>指定对象 X 轴（水平方向）的平移</td></tr><tr><td><code>translateY(y)</code></td><td>指定对象 Y 轴（垂直方向）的平移</td></tr><tr><td><code>translateZ(z)</code></td><td>指定对象 Z 轴的平移</td></tr><tr><td><code>translate(x,y)</code></td><td>指定对象的 2D 平移。两个参数分别对应 X 轴和 Y 轴。如果第二个参数未提供，则默认值为 <code>0</code></td></tr><tr><td><code>translate3d(x,y,z)</code></td><td>指定对象的 3D 位移。三个参数分别对应 X 轴、 Y 轴和 Z 轴，<strong>参数不允许省略</strong></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        place-<span class="attribute">content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: dodgerblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">2rem</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: limegreen;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100%</span>, -<span class="number">2rem</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>demo 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span>demo 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo3&quot;</span>&gt;</span>demo 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="rotate">rotate</h2><p><code>rotate()</code> 方法根据给定的度数顺时针或逆时针旋转元素，元素围绕 <code>transform-origin</code> 属性定义的点旋转。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>rotateX(angle)</code></td><td>指定对象在 X 轴上的旋转角度</td></tr><tr><td><code>rotateY(angle)</code></td><td>指定对象在 Y 轴上的旋转角度</td></tr><tr><td><code>rotateZ(angle)</code></td><td>指定对象在 Z 轴上的旋转角度</td></tr><tr><td><code>rotate(angle)</code></td><td>指定对象的 2D 旋转，需先有 <strong>transform-origin</strong> 属性的定义</td></tr><tr><td><code>rotate3d(x,y,z,angle)</code></td><td>指定对象的 3D 旋转角度，其中前 3 个参数分别表示旋转的方向 X、Y、Z，第 4 个参数表示旋转的角度，<strong>参数不允许省略</strong></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        place-<span class="attribute">content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: dodgerblue;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 可以注释掉transform-origin属性查看区别 */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform-origin</span>: <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>demo 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="scale">scale</h2><p><code>scale()</code>方法根据给定的参数按比例扩缩元素的大小。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>scaleX(x)</code></td><td>指定对象 X 轴的（水平方向）缩放</td></tr><tr><td><code>scaleY(y)</code></td><td>指定对象 Y 轴的（垂直方向）缩放</td></tr><tr><td><code>scaleZ(z)</code></td><td>指定对象的 Z 轴缩放</td></tr><tr><td><code>scale(x,y)</code></td><td>指定对象的 2D 缩放。两个分别对应 X 轴和 Y 轴。如果第二个参数未提供，则默认取第一个参数的值</td></tr><tr><td><code>scale3d(x,y,z)</code></td><td>指定对象的 3D 缩放。三个参数对应 X 轴、 Y 轴和 Z 轴，<strong>参数不允许省略</strong></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        place-<span class="attribute">content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: dodgerblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">scaleX</span>(<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: limegreen;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>demo 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span>demo 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo3&quot;</span>&gt;</span>demo 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="skew">skew</h2><p><code>skew()</code>方法按给定的角度沿 X 轴和 Y 轴倾斜元素。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>skewX(angle)</code></td><td>指定对象 X 轴的（水平方向）倾斜</td></tr><tr><td><code>skewY(angle)</code></td><td>指定对象 Y 轴的（水平方向）倾斜</td></tr><tr><td><code>skew(x-angle,y-angle)</code></td><td>指定对象 X、Y 轴的倾斜，两个参数分别对应 X 轴和 Y 轴，如果第二个参数未提供，则默认值为 <code>0</code></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        place-<span class="attribute">content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: dodgerblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">skewX</span>(<span class="number">135deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">skewY</span>(-<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo3</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: limegreen;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">skew</span>(<span class="number">45deg</span>, <span class="number">135deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>demo 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span>demo 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo3&quot;</span>&gt;</span>demo 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="matrix">matrix</h2><p><code>matrix(a, b, c, d, e, f)</code>方法通过矩阵进行复杂的2D变换。</p><p><strong>参数解释</strong>：</p><ol><li><strong>a</strong>：水平缩放（scaleX）</li><li><strong>b</strong>：垂直倾斜（skewY）</li><li><strong>c</strong>：水平倾斜（skewX）</li><li><strong>d</strong>：垂直缩放（scaleY）</li><li><strong>e</strong>：水平平移（translateX）</li><li><strong>f</strong>：垂直平移（translateY）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        place-<span class="attribute">content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: dodgerblue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">matrix</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1.2</span>, <span class="number">10</span>, <span class="number">10</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>demo 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span>demo 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>过渡</h1><p>CSS 过渡通常使用简写属性 <strong>transition</strong> 控制。<strong>transition</strong> 属性可以被指定为一个或多个 CSS 属性的过渡效果，多个属性之间用逗号进行分隔。如果没有指定CSS 属性和过渡效果时长，那么过渡动画是没有效果的。</p><p><strong>transition</strong> 简写属性 CSS 语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: &lt;property&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="transition-property">transition-property</h2><p><strong>transition-property</strong> 用于设定过渡的属性名称，规定设置过渡效果的 CSS 属性的名称。</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：没有过渡动画。</li><li><strong>all</strong>：所有可被动画的属性都表现出过渡动画。</li><li><strong>属性名称</strong>：CSS 属性的名称。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-property</span>: width, height;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="transition-duration">transition-duration</h2><p><strong>transition-duration</strong> 用于设定过渡动画所需的时间，规定完成过渡效果需要多少秒或毫秒，默认为 <code>0s</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-property</span>: width, height;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="transition-delay">transition-delay</h2><p><strong>transition-delay</strong> 用于设定过渡效果开始作用之前需要等待的时间，取值为正时会延迟一段时间来响应过渡效果；取值为负时会导致过渡立即开始。默认为 <code>0s</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-property</span>: width, height;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-delay</span>: <span class="number">0.1s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="transition-timing-function">transition-timing-function</h2><p><strong>transition-timing-function</strong> 用于设定过渡的速度曲线，规定速度效果的速度曲线，默认为 <code>ease</code>。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>linear</code></td><td>线性效果，动画从头到尾的速率是相同的</td></tr><tr><td><code>ease</code></td><td>表示缓动函数 <code>cubic-bezier(0.25, 0.1, 0.25, 1)</code>，动画以低速开始，然后加快，结束前变慢</td></tr><tr><td><code>ease-in</code></td><td>表示缓动函数 <code>cubic-bezier(0.42, 0, 1, 1)</code>，动画以低速开始，然后逐渐加快</td></tr><tr><td><code>ease-out</code></td><td>表示缓动函数 <code>cubic-bezier(0, 0, 0.58, 1)</code>，动画以快速开始，然后逐渐减慢</td></tr><tr><td><code>ease-in-out</code></td><td>表示缓动函数 <code>cubic-bezier(0.42, 0, 0.58, 1)</code>，动画开始类似于<code>ease-in</code>，结束类似于<code>ease-out</code></td></tr><tr><td><code>step-start</code></td><td>马上转跳到动画结束状态</td></tr><tr><td><code>step-end</code></td><td>保持动画开始状态，直到动画执行时间结束，马上转跳到动画结束状态</td></tr><tr><td><code>steps()</code></td><td>函数接受正值，在过渡时间内步进式过渡</td></tr><tr><td><code>cubic-bezier(a,b,c,d)</code></td><td>贝塞尔曲线，接受四个值来做曲线</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-property</span>: width, height;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-delay</span>: <span class="number">0.1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition-timing-function</span>: <span class="built_in">steps</span>(<span class="number">4</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>动画</h1><p>CSS 动画通常使用简写属性 <strong>animation</strong> 控制。<strong>animation</strong> 属性包含描述动画的样式规则和用于指定动画开始、结束以及中间点样式的关键帧。</p><p><strong>animation</strong> 简写属性 CSS 语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: &lt;name&gt; &lt;duration&gt; &lt;timing-function&gt; &lt;delay&gt; &lt;iteration-count&gt; &lt;direction&gt; &lt;fill-mode&gt; &lt;play-state&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="animation-name">animation-name</h2><p><strong>animation-name</strong> 关键帧名称，用于定义 <code>@keyframes</code> 动画的名称，与 <code>@keyframes</code> 定义的动画名称一致。</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：无动画效果</li><li><strong><code>&lt;keyframename&gt;</code></strong>：需要绑定到选择器的 <code>keyframes</code> 的名称</li></ol><h2 id="animation-duration">animation-duration</h2><p><strong>animation-duration</strong> 动画持续时间，规定元素动画播放完成一个周期所需要的时间，以秒或毫秒计量。默认为 0 表示没有动画效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="animation-timing-function">animation-timing-function</h2><p><strong>animation-timing-function</strong> 速度曲线，规定速度效果的速度曲线，默认为 <code>ease</code>。</p><table><thead><tr><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td><code>linear</code></td><td>线性效果，动画从头到尾的速率是相同的</td></tr><tr><td><code>ease</code></td><td>表示缓动函数 <code>cubic-bezier(0.25, 0.1, 0.25, 1)</code>，动画以低速开始，然后加快，结束前变慢</td></tr><tr><td><code>ease-in</code></td><td>表示缓动函数 <code>cubic-bezier(0.42, 0, 1, 1)</code>，动画以低速开始，然后逐渐加快</td></tr><tr><td><code>ease-out</code></td><td>表示缓动函数 <code>cubic-bezier(0, 0, 0.58, 1)</code>，动画以快速开始，然后逐渐减慢</td></tr><tr><td><code>ease-in-out</code></td><td>表示缓动函数 <code>cubic-bezier(0.42, 0, 0.58, 1)</code>，动画开始类似于<code>ease-in</code>，结束类似于<code>ease-out</code></td></tr><tr><td><code>step-start</code></td><td>马上转跳到动画结束状态</td></tr><tr><td><code>step-end</code></td><td>保持动画开始状态，直到动画执行时间结束，马上转跳到动画结束状态</td></tr><tr><td><code>steps()</code></td><td>函数接受正值，在过渡时间内步进式过渡</td></tr><tr><td><code>cubic-bezier(a,b,c,d)</code></td><td>贝塞尔曲线，接受四个值来做曲线</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-timing-function</span>: <span class="built_in">steps</span>(<span class="number">5</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="animation-delay">animation-delay</h2><p><strong>animation-delay</strong> 属性规定执行动画前的等待时间，以秒或毫秒计量。正值表示动画应在指定的时间量过去后开始，默认值为 <code>0s</code>，表示动画应立即开始，负值会导致动画立即开始，但是从动画循环的某个时间点开始。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-timing-function</span>: ease;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-delay</span>: <span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="animation-iteration-count">animation-iteration-count</h2><p><strong>animation-iteration-count</strong> 属性规定动画的播放次数，可选具体次数或者无限（infinite），默认为 1。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-timing-function</span>: ease;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-delay</span>: <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-iteration-count</span>: <span class="number">5</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="animation-direction">animation-direction</h2><p><strong>animation-direction</strong> 属性规定执行动画前的等待时间，以秒或毫秒计量。正值表示动画应在指定的时间量过去后开始，默认值为 <code>0s</code>，表示动画应立即开始，负值会导致动画立即开始，但是从动画循环的某个时间点开始。</p><p><strong>属性值</strong>：</p><ol><li><strong>normal</strong>：动画在每个循环中正向播放。</li><li><strong>reverse</strong>：动画在每个循环中反向播放。</li><li><strong>alternate</strong>：动画在每个循环中正反交替播放，第一次迭代是正向播放。</li><li><strong>alternate-reverse</strong>：动画在每个循环中正反交替播放，第一次迭代是反向播放。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-timing-function</span>: ease;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-delay</span>: <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-iteration-count</span>: <span class="number">5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-direction</span>: alternate-reverse;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="animation-fill-mode">animation-fill-mode</h2><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：默认值。动画在执行之前或之后不会对元素应用任何样式</li><li><strong>forwards</strong>：元素将保留最后一个关键帧设置的样式值（取决于动画方向和动画迭代次数）</li><li><strong>backwards</strong>：元素将获取第一个关键帧设置的样式值（取决于动画方向），并在动画延迟期间保留该值</li><li><strong>both</strong>：动画将遵循向前和向后的规则，在两个方向上扩展动画属性</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-timing-function</span>: ease;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-delay</span>: <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-iteration-count</span>: <span class="number">5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-direction</span>: alternate;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-fill-mode</span>: both;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="animation-play-state">animation-play-state</h2><p><strong>animation-play-state</strong> 属性规定动画的播放状态，用此来控制动画的暂停和继续。</p><p><strong>属性值</strong>：</p><ol><li><strong>running</strong>：默认值，动画运行</li><li><strong>paused</strong>：动画暂停</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-name</span>: move;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-duration</span>: <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-timing-function</span>: ease;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-delay</span>: <span class="number">0.5s</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-iteration-count</span>: <span class="number">5</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-direction</span>: alternate;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-fill-mode</span>: both;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-play-state</span>: paused;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">from</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">to</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">200px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="keyframes">@keyframes</h2><p>通过在动画序列中定义关键帧 <strong><code>@keyframes</code></strong> 的样式来控制 CSS 动画序列中的中间步骤。</p><p><strong>属性值</strong>：</p><ol><li><strong>关键帧名称</strong>：名称需符合CSS 标识符命名，关键帧名称需要与动画名称一致</li><li><strong>from</strong>：等价于 <code>0%</code></li><li><strong>to</strong>：等价于 <code>100%</code></li><li><strong>百分数</strong>：动画序列中触发关键帧的时间点，使用百分数来表示</li></ol>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(18)-函数</title>
    <link href="/2024/07/09/CSS%E5%AD%A6%E4%B9%A0(18)-%E5%87%BD%E6%95%B0/"/>
    <url>/2024/07/09/CSS%E5%AD%A6%E4%B9%A0(18)-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>CSS 中提供了大量内置函数，每个 CSS 函数都有特定的用途。</p><span id="more"></span><h1>函数</h1><h2 id="变量">变量</h2><p>CSS 变量可以具有全局或局部范围，变量名必须以两个破折号（–）开头，并且区分大小写。</p><h3 id="var">var()</h3><p><code>var()</code>函数用于插入 CSS 变量的值。</p><h3 id="全局声明">全局声明</h3><p>全局变量可以通过整个文档使用，创建具有全局作用域的变量，需要在<code>:root</code> 选择器内声明它。<code>:root</code>选择器与文档的根元素匹配。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-pseudo">:root</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attr">--blue</span>: <span class="number">#1e90ff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attr">--white</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">var</span>(--blue);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">var</span>(--white);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="局部声明">局部声明</h3><p>局部变量只能在声明它的选择器内使用，创建局部变量，在使用它的选择器内声明它。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attr">--blue</span>: <span class="number">#1e90ff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attr">--white</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">var</span>(--blue);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">var</span>(--white);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="颜色函数">颜色函数</h2><h3 id="rgb">rgb()</h3><p><code>rgb()</code> 函数将三个取值范围0-255的数字作为参数，表示颜色的红色、绿色和蓝色，并返回RGB 值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">197</span>, <span class="number">93</span>, <span class="number">161</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="hsl">hsl()</h3><p><code>hsl()</code> 函数有三个参数，色调、饱和度和亮度值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">321</span>, <span class="number">47%</span>, <span class="number">57%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数学表达式">数学表达式</h2><h3 id="calc">calc()</h3><p><code>calc()</code> 函数允许使用加法、减法、乘法和除法来指定 CSS 属性值。通常用于组合计算具有不同单位的两个 CSS 值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: chocolate;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.calc1</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">10px</span> + <span class="number">100px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.calc2</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">2em</span> * <span class="number">5</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.calc3</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">32px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.calc4</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attr">--predefined-width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--predefined-width) - <span class="built_in">calc</span>(<span class="number">16px</span> * <span class="number">2</span>));</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;calc1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: calc(10px + 100px);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;calc2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: calc(2em * 5);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;calc3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: calc(100% - 32px);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;calc4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: calc(var(--predefined-width) - calc(16px * 2));<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="min">min()</h3><p><code>min()</code> 函数将一组逗号分隔的值作为参数，并返回这些值中的最小值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: chocolate;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.min1</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">9999px</span>, <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.min2</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">9999px</span>, <span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.min3</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">120px</span>, <span class="number">150px</span>, <span class="number">90%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.min4</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">min</span>(<span class="number">80px</span>, <span class="number">90%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;min1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: min(9999px, 50%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;min2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: min(9999px, 100%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;min3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: min(120px, 150px, 90%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;min4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: min(80px, 90%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="max">max()</h3><p><code>max()</code> 函数将一组逗号分隔的值作为参数，并返回这些值中的最大值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: chocolate;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.max1</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">50px</span>, <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.max2</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">50px</span>, <span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.max3</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">20px</span>, <span class="number">50px</span>, <span class="number">90%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.max4</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">max</span>(<span class="number">80px</span>, <span class="number">80%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;max1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: max(50px, 50%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;max2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: max(50px, 100%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;max3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: max(20px, 50px, 90%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;max4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: max(80px, 80%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="clamp">clamp()</h3><p><code>clamp()</code> 函数组合了<code>min()</code> 和<code>max()</code> 函数，<code>clamp()</code> 函数有三个参数：最小值，限制值和最大值。</p><ol><li>如果要限制的值小于传递的最小值，则函数将返回最小值。</li><li>如果要限制的值大于传递的最大值，则函数将返回最大值。</li><li>如果要限制的值处于最小值与最大值之间，则函数将返回要限制的原始值。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">4px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: chocolate;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.clamp1</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">clamp</span>(<span class="number">20%</span>, <span class="number">1px</span>, <span class="number">80%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.clamp2</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">clamp</span>(<span class="number">10%</span>, <span class="number">9999px</span>, <span class="number">90%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.clamp3</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">clamp</span>(<span class="number">125px</span>, <span class="number">1px</span>, <span class="number">250px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.clamp4</span>&gt;<span class="selector-tag">code</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">clamp</span>(<span class="number">25px</span>, <span class="number">9999px</span>, <span class="number">150px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clamp1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: clamp(10%, 1px, 90%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clamp2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: clamp(10%, 9999px, 90%);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clamp3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: clamp(125px, 1px, 250px);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clamp4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>width: clamp(25px, 9999px, 150px);<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(17)-响应式</title>
    <link href="/2024/07/08/CSS%E5%AD%A6%E4%B9%A0(17)-%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    <url>/2024/07/08/CSS%E5%AD%A6%E4%B9%A0(17)-%E5%93%8D%E5%BA%94%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>早年页面是以适配特定的屏幕大小创建的，如果用户使用更小或者更大的屏幕，会出现滚动条、过长的行，没有合理利用空间。随着屏幕尺寸的种类越来越多，出现了响应式网页设计的概念，即允许 Web 页面适应不同屏幕宽度等因素，进行布局和外观的调整。</p><span id="more"></span><h1>响应式设计</h1><p>响应式设计是一种 Web 设计的方式，用于创建在不同设备和屏幕尺寸上都能良好显示和操作的网站设计方法。响应式设计的核心思想是通过使用灵活的网格布局、弹性图片和CSS媒体查询，使网站能够自动适应和调整到不同设备的屏幕尺寸。</p><h2 id="媒体查询">媒体查询</h2><p>使用媒体查询根据设备的特性（如宽度、高度、分辨率）来应用不同的CSS样式。<code>@media</code>仅当某个条件为真时，它才使用该规则来包含一组 CSS 属性。</p><h3 id="媒体查询语法">媒体查询语法</h3><p>媒体查询由媒体类型组成，可以包含一个或多个媒体功能，这些功能可以解析为真或假。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">not</span>|<span class="keyword">only</span> mediatype <span class="keyword">and</span> (media feature) <span class="keyword">and</span> (media feature) &#123;</span><br><span class="line">CSS-<span class="selector-tag">Code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="媒体类型">媒体类型</h3><p>媒体类型描述设备的一般类别，除非使用 <code>not</code> 或 <code>only</code> 逻辑运算符，否则媒体类型是可选的，并且会（隐式地）应用 <code>all</code> 类型。</p><ol><li><strong>all</strong>：适用于所有设备。</li><li><strong>print</strong>：适用于在打印预览模式下在屏幕上查看的分页材料和文档。</li><li><strong>screen</strong>：主要用于屏幕。</li></ol><h3 id="媒体功能">媒体功能</h3><p>媒体功能描述了具体的设备特征</p><ol><li><strong>orientation</strong>：视口的旋转方向</li><li><strong>height</strong>：视口的高度</li><li><strong>width</strong>：视口的宽度</li><li><strong>aspect-ratio</strong>：视口的宽高比</li></ol><h3 id="逻辑运算符">逻辑运算符</h3><p>逻辑运算符<code>not</code>、<code>and</code>、<code>only</code> 和 <code>or</code> 可用于联合构造复杂的媒体查询，也可以通过用逗号分隔多个媒体查询，将它们组合为一个规则。</p><ol><li><strong>and</strong>：用于将多个媒体查询规则组合成单条媒体查询，当每个查询规则都为<code>true</code>时则该条媒体查询为 <code>true</code>，它还用于将媒体功能与媒体类型结合在一起。</li><li><strong>not</strong>：用于否定媒体查询，使用 <code>not</code> 运算符，必须指定媒体类型。</li><li><strong>only</strong>：仅在整个查询匹配时才应用样式，使用 <code>only</code> 运算符，必须指定媒体类型。</li><li><strong><code>,</code></strong>：将多个媒体查询合并为一个规则，如果列表中的任何查询为 <code>true</code>，则整个媒体查询语句返回 <code>true</code>。</li></ol><h3 id="示例">示例</h3><p>视口宽度大于等于<code>768px</code>背景颜色为<code>lightgreen</code>，否则背景颜色为<code>lightblue</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视口高度大于等于<code>680px</code>且视口为横向旋转（宽度大于高度）背景颜色为<code>lightgreen</code>，否则背景颜色为<code>lightblue</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-height</span>: <span class="number">680px</span>) <span class="keyword">and</span> (<span class="attribute">orientation</span>: landscape) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视口宽度不在<code>768px</code>和<code>1024px</code>之间背景颜色为<code>lightgreen</code>，否则背景颜色为<code>lightblue</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">not</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>视口宽度大于等于<code>768px</code>或视口高度大于等于<code>680px背景颜色为</code>lightgreen<code>，否则背景颜色为</code>lightblue``</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>), screen <span class="keyword">and</span>  (<span class="attribute">min-height</span>: <span class="number">680px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: lightgreen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(16)-Grid</title>
    <link href="/2024/07/07/CSS%E5%AD%A6%E4%B9%A0(16)-Grid/"/>
    <url>/2024/07/07/CSS%E5%AD%A6%E4%B9%A0(16)-Grid/</url>
    
    <content type="html"><![CDATA[<p>Grid 是一个二维布局系统。利用Grid，可以把内容按照行与列的格式进行排版。</p><span id="more"></span><h1>Grid</h1><p>网格是一组相交的水平线和垂直线，它定义了网格的列和行。</p><h2 id="网格容器">网格容器</h2><p>通过在元素上声明 <code>display：grid</code> 来创建一个<em>网格容器</em>。一旦我们这样做，这个元素的所有<em>子元素</em>将成为<em>网格项</em>。</p><h2 id="网格项">网格项</h2><p><em>网格容器</em>的子元素被称为<em>网格项</em>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="网格轨道">网格轨道</h2><p><em>网格轨道</em>是网格上任意两条相邻线之间的空间，使用 <strong>grid-template-rows</strong> 和 <strong>grid-template-column</strong> 属性定义网格上的行和列。</p><h3 id="固定尺寸">固定尺寸</h3><p>通过设置非负的数值或者百分比，定义网格行和列的尺寸大小。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template</span>-column: <span class="number">200px</span>, <span class="number">200px</span>, <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-rows</span>: <span class="number">200px</span>, <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="弹性尺寸">弹性尺寸</h3><p>使用 <code>fr</code> 单位用于表示轨道尺寸配额，表示按配额比例分配可用空间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template</span>-column: <span class="number">2</span>fr, <span class="number">1</span>fr, <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-rows</span>: <span class="number">200px</span>, <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="混合尺寸">混合尺寸</h3><p><code>fr</code> 和其它长度单位混合使用时，<code>fr</code> 的计算基于其它单位分配后的剩余可用空间。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template</span>-column: <span class="number">200px</span>, <span class="number">1</span>fr, <span class="number">2</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-rows</span>: <span class="number">200px</span>, <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="最值">最值</h3><p>函数 <code>minmax()</code> 用于定义轨道最小 / 最大边界值，函数 <code>minmax()</code> 接收两个参数：第一个参数表示最小轨道尺寸，第二个参数表示最大轨道尺寸。长度值可以是 <code>auto</code>，表示轨道尺寸可以根据内容大小进行伸长或收缩。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="built_in">minmax</span>(auto, <span class="number">50%</span>) <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">150px</span>, auto);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="重复">重复</h3><p>函数 <code>repeat()</code> 用于定义重复的网格轨道，函数 <code>repeat()</code> 接收两个参数：第一个参数表示重复的次数，第二个参数表示轨道尺寸。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    等价于</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span></span><br><span class="line"><span class="language-css">    &#125; </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="显式和隐式网格">显式和隐式网格</h3><p>在创建网格时，使用 <strong>grid-template-rows</strong> 和 <strong>grid-template-column</strong> 属性显式定义网格上的行和列。由于内容太多，需要更多的网格轨道，那么网格就会在隐式网格中创建行和列。默认情况下，这些轨道会自动调整大小，因此它们的大小取决于轨道内的内容。可以使用 <strong>grid-auto-rows</strong> 和 <strong>grid-auto-column</strong> 属性为隐式网格中创建的轨道定义大小。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="网格线">网格线</h2><p>定义网格时，定义的是网格轨道，而不是网格线。网格布局会创建编号的网格线来定位每一个网格单元。</p><h3 id="跨越多列">跨越多列</h3><p>通过对 <strong>grid-column-start</strong> 和 <strong>grid-column-end</strong> 属性的设置，使该网格项跨越多列。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="跨越多行">跨越多行</h3><p>通过对 <strong>grid-row-start</strong> 和 <strong>grid-row-end</strong> 属性的设置，使该网格项跨越多行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row-start</span>: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row-end</span>: <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="简写">简写</h3><p>属性 <strong>grid-row</strong> 是 <strong>grid-row-start</strong> 和 <strong>grid-row-end</strong> 的简写形式。</p><p>属性 <strong>grid-column</strong> 是  <strong>grid-column-start</strong> 和 <strong>grid-column-end</strong> 的简写形式。</p><ol><li>如果只指定一个值，它表示 <code>grid-row/column-start</code></li><li>如果两个值都指定，第一个表示 <code>grid-row/column-start</code> ，第二个值表示<code>grid-row/column-end</code>。而且必须用斜杠(<code>/</code>)分隔这两个值</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="span">span</h3><p>关键字 <code>span</code> 用来指定跨越行或列的数量。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    等价于</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column</span>: <span class="number">1</span> / span <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row</span>: <span class="number">2</span> / span <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">    &#125;    </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="反方向计数">反方向计数</h3><p>由 <strong>grid-template-rows</strong> 和 <strong>grid-template-column</strong> 属性显式定义的网格，右端的列线和底端的行线。这些线会被记为 <code>-1</code>，然后你可以从这往前数，所以倒数第 2 条线会被记为 <code>-2</code>。隐式定义的网格不支持反方向计数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column</span>: <span class="number">1</span> / -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;  </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="网格单元格">网格单元格</h2><p><em>网格单元格</em>是网格项中最小的单位，一个父级元素被定义为网格元素，那么它的子级元素将会排列在每个事先定义好的网格单元格中。</p><h2 id="网格间距">网格间距</h2><p>网格单元格之间的<em>横向间距</em>（gutter）或<em>纵向间距</em>（alley）可以使用 <strong>column-gap</strong> 和 <strong>row-gap</strong> 属性或简写 <strong>gap</strong> 来创建。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-gap</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">row-gap</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    等价于</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">gap</span>: <span class="number">1rem</span>; </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* gap: 1rem 1rem; */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="网格区域">网格区域</h2><p>网格项可以按行或列跨越一个或多个单元格，这样就形成了一个<em>网格区域</em>，网格区域必须是矩形。</p><h3 id="网格项区域">网格项区域</h3><p>在前面已经通过 <strong>grid-row</strong> 和 <strong>grid-column</strong>属性实现网格线跨越的简写，可以通过 <strong>grid-area</strong> 属性进一步简写。<strong>grid-area</strong> 值的顺序如下：</p><ol><li><strong>grid-row-start</strong></li><li><strong>grid-column-start</strong></li><li><strong>grid-row-end</strong></li><li><strong>grid-column-end</strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">1</span> / <span class="number">1</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: <span class="number">2</span> / <span class="number">1</span> / <span class="number">4</span> / <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;  </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="网格模板区域">网格模板区域</h3><p>上面我们使用 <strong>grid-area</strong> 属性定义了一个网格项区域，也可以先给一个区域命名，然后在 <strong>grid-template-areas</strong> 属性值中指定这个区域的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">9</span>, <span class="number">1</span>fr);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="built_in">minmax</span>(<span class="number">100px</span>, auto);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-areas</span>:</span></span><br><span class="line"><span class="language-css">            <span class="string">&quot;hd hd hd   hd   hd   hd   hd   hd   hd&quot;</span></span></span><br><span class="line"><span class="language-css">            <span class="string">&quot;sd sd main main main main main main main&quot;</span></span></span><br><span class="line"><span class="language-css">            <span class="string">&quot;ft ft ft   ft   ft   ft   ft   ft   ft&quot;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#ffa94d</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ffd8a8</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#d9480f</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: hd;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: ft;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: main;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sidebar</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: sd;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span>sidebar<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="网格布局">网格布局</h2><p>网格布局默认是沿着行放置网格项，可以通过 <strong>grid-auto-flow</strong> 属性来指定网格如何布局。</p><p><strong>属性值</strong>：</p><ol><li><strong>row</strong>：逐行填充来排列元素，在必要时增加新行。</li><li><strong>column</strong>：逐列填充来排列元素，在必要时增加新列。</li><li><strong>dense</strong>：如果使用，在网格中布局元素时，后面出现了稍小的元素，会试图去填充网格中前面留下的空白，这样做会填上稍大元素留下的空白，但同时也可能导致原来出现的次序被打乱。如果省略，后面的元素不会试图填充前面的空白，保证所有的元素按照次序出现。</li></ol><p><strong>形式</strong>：</p><ol><li>单个关键字：<code>row</code>、<code>column</code>，或 <code>dense</code> 中的一个。</li><li>两个关键字：<code>row dense</code> 或 <code>column dense</code>。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-rows</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* grid-auto-flow: row dense; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-auto-flow</span>: column dense;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">1</span> / <span class="number">1</span> / <span class="number">4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-area</span>: <span class="number">2</span> / <span class="number">1</span> / <span class="number">5</span> / <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;  </span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(15)-Flex</title>
    <link href="/2024/07/06/CSS%E5%AD%A6%E4%B9%A0(15)-Flex/"/>
    <url>/2024/07/06/CSS%E5%AD%A6%E4%B9%A0(15)-Flex/</url>
    
    <content type="html"><![CDATA[<p>Flex是Flexible Box的缩写，是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。</p><span id="more"></span><h1>Flex</h1><p>Flexible Box 模型，通常被称为 flexbox，弹性布局的目的是提供一种更加高效的方式来对容器中的条目进行布局、对齐和分配空间。创建 flex 容器需要把容器的 <strong>display</strong> 属性设置为 <code>flex</code>。</p><p><img src="/imgs/CSS/flex.png" alt=""></p><ol><li><strong>主轴</strong>（main axis）：是沿着 flex 元素放置的方向延伸的轴，该轴的开始和结束被称为 <strong>main start</strong> 和 <strong>main end</strong>。</li><li><strong>交叉轴</strong>（cross axis）：是垂直于 flex 元素放置方向的轴。该轴的开始和结束被称为 <strong>cross start</strong> 和 <strong>cross end</strong>。</li><li>设置了 <code>display: flex</code> 的父元素，被称之为 <strong>flex 容器（flex container）。</strong></li><li>在 flex 容器中表现为弹性的盒子的元素被称之为 <strong>flex 项</strong>（<strong>flex item</strong>）。</li></ol><h2 id="主轴方向">主轴方向</h2><p>在 flex 容器中添加 <strong>flex-direction</strong> 属性可以让我们更改 flex 元素的排列方向。</p><p><strong>属性值</strong>：</p><ol><li><strong>row</strong>：表示flex 项从左向右排列。此时<strong>水平方向轴</strong>为主轴。</li><li><strong>row-reverse</strong>：表示flex 项从右向左排列。</li><li><strong>column</strong>：表示flex 项从上向下排列。此时<strong>垂直方向轴</strong>为主轴。</li><li><strong>column-reverse</strong>：表示flex 项从下向上排列。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="换行">换行</h2><p>在 flex 容器中添加 <strong>flex-wrap</strong> 属性用于指定弹性布局中flex 项是否换行。</p><p><strong>属性值</strong>：</p><ol><li><strong>nowrap</strong>：表示不换行，所有flex 项单行排列，flex 项可能会溢出。</li><li><strong>wrap</strong>：表示换行，所有flex 项目多行排列，溢出的flex 项会被放到下一行，按从上向下顺序排列。</li><li><strong>wrap-reverse</strong>：所有flex 项多行排列，按从下向上顺序排列。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex-flow">flex-flow</h2><p>可以将两个属性 <strong>flex-direction</strong> 和 <strong>flex-wrap</strong> 组合为简写属性 <strong>flex-flow</strong>。第一个指定的值为 <strong>flex-direction</strong> ，第二个指定的值为 <strong>flex-wrap</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-flow</span>: row wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对齐方式">对齐方式</h2><h3 id="主轴方向对齐">主轴方向对齐</h3><p><strong>justify-content</strong> 属性定义了flex 项在 <strong>主轴</strong>上的对齐方式。</p><p><strong>属性值</strong>：</p><ol><li><strong>flex-start</strong>：默认值，表示弹性容器flex 项按主轴起点线对齐</li><li><strong>flex-end</strong>：表示弹性容器flex 项按主轴终点线对齐</li><li><strong>center</strong>：居中排列</li><li><strong>space-between</strong>：弹性容器flex 项均匀分布，第一项紧贴主轴起点线，最后一项紧贴主轴终点线，flex 项之间的间隔都相等。要注意特殊情况，当剩余空间为负数或者只有一个项时，效果等同于 <strong>flex-start</strong>。</li><li><strong>space-around</strong>：弹性容器flex 项均匀分布，每个项目两侧的间隔相等，相邻项目之间的距离是两个项目之间留白的和。所以，项目之间的间隔比项目与边框的间隔大一倍。要注意特殊情况，当剩余空间为负数或者只有一个项时，效果等同于 <strong>center</strong>。</li><li><strong>space-evenly</strong>：弹性容器flex 项均匀分布，所有项目之间及项目与边框之间的距离相等。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-flow</span>: row wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="交叉轴方向对齐">交叉轴方向对齐</h3><p><strong>align-items</strong> 属性定义了flex 项在 <strong>交叉轴</strong>上的对齐方式。</p><p><strong>属性值</strong>：</p><ol><li><strong>stretch</strong>：默认值，当flex 项未设置高度或者高度为 <code>atuo</code> 时，会使所有flex 项沿着交叉轴的方向拉伸以填充父容器。如果父容器在交叉轴方向上没有固定高度，则所有flex 项的高度将与最高的flex 项一样。</li><li><strong>flex-start</strong>：表示弹性容器flex 项按交叉轴起点线对齐。</li><li><strong>flex-end</strong>：表示弹性容器flex 项按交叉轴终点线对齐。</li><li><strong>center</strong>：表示与交叉轴的中线对齐。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-flow</span>: row wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多交叉轴方向对齐">多交叉轴方向对齐</h3><p><strong>align-content</strong> 属性定义了flex 项在 <strong>多根交叉轴</strong>上的对齐方式。如果只有一根交叉轴，该属性不起作用。针对盒子内部的元素超过了盒子的宽度出现了换行，flex 项是多行。</p><p><strong>属性值</strong>：</p><ol><li><strong>stretch</strong>：默认值，当flex 项未设置高度或者高度为 <code>atuo</code> 时，会使所有flex 项沿着交叉轴的方向拉伸以填充父容器。如果父容器在交叉轴方向上没有固定高度，则所有flex 项的高度将与最高的flex 项一样。</li><li><strong>flex-start</strong>：表示弹性容器flex 项按交叉轴起点线对齐。</li><li><strong>flex-end</strong>：表示弹性容器flex 项按交叉轴终点线对齐。</li><li><strong>center</strong>：表示与交叉轴的中线对齐。</li><li><strong>space-between</strong>：弹性容器flex 项均匀分布，第一项紧贴主轴起点线，最后一项紧贴主轴终点线，flex 项之间的间隔都相等。要注意特殊情况，当剩余空间为负数或者只有一个项时，效果等同于 <strong>flex-start</strong>。</li><li><strong>space-around</strong>：弹性容器flex 项均匀分布，每个项目两侧的间隔相等，相邻项目之间的距离是两个项目之间留白的和。所以，项目之间的间隔比项目与边框的间隔大一倍。要注意特殊情况，当剩余空间为负数或者只有一个项时，效果等同于 <strong>center</strong>。</li><li><strong>space-evenly</strong>：弹性容器flex 项均匀分布，所有项目之间及项目与边框之间的距离相等。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-flow</span>: row wrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-content</span>: flex-end;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex-项排序">flex 项排序</h2><p>弹性盒子可以通过<strong>order</strong>改变 flex 项的布局位置的功能，而不会影响到源顺序（即 dom 树里元素的顺序）。</p><ol><li>所有的 flex 项默认的 <strong>order</strong> 值是0</li><li><strong>order</strong> 值大的 flex 项比 order 值小的在显示顺序中更靠后。</li><li>拥有相同 <strong>order</strong> 值的元素按照它们在源代码中出现的顺序进行布局。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.order</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">order</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item order&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex-项动态尺寸">flex 项动态尺寸</h2><h3 id="flex-grow">flex-grow</h3><p><strong>flex-grow</strong> 属性定义flex 项的<strong>扩展比例</strong>，表示放大的比例，取值必须是正整数，负值无效，默认为 0。Flex 容器会根据flex 项设置的扩展比例作为比率来分配剩余空间，如果所有flex 项的 <strong>flex-grow</strong> 属性都为 1，则它们将等分剩余空间。如果一个flex 项的 <strong>flex-grow</strong> 属性为 2，其他为 1，则前者占据的剩余空间将比其他项多一倍。</p><p><strong>计算方式</strong>：</p><ol><li>假设剩余空间 <code>x</code>（弹性容器宽度与所有flex 项宽度总和之差）</li><li>假设有三个flex 项元素，<code>flex-grow</code> 设定值分别为 <code>a</code>、<code>b</code> 和 <code>c</code></li><li>每个flex 项元素可以扩展的空间为：<code>a/(a+b+c) * x</code>、<code>b/(a+b+c) * x</code> 和 <code>c/(a+b+c) * x</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex-shrink">flex-shrink</h3><p><strong>flex-shrink</strong> 属性定义flex 项的<strong>缩小比例</strong>，表示缩小的比例，取值必须是正整数，负值无效，默认为 1。如果flex 项宽度之和超过Flex 容器宽度，Flex 容器会根据flex 项设置的缩小比例作为比率来压缩flex 项宽度，以保证不溢出。</p><p><strong>计算方式</strong>：</p><ol><li>假设三个flex 项的 <code>width</code> 为：<code>w1</code>、<code>w2</code>、<code>w3</code></li><li>假设三个flex 项的 <code>flex-shrink</code> 为：<code>a</code>、<code>b</code>、<code>c</code></li><li>计算总压缩权重：<code>sum = a * w1 + b * w2 + c * w3</code></li><li>计算每个元素压缩率：<code>s1 = a * w1 / sum</code>、<code>s2 = b * w2 / sum</code>、<code>s3 = c * w3 / sum</code></li><li>计算每个元素宽度：<code>width - 压缩率 * 溢出空间</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex-basis">flex-basis</h3><p><strong>flex-basis</strong> 属性指定flex 项在主轴方向上的初始长度。</p><p><strong>注意</strong>：</p><p>设置 <code>flex-grow</code> 进行分配剩余空间，或者使用 <code>flex-shrink</code> 进行收缩都是在 <code>flex-basis</code> 的基础上进行的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-basis</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="flex">flex</h3><p><strong>flex</strong> 属性是 <code>flex-grow</code>、<code>flex-shrink</code> 和 <code>flex-basis</code> 的简写，默认值为 <code>0 1 auto</code>。后两个属性可选。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex-项对齐">flex 项对齐</h2><p><strong>align-self</strong> 属性用于指定flex 项的对齐方式，可覆盖 <strong>align-items</strong> 属性。</p><p><strong>属性值</strong>：</p><ol><li><strong>auto</strong>：默认值，表示继承父元素的 <strong>align-items</strong> 属性，如果没有父元素，则等同于 <strong>stretch</strong>。</li><li><strong>flex-start</strong>：表示弹性容器flex 项按交叉轴起点线对齐。</li><li><strong>flex-end</strong>：表示弹性容器flex 项按交叉轴终点线对齐。</li><li><strong>center</strong>：表示与交叉轴的中线对齐。</li><li><strong>stretch</strong>：当flex 项未设置高度或者高度为 <code>atuo</code> 时，会使所有flex 项沿着交叉轴的方向拉伸以填充父容器。如果父容器在交叉轴方向上没有固定高度，则所有flex 项的高度将与最高的flex 项一样。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: space-around;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.flex-item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span> <span class="number">0</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-self</span>: flex-end;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0.5rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex-item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(14)-多列布局</title>
    <link href="/2024/07/05/CSS%E5%AD%A6%E4%B9%A0(14)-%E5%A4%9A%E5%88%97%E5%B8%83%E5%B1%80/"/>
    <url>/2024/07/05/CSS%E5%AD%A6%E4%B9%A0(14)-%E5%A4%9A%E5%88%97%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<p>多列布局声明提供了一种多列组织内容的方式。</p><span id="more"></span><h1>Columns</h1><h2 id="column">column</h2><p><strong>column</strong>属性用来设置元素的列宽和列数，是一个简写属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">columns</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="column-count">column-count</h2><p><strong>column-count</strong>属性将一个元素的内容分成指定数量的列。</p><p><strong>属性值</strong>：</p><ol><li><strong>auto</strong>：用来表示列的数量由其他 CSS 属性指定</li><li>正整数，用来描述元素内容被划分的理想列数</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-count</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="column-width">column-width</h2><p><strong>column-width</strong>属性设置多列布局中的理想列宽。容器将包含尽可能多的列，但其中任何列的宽度都不会小于设置的宽度。如果容器的宽度小于指定值，则单个列的宽度将小于声明的列宽。</p><p><strong>属性值</strong>：</p><ol><li><strong>auto</strong>：列的宽度由其他 CSS 属性决定</li><li>表示最佳列宽。实际列宽可能与指定值不同：当需要填充可用空间时，列宽可能更宽；当可用空间太小时，列宽可能更窄。该值必须严格为正数，否则声明无效。百分比值也无效。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="column-gap">column-gap</h2><p><strong>column-gap</strong>属性用来设置元素列之间的间隔大小。</p><p><strong>属性值</strong>：</p><ol><li><strong>normal</strong>：表示列之间的间隔宽度。在 <code>多列布局</code> 时默认间隔为 <code>1em</code>，其他类型布局默认间隔为 0。</li><li>正整数，定义列之间的间隔大小。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-count</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-gap</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="column-rule">column-rule</h2><p><strong>column-rule</strong>属性在多列布局中设定分割线的宽度、样式和颜色。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-count</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-gap</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-rule</span>: <span class="number">2px</span> dotted <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="column-span">column-span</h2><p><strong>column-rule</strong>属性可以设置一个元素是否跨越所有的列。</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：元素不跨越多个列</li><li><strong>all</strong>：元素横跨所有列</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-count</span>: <span class="number">3</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-gap</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-rule</span>: <span class="number">2px</span> dotted <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">column-span</span>: all;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(13)-定位</title>
    <link href="/2024/07/04/CSS%E5%AD%A6%E4%B9%A0(13)-%E5%AE%9A%E4%BD%8D/"/>
    <url>/2024/07/04/CSS%E5%AD%A6%E4%B9%A0(13)-%E5%AE%9A%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<p>定位允许从正常的文档流布局中取出元素，改变布局中一些盒子的位置。</p><span id="more"></span><h1>定位</h1><p><strong>position</strong> 属性用于指定一个元素在文档中的定位方式。<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>属性则决定了该元素的最终位置。</p><h2 id="static">static</h2><p>HTML 元素默认定位是<strong>static</strong>，<strong>static</strong>不受<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>属性影响，<strong>static</strong>只是将元素放入它在文档布局流中的正常位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">200vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">75vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.static</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: static;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box static&quot;</span>&gt;</span>static<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="relative">relative</h2><p>相对定位与静态定位非常相似，占据在正常的文档流中，可以通过<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>属性修改该元素的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">200vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">75vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.relative</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box relative&quot;</span>&gt;</span>relative<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="absolute">absolute</h2><p>绝对定位的元素脱离了文档流，没有设置<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>属性的时候，绝对定位会显示在正常文档流的上面，后面的元素会占据他的位置，如果设置<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>属性，绝对定位元素相对于最近的非<strong>static</strong>祖先元素定位，如果没有这个祖先元素，将相对于<code>&lt;html&gt;</code>元素定位</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">200vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">75vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.absolute</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box absolute&quot;</span>&gt;</span>absolute<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="fixed">fixed</h2><p>元素会被移出正常文档流，并不为元素预留空间，而是通过指定元素相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。可以通过<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>属性决定该元素的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">200vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">75vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fix</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#0f0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box fix&quot;</span>&gt;</span>fix<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="sticky">sticky</h2><p>粘性定位可以被认为是相对定位和固定定位的混合，须指定<code>top</code>，<code>right</code>，<code>bottom</code>和 <code>left</code>任一属性粘性定位才会生效，否则其行为与相对定位相同。在视口滚动到某个阈值之前，元素为相对定位。之后，元素将固定在与顶部距离的阈值位置。当父元素逐渐消失在视口时，粘性定位的元素也逐渐消失在视口。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">200vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">75vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sticky</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: sticky;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box sticky&quot;</span>&gt;</span>sticky<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="z-index">z-index</h2><p>HTML 页面通常被认为是二维的，但前面的浮动和定位会使元素产生重叠。当元素开始重叠，可以通过<strong>z-index</strong>来决定哪个元素在顶部。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">200vh</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">75vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">85vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> dashed <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">200px</span> auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.relative</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.absolute</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">40vw</span> - <span class="number">2rem</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">10%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">z-index</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box relative&quot;</span>&gt;</span>relative<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box absolute&quot;</span>&gt;</span>absolute<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box relative&quot;</span>&gt;</span>relative<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(12)-浮动</title>
    <link href="/2024/07/03/CSS%E5%AD%A6%E4%B9%A0(12)-%E6%B5%AE%E5%8A%A8/"/>
    <url>/2024/07/03/CSS%E5%AD%A6%E4%B9%A0(12)-%E6%B5%AE%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<p>浮动最初只用于在块级文本内浮动图像，但是现在它已成为在网页上创建多列布局的常用工具之一。</p><span id="more"></span><h1>常规流布局</h1><p>常规流布局是指在不对页面进行任何布局控制时，浏览器默认的 HTML 布局方式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>常规流布局<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个块级元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个块级元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个块级元素<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>浮动</h1><p>浮动可以被用来实现整个网站页面的布局，通过设置浮动使元素横向排列</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：表明元素不进行浮动</li><li><strong>left</strong>：表明元素必须浮动在其所在的块容器左侧</li><li><strong>right</strong>：表明元素必须浮动在其所在的块容器右侧</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">90%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.special</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;special&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="浮动特点">浮动特点</h2><ol><li>浮动元素会脱离正常的文档布局流，当元素浮动之后，它会被移出正常的文档流，然后向左或者向右平移，一直平移直到碰到了父容器的边框，或者碰到另外一个浮动元素。</li><li>浮动元素只会影响后面的元素，不影响之前的元素</li><li>浮动元素会覆盖正常的文档布局流之上</li></ol><h2 id="清除浮动">清除浮动</h2><h3 id="clear">clear</h3><p>一个浮动元素被移出正常文档流，其他元素会受到浮动元素的影响，可以通过<strong>clear</strong>属性来清除浮动影响</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：元素不会清除浮动</li><li><strong>left</strong>：元素会清除左浮动并向下移动</li><li><strong>right</strong>：元素会清除右浮动并向下移动</li><li><strong>both</strong>：元素会清除左右浮动并向下移动</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">90%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.special</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cleared</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>浮动<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;special&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;cleared&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果存在一个盒子同时包含了一个浮动元素和其他元素，可以通过下面三种方式清除浮动</p><h3 id="clearfix">clearfix</h3><p>向包含浮动内容及其本身的盒子后方插入一些生成的内容，并将生成的内容清除浮动。这与在浮动盒子后手动添加诸如<code>&lt;div&gt;</code>元素，并设置其样式为 <code>clear:both</code> 是等效的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Simple float example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="overflow">overflow</h3><p>将包裹元素的<strong>overflow</strong>属性设置为除 <code>visible</code> 外的其他值。这样设置相当于创建了<strong>BFC</strong>，让浮动元素包含在 BFC 及其背景之内。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Simple float example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="display：flow-root">display：flow-root</h3><p>将包裹元素的<strong>display</strong>属性设置为 <code>flow-root</code>。这样设置相当于创建了<strong>BFC</strong>，定义格式化上下文的根元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">79</span>, <span class="number">185</span>, <span class="number">227</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flow-root;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Simple float example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>Float<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(11)-Display</title>
    <link href="/2024/07/02/CSS%E5%AD%A6%E4%B9%A0(11)-Display/"/>
    <url>/2024/07/02/CSS%E5%AD%A6%E4%B9%A0(11)-Display/</url>
    
    <content type="html"><![CDATA[<p>每个 HTML 元素都有一个默认的 <strong>display</strong> 值，具体取决于元素类型，大多数默认值为 <strong>block</strong> 和 <strong>inline</strong>。</p><span id="more"></span><h1>display</h1><p><strong>display</strong>属性用于指定 HTML 元素在网页上的显示方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">element &#123;</span><br><span class="line">    <span class="attribute">display</span>: value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="inline">inline</h2><p><strong>display</strong>属性设置为<code>inline</code>的元素不会从新行开始，它将占用剩余可用的屏幕宽度，因此不能设置<code>inline</code>元素的<strong>width</strong>和<strong>height</strong>，垂直方向的<strong>margin</strong>、<strong>padding</strong>、<strong>border</strong>也不会生效，水平方向的<strong>margin</strong>、<strong>padding</strong>、<strong>border</strong>会被应用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素，<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个inline元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，里面包含一个inline元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="block">block</h2><p><strong>display</strong>属性设置为<code>block</code>的元素会从新行开始，它将占用新行可用的屏幕宽度，，设置<code>block</code>元素的<strong>width</strong>和<strong>height</strong>决定占用屏幕的宽度和高度，<strong>margin</strong>、<strong>padding</strong>、<strong>border</strong>会被应用，如果没有指定<strong>width</strong>，<code>block</code>元素默认占用一整行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素，<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个inline元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，里面包含一个inline元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="inline-block">inline-block</h2><p><strong>display</strong>属性设置为<code>inline-block</code>的元素，表现形式和<code>inline</code>元素一样，但是可以设置<strong>width</strong>和<strong>height</strong>，也可以设置垂直方向的<strong>margin</strong>、<strong>padding</strong>、<strong>border</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素，<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个inline元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，里面包含一个inline元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="table">table</h2><p>将<strong>display</strong>属性设置为<code>table</code>使元素的行为类似于表格，因此可以不使用 HTML 的<code>table</code>元素和相应的元素创建一个表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.row</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-row;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cell</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>班级<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>18<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>1班<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>19<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>2班<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>20<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cell&quot;</span>&gt;</span>3班<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="flex">flex</h2><p><strong>display</strong>属性设置为<code>flex</code>用于创建横向或纵向的一维页面布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="grid">grid</h2><p><strong>display</strong>属性设置为<code>grid</code>用于同时在两个维度上把元素按行和列排列整齐</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">207</span>, <span class="number">232</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>item 6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="inherit">inherit</h2><p>将<strong>display</strong>属性设置为<code>inherit</code>使元素继承其父元素的<strong>display</strong>属性，如果在<code>&lt;div&gt;</code>元素中有一个<code>&lt;span&gt;</code>元素，给<code>&lt;span&gt;</code>元素一个<code>inherit</code>属性值，它将从<code>inline</code>变成<code>block</code>元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inherit;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素，<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个inline元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，里面包含一个inline元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="none">none</h2><p>当<strong>display</strong>属性设置为<code>none</code>时，元素在页面中仍存在，但是不显示出来，也不占据页面空间</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素，<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个inline元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，里面包含一个inline元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>visibility</h1><p><strong>visibility</strong>属性可以显示或隐藏 HTML 元素，作用和<code>display: none</code>相似，但是不会更改页面布局</p><p><strong>属性值</strong>：</p><ol><li><strong>visible</strong>：元素可见</li><li><strong>hidden</strong>：元素不可见，但会影响页面布局</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: bisque;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个block元素，<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是一个inline元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span>，里面包含一个inline元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>overflow</h1><p>在盒子无法容纳下太多的内容的时候会发生溢出，<strong>overflow</strong>属性是控制溢出的一种方式，它告诉浏览器你想怎样处理溢出。</p><p><strong>属性值</strong>：</p><ol><li><strong>visible</strong>：内容不被裁剪，有可能会渲染到盒子内边距外面</li><li><strong>hidden</strong>：内容被裁剪到适应盒子内边距，不提供滚动条，也不支持用户滚动，但是内容可以通过<code>js</code>控制滚动，盒子本质还是一个可以滚动的容器</li><li><strong>clip</strong>：内容被裁剪到适应盒子内边距，禁止所有滚动，该盒子不是一个可以滚动的容器</li><li><strong>scroll</strong>：内容被裁剪到适应盒子内边距，无论是否裁剪了内容，浏览器总是显示滚动条</li><li><strong>auto</strong>：如果内容在盒子内边距内正好显示，它看起来和<code>visible</code>相同，如果内容溢出，则浏览器提供滚动条</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: visible;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(10)-盒子模型</title>
    <link href="/2024/07/01/CSS%E5%AD%A6%E4%B9%A0(10)-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/07/01/CSS%E5%AD%A6%E4%B9%A0(10)-%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<p>在 CSS 中，所有的元素都被一个个的“盒子”包围着，理解这些“盒子”的基本原理，是我们使用 CSS 实现准确布局、处理元素排列的关键。</p><span id="more"></span><h1>盒模型</h1><h2 id="块盒子和内联盒子">块盒子和内联盒子</h2><p>在 CSS 中，我们有几种类型的盒子，一般分为<strong>块盒子</strong>（block boxes）和<strong>内联盒子</strong>（inline boxes）。类型指的是盒子在页面流中的行为方式以及与页面上其他盒子的关系。</p><h2 id="盒子显示类型">盒子显示类型</h2><p>盒子有<strong>内部显示</strong>（inner display type）和<strong>外部显示</strong>（outer display type）两种类型。</p><h3 id="外部显示类型">外部显示类型</h3><p>一个<strong>块盒子</strong>在外部显示类型中会表现出以下行为：</p><ol><li>盒子会产生换行</li><li><strong>width</strong>和<strong>height</strong>属性可以发挥作用</li><li><strong>margin</strong>、<strong>padding</strong>、<strong>border</strong>会将其他元素从当前盒子周围”推开“</li><li>如果没有指定<strong>width</strong>，盒子将填充容器中的空间</li></ol><p>一个<strong>内联盒子</strong>在外部显示类型中会表现出以下行为：</p><ol><li>盒子不会产生换行</li><li><strong>width</strong>和<strong>height</strong>属性将不起作用</li><li>垂直方向的<strong>margin</strong>、<strong>padding</strong>、<strong>border</strong>会被应用但是不会把其他<strong>内联盒子</strong>推开。</li><li>水平方向的<strong>margin</strong>、<strong>padding</strong>、<strong>border</strong>会被应用且会把其他<strong>内联盒子</strong>推开。</li></ol><h3 id="内部显示类型">内部显示类型</h3><p>决定了盒子内元素的布局方式。</p><h2 id="CSS盒模型">CSS盒模型</h2><p>CSS 盒模型整体上适用于块盒子，它定义了盒子的不同部分（外边距、边框、内边距和内容）如何协同工作，以创建一个在页面上可以看到的盒子。内联盒子使用的只是盒模型中定义的部分行为。</p><p>CSS 中组成一个块盒子需要：</p><ol><li><strong>内容盒子</strong>：显示内容的区域</li><li><strong>内边距盒子</strong>：填充位于内容周围的空白处</li><li><strong>边框盒子</strong>：边框盒子包住内容和任何填充</li><li><strong>外边距盒子</strong>：外边距是最外层，其包裹内容、内边距和边框，作为该盒子与其他元素之间的空白</li></ol><h3 id="标准盒模型">标准盒模型</h3><p>在标准模型中，如果给盒子设置<strong>width</strong>和<strong>height</strong>，实际设置的是Content box。<strong>padding</strong> 和 <strong>border</strong> 再加上设置的宽高一起决定整个盒子的大小。</p><h3 id="IE盒模型">IE盒模型</h3><p>在IE盒模型中，所有宽度都是可见宽度，所以内容宽度是该宽度减去<strong>border</strong> 和 <strong>padding</strong>。</p><p><strong>注意</strong>：默认情况下，浏览器使用标准盒模型。</p><h3 id="box-sizing">box-sizing</h3><ol><li><strong>content-box</strong>：默认值，标准盒子模型。<strong>width</strong>和<strong>height</strong>只包括内容的宽和高，不包括<strong>border</strong>、<strong>padding</strong>、<strong>margin</strong></li><li><strong>border-box</strong>：IE盒子模型。<strong>width</strong>和<strong>height</strong>包括内容的宽高和 <strong>border</strong>、<strong>padding</strong>，不包括<strong>margin</strong></li></ol><h2 id="外边距">外边距</h2><p>外边距是盒子周围的空间，它会把其他元素从盒子旁边推开，无论使用标准模型还是替代模型，外边距总是在计算可见部分后额外添加。</p><p>我们可以使用<strong>margin</strong>属性控制元素的所有边距，<strong>margin</strong> 属性是 <strong>margin-top</strong>、<strong>margin-right</strong>、<strong>margin-bottom</strong> 和 <strong>margin-left</strong> 的简写形式。</p><p><strong>margin</strong> 简写形式以特定顺序应用属性：上、右、下、左，具体应用方式如下：</p><ol><li>一个值：所有面都会应用。(margin: 20px)</li><li>两个值：第一个值将应用于 top 和 bottom，第二个值将应用于 left 和 right。(margin: 20px 40px)</li><li>三个值：第一个值为 top，第二个值为 left 和 right，第三个值为 bottom。(margin: 20px 40px 30px)</li><li>四个值：第一个值为 top，第二个值为 right，第三个值为 bottom，第四个值为 left。(margin: 20px 40px 30px 40px)</li></ol><h3 id="负外边距">负外边距</h3><p>外边距属性值可以为正也可以为负。在盒子一侧设置负值会导致盒子和页面上的其他内容重叠。</p><h3 id="外边距折叠">外边距折叠</h3><p>根据外边距相接触的两个元素是正边距还是负边距，结果会有所不同：</p><ol><li>两个正外边距将合并为一个外边距。其大小等于最大的单个外边距</li><li>两个负外边距会折叠，并使用最小（离零最远）的值</li><li>如果其中一个外边距为负值，其值将从总值中减去</li></ol><p><strong>注意</strong>：外边距何时折叠，何时不折叠，由许多规则决定。需要记住的主要一点是，外边距折叠是指在使用外边距创建空间时，如果没有获得预期的空间，就会发生外边距折叠。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="边框">边框</h2><p>元素外边距内就是边框，元素的边框就是围绕元素内容和内边距的一条或多条线。</p><p>可以使用<strong>border</strong>属性一次设置所有四个边框的宽度、颜色和样式。<strong>border</strong> 属性是 <strong>border-top</strong>、<strong>border-right</strong>、<strong>border-bottom</strong> 和 <strong>border-left</strong> 的简写形式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="边框样式">边框样式</h3><p>如需显示边框，就必须定义<strong>border-style</strong></p><ol><li><strong>none</strong>：默认值，不显示边框</li><li><strong>hidden</strong>：与none关键字类似，隐藏边框，如果存在其他的重叠边框，边框不会显示</li><li><strong>dotted</strong>：显示为一系列圆点，圆点半径是<strong>border-width</strong>值的一半</li><li><strong>dashed</strong>：显示为一系列短的方形虚线</li><li><strong>solid</strong>：显示为一条实线</li><li><strong>double</strong>：显示为一条双实线</li><li><strong>groove</strong>：显示为有雕刻效果的边框，样式与<strong>ridge</strong>相反</li><li><strong>ridge</strong>：显示为有浮雕效果的边框，样式与<strong>groove</strong>相反</li><li><strong>inset</strong>：显示为有陷入效果的边框，样式与<strong>outset</strong>相反</li><li><strong>outset</strong>：显示为有突出效果的边框，样式与<strong>inset</strong>相反</li></ol><h3 id="边框宽度">边框宽度</h3><p>边框的宽度是线条的粗细，由 <strong>border-width</strong> 控制。</p><ol><li><strong>thin</strong>：细边线</li><li><strong>medium</strong>：默认值，中等边线</li><li><strong>thick</strong>：宽边线</li><li>长度值设置边框宽度（px、em、rem、%）</li></ol><h3 id="边框颜色">边框颜色</h3><p>可以使用 <strong>border-color</strong> 设置框的各侧或每一侧的颜色。默认情况下，它会使用框的当前文本颜色</p><h3 id="边框圆角">边框圆角</h3><p>使用<strong>border-radius</strong>属性设置边框的圆角，在简写形式中指定每个角的半径，遵循顺序：左上角、右上角、右下角、左下角。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内边距">内边距</h2><p>内边距位于边框和内容区域之间，用于将内容推离边框。与外边距不同，内边距不能为负数。任何应用于元素的背景都会显示在内边距后面。</p><p><strong>padding</strong> 属性是<strong>padding-top</strong>、<strong>padding-right</strong>、<strong>padding-bottom</strong> 和 <strong>padding-left</strong> 的简写形式。</p><h2 id="阴影">阴影</h2><h3 id="块阴影">块阴影</h3><p><strong>box-shadow</strong> 属性用于向 HTML 元素的框添加阴影。它适用于块元素和内联元素。</p><p><strong>box-shadow</strong> 的值顺序如下：</p><ol><li>inset（可选）：如果没有指定<code>inset</code>，默认阴影在边框外，即阴影向外扩散。</li><li>水平偏移：正数表示阴影位于元素右边，负数表示阴影位于元素左边。</li><li>垂直偏移：正数表示阴影位于元素下方，负数表示阴影位于元素上方。</li><li>模糊半径（可选）：值越大，模糊面积越大，阴影就越大越淡。不能为负值。默认为 0</li><li>扩散半径（可选）：取正值时，阴影扩大；取负值时，阴影收缩。默认为 0，此时阴影与元素同样大。</li><li>颜色（可选）：任何有效的颜色值。 如果未定义，将使用计算出的文本颜色。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">20px</span> <span class="number">5px</span> <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文字阴影">文字阴影</h3><p><strong>text-shadow</strong> 属性用于为文字添加阴影。</p><p><strong>text-shadow</strong> 的值顺序如下：</p><ol><li>水平偏移：正数表示阴影位于元素右边，负数表示阴影位于元素左边。</li><li>垂直偏移：正数表示阴影位于元素下方，负数表示阴影位于元素上方。</li><li>模糊半径（可选）：值越大，模糊面积越大，阴影就越大越淡。不能为负值。默认为 0</li><li>颜色（可选）：任何有效的颜色值。 如果未定义，将使用计算出的文本颜色。</li></ol><h3 id="曲线阴影">曲线阴影</h3><p>如果需要实现沿着图片任何可能曲线的阴影，可以使用<strong>drop-shadow</strong>过滤器</p><p><strong>drop-shadow</strong> 的值顺序如下：</p><ol><li>水平偏移：正数表示阴影位于元素右边，负数表示阴影位于元素左边。</li><li>垂直偏移：正数表示阴影位于元素下方，负数表示阴影位于元素上方。</li><li>模糊半径（可选）：值越大，模糊面积越大，阴影就越大越淡。不能为负值。默认为 0</li><li>扩散半径（可选）：取正值时，阴影扩大；取负值时，阴影收缩。默认为 0，此时阴影与元素同样大。</li><li>颜色（可选）：任何有效的颜色值。 如果未定义，将使用计算出的文本颜色。</li></ol>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(9)-背景</title>
    <link href="/2024/06/30/CSS%E5%AD%A6%E4%B9%A0(9)-%E8%83%8C%E6%99%AF/"/>
    <url>/2024/06/30/CSS%E5%AD%A6%E4%B9%A0(9)-%E8%83%8C%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<p>可以用 CSS 背景做一些创造性事情，添加背景图片或者渐变，背景可以解决 CSS 中的很多样式问题。</p><span id="more"></span><h1>背景</h1><p><strong>background</strong> 属性是背景属性的简写，用于为元素添加背景效果。</p><h2 id="背景颜色">背景颜色</h2><p><strong>background-color</strong> 属性定义了 CSS 中任何元素的背景颜色。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Background<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="背景图像">背景图像</h2><p><strong>background-image</strong> 属性可以在一个元素的背景中显示一个图像。支持多背景图像设置，背景之间用逗号(<code>,</code>)隔开。</p><ol><li>使用<code>url()</code>函数的图片地址</li><li>渐变函数</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>-<span class="selector-tag">img</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/demo.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Background<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="背景平铺">背景平铺</h2><p><strong>background-repeat</strong> 属性用于控制图像的平铺行为。</p><p><strong>属性值</strong>：</p><ol><li><strong>repeat</strong>：默认值，图像会按需重复来覆盖整个背景图片所在的区域。最后一个图像会被裁剪，如果它的大小不合适的话。</li><li><strong>repeat-x</strong>：仅水平方向上重复平铺</li><li><strong>repeat-y</strong>：仅垂直方向上重复平铺</li><li><strong>no-repeat</strong>：图像不会被重复</li><li><strong>space</strong>：图像会重复，但是不会裁剪。第一个和最后一个图像会被固定在元素相应的边上，同时空白会均匀地分布在图像之间。</li><li><strong>round</strong>：剩余的空间不够放置下一个图片的时候，重复的图片会伸展填充满空间。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>-<span class="selector-tag">img</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/demo.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Background<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="背景定位">背景定位</h2><p><strong>background-position</strong> 属性允许选择背景图片出现在它所应用的盒子上的位置。<strong>background-position</strong> 属性可以使用<code>top</code>、<code>bottom</code>、<code>center</code>、<code>left</code> 和 <code>right</code> 关键字，或者使用长度或百分比值。<strong>background-position</strong> 属性可以被指定一个或多个值。</p><ol><li><strong>一个值</strong>：<ul><li>center：居中背景图片</li><li>top、bottom、left、right：指定背景图片放在哪个边，另一个维度被设置为50%</li><li>长度、百分比：相对于左边的<code>x</code>坐标，<code>y</code>坐标被设置为50%</li></ul></li><li><strong>两个值</strong>：<ul><li>top、bottom、left、right、center：一个定义<code>x</code>坐标，另一个定义<code>y</code>坐标，同垂直或水平方向的关键字使用两个是无效的，例如：<code>top top</code> 或 <code>left right</code></li><li>长度、百分比：如果第一个值是关键字，那么定义该关键字另一方向的位置，如果两个值都是长度和百分比，则第一个定义<code>x</code>坐标，第二个定义<code>y</code>坐标</li></ul></li><li><strong>三个值</strong>：<ul><li>第一个值是关键字 <code>top</code>、<code>left</code>、<code>bottom</code>、<code>right</code>，或者 <code>center</code>。</li><li>如果第二个值是长度或百分比，则是第一个值的偏移量。如果是第三个值，则是第二个值的偏移量。</li></ul></li><li><strong>四个值</strong>：第一个和第三个值是定义<code>x</code>和<code>y</code>的关键字值。第二个和第四个值是前面<code>x</code>和<code>y</code>关键字值的偏移量</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>-<span class="selector-tag">img</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/demo.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-position: top; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-position: left 30%; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-position: top left 30%; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-position: top 30% left; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-position: top 30% left 30%; */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Background<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="背景大小">背景大小</h2><p><strong>background-size</strong> 属性设置背景图片大小。图片可以保有其原有的尺寸，或者拉伸到新的尺寸，或者在保持其原有比例的同时缩放到元素的可用空间的尺寸。设置背景图片的大小只能通过关键字或者设置宽高来实现。通过宽度和高度值来设定尺寸时，可以提供一个或两个数值，如果仅有一个数值，该数值将作为宽度大小，高度被设定为 <code>auto</code>，如果有两个数值，第一个作为宽度大小，第二个作为高度大小。</p><p><strong>属性值</strong>：</p><ol><li><strong>auto</strong>：以背景图片的比例缩放背景图片。</li><li><strong>contain</strong>：缩放背景图片以完全装入背景区，可能背景区部分空白。</li><li><strong>cover</strong>：缩放背景图片以完全覆盖背景区，可能背景图片部分看不见。</li><li><strong>长度</strong>：指定背景图片大小，不能为负值。</li><li><strong>百分比</strong>：指定背景图片相对盒子的百分比。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>-<span class="selector-tag">img</span>: <span class="built_in">url</span>(<span class="string">&quot;/img/demo.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-repeat</span>: no-repeat;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-size: contain; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-size: cover; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-size: 30%; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background-size: 30% 30%; */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Background<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>渐变</h1><p>渐变是由<code>gradient()</code>函数创建的，渐变是一种图片，由至少两种或多种颜色之间的渐变过渡构成。</p><h2 id="线性渐变">线性渐变</h2><p>线性渐变创建了一条沿直线前进的颜色带。</p><h3 id="基础渐变">基础渐变</h3><p>最基本的渐变类型，只需指定两种颜色即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(blue, pink);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渐变方向">渐变方向</h3><p>默认情况下，线性渐变的方向是从上到下，可以指定一个值来改变渐变的方向。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to top, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to bottom, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to left, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to right, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to top left, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to top right, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to bottom left, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* background: linear-gradient(to bottom right, blue, pink); */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渐变角度">渐变角度</h3><p>如果想要更精确地控制渐变的方向，可以给渐变设置一个具体的角度。在使用角度的时候，<code>0deg</code> 代表渐变方向为从下到上，<code>90deg</code> 代表渐变方向为从左到右，诸如此类正角度都属于顺时针方向。而负角度意味着逆时针方向。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">70deg</span>, blue, pink);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义渐变">自定义渐变</h3><p>默认情况下，无论设置多少颜色，所设置颜色会均匀分布在渐变路径中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, red, orange, yellow, green, blue, indigo, violet);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渐变会平滑地从一种颜色过渡到另一种颜色，可以通过设置一个值在颜色之间达到控制渐变进程的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(blue, <span class="number">10%</span>, pink);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渐变还支持透明度，可用于创建淡入淡出效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>));</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="叠加渐变">叠加渐变</h3><p>可以将多个背景叠加起来以实现一些非常好看的效果。背景是从顶部到底部堆叠的，指定的第一个就是顶部。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>)), <span class="built_in">url</span>(<span class="string">&quot;/img/demo.png&quot;</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="径向渐变">径向渐变</h2><p>径向渐变是从一个中心点向外辐射的，可以指定中心点的位置，还可以使其为圆形或者是椭圆形。</p><h3 id="基础渐变-2">基础渐变</h3><p>最基本的渐变类型，只需指定两种颜色即可。默认情况下，渐变的中心点是 <code>50% 50%</code> 的位置，径向渐变是匹配盒子的比例显示是圆形还是椭圆形。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(red, blue);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渐变位置">渐变位置</h3><p>可以用百分比或者绝对长度指定每个径向渐变颜色的位置。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(red <span class="number">10px</span>, yellow <span class="number">30%</span>, <span class="number">#1e90ff</span> <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渐变中心">渐变中心</h3><p>可以使用关键字、百分比或者绝对长度、长度以指定渐变的中心。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(at <span class="number">0%</span> <span class="number">30%</span>, red <span class="number">10px</span>, yellow <span class="number">30%</span>, <span class="number">#1e90ff</span> <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渐变大小">渐变大小</h3><p>径向渐变可以指定渐变的大小，通过 <code>closest-corner</code>、<code>closest-side</code>、<code>farthest-corner</code> 和 <code>farthest-side</code>，其中 <code>farthest-corner</code> 是默认值。圆的大小为长度，椭圆则是长度和百分比。</p><ol><li><strong>closest-side</strong>：渐变结束形状如果是圆形，与容器距离渐变中心点最近的一边相切，如果是椭圆，则与距离渐变中心点最近的垂直或水平边相切。</li><li><strong>closest-corner</strong>：渐变结束形状与容器距离渐变中心点最近的一个角相交。</li><li><strong>farthest-side</strong>：渐变结束形状与容器距离渐变中心点最远的一个角相交。</li><li><strong>farthest-corner</strong>：默认值，渐变的结束形状与容器距离渐变中心点最远的一个角相交。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(circle closest-side, red <span class="number">10px</span>, yellow <span class="number">30%</span>, <span class="number">#1e90ff</span> <span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(8)-表格</title>
    <link href="/2024/06/29/CSS%E5%AD%A6%E4%B9%A0(8)-%E8%A1%A8%E6%A0%BC/"/>
    <url>/2024/06/29/CSS%E5%AD%A6%E4%B9%A0(8)-%E8%A1%A8%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<p>利用 HTML <code>table</code>元素创建的表格，虽然易于使用和访问，但是在屏幕上的呈现并不太好</p><span id="more"></span><h1>表格</h1><h2 id="表格布局">表格布局</h2><p>默认的表格样式看起来很拥挤，很难阅读，我们可以通过 <strong>table-layout</strong> 属性来设置布局，它使表的表现形式更好预测</p><p><strong>属性值</strong>：</p><ol><li><strong>auto</strong>：默认情况下，大多数浏览器使用自动表格布局算法。表格及其单元格的宽度会根据内容自动调整大小</li><li><strong>fixed</strong>：表格和列的宽度是由 <code>table</code> 和 <code>col</code> 元素的宽度或第一行单元格的宽度来设置的。后续行中的单元格不会影响列的宽度</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">table-layout</span>: fixed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格边框">表格边框</h2><p><strong>border-collapse</strong> 属性用来决定表格的边框是分开的还是合并的。在分隔模式下，相邻的单元格都拥有独立的边框。在合并模式下，相邻单元格共享边框。</p><p><strong>属性值</strong>：</p><ol><li><strong>collapse</strong>：相邻的单元格共用同一条边框</li><li><strong>separate</strong>：默认值。每个单元格拥有独立的边框</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">table-layout</span>: fixed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="样式化表格">样式化表格</h2><h3 id="标题">标题</h3><p>我们可以通过<strong>caption-side</strong>属性设置标题在表格的放置位置</p><p><strong>属性值</strong>：</p><ol><li><strong>top</strong>：标题置于表格上方</li><li><strong>bottom</strong>：标题置于表格下方</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">table-layout</span>: fixed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">caption-side</span>: bottom</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>title<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="斑马纹">斑马纹</h3><p><code>:nth-child</code>选择器用于选择特定的子元素。它也可以用一个公式作为参数，来选择一个元素序列。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">table-layout</span>: fixed;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">caption-side</span>: bottom</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#ff33cc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(even) &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#e495e4</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>title<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(7)-列表</title>
    <link href="/2024/06/28/CSS%E5%AD%A6%E4%B9%A0(7)-%E5%88%97%E8%A1%A8/"/>
    <url>/2024/06/28/CSS%E5%AD%A6%E4%B9%A0(7)-%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>列表的行为表现跟其他任何文本其实差不多，但需要了解一些专门用于列表的 CSS 样式</p><span id="more"></span><h1>列表</h1><p>无序、有序和描述列表，它们都具有相似的样式特性，而某些特性却又各不相同。</p><ol><li><code>&lt;ul&gt;</code>和<code>&lt;ol&gt;</code>元素含有 <code>16px</code> 的顶部和底部的<strong>margin</strong>和 <code>40px</code> 的<strong>padding-left</strong></li><li><code>&lt;li&gt;</code>元素默认是没有设置间距的</li><li><code>&lt;dl&gt;</code>元素含有 <code>16px</code> 的顶部和底部的<strong>margin</strong>，但不含内边距</li><li><code>&lt;dd&gt;</code>元素含有 <code>40px</code> 的<strong>margin-left</strong></li></ol><h2 id="列表间距">列表间距</h2><p>通过 <strong>line-height</strong> 属性设置列表项之间的垂直间距</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表符号">列表符号</h2><h3 id="符号样式">符号样式</h3><p>通过 <strong>list-style-type</strong> 属性设置列表符号的类型</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：不显示列表项的标记</li><li><strong>disc</strong>：实心圆点</li><li><strong>circle</strong>：空心圆点</li><li><strong>square</strong>：实心方块</li><li><strong>decimal</strong>：十进制阿拉伯数字</li><li><strong>lower-roman</strong>：小写罗马数字</li><li><strong>upper-roman</strong>：大写罗马数字</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ol</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style-type</span>: disc;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="符号位置">符号位置</h3><p><strong>list-style-position</strong>属性设置在每个列表项开始之前，列表符号是出现在列表项内，还是出现在其外</p><p><strong>属性值</strong>：</p><ol><li><strong>inside</strong>：使项目符号位于列表项内</li><li><strong>outside</strong>：使项目符号位于列表项之外</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.in</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style-position</span>: inside;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.out</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style-position</span>: outside;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;in&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;out&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="自定义符号">自定义符号</h3><p><strong>list-style-image</strong>属性允许对于列表符号使用自定义图片</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line"><span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">star.svg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="列表样式简写">列表样式简写</h2><p>通过简写属性<strong>list-style</strong>来设置上面的三个属性，属性值可以任意顺序排列，你可以设置一个，两个或者所有三个值。如果指定了 <code>type</code> 和 <code>image</code>，如果由于某种原因导致图像无法加载，则 <code>type</code> 将用作回退。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style-type</span>: square;</span><br><span class="line">    <span class="attribute">list-style-image</span>: <span class="built_in">url</span>(<span class="string">example.png</span>);</span><br><span class="line">    <span class="attribute">list-style-position</span>: inside;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line"><span class="attribute">list-style</span>: square <span class="built_in">url</span>(<span class="string">example.png</span>) inside;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="管理计数">管理计数</h2><p>可以为<code>&lt;ol&gt;</code>有序列表设置计数规则</p><p><strong>属性</strong>：</p><ol><li><strong>start</strong>：一个整数值属性，指定了列表编号的起始值。此属性的值应为阿拉伯数字，不管<strong>list-style-type</strong>设置的是什么类型</li><li><strong>reversed</strong>：使列表反向计数</li></ol><p>也可以为<code>&lt;ol&gt;</code>元素中的<code>&lt;li&gt;</code>元素指定数值</p><p><strong>属性</strong>：</p><ol><li><strong>value</strong>：设置列表项指定数值</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">“3”</span> <span class="attr">reversed</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">value</span>=<span class="string">&quot;6&quot;</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(6)-链接</title>
    <link href="/2024/06/27/CSS%E5%AD%A6%E4%B9%A0(6)-%E9%93%BE%E6%8E%A5/"/>
    <url>/2024/06/27/CSS%E5%AD%A6%E4%B9%A0(6)-%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>有效地使用伪类去修饰链接的状态，为链接添加样式来实现常用的功能（如导航菜单和选项卡）。</p><span id="more"></span><h1>链接</h1><h2 id="链接状态">链接状态</h2><p>链接存在不同的状态，每一个状态都可以用对应的伪类来应用样式：</p><ol><li><strong>hover</strong>：元素在其鼠标悬停时，使用<code>:hover()</code>伪类来应用样式</li><li><strong>focus</strong>：被选中的链接（比如通过键盘<code>Tab</code>键移动到这个链接），使用<code>:focus()</code>伪类来应用样式</li><li><strong>link</strong>：未被访问的链接，使用<code>:link()</code>伪类来应用样式</li><li><strong>visited</strong>：以访问过的链接，使用<code>:visited()</code>伪类来应用样式</li><li><strong>active</strong>：被激活时的链接，使用<code>:active()</code>伪类来应用样式</li></ol><h2 id="默认样式">默认样式</h2><ol><li>链接以下划线表示</li><li>未访问链接为蓝色</li><li>已访问链接为紫色</li><li>悬停链接时，鼠标指针会变成一个小手图标</li><li>聚焦链接的周围有一个轮廓</li></ol><h2 id="修改样式">修改样式</h2><h3 id="链接下划线">链接下划线</h3><p>通过<strong>text-decoration</strong>属性可以删除或修改链接的下划线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line"><span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链接颜色">链接颜色</h3><p>通过<strong>color</strong>属性改变链接文字的颜色，通过<strong>background-color</strong>属性改变链接的背景颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#6900ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#6900ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#a5c300</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#bae498</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#cdfeaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#6900ff</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#cdfeaa</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="光标类型">光标类型</h3><p>通过<strong>cursor</strong>属性改变鼠标光标悬停在元素上时的样式</p><p><strong>属性值</strong>：</p><ol><li><strong>none</strong>：无指针渲染</li><li><strong>default</strong>：默认指针，通常是箭头</li><li><strong>help</strong>：指示帮助</li><li><strong>pointer</strong>：悬浮于连接上时，通常为手</li><li><strong>not-allowed</strong>：不能执行</li><li><strong>grab</strong>：可抓取</li><li><strong>zoom-in</strong>：放大</li><li><strong>zoom-out</strong>：缩小</li></ol><h3 id="文字轮廓">文字轮廓</h3><p>通过<strong>outline</strong>属性改变文字的轮廓，轮廓有点像边框，唯一的区别是边框占用了盒模型的空间，而轮廓没有</p><p><strong>属性值</strong>：</p><ol><li><strong>color</strong>：轮廓的颜色</li><li><strong>style</strong>：轮廓的样式，和<strong>border</strong>一致</li><li><strong>width</strong>：轮廓的宽度</li></ol><h2 id="样式应用">样式应用</h2><p>链接的样式规则需要按照顺序书写，因为链接的样式是建立在另一个样式之上的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(5)-文本和字体</title>
    <link href="/2024/06/26/CSS%E5%AD%A6%E4%B9%A0(5)-%E6%96%87%E6%9C%AC%E5%92%8C%E5%AD%97%E4%BD%93/"/>
    <url>/2024/06/26/CSS%E5%AD%A6%E4%B9%A0(5)-%E6%96%87%E6%9C%AC%E5%92%8C%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<p>元素中的文本是布置在元素的内容框中，通过使用 CSS 设置文本样式和字体。</p><span id="more"></span><h1>文本和字体</h1><p>用于样式文本的 CSS 属性通常可以分为两类</p><ol><li><strong>字体样式</strong>:：作用于字体的属性，会直接应用到文本中，比如使用哪种字体，字体的大小是怎样的，字体是粗体还是斜体等等。</li><li><strong>文本布局风格</strong>: 作用于文本的间距以及其他布局功能的属性，比如，允许操纵行与字之间的空间，以及在内容框中，文本如何对齐。</li></ol><h2 id="字体">字体</h2><p>字体的属性可以通过 <strong>font</strong> 的简写方式来设置</p><h3 id="font-family">font-family</h3><p>使用<strong>font-family</strong>属性设置文本的字体</p><h4 id="默认字体">默认字体</h4><ol><li>serif：衬线字体</li><li>sans-serif：无衬线字体</li><li>monospace：等宽字体，指包含的全部字符的宽度相同的字体</li><li>cursive：手写字体</li><li>fantasy：装饰字体</li></ol><h4 id="字体栈">字体栈</h4><p>由于无法保证在网页上使用的字体的可用性，可以提供一个<strong>字体栈</strong>，这样的话，浏览器就有多种字体可以选择了。只需包含一个 <strong>font-family</strong> 属性，其值由几个用逗号分离的字体名称组成。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="font-size">font-size</h3><p>使用 <strong>font-size</strong>属性来控制文本元素的大小</p><ol><li><strong>px</strong>：将像素的值赋予给文本，这是一个绝对单位</li><li><strong>em</strong>：当前元素的父元素上设置的字体大小</li><li><strong>rem</strong>：HTML 中的根元素的字体大小</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2.6rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.4rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="font-style">font-style</h3><p>使用 <strong>font-style</strong> 属性设置文本是否应采用斜体。</p><ol><li><strong>normal</strong>：将文本设置为普通字体</li><li><strong>italic</strong>：文本设置为斜体版本</li><li><strong>oblique</strong>：将普通文本倾斜的样式应用到文本中</li></ol><h3 id="font-weight">font-weight</h3><p>利用<strong>font-weight</strong>属性，设置文字的粗体大小。此属性接受关键字值（normal、bold）、相对关键字值（lighter、bolder）和数值（100 到 900）。</p><ol><li><strong>normal</strong>和<strong>bold</strong>分别等同于数值 400 和 700。</li><li><strong>lighter</strong>和<strong>bolder</strong>将当前元素的粗体设置为比其父元素粗体更细或更粗一步。</li></ol><h2 id="文本">文本</h2><h3 id="行高">行高</h3><p><strong>line-height</strong>属性是指文本行基线之间的距离，指定<strong>line-height</strong>可以用来增加文本行之间的垂直间隔</p><h3 id="水平对齐">水平对齐</h3><p><strong>text-align</strong>影响文本的水平对齐方式，只应用于块级元素，默认值为left。</p><ol><li><strong>left</strong>：左对齐文本</li><li><strong>right</strong>：右对齐文本</li><li><strong>center</strong>：居中文字</li><li><strong>justify</strong>：两端对齐，使文本展开，改变单词之间的差距，使所有文本行的宽度相同。</li></ol><h3 id="垂直对齐">垂直对齐</h3><p><strong>vertical-align</strong>属性只应用于行内元素，影响文本垂直方向对齐。</p><ol><li><strong>baseline</strong>：基线对齐，默认元素的基线与其父元素的基线对齐</li><li><strong>sub</strong>：下标对齐，元素的基线与其父元素的下标基线对齐</li><li><strong>super</strong>：上标对齐，元素的基线与其父元素的上标基线对齐</li><li><strong>top</strong>：顶端对齐，将元素的顶部与整行的顶部对齐</li><li><strong>text-top</strong>：文字顶端对齐，将元素的顶部与父元素的字体顶部对齐</li><li><strong>middle</strong>：居中对齐，将元素的中点与父元素基线对齐再加上x-height/2</li><li><strong>bottom</strong>：底端对齐，将元素的底部与整行的底部对齐</li><li><strong>text-bottom</strong>：文字底端对齐，将元素的底部与父元素的字体底部对齐</li></ol><h3 id="字母和单词间距">字母和单词间距</h3><h4 id="单词间距">单词间距</h4><p><strong>word-spacing</strong> 属性设置文本中的单词与单词之间的间距。</p><h4 id="字母间距">字母间距</h4><p><strong>letter-spacing</strong> 属性设置文本中的字母与字母之间的间距。</p><h3 id="文本转换">文本转换</h3><p>使用 <strong>text-transform</strong> 属性来处理文本的大小写</p><ol><li><strong>none</strong>：对文本不做任何改动</li><li><strong>uppercase</strong>：将文本转换为全部大写字符</li><li><strong>lowercase</strong>：将文本转换为全部小写字符</li><li><strong>capitalize</strong>：只对每个单词的首字母大写</li></ol><h3 id="文本装饰">文本装饰</h3><p>使用 <strong>text-decoration</strong> 属性来处理文本的装饰</p><ol><li><strong>none</strong>：取消已经存在的任何文本装饰</li><li><strong>underline</strong>：文本下划线</li><li><strong>overline</strong>：文本上划线</li><li><strong>line-through</strong>：穿过文本的线</li></ol><p><strong>text-decoration</strong>属性有更具体的详细写法：</p><ol><li><strong>text-decoration-line</strong>：指定在文本何方增加装饰线</li><li><strong>text-decoration-color</strong>：用于设置text-decoration-line中所有装饰的颜色</li><li><strong>text-decoration-style</strong>：接受 <strong>solid、double、dotted、dashed和wavy</strong>关键字，用于描述装饰线的类型</li><li><strong>text-decoration-thickness</strong>：接受长度值，描述装饰线的宽度</li></ol><h3 id="文本缩进">文本缩进</h3><p>使用 <strong>text-indent</strong> 向文本块添加缩进，属性采用长度或所在块宽度的百分比。</p><h3 id="文本溢出">文本溢出</h3><p>使用 <strong>text-overflow</strong> 指定隐藏内容的呈现方式。</p><ol><li><strong>clip</strong>：在溢出点截断文本</li><li><strong>ellipsis</strong>：在溢出点显示省略号</li></ol><h3 id="空格换行">空格换行</h3><p>使用<strong>white-space</strong>属性处理元素中的空白和换行。</p><ol><li><strong>normal</strong>：空格合并，换行会被当作空格来处理，允许自动换行</li><li><strong>nowrap</strong>：空格合并，换行会被当作空格来处理，不允许自动换行</li><li><strong>pre</strong>：空格保留，换行保留，不允许自动换行</li><li><strong>pre-wrap</strong>：空格保留，换行保留，允许自动换行</li><li><strong>pre-line</strong>：空格合并，换行保留，允许自动换行</li><li><strong>break-spaces</strong>：空格保留，换行保留，允许自动换行</li></ol><h3 id="单词拆分">单词拆分</h3><p>使用<strong>word-break</strong>更改文本在溢出时如何换行</p><ol><li><strong>normal</strong>：整个单词不拆分，直接换行</li><li><strong>break-all</strong>：将单词拆分，直到行尾再换行</li></ol><h3 id="文本方向">文本方向</h3><p>使用<strong>direction</strong>设置文本方向，<strong>ltr</strong>（从左到右）或 <strong>rtl</strong>（从右到左）</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(4)-值与单位</title>
    <link href="/2024/06/25/CSS%E5%AD%A6%E4%B9%A0(4)-%E5%80%BC%E4%B8%8E%E5%8D%95%E4%BD%8D/"/>
    <url>/2024/06/25/CSS%E5%AD%A6%E4%B9%A0(4)-%E5%80%BC%E4%B8%8E%E5%8D%95%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<p>CSS 中使用的每个属性都允许拥有一个或一组值。</p><span id="more"></span><h1>值与单位</h1><p>CSS 中的值类型是一种定义了一些可使用的值的集合的方式。</p><h2 id="数字、长度、百分比">数字、长度、百分比</h2><h3 id="数字">数字</h3><p>css中有两类数字，整数和小数，这些数字可以作为其他值类型的基础，在某些情况下也可以直接作为属性的值。</p><h3 id="长度">长度</h3><p>CSS 中有两种类型的长度——相对长度和绝对长度。</p><h4 id="绝对长度单位">绝对长度单位</h4><p>它们与其他任何东西都没有关系，通常被认为总是相同的大小。</p><table><thead><tr><th>单位</th><th>名称</th><th>等价换算</th></tr></thead><tbody><tr><td>cm</td><td>厘米</td><td>1cm = 37.8px = 25.2/64in</td></tr><tr><td>mm</td><td>毫米</td><td>1mm = 0.1cm</td></tr><tr><td>Q</td><td>四分之一毫米</td><td>1Q = 0.25mm = 0.025cm</td></tr><tr><td>in</td><td>英寸</td><td>1in = 2.54cm = 96px</td></tr><tr><td>pc</td><td>派卡</td><td>1pc = 1/6 in = 16px</td></tr><tr><td>pt</td><td>点</td><td>1pt = 1/72 in</td></tr><tr><td>px</td><td>像素</td><td>1px = 1/96 in</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="相对长度单位">相对长度单位</h4><p>相对长度单位是相对于其他某些东西的。例如：</p><ul><li><code>em</code> 和 <code>rem</code> 分别相对于父元素和根元素的字体大小。</li><li><code>vh</code> 和 <code>vw</code> 分别相对于视口的高度和宽度。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">article</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1em</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>第一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>第二段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50vw</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="百分比">百分比</h3><p>百分比是相对于其他值设置的。可以是从父元素继承的值，也可以是祖先元素的一个值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.px</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: sienna;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.percent</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;px&quot;</span>&gt;</span>px box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;percent&quot;</span>&gt;</span>percent box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="颜色">颜色</h2><p>在 CSS 中，相同的颜色值可以在任何地方使用，无论你指定的是文本颜色、背景颜色还是其他颜色。</p><h3 id="颜色关键字">颜色关键字</h3><p>假如只需要从很小的基本颜色集中选择就足够，可以通过使用你想要的颜色名即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="十六进制颜色">十六进制颜色</h3><p>由#和6个十六进制的数字组成，每个十六进制数字都可以取 0 到 f（代表 15）之间的 16 个值中的一个，每对值表示一个通道（红色、绿色、蓝色），每个通道指定 256 个可用值中的任意一个（16 x 16 = 256）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#c55da1</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="RGB">RGB</h3><p>RGB 值是一个函数<code>rgb()</code>，他有三个参数，表示颜色的红色、绿色和蓝色，与十六进制相似，但是他的取值范围是由0-255的十进制数字表示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">197</span>, <span class="number">93</span>, <span class="number">161</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以向 <code>rgb()</code> 传递第四个参数，它代表颜色的 alpha 通道，控制不透明度。如果你把这个值设置为 <code>0</code>，它将使颜色完全透明，而 <code>1</code> 将使它完全不透明。介于两者之间的值会给你带来不同级别的透明度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">197</span>, <span class="number">93</span>, <span class="number">161</span>, <span class="number">0.8</span>);</span><br></pre></td></tr></table></figure><h3 id="HSL">HSL</h3><p>HSL值是一个函数<code>hsl()</code>，他有三个参数，色调、饱和度和亮度值</p><ol><li><strong>色调</strong>：颜色的底色，这个值在 0 和 360 之间</li><li><strong>饱和度</strong>：它的值为 0–100%，其中 0 为无颜色（它将显示为灰色阴影），100% 为全色饱和度</li><li><strong>亮度</strong>：它的值为 0–100%，其中 0 表示没有光（它将完全显示为黑色），100% 表示完全亮（它将完全显示为白色）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">321</span>, <span class="number">47%</span>, <span class="number">57%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="built_in">hsl</span>(<span class="number">0</span>, <span class="number">0%</span>, <span class="number">100%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就像 <code>rgb()</code> 一样，你可以向 <code>hsl()</code> 传递一个 alpha 参数来指定不透明度。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: <span class="built_in">hsl</span>(<span class="number">321</span>, <span class="number">47%</span>, <span class="number">57%</span>, <span class="number">0.8</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(3)-层叠和继承</title>
    <link href="/2024/06/24/CSS%E5%AD%A6%E4%B9%A0(3)-%E5%B1%82%E5%8F%A0%E5%92%8C%E7%BB%A7%E6%89%BF/"/>
    <url>/2024/06/24/CSS%E5%AD%A6%E4%B9%A0(3)-%E5%B1%82%E5%8F%A0%E5%92%8C%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<p>层叠和继承——这些概念决定着如何将 CSS 应用到 HTML 中，以及如何解决冲突。</p><span id="more"></span><h1>层叠和继承</h1><h2 id="层叠">层叠</h2><p>层叠简单来说，就是 CSS 规则的顺序很重要，用于解决CSS规则产生的冲突。有三个因素需要考虑：</p><ol><li><strong>资源顺序</strong></li><li><strong>优先级</strong></li><li><strong>重要程度</strong></li></ol><h3 id="资源顺序">资源顺序</h3><p>如果你有超过一条规则，而且都是相同的权重，那么最后面的规则会应用。可以理解为后面的规则覆盖前面的规则，直到最后一个开始设置样式。资源顺序仅在规则的优先级相同时才体现出来。</p><h3 id="优先级">优先级</h3><p>有些规则在最后出现，但是却应用了前面的具有冲突的规则，这是因为前面的有更高的<strong>优先级</strong>。优先级用于决定当多个规则匹配同一个元素时，哪一个规则应用于该元素。优先级是根据选择器的类型计算的。</p><p>我们使用0-0-0-0来表示千，百，十，个位；</p><ul><li><p>通配选择器，个位得0分；</p></li><li><p>元素和伪元素选择器，个位得1分；</p></li><li><p>类、伪类和属性选择器，十位得1分；</p></li><li><p>ID选择器，百位得1分；</p></li></ul><p>否定（<code>:not()</code>）和任意匹配（<code>:is()</code>）伪类本身对优先级没有影响，但它们的参数则会带来影响。参数中，对优先级算法有贡献的参数的优先级的最大值将作为该伪类选择器的优先级。</p><h3 id="重要程度">重要程度</h3><ol><li><strong>内联样式</strong>：即 <strong>style</strong> 属性内的样式声明，优先于所有普通的样式，无论其优先级如何。这样的声明没有选择器，它的优先级可以理解为 1-0-0-0；即无论选择器中有多少个 ID，它总是比其他任何优先级的权重都要高。</li><li><strong>!important</strong>：可以覆盖所有上面所有优先级计算，需要很小心的使用。</li></ol><h2 id="继承">继承</h2><p>继承需要在上下文中去理解，一些设置在父元素上的 CSS 属性是可以被子元素继承的，有些则不能。CSS 为控制继承提供了五个特殊的通用属性值。每个 CSS 属性都接收这些值。</p><ol><li><strong>inherit</strong>：使子元素属性和父元素相同，实际上就是“开启继承”</li><li><strong>initial</strong>：将元素的属性值设置为该属性的初始值</li><li><strong>revert</strong>：将元素的属性值设置为浏览器的默认样式</li><li><strong>unset</strong>：将属性重置为自然值，也就是如果属性是自然继承那么就是 <strong>inherit</strong>，否则和 <strong>initial</strong> 一样</li></ol><h3 id="重置所有属性值">重置所有属性值</h3><p>CSS 的简写属性 <strong>all</strong> ，它的值是（inherit、initial、unset、revert）中的任意一个，将元素继承属性的值重置</p>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(2)-选择器</title>
    <link href="/2024/06/23/CSS%E5%AD%A6%E4%B9%A0(2)-%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2024/06/23/CSS%E5%AD%A6%E4%B9%A0(2)-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>CSS 选择器用来指定网页上我们想要样式化的 HTML 元素，通过 CSS 选择器可以很精细的处理需要样式化的元素。</p><span id="more"></span><h1>选择器</h1><p>CSS 选择器是 CSS 规则的第一部分。它是元素和其他部分组合起来告诉浏览器哪个 HTML 元素应当是被选为应用规则中的 CSS 属性值的方式。选择器所选择的元素，叫做“选择器的对象”。</p><h2 id="通配选择器">通配选择器</h2><p>显示为一个星号，这个选择器可以与任何元素匹配，就像是一个通配符。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="元素选择器">元素选择器</h2><p>元素选择器也叫做标签选择器或者是类型选择器，HTML 元素的名字就是元素选择器的名字</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类选择器">类选择器</h2><p>类选择器以一个句点（.）开头，会选择文档中应用了这个类的所有元素。</p><p><strong>特点</strong>：</p><ol><li>一个元素可以应用多个类选择器</li><li>一个类选择器也可以在多个元素中应用</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.highlight</span> &#123;</span><br><span class="line">backgournd-<span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ID选择器">ID选择器</h2><p>ID选择器以<code>#</code>开头，在一个HTML文档中，ID选择器的id有且仅能使用一次</p><p><strong>特点</strong>：</p><ol><li>一个元素只有一个<strong>id</strong>属性</li><li><strong>id</strong>属性的值在一个 HTML 文档中唯一</li></ol><h2 id="属性选择器">属性选择器</h2><p>属性选择器查找具有特定 HTML 属性或具有特定 HTML 属性值的元素。 用方括号 (<code>[ ]</code>) 将选择器括起来，指示 CSS 查找属性。</p><table><thead><tr><th style="text-align:left"><span style="display:inline-block; width: 160px">选择器</span></th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">[attribute]</td><td style="text-align:left">匹配带有一个名为<em>attribute</em>的属性的元素——方括号里的值。</td></tr><tr><td style="text-align:left">[attribute = value]</td><td style="text-align:left">匹配带有一个名为<em>attribute</em>的属性的元素，其值为<em>value</em>——引号中的字符串。</td></tr><tr><td style="text-align:left">[attribute ~= value]</td><td style="text-align:left">匹配带有一个名为<em>attribute</em>的属性的元素，其值有一个或者更多，至少有一个和<em>value</em>匹配。</td></tr><tr><td style="text-align:left">[attribute ^= value]</td><td style="text-align:left">匹配带有一个名为<em>attribute</em>属性的元素，其值开头为<em>value</em>子字符串。</td></tr><tr><td style="text-align:left">[attribute $= value]</td><td style="text-align:left">匹配带有一个名为<em>attribute</em>属性的元素，其值结尾为<em>value</em>子字符串</td></tr><tr><td style="text-align:left">[attribute *= value]</td><td style="text-align:left">匹配带有一个名为<em>attribute</em>属性的元素，其值的字符串中的任何地方，至少出现了一次<em>value</em>子字符串。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//demo [attribute] [attribute = value] [attribute ~= value]</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;a b&quot;</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-attr">[class]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-attr">[class=<span class="string">&quot;a&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-attr">[class~=<span class="string">&quot;a&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//demo [attribute ^= value] [attribute $= value] [attribute *= value]</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;ab&quot;</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;ba&quot;</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bcab&quot;</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-attr">[class^=<span class="string">&quot;a&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-attr">[class$=<span class="string">&quot;a&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span><span class="selector-attr">[class*=<span class="string">&quot;a&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="伪类">伪类</h2><p>伪类是选择器的一种，伪类选择器始终以一个冒号(<code>:</code>)开始。它用于选择处于特定状态的元素。</p><h3 id="用户行为伪类">用户行为伪类</h3><ol><li><code>:hover</code>：设置元素在其鼠标悬停时的 CSS 样式</li><li><code>:focus</code>：设置元素在其拥有输入焦点时的 CSS 样式</li><li><code>:link</code>：设置 a 元素在未被访问前的 CSS 样式</li><li><code>:visited</code>：设置 a 元素在其链接地址已被访问过时的 CSS 样式</li><li><code>:active</code>：设置元素在被用户激活时的 CSS 样式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Hover over me<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:link</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: rebeccapurple;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:hotpink;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文档结构伪类">文档结构伪类</h3><ol><li><code>:first-child</code>：第一个子元素</li><li><code>:last-child</code>：最后一个子元素</li><li><code>:nth-child(n)</code>：正着数第几个子元素，n可以是数字，也可以是关键字（odd 奇数，even 偶数），或者是公式</li><li><code>:nth-last-child</code>(n)：倒着数第几个子元素，n可以是数字，也可以是关键字（odd 奇数，even 偶数），或者是公式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>第二段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="伪元素">伪元素</h2><p>伪元素表现得是像往标记文本中加入全新的 HTML 元素一样，而不是向现有的元素上应用类。伪元素开头为双冒号（<code>::</code>）。</p><ol><li><code>::first-letter</code>：元素的第一个字母。</li><li><code>::first-line</code>：包含此伪元素的元素的第一行。</li><li><code>::before</code>：出现在原有元素的实际内容之前</li><li><code>::after</code>：出现在原有元素的实际内容之后</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;text&quot;</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-pseudo">::first-letter</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: goldenrod;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关系选择器">关系选择器</h2><h3 id="后代选择器">后代选择器</h3><p>用单个空格（&quot; &quot;）字符组合两个选择器，匹配的目标元素是其他元素的后代，只要是后代即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第二段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子代选择器">子代选择器</h3><p>子代关系选择器是个大于号（<code>&gt;</code>），只会在选择器选中直接子元素的时候匹配。继承关系上更远的后代则不会匹配。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第二段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第三段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &gt; <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="相邻兄弟选择器">相邻兄弟选择器</h3><p>相邻兄弟选择器是个加号（<code>+</code>），匹配的目标元素紧跟在其他元素后面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第二段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通用兄弟选择器">通用兄弟选择器</h3><p>如果想选中一个元素的兄弟元素，即使它们不直接相邻，可以使用通用兄弟关系选择器（<code>~</code>）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第一段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>分隔文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是第二段文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> ~ <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS学习(1)-CSS介绍</title>
    <link href="/2024/06/22/CSS%E5%AD%A6%E4%B9%A0(1)-CSS%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/06/22/CSS%E5%AD%A6%E4%B9%A0(1)-CSS%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p>层叠样式表-----<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets，CSS用来指定文档如何展示给用户的一门语言——如网页的样式、布局、等等。</p><span id="more"></span><h1>CSS语法</h1><p>CSS 是一门基于规则的语言，你能定义用于你的网页中特定元素样式的一组规则。CSS由2个部分组成：</p><ol><li><strong>属性</strong>：可读的标识符，指示想要更改的样式特征。</li><li><strong>值</strong>：每个指定的属性都有一个值，这个值表示如何对属性施加样式。</li></ol><p>当一个属性与一个值配对时，这种配对被称为 <em>CSS 声明</em>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">color</span>: blue;</span><br></pre></td></tr></table></figure><p>CSS 声明可以在 <em>CSS 声明块</em>中找到。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSS 声明块与选择器配对，生成 <em>CSS 规则集</em>（或称 <em>CSS 规则</em>）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>CSS引用方式</h1><h2 id="外部样式表">外部样式表</h2><p>外部样式表在一个单独的扩展名为 .css 的文件中包含 CSS。这是将 CSS 应用到文档中最常见和最有用的方法。你可以将一个 CSS 文件链接到多个网页上，用同一个 CSS 样式表为所有网页确定样式。使用 HTML <code>&lt;link&gt; </code>元素来链接外部样式表文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的 CSS 测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是我的第一个 CSS 示例<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内部样式表">内部样式表</h2><p>内部样式表在 HTML 文档内。创建一个内部样式表，要把 CSS 放置在包含在 HTML <code>&lt;head&gt;</code> 元素中的 <code>&lt;style&gt;</code> 元素内。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的 CSS 测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是我的第一个 CSS 示例<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内联样式">内联样式</h2><p>内联样式是影响单个 HTML 元素的 CSS 声明，包含在元素的 style 属性中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的 CSS 测试<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;background-color: yellow;border: 1px solid black;&quot;</span>&gt;</span></span><br><span class="line">        Hello World!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>这是我的第一个 CSS 示例<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>注释</h1><p>CSS 中的注释以 <code>/*</code> 开头，以 <code>*/</code> 结尾。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* .special &#123;</span></span><br><span class="line"><span class="comment">    color: red;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(16)-Web Worker</title>
    <link href="/2024/06/21/HTML%E5%AD%A6%E4%B9%A0(16)-Web%20Worker/"/>
    <url>/2024/06/21/HTML%E5%AD%A6%E4%B9%A0(16)-Web%20Worker/</url>
    
    <content type="html"><![CDATA[<p>JavaScript 采用的是单线程模型，也就是说，所有任务只能在一个线程上完成，一次只能做一件事。前面的任务没做完，后面的任务只能等着。</p><span id="more"></span><h1>Web Worker</h1><p>Web Worker 的作用，就是为 JavaScript 创造多线程环境，允许主线程创建 Worker 线程，将一些任务分配给后者运行。在主线程运行的同时，Worker 线程在后台运行，两者互不干扰。等到 Worker 线程完成计算任务，再把结果返回给主线程。这样的好处是，一些计算密集型或高延迟的任务，被 Worker 线程负担了，主线程（通常负责 UI 交互）就会很流畅，不会被阻塞或拖慢。</p><h2 id="主线程阻塞">主线程阻塞</h2><p>当页面中有JavaScript代码在执行且耗时过长，会阻塞UI更新</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">n</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (n &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">fib</span>(n - <span class="number">1</span>) + <span class="title function_">fib</span>(n - <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fib</span>(<span class="number">45</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> el = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    el.<span class="property">innerHTML</span> = <span class="string">&#x27;Hello Web Worker&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">appendChild</span>(el);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Worker创建">Worker创建</h2><p>主线程采用<code>new</code>命令，调用<code>Worker()</code>构造函数，新建一个 Worker 线程。</p><p><strong>注意</strong>：</p><ol><li><strong>同源策略</strong>：Worker线程运行的脚本必须和主线程的脚本文件同源</li><li><strong>DOM限制</strong>：Worker无法读取主线程所在页面的DOM对象，也无法使用document、window、parent对象，可以使用navigator、location对象</li><li><strong>文件限制</strong>：Worker线程无法读取本地文件（file://）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(aURL, options);</span><br></pre></td></tr></table></figure><p><strong>属性</strong>：</p><ol><li><strong>aURL</strong>：Worker将执行的脚本的URL</li><li><strong>options</strong>：创建对象实例时设置的选项属性的对象</li></ol><h2 id="Worker通信">Worker通信</h2><p>主线程与 Worker 之间通信采用的是消息传递机制。</p><h3 id="主线程">主线程</h3><p>主线程调用<code>worker.postMessage()</code>方法，向 Worker 发消息，<code>worker.postMessage()</code>方法的参数，就是主线程传给 Worker 的数据。主线程通过<code>worker.onmessage</code>指定监听函数，接收子线程发回来的消息，也可以通过<code>worker.addEventListener()</code>监听。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;worker.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">worker.<span class="title function_">postMessage</span>(<span class="string">&quot;Hello Worker!&quot;</span>);</span><br><span class="line"></span><br><span class="line">worker.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">worker.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Worker线程">Worker线程</h3><p><code>self</code>代表子线程自身，即子线程的全局对象。与主线程基本一致，worker线程调用<code>postMessage()</code>方法，向 Main 发消息，通过<code>onmessage</code>或<code>addEventListener()</code>指定监听函数，接收主线程发回来的消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">self.<span class="title function_">postMessage</span>(<span class="string">&quot;Hello Main!&quot;</span>);</span><br><span class="line"></span><br><span class="line">self.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">self.<span class="title function_">addEventListener</span>(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">data</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="错误处理">错误处理</h2><p>主线程可以监听 Worker 是否发生错误。如果发生错误，Worker 会触发主线程的<code>error</code>事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">worker.<span class="title function_">onerror</span>(<span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">worker.<span class="title function_">addEventListener</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Worker销毁">Worker销毁</h2><p><code>worker.terminate() </code>是在主线程中调用的方法，用于立即终止 Worker 线程。当你调用<code>terminate()</code>时，<strong>Worker 线程会被强制停止，它不会有机会完成当前正在执行的任务或进行清理工作</strong>。这是主线程对 Worker 线程的一种单向控制。</p><p><code>self.close() </code>是在 Worker 线程内部调用的方法，用于优雅地关闭 Worker 线程。当你从 Worker 线程内部调用<code>close()</code>时，<strong>Worker 线程会完成当前正在执行的任务，然后关闭自己</strong>。这种方式允许 Worker 线程在关闭前进行必要的清理工作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主线程</span></span><br><span class="line">worker.<span class="title function_">terminate</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Worker 线程</span></span><br><span class="line">self.<span class="title function_">close</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(15)-Canvas</title>
    <link href="/2024/06/20/HTML%E5%AD%A6%E4%B9%A0(15)-Canvas/"/>
    <url>/2024/06/20/HTML%E5%AD%A6%E4%B9%A0(15)-Canvas/</url>
    
    <content type="html"><![CDATA[<p>除了使用SVG绘制矢量图形，我们也可以使用canvas在浏览器绘制2D图形。</p><span id="more"></span><h1>Canvas</h1><p><code>&lt;canvas&gt;</code>元素用于在浏览器上绘制图形，但<code>&lt;canvas&gt;</code>元素只是图形的容器，我们需要使用<strong>JavaScript</strong>才能真正绘制图形。</p><p><strong>属性</strong>：</p><ol><li><strong>width</strong>：<code>&lt;canvas&gt;</code>元素占用空间的宽度，以像素表示，默认300px。</li><li><strong>height</strong>：<code>&lt;canvas&gt;</code>元素占用空间的高度，以像素表示，默认150px。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="坐标定位">坐标定位</h2><p>canvas使用的坐标系统与SVG一致，以页面的左上角为(0, 0)坐标点为顶点，坐标以像素为单位，x 轴正方向是向右，y 轴正方向是向下。</p><p><img src="/imgs/HTML/canvas.png" alt=""></p><h2 id="基本用法">基本用法</h2><p><code>&lt;canvas&gt;</code>元素创造了一个固定大小的画布，可以用来绘制和处理要展示的内容。<code>&lt;canvas&gt;</code>起初是空白的。为了展示，首先脚本需要找到渲染上下文，然后在它的上面绘制。<code>&lt;canvas&gt;</code>元素通过<code>getContext()</code>方法获得渲染上下文和它的绘画功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="矩形">矩形</h2><h3 id="fillRect">fillRect</h3><p><code>fillRect()</code>方法绘制一个填充了内容的矩形，填充样式由当前的<code>fillStyle</code> 决定。</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：矩形起始点的x、y轴坐标</li><li><strong>width、height</strong>：矩形的宽度和高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><h3 id="strokeRect">strokeRect</h3><p><code>strokeRect()</code>方法绘制一个一个描边（轮廓）矩形，边框样式由当前的<code>strokeStyle</code> 决定。</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：矩形起始点的x、y轴坐标</li><li><strong>width、height</strong>：矩形的宽度和高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">strokeRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><h3 id="clearRect">clearRect</h3><p><code>clearRect()</code>方法用于清除画布上的一个矩形区域，清除后的矩形是透明的。</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：矩形起始点的x、y轴坐标</li><li><strong>width、height</strong>：矩形的宽度和高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">clearRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">280</span>, <span class="number">280</span>)</span><br></pre></td></tr></table></figure><h2 id="路径">路径</h2><p>图形的基本元素是路径。路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。</p><h3 id="beginPath">beginPath</h3><p>创建一个新的路径。</p><h3 id="closePath">closePath</h3><p>从当前点回到起始点，如果图形已经是封闭的或者只有一个点，那么此方法不会做任何操作。</p><h3 id="stroke">stroke</h3><p>根据当前的画线样式，绘制当前或已经存在的路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="fill">fill</h3><p>根据当前的填充样式，填充当前或已存在的路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure><h3 id="clip">clip</h3><p>将当前正在构建的路径转换为当前的裁剪路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">100</span>, <span class="number">75</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>);</span><br><span class="line">ctx.<span class="title function_">clip</span>();</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;orange&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h3 id="moveTo">moveTo</h3><p>将起始点移动到 (x，y) 坐标。</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：起始点的x轴和y轴的坐标。</li></ol><h3 id="lineTo">lineTo</h3><p>使用直线连接子路径的最后的点到 x，y 坐标。</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：终点的x轴和y轴的坐标。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">125</span>, <span class="number">125</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">125</span>, <span class="number">45</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">45</span>, <span class="number">125</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="arc">arc</h3><p>绘制圆弧路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">arc</span>(x, y, radius, startAngle, endAngle, anticlockwise);</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：圆弧中心的x轴和y轴的坐标。</li><li><strong>radius</strong>：圆弧的半径</li><li><strong>startAngle</strong>：圆弧的起始点，单位以弧度表示</li><li><strong>endAngle</strong>：圆弧的终点，单位以弧度表示</li><li><strong>anticlockwise</strong>：如果为 <code>true</code>，逆时针绘制圆弧，反之，顺时针绘制。</li></ol><p>圆弧起止点示意图如下：</p><p><img src="/imgs/HTML/canvas_arc.gif" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="rect">rect</h3><p>创建矩形路径</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：矩形起点的x、y轴坐标</li><li><strong>width、height</strong>：矩形的宽度和高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure><h3 id="quadraticCurveTo">quadraticCurveTo</h3><p>创建二次贝塞尔曲线路径</p><p><strong>参数</strong>：</p><ol><li><strong>cpx、cpy</strong>：控制点的x、y轴坐标</li><li><strong>x、y</strong>：终点的x、y轴坐标</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">20</span>, <span class="number">110</span>);</span><br><span class="line">ctx.<span class="title function_">quadraticCurveTo</span>(<span class="number">230</span>, <span class="number">150</span>, <span class="number">250</span>, <span class="number">20</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="bezierCurveTo">bezierCurveTo</h3><p>创建三次贝塞尔曲线路径</p><p><strong>参数</strong>：</p><ol><li><strong>cp1x、cp1y</strong>：第一个控制点的x、y轴坐标</li><li><strong>cp2x、cp2y</strong>：第二个控制点的x、y轴坐标</li><li><strong>x、y</strong>：终点的x、y轴坐标</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">50</span>, <span class="number">20</span>);</span><br><span class="line">ctx.<span class="title function_">bezierCurveTo</span>(<span class="number">230</span>, <span class="number">30</span>, <span class="number">150</span>, <span class="number">60</span>, <span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h2 id="颜色和应用样式">颜色和应用样式</h2><h3 id="颜色">颜色</h3><h4 id="fillStyle">fillStyle</h4><p>设置图形的填充颜色。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure><h4 id="strokeStyle">strokeStyle</h4><p>设置图形轮廓的颜色。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="线条">线条</h3><h4 id="lineWidth">lineWidth</h4><p>设置线段宽度</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">rect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">10</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h4 id="lineCap">lineCap</h4><p>设置线段末端的属性</p><p><strong>属性值</strong>：</p><ol><li><strong>butt</strong>：线段末端以方形结束</li><li><strong>round</strong>：线段末端以圆形结束</li><li><strong>square</strong>：线段末端以方形结束，增加了一个线段宽度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">15</span>;</span><br><span class="line">ctx.<span class="property">lineCap</span> = <span class="string">&quot;square&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">closePath</span>();</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h4 id="lineJoin">lineJoin</h4><p>定义两线相交拐点的类型</p><p><strong>属性值</strong>：</p><ol><li><strong>round</strong>：填充一个额外的，圆心在相连部分末端的扇形，绘制拐角的形状。圆角的半径是线段的宽度。</li><li><strong>bevel</strong>：在相连部分的末端填充一个额外的以三角形为底的区域。</li><li><strong>miter</strong>：通过延伸相连部分的外边缘，使其相交于一点，形成一个额外的菱形区域。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">lineWidth</span> = <span class="number">20</span>;</span><br><span class="line">ctx.<span class="property">lineJoin</span> = <span class="string">&quot;round&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">200</span>, <span class="number">20</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">20</span>, <span class="number">200</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h4 id="getLineDash">getLineDash</h4><p>获取当前的线段样式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">setLineDash</span>([<span class="number">5</span>, <span class="number">15</span>]);</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="title function_">getLineDash</span>());</span><br></pre></td></tr></table></figure><h4 id="setLieDash">setLieDash</h4><p>设置当前的线段样式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">setLineDash</span>([<span class="number">5</span>, <span class="number">15</span>]);</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h4 id="lineDashOffset">lineDashOffset</h4><p>设置虚线偏移量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">setLineDash</span>([<span class="number">4</span>, <span class="number">16</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dashed line with no offset</span></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dashed line with offset of 4</span></span><br><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="property">lineDashOffset</span> = <span class="number">4</span>;</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><h3 id="渐变">渐变</h3><h4 id="线性渐变">线性渐变</h4><p>根据两个给定的坐标值所构成的线段创建一个线性渐变。</p><p><strong>参数</strong>：</p><ol><li><strong>x0、y0</strong>：起点的x、y轴坐标</li><li><strong>x1、y1</strong>：终点的x、y轴坐标</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gradient = ctx.<span class="title function_">createLinearGradient</span>(<span class="number">20</span>, <span class="number">0</span>, <span class="number">220</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">0</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">0.5</span>, <span class="string">&quot;cyan&quot;</span>);</span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">1</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = gradient;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">200</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h4 id="径向渐变">径向渐变</h4><p>根据参数确定两个圆的坐标，绘制放射性渐变</p><p><strong>参数</strong>：</p><ol><li><strong>x0、y0</strong>：开始圆形的x、y轴坐标</li><li><strong>r0</strong>：开始圆形的半径</li><li><strong>x1、y1</strong>：结束圆形的x、y轴坐标</li><li><strong>r1</strong>：结束圆形的半径</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gradient = ctx.<span class="title function_">createRadialGradient</span>(<span class="number">110</span>, <span class="number">90</span>, <span class="number">30</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">70</span>);</span><br><span class="line"></span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">0</span>, <span class="string">&quot;pink&quot;</span>);</span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">0.9</span>, <span class="string">&quot;white&quot;</span>);</span><br><span class="line">gradient.<span class="title function_">addColorStop</span>(<span class="number">1</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = gradient;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">20</span>, <span class="number">20</span>, <span class="number">160</span>, <span class="number">160</span>);</span><br></pre></td></tr></table></figure><h4 id="addColorStop">addColorStop</h4><p>指定渐变对象中的颜色和位置。</p><p><strong>参数</strong>：</p><ol><li><strong>offset</strong>：0-1之间的值</li><li><strong>color</strong>：颜色</li></ol><h3 id="图案">图案</h3><p>通过<code>createPattern()</code>方法来实现图案的效果</p><p><strong>参数</strong>：</p><ol><li><strong>image</strong>：重复图像的来源</li><li><strong>repetition</strong>：指定如何重复图像<ul><li><strong>repeat</strong>：沿 x、y 轴平铺</li><li><strong>repeat-x</strong>：沿 x 轴平铺</li><li><strong>repeat-y</strong>：沿 y 轴平铺</li><li><strong>no-repeat</strong>：不平铺</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&quot;canvas_createpattern.png&quot;</span>;</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ptrn = ctx.<span class="title function_">createPattern</span>(img, <span class="string">&quot;repeat&quot;</span>);</span><br><span class="line">    ctx.<span class="property">fillStyle</span> = ptrn;</span><br><span class="line">    ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="阴影">阴影</h3><h4 id="shadowColor">shadowColor</h4><p>设置阴影的颜色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">shadowColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><h4 id="shadowBlur">shadowBlur</h4><p>设置阴影的模糊效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">shadowColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="property">shadowBlur</span> = <span class="number">15</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><h4 id="shadowOffsetX">shadowOffsetX</h4><p>阴影水平方向的偏移量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">shadowColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="property">shadowOffsetX</span> = <span class="number">25</span>;</span><br><span class="line">ctx.<span class="property">shadowBlur</span> = <span class="number">10</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><h4 id="shadowOffsetY">shadowOffsetY</h4><p>阴影垂直方向的偏移量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">shadowColor</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="property">shadowOffsetY</span> = <span class="number">25</span>;</span><br><span class="line">ctx.<span class="property">shadowBlur</span> = <span class="number">10</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><h2 id="文本">文本</h2><h3 id="fillText">fillText</h3><p>在指定的坐标上绘制文本字符串，并使用当前的<strong>fillStyle</strong>对其进行填充。</p><p><strong>参数</strong>：</p><ol><li><strong>text</strong>：渲染上下文的文本字符串</li><li><strong>x</strong>：绘制文本的点的x轴坐标</li><li><strong>y</strong>：绘制文本的基线的y轴坐标</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&quot;Hello world&quot;</span>, <span class="number">50</span>, <span class="number">90</span>);</span><br></pre></td></tr></table></figure><h3 id="strokeText">strokeText</h3><p>在指定的坐标上绘制文本轮廓</p><p><strong>参数</strong>：</p><ol><li><strong>text</strong>：渲染上下文的文本字符串</li><li><strong>x</strong>：绘制文本的点的x轴坐标</li><li><strong>y</strong>：绘制文本的基线的y轴坐标</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">strokeText</span>(<span class="string">&quot;Hello world&quot;</span>, <span class="number">50</span>, <span class="number">90</span>);</span><br></pre></td></tr></table></figure><h3 id="font">font</h3><p>绘制文字时，当前字体样式的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;50px serif&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&quot;Hello world&quot;</span>, <span class="number">50</span>, <span class="number">90</span>);</span><br></pre></td></tr></table></figure><h3 id="textAlign">textAlign</h3><p>绘制文本时，文本水平方向的对齐方式。</p><p><strong>属性值</strong>：</p><ol><li><strong>left</strong>：文本左对齐</li><li><strong>right</strong>：文本右对齐</li><li><strong>center</strong>：文本居中对齐</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;30px serif&quot;</span>;</span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&quot;center&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">strokeRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&quot;Hello world&quot;</span>, <span class="number">150</span>, <span class="number">150</span>);</span><br></pre></td></tr></table></figure><h3 id="textBaseline">textBaseline</h3><p>绘制文本时，文本垂直方向的对齐方式。</p><p><strong>属性值</strong>：</p><ol><li><strong>top</strong>：文本基线在文本块的顶部</li><li><strong>hanging</strong>：文本基线是悬挂基线</li><li><strong>middle</strong>：文本基线在文本块的中间</li><li><strong>alphabetic</strong>：文本基线是标准的字母基线</li><li><strong>ideographic</strong>：文本基线是字符本身的底部</li><li><strong>bottom</strong>：文本基线在文本块的底部</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> baselines = [</span><br><span class="line">    <span class="string">&quot;top&quot;</span>,</span><br><span class="line">    <span class="string">&quot;hanging&quot;</span>,</span><br><span class="line">    <span class="string">&quot;middle&quot;</span>,</span><br><span class="line">    <span class="string">&quot;alphabetic&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ideographic&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bottom&quot;</span>,</span><br><span class="line">];</span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;36px serif&quot;</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"></span><br><span class="line">baselines.<span class="title function_">forEach</span>(<span class="function">(<span class="params">baseline, index</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">textBaseline</span> = baseline;</span><br><span class="line">    <span class="keyword">const</span> y = <span class="number">75</span> + index * <span class="number">75</span>;</span><br><span class="line">    ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">    ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, y + <span class="number">0.5</span>);</span><br><span class="line">    ctx.<span class="title function_">lineTo</span>(<span class="number">550</span>, y + <span class="number">0.5</span>);</span><br><span class="line">    ctx.<span class="title function_">stroke</span>();</span><br><span class="line">    ctx.<span class="title function_">fillText</span>(<span class="string">`Abcdefghijklmnop (<span class="subst">$&#123;baseline&#125;</span>)`</span>, <span class="number">0</span>, y);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="direction">direction</h3><p>绘制文本时，描述文本方向。</p><p><strong>属性值</strong>：</p><ol><li><strong>ltr</strong>：文本方向从左向右</li><li><strong>rtl</strong>：文本方向从右向左</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;48px serif&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&quot;Hi!&quot;</span>, <span class="number">150</span>, <span class="number">50</span>);</span><br><span class="line">ctx.<span class="property">direction</span> = <span class="string">&quot;rtl&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&quot;Hi!&quot;</span>, <span class="number">150</span>, <span class="number">130</span>);</span><br></pre></td></tr></table></figure><h2 id="图像">图像</h2><p>canvas 具有图像操控能力，可以用于动态图像合成或者成为图形的背景。引入图像到 canvas 里需要以下两步基本操作：</p><ol><li>获取一个图片</li><li>使用<code>drawImage()</code>函数将图片绘制到画布上</li></ol><p><strong>参数</strong>：</p><ol><li><strong>image</strong>：绘制到上下文的元素。允许任何的画布图像源</li><li><strong>dx、dy</strong>：<code>image</code>的左上角在目标画布上的 x、y轴坐标</li><li><strong>dWidth、dHeight</strong>：<code>image</code>在目标画布上绘制的宽度和高度</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">    ctx.<span class="title function_">moveTo</span>(<span class="number">30</span>, <span class="number">96</span>);</span><br><span class="line">    ctx.<span class="title function_">lineTo</span>(<span class="number">70</span>, <span class="number">66</span>);</span><br><span class="line">    ctx.<span class="title function_">lineTo</span>(<span class="number">103</span>, <span class="number">76</span>);</span><br><span class="line">    ctx.<span class="title function_">lineTo</span>(<span class="number">170</span>, <span class="number">15</span>);</span><br><span class="line">    ctx.<span class="title function_">stroke</span>();</span><br><span class="line">&#125;;</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&quot;demo.png&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="状态">状态</h2><h3 id="save">save</h3><p>保存canvas的所有状态，canvas状态存储在栈中，当<code>save()</code>方法被调用后，当前的状态就被推送到栈中保存</p><h3 id="restore">restore</h3><p>恢复canvas到最近保存的状态，如果没有使用<code>save()</code>方法保存状态，就不会生效</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">150</span>, <span class="number">150</span>); <span class="comment">// 使用默认设置绘制一个矩形</span></span><br><span class="line">ctx.<span class="title function_">save</span>(); <span class="comment">// 保存默认状态</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#09F&quot;</span>; <span class="comment">// 在原有配置基础上对颜色做改变</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">15</span>, <span class="number">15</span>, <span class="number">120</span>, <span class="number">120</span>); <span class="comment">// 使用新的设置绘制一个矩形</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">save</span>(); <span class="comment">// 保存当前状态</span></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#FFF&quot;</span>; <span class="comment">// 再次改变颜色配置</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">30</span>, <span class="number">30</span>, <span class="number">90</span>, <span class="number">90</span>); <span class="comment">// 使用新的配置绘制一个矩形</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">restore</span>(); <span class="comment">// 重新加载之前的颜色状态</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">45</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">60</span>); <span class="comment">// 使用上一次的配置绘制一个矩形</span></span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">restore</span>(); <span class="comment">// 加载默认颜色配置</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">30</span>, <span class="number">30</span>); <span class="comment">// 使用加载的配置绘制一个矩形</span></span><br></pre></td></tr></table></figure><h2 id="变形">变形</h2><h3 id="translate">translate</h3><p>将 canvas 按原始 x 点的水平方向、原始 y 点的垂直方向进行<strong>平移变换</strong></p><p><img src="/imgs/HTML/canvas_translate.png" alt=""></p><p><strong>参数</strong>：</p><ol><li><strong>x</strong>：水平方向的移动距离</li><li><strong>y</strong>：垂直方向的移动距离</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;grey&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">80</span>);</span><br><span class="line">ctx.<span class="title function_">translate</span>(<span class="number">110</span>, <span class="number">30</span>);</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">80</span>);</span><br></pre></td></tr></table></figure><h3 id="rotate">rotate</h3><p>将 canvas 按其起始点旋转</p><p><img src="/imgs/HTML/canvas_rotate.png" alt=""></p><p><strong>参数</strong>：</p><ol><li><strong>angle</strong>：顺时针旋转的弧度，可以使用公式：<code>degree * Math.PI / 180</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;gray&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">100</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">rotate</span>((<span class="number">45</span> * <span class="title class_">Math</span>.<span class="property">PI</span>) / <span class="number">180</span>);</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">100</span>, <span class="number">0</span>, <span class="number">80</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="scale">scale</h3><p>将 canvas 缩放</p><p><strong>参数</strong>：</p><ol><li><strong>x</strong>：水平方向的缩放因子</li><li><strong>y</strong>：垂直方向的缩放因子</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">scale</span>(<span class="number">0.1</span>, <span class="number">0.1</span>);</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><h3 id="transform">transform</h3><p>可以缩放、旋转、移动和倾斜上下文</p><p><strong>参数</strong>：</p><ol><li><strong>a</strong>：水平方向的缩放因子</li><li><strong>b</strong>：垂直方向的倾斜距离</li><li><strong>c</strong>：水平方向的倾斜距离</li><li><strong>d</strong>：垂直方向的缩放因子</li><li><strong>e</strong>：水平方向的移动距离</li><li><strong>f</strong>：垂直方向的移动距离</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">transform</span>(<span class="number">1</span>, <span class="number">0.2</span>, <span class="number">0.8</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h3 id="setTransform">setTransform</h3><p>重新设置当前的变形为初始值，并使用同样的变量调用 <code>transform() </code>方法。</p><h3 id="resetTransform">resetTransform</h3><p>设置当前的变形为初始值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">setTransform</span>(<span class="number">1</span>, <span class="number">0.2</span>, <span class="number">0.8</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">resetTransform</span>();</span><br></pre></td></tr></table></figure><h2 id="合成">合成</h2><p>在 canvas 中不仅可以在已有图形后面再画新图形，还可以用来遮盖指定区域，清除画布中的某些部分，通过<strong>globalCompositeOperation</strong>属性设置遮盖策略</p><p><strong>属性值</strong>：</p><ol><li><strong>source-over</strong>：在现有画布上绘制新图形</li><li><strong>source-in</strong>：在新形状和目标画布重叠的地方绘制新形状。其他的都是透明的。</li><li><strong>source-out</strong>：在不与现有画布内容重叠的地方绘制新图形</li><li><strong>source-atop</strong>：只在与现有画布内容重叠的地方绘制新图形。</li><li><strong>destination-over</strong>：在现有画布内容的后面绘制新的图形。</li><li><strong>destination-in</strong>：仅保留现有画布内容和新形状重叠的部分。其他的都是透明的。</li><li><strong>destination-out</strong>：仅保留现有画布内容和新形状不重叠的部分。</li><li><strong>destination-atop</strong>：仅保留现有画布内容和新形状重叠的部分。新形状是在现有画布内容的后面绘制的。</li><li><strong>lighter</strong>：两个重叠图形的颜色是通过颜色值相加来确定</li><li><strong>copy</strong>：只显示新图形</li><li><strong>xor</strong>：重叠处图形变为透明，其他地方正常绘制</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">globalCompositeOperation</span> = <span class="string">&quot;xor&quot;</span>;</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(14)-SVG</title>
    <link href="/2024/06/19/HTML%E5%AD%A6%E4%B9%A0(14)-SVG/"/>
    <url>/2024/06/19/HTML%E5%AD%A6%E4%B9%A0(14)-SVG/</url>
    
    <content type="html"><![CDATA[<p>矢量图形在很多情况下非常有用——它们拥有较小的文件尺寸，却高度可缩放，所以它们不会在镜头拉近或者放大图像时像素化。</p><span id="more"></span><h1>矢量图形</h1><p>在Web中，我们常和两种类型的图片打交道</p><ol><li><strong>位图</strong>：使用像素网格定义，位图文件精确包含每个像素的位置和色彩信息（bmp、png、jpg、gif）</li><li><strong>矢量图</strong>：使用算法来定义，矢量文件包含了图形和路径的定义（svg）</li></ol><h1>SVG</h1><p><strong>SVG</strong>是用于描述矢量图像的语言，它基于<strong>XML</strong>。它提供了许多不同的元素来定义要显示在图像中的形状。</p><p><strong>注意</strong>：</p><ol><li>绘制矢量图，需要从<code>&lt;svg&gt;</code>根元素开始</li><li>SVG文件规则是“后来居上”，越后面的元素越可见</li><li>可以使用<code>&lt;img&gt;</code>、<code>&lt;object&gt;</code>等元素引用</li></ol><h2 id="坐标定位">坐标定位</h2><p>SVG使用的坐标系统，以页面的左上角为(0, 0)坐标点为顶点，坐标以像素为单位，x 轴正方向是向右，y 轴正方向是向下。</p><p><img src="/imgs/HTML/svg.png" alt="svg"></p><h2 id="基本形状">基本形状</h2><h3 id="矩形">矩形</h3><p><code>rect</code>元素会在屏幕上绘制一个矩形</p><p><strong>属性</strong>：</p><ol><li><strong>x</strong>：矩形左上角的 x 坐标</li><li><strong>y</strong>：矩形左上角的 y 坐标</li><li><strong>width</strong>：矩形的宽度</li><li><strong>height</strong>：矩形的高度</li><li><strong>rx</strong>：圆角的 x 方位的半径</li><li><strong>ry</strong>：圆角的 y 方位的半径</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;60&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;10&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;30&quot;</span> <span class="attr">height</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="圆形">圆形</h3><p><code>circle</code>元素会在屏幕上绘制一个圆形</p><p><strong>属性</strong>：</p><ol><li><strong>r</strong>：圆的半径</li><li><strong>cx</strong>：圆心的 x 坐标</li><li><strong>cy</strong>：圆心的 y 坐标</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;25&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;75&quot;</span> <span class="attr">r</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="椭圆">椭圆</h3><p><code>ellipse</code>元素会在屏幕上绘制一个椭圆</p><p><strong>属性</strong>：</p><ol><li><strong>rx</strong>：椭圆的 x 半径</li><li><strong>ry</strong>：椭圆的 y 半径</li><li><strong>cx</strong>：椭圆中心的 x 坐标</li><li><strong>cy</strong>：椭圆中心的 y 坐标</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">&quot;75&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;75&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;20&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="线条">线条</h3><p><code>line</code>元素会在屏幕上绘制一个直线</p><p><strong>属性</strong>：</p><ol><li><strong>x1</strong>：起点的 x 坐标</li><li><strong>y1</strong>：起点的 y 坐标</li><li><strong>x2</strong>：终点的 x 坐标</li><li><strong>y2</strong>：终点的 y 坐标</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;10&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;50&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;110&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;150&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="折线">折线</h3><p><code>polyline</code>元素会在屏幕上绘制一组连接在一起的直线</p><p><strong>属性</strong>：</p><ol><li><strong>points</strong>：点集数列，每个点必须包含2个数字，一个是x坐标，一个是y坐标，用逗号隔开，每个点的坐标用空白隔开</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">&quot;60, 110 65, 120 70, 115 75, 130 80, 125 85, 140 90, 135 95, 150 100, 145&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多边形">多边形</h3><p><code>polygon</code>元素会在屏幕上绘制一组连接在一起的直线，看起来与折线很像，但是<code>&lt;polygon&gt;</code>元素会在最后一个点自动回到第一个点，构成一个多边形。</p><p><strong>属性</strong>：</p><ol><li><strong>points</strong>：点集数列，每个点必须包含2个数字，一个是x坐标，一个是y坐标，用逗号隔开，每个点的坐标用空白隔开</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">&quot;50, 160 55, 180 70, 180 60, 190 65, 205 50, 195 35, 205 40, 190 30, 180 45, 180&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="路径">路径</h2><p><code>&lt;path&gt;</code>元素是SVG形状中最强大的一个，他可以构建线条、曲线、弧形等等。</p><p><strong>属性</strong>：</p><ol><li><strong>d</strong>：一个“命令 + 参数”的序列</li></ol><h3 id="直线命令">直线命令</h3><h4 id="Move-To">Move To</h4><p>“Move To”命令。简称M，需要两个参数，分别是需要移动的点的x轴和y轴的坐标。M命令经常出现在路径的开始处，指明从何处开始画。</p><h4 id="Line-To">Line To</h4><p>“Line To”命令。简称L，需要两个参数，分别一个点的x轴和y轴的坐标。L 命令将会在当前位置和新位置之间画一条线段。</p><h4 id="H-V">H&amp;V</h4><p>H 绘制水平线。V 绘制垂直线。这两个命令都只带一个参数，标明在 x 轴或 y 轴移动到的坐标，因为它们都只在坐标轴的一个方向上移动。</p><h4 id="Z">Z</h4><p>Z 命令会从当前点画一条直线到路径的起点，尽管我们不总是需要闭合路径，但是它还是经常被放到路径的最后。另外，Z 命令不用区分大小写。</p><p><strong>注意</strong>：</p><ol><li>大写命令的参数指定明确的坐标点，小写命令的参数是相对于当前点需要移动多少的距离（反方向的距离是负数）</li><li>m命令是当前位置坐标加上参数的坐标，即为新起点的坐标</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 10 H 90 V 90 H 10 L 10 10&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 10 H 90 V 90 H 10 Z&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 10 h 80 v 80 h -80 Z&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="曲线命令">曲线命令</h3><h4 id="C">C</h4><p><strong>C</strong>命令会创建一个三次贝塞尔曲线，三次贝塞尔曲线需要4个坐标点位置，我们通过M命令设置了曲线的起点，因此还需要设置3组坐标参数</p><p><strong>参数</strong>：</p><ol><li><strong>x1、y1</strong>：起点的控制点</li><li><strong>x2、y2</strong>：终点的控制点</li><li><strong>x、y</strong>：曲线的终点</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 10 C 20 20, 40 20, 50 10&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="S">S</h4><p><strong>S</strong>命令也可以用来创建三次贝塞尔曲线，如果<strong>S</strong>命令跟在<strong>C</strong>或<strong>S</strong>命令后面，<strong>S</strong>命令曲线的起点是上一命令曲线的终点，<strong>S</strong>命令起点的控制点是上一命令终点控制点的中心对称点；如果<strong>S</strong>命令单独使用，前面没有<strong>C</strong>或<strong>S</strong>命令，那当前点（可能是曲线的起点）将作为起点的控制点。</p><p><strong>参数</strong>：</p><ol><li><strong>x2、y2</strong>：终点的控制点</li><li><strong>x、y</strong>：曲线的终点</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Q">Q</h4><p><strong>Q</strong>命令会创建一个二次贝塞尔曲线，二次贝塞尔曲线需要3个坐标点位置，我们通过M命令设置了曲线的起点，因此还需要设置2组坐标参数</p><p><strong>参数</strong>：</p><ol><li><strong>x1、y1</strong>：控制点</li><li><strong>x、y</strong>：曲线的终点</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 80 Q 95 10 180 80&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="T">T</h4><p><strong>T</strong>命令也可以用来创建二次贝塞尔曲线，如果<strong>T</strong>命令跟在<strong>Q</strong>或<strong>T</strong>命令后面，<strong>T</strong>命令曲线的起点是上一命令曲线的终点，<strong>T</strong>命令控制点是上一命令控制点的中心对称点；如果<strong>T</strong>命令单独使用，前面没有<strong>Q</strong>或<strong>T</strong>命令，那么控制点就会被认为和终点是同一个点，画出来的将是一条直线。</p><p><strong>参数</strong>：</p><ol><li><strong>x、y</strong>：曲线的终点</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 10 80 Q 52.5 10, 95 80 T 180 80&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;black&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;transparent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="A">A</h4><p><strong>A</strong>命令是创建弧形的命令，弧形可以视为圆形或椭圆形的一部分</p><p><strong>参数</strong>：</p><ol><li><strong>rx、ry</strong>：弧形的x轴和y轴半径</li><li><strong>x-axis-rotation</strong>：x轴旋转角度</li><li><strong>large-arc-flag</strong>：决定弧线是大于还是小于 180 度，0 表示小角度弧，1 表示大角度弧。</li><li><strong>sweep-flag</strong>：表示弧线的方向，0 表示从起点到终点沿逆时针画弧，1 表示从起点到终点沿顺时针画弧。</li><li><strong>x、y</strong>：弧形终点的x、y轴坐标</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&quot;325&quot;</span> <span class="attr">height</span>=<span class="string">&quot;325&quot;</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 80 80</span></span></span><br><span class="line"><span class="string"><span class="tag">        A 45 45, 0, 0, 0, 125 125</span></span></span><br><span class="line"><span class="string"><span class="tag">        L 125 80 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 230 80</span></span></span><br><span class="line"><span class="string"><span class="tag">        A 45 45, 0, 1, 0, 275 125</span></span></span><br><span class="line"><span class="string"><span class="tag">        L 275 80 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 80 230</span></span></span><br><span class="line"><span class="string"><span class="tag">        A 45 45, 0, 0, 1, 125 275</span></span></span><br><span class="line"><span class="string"><span class="tag">        L 125 230 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;purple&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M 230 230</span></span></span><br><span class="line"><span class="string"><span class="tag">        A 45 45, 0, 1, 1, 275 275</span></span></span><br><span class="line"><span class="string"><span class="tag">        L 275 230 Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;blue&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="填充和边框">填充和边框</h2><h3 id="填充">填充</h3><p><strong>fill</strong>属性设置对象内部的颜色</p><p><strong>fill-opacity</strong>属性控制填充色的不透明度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;purple&quot;</span> <span class="attr">fill-opacity</span>=<span class="string">&quot;0.5&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="边框">边框</h3><p><strong>stroke</strong>属性设置绘制对象的线条的颜色</p><p><strong>stroke-opacity</strong>属性控制描边的不透明度</p><p><strong>stroke-width</strong>属性定义了描边的宽度</p><p><strong>stroke-linecap</strong>属性控制边框的形状（butt：直角，round：圆角）</p><p><strong>stroke-linejoin</strong>属性控制两条边框之间，用什么方式连接（miter：直角，round：圆角，bevel：折角）</p><p><strong>stroke-dasharray</strong>属性的参数是一组用逗号分隔的数字，每一组数字中，第一个表示填色区域的长度，第二个表示非填色区域的长度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke-opacity</span>=<span class="string">&quot;0.8&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;butt&quot;</span> <span class="attr">stroke-dasharray</span>=<span class="string">&quot;5&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="渐变">渐变</h2><p>使用渐变需要给渐变内容指定一个<strong>id</strong>属性，否则文档内的其他元素就不能引用它，为了让渐变能重复使用，渐变内容需要定义在<code>&lt;defs&gt;</code>元素内，而不是定义在形状上面。</p><h3 id="线性渐变">线性渐变</h3><p>线性渐变沿着直线改变颜色，要插入一个线性渐变，需要在 SVG 文件的<code>&lt;defs&gt;</code>元素内部，创建一个<code>&lt;linearGradient&gt;</code>元素</p><p><strong>属性</strong>：</p><ol><li><strong>x1、x2、y1、y2</strong>：这些属性定义了渐变路线走向。渐变色默认是水平方向的，但是通过修改这些属性，就可以旋转该方向。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;Gradient1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">&quot;black&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">offset</span>=<span class="string">&quot;50%&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">&quot;blue&quot;</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;15&quot;</span> <span class="attr">ry</span>=<span class="string">&quot;15&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#Gradient1)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="径向渐变">径向渐变</h3><p>径向渐变与线性渐变相似，只是它是从一个点开始发散绘制渐变。创建径向渐变需要在文档的<code>&lt;defs&gt;</code>元素中添加一个<code>&lt;radiaGradient&gt;</code>元素</p><p><strong>属性</strong>：</p><ol><li><strong>fx、fy</strong>：径向渐变的起点圆的X、Y坐标</li><li><strong>cx、cy</strong>：径向渐变的终点圆的X、Y坐标</li><li><strong>r</strong>：径向渐变的终点圆的半径</li><li><strong>spreadMethod</strong>：表示渐变在边缘之外的表现<ul><li><strong>pad</strong>：渐变的最终颜色填充边缘以外的形状</li><li><strong>reflect</strong>：渐变在边缘以外反向重复</li><li><strong>repeat</strong>：渐变在边缘以外按原始顺序重复</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">&quot;RadialGradient1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">&quot;RadialGradient2&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;0.25&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;0.25&quot;</span> <span class="attr">r</span>=<span class="string">&quot;0.25&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;red&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;blue&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rx</span>=<span class="string">&quot;15&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ry</span>=<span class="string">&quot;15&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">fill</span>=<span class="string">&quot;url(#RadialGradient1)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span></span></span><br><span class="line"><span class="tag">    <span class="attr">x</span>=<span class="string">&quot;10&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">y</span>=<span class="string">&quot;120&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rx</span>=<span class="string">&quot;15&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ry</span>=<span class="string">&quot;15&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">fill</span>=<span class="string">&quot;url(#RadialGradient2)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="渐变节点">渐变节点</h3><p>通过<code>&lt;stop&gt;</code>元素的<strong>offset</strong>和<strong>stop-color</strong>属性，可以说明在渐变的特定位置上应该是什么颜色，通过<strong>stop-opacity</strong>属性设置透明度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;yellow&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="遮罩">遮罩</h3><p>利用遮罩效果也能实现线性渐变效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;Gradient&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;white&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;white&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mask</span> <span class="attr">id</span>=<span class="string">&quot;Mask&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#Gradient)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mask</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;green&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;red&quot;</span> <span class="attr">mask</span>=<span class="string">&quot;url(#Mask)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文本">文本</h2><p>利用<code>&lt;text&gt;</code>元素可以在图像中放置一些文本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">&quot;10&quot;</span> <span class="attr">y</span>=<span class="string">&quot;10&quot;</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="变形">变形</h2><p>通过<strong>transform</strong>属性可以实现变形操作</p><h3 id="平移">平移</h3><p><code>translate()</code>方法能把元素移动一段距离</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;10&quot;</span> <span class="attr">height</span>=<span class="string">&quot;10&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(30,40)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="旋转">旋转</h3><p><code>rotate()</code>方法能把元素旋转</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;20&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;rotate(45)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="缩放">缩放</h3><p><code>scale()</code>方法能把元素缩放一定比例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;20&quot;</span> <span class="attr">y</span>=<span class="string">&quot;20&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;scale(.5)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="剪切">剪切</h2><p>使用<code>&lt;clipPath&gt;</code>元素能够实现剪切的效果，<code>&lt;clipPath&gt;</code>元素经常放在一个<code>&lt;defs&gt;</code>元素内。需要<strong>id</strong>属性和<strong>clip-path</strong>匹配，确定剪切元素的路径和被剪切元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">clipPath</span> <span class="attr">id</span>=<span class="string">&quot;cut-off-bottom&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">clipPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;100&quot;</span> <span class="attr">r</span>=<span class="string">&quot;100&quot;</span> <span class="attr">clip-path</span>=<span class="string">&quot;url(#cut-off-bottom)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(13)-嵌入</title>
    <link href="/2024/06/18/HTML%E5%AD%A6%E4%B9%A0(13)-%E5%B5%8C%E5%85%A5/"/>
    <url>/2024/06/18/HTML%E5%AD%A6%E4%B9%A0(13)-%E5%B5%8C%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<p>图片、多媒体等内容丰富了HTML页面，如何在HTML页面展示其他类型的内容。</p><span id="more"></span><h1>嵌入</h1><p>使用嵌入元素可以在网页上嵌入各种类型的内容，<code>&lt;iframe&gt;</code>元素用于嵌入其他网页，<code>&lt;embed&gt;</code>和<code>&lt;object&gt;</code>元素用于嵌入外部资源。</p><h2 id="iframe">iframe</h2><p><code>&lt;iframe&gt;</code>元素表示嵌套的浏览上下文，它能够将另一个HTML页面嵌入到当前页面中。</p><p><strong>属性</strong>：</p><ol><li><strong>src</strong>：被嵌套的页面的URL地址</li><li><strong>width</strong>和<strong>height</strong>：iframe的宽度和高度，默认是300*150</li><li><strong>allowfullscreen</strong>：设置为true时，通过调用**requestFullScreen()**方法激活全屏模式</li><li><strong>name</strong>：嵌入的浏览上下文的名称</li><li><strong>sandbox</strong>：控制应用于嵌入在 <code>&lt;iframe&gt;</code> 中的内容的限制（沙盒）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">&quot;https://example.org&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">title</span>=<span class="string">&quot;iframe Example 1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;400&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">height</span>=<span class="string">&quot;300&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="embed-和-object"><code>&lt;embed&gt;</code>和<code>&lt;object&gt;</code></h2><p><code>&lt;embed&gt;</code>和<code>&lt;object&gt;</code>元素用于嵌入外部资源。</p><h3 id="embed"><code>&lt;embed&gt;</code></h3><p><strong>属性</strong>：</p><ol><li><strong>src</strong>：被嵌套的资源的 URL。</li><li><strong>type</strong>：MIME 类型。</li><li><strong>width</strong>和<strong>height</strong>：资源显示的宽度和高度</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">type</span>=<span class="string">&quot;video/quicktime&quot;</span> <span class="attr">src</span>=<span class="string">&quot;movie.mov&quot;</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">height</span>=<span class="string">&quot;480&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="object"><code>&lt;object&gt;</code></h3><p><strong>属性</strong>：</p><ol><li><strong>data</strong>：一个合法的 URL 作为资源的地址，需要为 <strong>data</strong> 和 <strong>type</strong> 中至少一个设置值。</li><li><strong>type</strong>：<strong>data</strong> 指定的资源的 MIME 类型，需要为 <strong>data</strong> 和 <strong>type</strong> 中至少一个设置值。</li><li><strong>width</strong>和<strong>height</strong>：资源显示的宽度和高度</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">&quot;application/pdf&quot;</span> <span class="attr">data</span>=<span class="string">&quot;/media/examples/In-CC0.pdf&quot;</span> <span class="attr">width</span>=<span class="string">&quot;250&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(12)-拖放</title>
    <link href="/2024/06/17/HTML%E5%AD%A6%E4%B9%A0(12)-%E6%8B%96%E6%94%BE/"/>
    <url>/2024/06/17/HTML%E5%AD%A6%E4%B9%A0(12)-%E6%8B%96%E6%94%BE/</url>
    
    <content type="html"><![CDATA[<p><strong>HTML 拖放</strong>（Drag and Drop）接口使应用程序能够在浏览器中使用拖放功能。</p><span id="more"></span><h1>拖放</h1><p>用户可使用鼠标选择可拖拽（<em>draggable</em>）元素，将元素拖拽到可放置（<em>droppable</em>）元素，并释放鼠标按钮以放置这些元素。拖拽操作期间，会有一个可拖拽元素的半透明快照跟随着鼠标指针。</p><h2 id="拖放事件">拖放事件</h2><p>用户在拖拽操作期间，会触发一些拖放事件。</p><h3 id="选中">选中</h3><p>在HTML5标准中，为了使元素可拖动，需要把<strong>draggable</strong>属性设置为<strong>true</strong>。</p><p><strong>draggable</strong>属性：</p><ol><li><strong>true</strong>：可以拖动</li><li><strong>false</strong>：禁止拖动</li><li><strong>auto</strong>：跟随浏览器定义是否可以拖动</li></ol><h3 id="拖动和释放">拖动和释放</h3><p>用户操作拖放元素时，可以在<code>addEventListener()</code>方法中使用事件名称，也可以设置事件处理器属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addEventListener</span>(<span class="string">&quot;drag&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line">ondrag = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>事件</th><th>on事件</th><th>触发时刻</th></tr></thead><tbody><tr><td>dragstart</td><td>ondragstart</td><td>当用户开始拖动一个元素时触发</td></tr><tr><td>drag</td><td>ondrag</td><td>当拖动元素时触发（可多次触发）</td></tr><tr><td>dragend</td><td>ondragend</td><td>当拖动操作结束时触发</td></tr><tr><td>dragenter</td><td>ondragenter</td><td>当拖拽元素到一个可释放目标时触发</td></tr><tr><td>dragover</td><td>ondragover</td><td>当元素被拖到一个可释放目标上时触发（可多次触发）</td></tr><tr><td>dragleave</td><td>ondragleave</td><td>当拖拽元素离开一个可释放目标时触发</td></tr><tr><td>drop</td><td>ondrop</td><td>当元素在可释放目标上被释放时触发</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropzone&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;draggable&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>这个 div 可以拖动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dropzone&quot;</span> <span class="attr">id</span>=<span class="string">&quot;droptarget&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        user-select: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-id">#draggable</span> &#123;</span><br><span class="line">        <span class="attribute">text-align</span>: center;</span><br><span class="line">        <span class="attribute">background</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.dropzone</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">background</span>: blueviolet;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.dropzone</span><span class="selector-class">.dragover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: purple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.dragging</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dragged;</span><br><span class="line"><span class="keyword">const</span> source = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;draggable&quot;</span>);</span><br><span class="line">source.<span class="title function_">addEventListener</span>(<span class="string">&quot;drag&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dragging&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">source.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragstart&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 保存被拖动元素的引用</span></span><br><span class="line">    dragged = event.<span class="property">target</span>;</span><br><span class="line">    <span class="comment">// 设置为半透明</span></span><br><span class="line">    event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;dragging&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">source.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragend&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 拖动结束，重置透明度</span></span><br><span class="line">    event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;dragging&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在放置目标上触发的事件 */</span></span><br><span class="line"><span class="keyword">const</span> target = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;droptarget&quot;</span>);</span><br><span class="line">target.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragover&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 阻止默认行为以允许放置</span></span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;, <span class="literal">false</span>,);</span><br><span class="line"></span><br><span class="line">target.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragenter&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在可拖动元素进入潜在的放置目标时高亮显示该目标</span></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;dropzone&quot;</span>)) &#123;</span><br><span class="line">    event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;dragover&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">target.<span class="title function_">addEventListener</span>(<span class="string">&quot;dragleave&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在可拖动元素离开潜在放置目标元素时重置该目标的背景</span></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;dropzone&quot;</span>)) &#123;</span><br><span class="line">    event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;dragover&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">target.<span class="title function_">addEventListener</span>(<span class="string">&quot;drop&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 阻止默认行为（会作为某些元素的链接打开）</span></span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="comment">// 将被拖动元素移动到选定的目标元素中</span></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;dropzone&quot;</span>)) &#123;</span><br><span class="line">        event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;dragover&quot;</span>);</span><br><span class="line">        dragged.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(dragged);</span><br><span class="line">        event.<span class="property">target</span>.<span class="title function_">appendChild</span>(dragged);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Drag-Event">Drag Event</h2><p>当触发拖拽事件时候，会得到一个<strong>Event</strong>对象，这个<strong>Event</strong>对象其中包含这一些常用的属性：</p><ol><li><strong>target</strong>：为拖拽中的元素的指向</li><li><strong>clientX</strong>：当前鼠标的x点坐标</li><li><strong>clientY</strong>：当前鼠标的y点坐标</li><li><strong>dataTransfer</strong>：当一次拖拽开始发生的时候，会产生一个<strong>DataTransfer</strong>对象，这个<strong>DataTransfer</strong>对象于整个拖拽过程触发的事件共享。当这一次的拖拽行为<strong>结束之后</strong>，这个对象会被<strong>销毁</strong></li></ol><h2 id="DataTransfer">DataTransfer</h2><p><strong>DataTransfer</strong>对象用于保存拖动过程中的数据。它可以保存一项或多项数据，存放在<strong>Drag Event</strong>下的<strong>dataTransfer</strong>中。</p><h3 id="方法">方法</h3><ol><li><strong>setData</strong>：将拖动操作的拖动数据设置为指定的数据和类型</li><li><strong>getData</strong>：返回指定格式的数据，<strong>setData</strong>中数据格式一致</li><li><strong>clearData</strong>：删除给定类型的拖动操作的数据。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">drag</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    event.<span class="property">dataTransfer</span>.<span class="title function_">setData</span>(<span class="string">&quot;text&quot;</span>, event.<span class="property">target</span>.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drop</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    <span class="keyword">var</span> data = event.<span class="property">dataTransfer</span>.<span class="title function_">getData</span>(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">    event.<span class="property">target</span>.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性">属性</h3><ol><li><strong>dropEffect</strong>：获取当前选定的拖放操作的类型或将操作设置为新类型。</li><li><strong>effectAllowed</strong>： 指定拖放操作所允许的效果。<ul><li><em>none</em>：不允许放下</li><li><em>copy</em>：复制项出现在新位置</li><li><em>move</em>：被移动到新位置</li><li><em>all</em>：允许所有的操作</li></ul></li><li><strong>types</strong>：返回在dragstart事件中设置的拖动数据格式的数组。 格式顺序与拖动操作中包含的数据顺序相同。</li><li><strong>files</strong>：返回拖动操作中的文件列表。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">drag</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    event.<span class="property">dataTransfer</span>.<span class="property">effectAllowed</span> = <span class="string">&quot;move&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">drop</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">dataTransfer</span>.<span class="property">dropEffect</span>)</span><br><span class="line">    event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    event.<span class="property">dataTransfer</span>.<span class="property">dropEffect</span> = <span class="string">&quot;move&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(11)-Storage</title>
    <link href="/2024/06/16/HTML%E5%AD%A6%E4%B9%A0(11)-Storage/"/>
    <url>/2024/06/16/HTML%E5%AD%A6%E4%B9%A0(11)-Storage/</url>
    
    <content type="html"><![CDATA[<p>通过网络存储，网络应用程序可以在用户的浏览器中本地存储数据。</p><span id="more"></span><h1>Web Storage</h1><p>提供了浏览器可以存储键/值对的机制，其方式比使用<strong>cookie</strong>更直观。应用数据存储在本地，不会影响网站性能。</p><h2 id="sessionStorage">sessionStorage</h2><p>sessionStorage为每一个给定的源维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。</p><ol><li>sessionStorage仅为会话存储数据，这意味着数据将一直存储到浏览器（或选项卡）关闭。</li><li>数据不会被传输到服务器。</li><li>存储限额最大5MB</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据到 sessionStorage</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 获取数据</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 删除保存的数据</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 sessionStorage 删除所有保存的数据</span></span><br><span class="line"><span class="variable language_">sessionStorage</span>.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><h2 id="localStorage">localStorage</h2><p>localStorage和sessionStorage一致，不同的是浏览器关闭并重新打开数据也仍然存在。</p><ol><li>存储的数据没有过期日期，只能通过 JavaScript、清除浏览器缓存或本地存储的数据来清除。</li><li>存储限额最大5MB</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数据到 localStorage</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 localStorage 获取数据</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 localStorage 删除保存的数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 localStorage 删除所有保存的数据</span></span><br><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(10)-多媒体</title>
    <link href="/2024/06/15/HTML%E5%AD%A6%E4%B9%A0(10)-%E5%A4%9A%E5%AA%92%E4%BD%93/"/>
    <url>/2024/06/15/HTML%E5%AD%A6%E4%B9%A0(10)-%E5%A4%9A%E5%AA%92%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<p>多媒体有多种格式。它几乎可以是任何你能听到或看到的东西，如图像、音乐、声音、视频、唱片、电影、动画等等。</p><span id="more"></span><h1>多媒体</h1><h2 id="视频">视频</h2><p>借助<code>&lt;video&gt;</code>元素可以在HTML文档中嵌入一段视频。</p><p><strong>属性</strong>：</p><ol><li><strong>src</strong>：指向需要嵌入到网页中的视频资源</li><li><strong>controls</strong>：用户使用<strong>controls</strong>属性可以控制浏览器自带的视频控制界面</li><li><strong>width</strong>和<strong>height</strong>：视频的尺寸，无论怎么设置，视频都会保持自身原始纵横比，如果保持不住原始纵横比，视频边框会拉伸，未填充视频内容的部分，将会显示默认的背景颜色</li><li><strong>autoplay</strong>：视频自动播放</li><li><strong>loop</strong>：视频文件播放结束后再次开始播放</li><li><strong>muted</strong>：视频播放时，默认关闭声音</li><li><strong>poster</strong>：指向一个图片的URL，用于在视频播放前显示，当做预览或是广告</li><li><strong>preload</strong>：缓存文件<ul><li><strong>none</strong>：不缓存文件</li><li><strong>auto</strong>：页面加载后缓存文件</li><li><strong>metadata</strong>：仅缓存文件的元数据</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每种浏览器支持的文件格式和编解码器都有所不同，为了确保视频能在用户的浏览器上正常播放，需要提供多种格式的媒体文件。如果没有提供用户浏览器支持的视频格式，那么视频内容将无法播放。</p><p>将 <strong>src</strong> 属性从 <code>&lt;video&gt;</code> 元素中移除，将不同视频文件资源放在<code>&lt;source&gt;</code>元素中。每个<code>&lt;source&gt;</code>元素都含有<strong>type</strong>属性，这个属性是包含了<code>&lt;source&gt;</code>指定的<strong>MIME</strong>类型，浏览器通过检查这个属性来迅速找到支持的格式。如果没有添加<strong>type</strong>属性，浏览器会尝试加载每一个文件，直到找到一个能正确播放的格式，这样会消耗掉大量的时间和资源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video.webm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="视频文本">视频文本</h3><p>通过<code>&lt;track&gt;</code>元素加载一个<strong>vtt</strong>文件，可以做到给视频显示出字幕。</p><p><strong>属性</strong>：</p><ol><li><strong>kind</strong>：定义track应该如何使用，默认是subtitles<ul><li><strong>subtitles</strong>：字幕给看不懂的内容提供翻译（背景信息）</li><li><strong>captions</strong>：字幕提供音频的转录或翻译（静音场景）</li><li><strong>descriptions</strong>：视频内容的文本描述</li><li><strong>chapters</strong>：章节标题</li><li><strong>metadata</strong>：脚本使用，对用户不可见</li></ul></li><li><strong>label</strong>：给浏览器使用的track文本标题</li><li><strong>src</strong>：track文本资源的URL</li><li><strong>srclang</strong>：track文本数据的语言，如果<strong>kind</strong>属性被设置为<strong>subtitles</strong>，那么<strong>srclang</strong>必须定义</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video.webm&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/webm&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">track</span> <span class="attr">kind</span>=<span class="string">&quot;subtitles&quot;</span> <span class="attr">src</span>=<span class="string">&quot;video.vtt&quot;</span> <span class="attr">srclang</span>=<span class="string">&quot;zh&quot;</span> <span class="attr">label</span>=<span class="string">&quot;Chinese&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="音频">音频</h2><p>借助<code>&lt;audio&gt;</code>元素可以在HTML文档中嵌入一段音频。</p><p><strong>属性</strong>：</p><ol><li><strong>src</strong>：指向需要嵌入到网页中的音频资源</li><li><strong>controls</strong>：用户使用<strong>controls</strong>属性可以控制浏览器自带的音频控制界面</li><li><strong>autoplay</strong>：音频自动播放</li><li><strong>loop</strong>：音频文件播放结束后再次开始播放</li><li><strong>muted</strong>：音频播放时，默认关闭声音</li><li><strong>preload</strong>：缓存文件<ul><li><strong>none</strong>：不缓存文件</li><li><strong>auto</strong>：页面加载后缓存文件</li><li><strong>metadata</strong>：仅缓存文件的元数据</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;audio&gt;</code>元素除了不能设置<strong>width</strong>和<strong>height</strong>，以及<strong>poster</strong>，其他与<code>&lt;video&gt;</code>元素几乎一致，<code>&lt;audio&gt;</code>元素也可以用<code>&lt;source&gt;</code>元素加载多个资源文件，便于浏览器选择其支持的格式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;audio.opus&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg; codecs=opus&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;audio.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg; codecs=vorbis&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(9)-表单</title>
    <link href="/2024/06/14/HTML%E5%AD%A6%E4%B9%A0(9)-%E8%A1%A8%E5%8D%95/"/>
    <url>/2024/06/14/HTML%E5%AD%A6%E4%B9%A0(9)-%E8%A1%A8%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<p>表单是用户和服务器之间交互的主要内容之一，表单允许用户输入数据，大多数情况下会将数据发送到web服务器进行处理和存储。</p><span id="more"></span><h1>表单</h1><p>表单是由一个或多个表单控件组成，这些控件可以是文本字段、选择框、按钮、复选框或单选按钮等等。</p><h2 id="form-元素"><code>&lt;form&gt;</code>元素</h2><p>创建一个HTML表单都必须从<code>&lt;form&gt;</code>元素开始，<code>&lt;form&gt;</code>元素包含各个表单控件，用于向 Web 服务器提交信息。</p><p><strong>属性</strong>：</p><ol><li><strong>action</strong>：表单提交的 URL</li><li><strong>method</strong>：浏览器使用哪种HTTP方法来提交表单</li></ol><h3 id="fieldset-和-legend-元素"><code>&lt;fieldset&gt;</code>和<code>&lt;legend&gt;</code>元素</h3><p>出于样式和语义的目的，<code>&lt;fieldset&gt;</code>元素用于对表单中的控件进行分组。</p><p><code>&lt;legend&gt;</code>元素用于表示父元素<code>&lt;fieldset&gt;</code>内容的标题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="label-元素"><code>&lt;label&gt;</code>元素</h3><p><code>&lt;label&gt;</code>元素用于表示表单中某个控件的说明。</p><p><strong>属性</strong></p><ol><li><strong>for</strong>：用于关联表单控件id属性的值，或者使用<code>&lt;label&gt;</code>元素直接包裹表单元素，也可以达到<strong>for</strong>属性的作用。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span>First Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;firstName&quot;</span> <span class="attr">id</span>=<span class="string">&quot;firstName&quot;</span> /&gt;</span></span><br><span class="line">        or</span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">            Last Name</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;lastName&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="input-元素"><code>&lt;input&gt;</code>元素</h3><p><code>&lt;input&gt;</code>元素可以让用户输入任何类型的数据，在<code>&lt;input&gt;</code>元素中，最重要的属性是<strong>type</strong>属性，<strong>type</strong>属性定义了<code>&lt;input&gt;</code>元素各种使用方式。</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>all</td><td>表单控件的类型</td></tr><tr><td>name</td><td>all</td><td>表单控件的名称</td></tr><tr><td>value</td><td>all</td><td>表单控件的初始值</td></tr><tr><td>disabled</td><td>all</td><td>表单控件是否禁用</td></tr><tr><td>autocomplete</td><td>除checkbox、radio、button、file、hidden以外均有效</td><td>自动补全</td></tr><tr><td>checked</td><td>checkbox、radio</td><td>控件是否选中</td></tr><tr><td>accept</td><td>file</td><td>可选择文件类型的列表</td></tr><tr><td>max</td><td>time、number、range</td><td>最大值</td></tr><tr><td>min</td><td>time、number、range</td><td>最小值</td></tr><tr><td>maxlength</td><td>text、search、url、tel、email、password</td><td>value的最大长度（字符数）</td></tr><tr><td>minlength</td><td>text、search、url、tel、email、password</td><td>value的最小长度（字符数）</td></tr><tr><td>multiple</td><td>email、file</td><td>是否多选</td></tr><tr><td>pattern</td><td>text、search、url、tel、email、password</td><td>为了使得 <code>value</code> 有效，必须符合的模式</td></tr><tr><td>placeholder</td><td>text、search、url、tel、email、password、number</td><td>当没有值设定时，出现在表单控件上的文字</td></tr><tr><td>readonly</td><td>除checkbox、radio、button、hidden、range、color以外均有效</td><td>如果存在，其中的值将不可编辑。</td></tr><tr><td>required</td><td>除button、hidden、range、color以外均有效</td><td>如果存在，一个值是必需的，或者必须勾选该值才能提交表格。</td></tr><tr><td>size</td><td>text、search、url、tel、email、password</td><td>控件的尺寸</td></tr><tr><td>step</td><td>time、number、range</td><td>有效的增量值</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单行文本框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 密码框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 隐藏框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;other-data&quot;</span> <span class="attr">value</span>=<span class="string">&quot;用户不可见数据&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 单选框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 复选框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vegetable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;carrots&quot;</span> <span class="attr">checked</span> /&gt;</span>Carrots</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vegetable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;peas&quot;</span>  /&gt;</span>Peas</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 上传文件 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 邮箱输入框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">multiple</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 搜索框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;搜索&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 电话号码 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tel&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- URL字段 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数字输入框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;只能输入数字&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 滑块 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">id</span>=<span class="string">&quot;price&quot;</span> <span class="attr">min</span>=<span class="string">&quot;50000&quot;</span> <span class="attr">max</span>=<span class="string">&quot;500000&quot;</span> <span class="attr">step</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;250000&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 日期选择框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;datetime&quot;</span> <span class="attr">id</span>=<span class="string">&quot;datetime&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span> <span class="attr">name</span>=<span class="string">&quot;month&quot;</span> <span class="attr">id</span>=<span class="string">&quot;month&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span> <span class="attr">name</span>=<span class="string">&quot;week&quot;</span> <span class="attr">id</span>=<span class="string">&quot;week&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 颜色选择框 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">id</span>=<span class="string">&quot;color&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="button-元素"><code>&lt;button&gt;</code>元素</h3><p><code>&lt;button&gt;</code>元素表示一个可点击的按钮。</p><p><strong>属性</strong>：</p><ol><li><strong>type</strong>：button 的类型<ul><li><strong>submit</strong>：按钮提交表单数据给服务器</li><li><strong>reset</strong>：按钮重置所有表单组件至初始值</li></ul></li><li><strong>formaction</strong>：按钮提交表单信息的URI，如果使用了该属性，将覆盖<code>&lt;form&gt;</code>元素的<strong>action</strong>属性</li><li><strong>formmethod</strong>：按钮提交表单使用的HTTP方法，，如果使用了该属性，将覆盖<code>&lt;form&gt;</code>元素的<strong>method</strong>属性</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>submit button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>reset button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="文本域">文本域</h3><p><code>&lt;textarea&gt;</code>元素表示文本域，文本域与单行文本框的区别在于，用户可以在要提交的数据中使用换行。</p><p><strong>属性</strong>：</p><ol><li><strong>rows</strong>：文本域指定的可见文本的行数，值为正整数，默认为2</li><li><strong>cols</strong>：文本域的可见宽度，以平均字符宽度为单位，值为正整数，默认为20</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="下拉框">下拉框</h3><p>下拉菜单是一种简单地让用户从许多不同选项中进行选择的控件，不占用用户界面太多空间。HTML 有两种下拉内容：一种是<strong>选择框</strong>、另外一种是<strong>自动补全框</strong>。</p><h4 id="选择框">选择框</h4><p>选择框是由<code>&lt;select&gt;</code>元素及一个或多个<code>&lt;option&gt;</code>子元素构成的，每个子元素指定了选择框的可能取值。</p><p><strong>属性</strong>：</p><ol><li><strong>multiple</strong>：在<code>&lt;select&gt;</code>元素设置<strong>multiple</strong>属性，选择框就允许用户选择多个选项</li><li><strong>size</strong>：控件中同时可见的行数</li><li><strong>value</strong>：在<code>&lt;option&gt;</code>元素设置<strong>value</strong>属性，当表单提交时也会提交这个选项对应的值，如果省略了<strong>value</strong>属性，<code>&lt;option&gt;</code>元素的内容会作为提交的值。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;banana&quot;</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;cherry&quot;</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;lemon&quot;</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;option&gt;</code>元素可以嵌套在<code>&lt;optgroup&gt;</code>元素中，从视觉上给选项做分组。在<code>&lt;optgroup&gt;</code>元素中，<strong>label</strong>属性的值在嵌套选项前显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;groups&quot;</span> <span class="attr">name</span>=<span class="string">&quot;groups&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;fruits&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;banana&quot;</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;cherry&quot;</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;lemon&quot;</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;vegetables&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;carrot&quot;</span>&gt;</span>Carrot<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;eggplant&quot;</span>&gt;</span>Eggplant<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;potato&quot;</span>&gt;</span>Potato<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自动补全框">自动补全框</h4><p>通过<code>&lt;datalist&gt;</code>元素以及<code>&lt;option&gt;</code>子元素为表单项提供推荐的自动补全值。<code>&lt;datalist&gt;</code> 元素需要指定一个<strong>id</strong>。<code>&lt;datalist&gt;</code>元素的<strong>id</strong>会绑定<code>&lt;input&gt;</code>元素的<strong>list</strong>属性，绑定之后<code>&lt;datalist&gt;</code>元素的选项就会被用来自动补全用户输入的文本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span>What&#x27;s your favorite fruit?<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fruit&quot;</span> <span class="attr">list</span>=<span class="string">&quot;fruitOptions&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;fruitOptions&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Cherry<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>Lemon<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(8)-表格</title>
    <link href="/2024/06/13/HTML%E5%AD%A6%E4%B9%A0(8)-%E8%A1%A8%E6%A0%BC/"/>
    <url>/2024/06/13/HTML%E5%AD%A6%E4%B9%A0(8)-%E8%A1%A8%E6%A0%BC/</url>
    
    <content type="html"><![CDATA[<p>表格是由行和列组成的结构化数据集（表格数据），它让你快速简单地查找某个表示不同类型数据之间的某种关系的值。</p><span id="more"></span><h1>表格</h1><p>在页面中展示一个包含数据的行和列组成的二维表格需要使用<code>&lt;table&gt;</code>元素。</p><h2 id="单元格">单元格</h2><p>在表格中，最小的内容容器是单元格，是通过<code>&lt;td&gt;</code>元素创建的（“td”即“table data”）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>first cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格行">表格行</h2><p>假设我们需要一行放置4个单元格，第5个单元格放置在第二行，就需要通过<code>&lt;tr&gt;</code>元素创建的（“tr”即“table row”）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>first cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>second cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>third cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>fourth cell.<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表头单元格">表头单元格</h2><p>表格中的标题是特殊的单元格，通常在行或列的开始处。通常使用<code>&lt;th&gt;</code>元素创建（“th”即“table header”），<code>&lt;th&gt;</code>的用法和<code>&lt;td&gt;</code>一样，只是视觉和语义上做了区分。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="单元格合并">单元格合并</h2><p>将多个单元格合并成一个单元格，可以通过<strong>colspan</strong>和<strong>rowspan</strong>属性实现。<strong>colspan</strong>属性用于合并单行中的两个或多个相邻单元格，<strong>rowspan</strong>属性用于跨行合并单元格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>class<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>student<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>20<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义列样式">定义列样式</h2><p>如果我们需要给某一列数据增加一些样式表示数据重要性，可以通过使用<code>&lt;colgroup&gt;</code>和<code>&lt;col&gt;</code>元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">colgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">col</span> <span class="attr">style</span>=<span class="string">&quot;background-color: yellow&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">colgroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格标题">表格标题</h2><p>通过<code>&lt;caption&gt;</code>元素可以给表格增加一个标题，标题包含对表格内容的描述。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>成绩表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="表格结构">表格结构</h2><p>当表格的结构很复杂时，我们可以通过<code>&lt;thead&gt;</code>、<code>&lt;tbody&gt;</code>、<code>&lt;tfoot&gt;</code>元素将表中的内容标记为表头、表体、表尾三部分。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>19<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>年龄表<span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(7)-图片</title>
    <link href="/2024/06/12/HTML%E5%AD%A6%E4%B9%A0(7)-%E5%9B%BE%E7%89%87/"/>
    <url>/2024/06/12/HTML%E5%AD%A6%E4%B9%A0(7)-%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>如果只使用文本，网页就会变得非常无聊，在HTML文档中插入图片可以改善网页的设计和外观。</p><span id="more"></span><h1>图片</h1><p>在网页上添加图片，需要使用<code>&lt;img&gt;</code>元素，这个元素是空元素。</p><h2 id="src属性">src属性</h2><p>图片的URL，这个属性对<code>&lt;img&gt;</code>元素来说是必需的。</p><h2 id="alt属性">alt属性</h2><p>图片的文字描述，用于在图片无法显示或不能被看到的情况。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;demo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;这是一个示例图片&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="图片尺寸">图片尺寸</h2><p>用<strong>width</strong>和<strong>height</strong>属性来指定你的图片的宽度和高度。它们的值是不带单位的整数，以像素为单位表示图像的宽度和高度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;demo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;这是一个示例图片&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="图片标题">图片标题</h2><p>提供图片更多的信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;demo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span> <span class="attr">title</span>=<span class="string">&quot;这是一个示例图片&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="延迟加载">延迟加载</h2><p><strong>loading</strong>属性告知浏览器应当如何加载该图片，默认<code>loading='eager'</code>表示图片会在HTML解析后立即加载，设置<code>loading='lazy'</code>，浏览器会延迟加载图片，直到图片有可能进入视图窗口位置才会加载。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;demo.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;这是一个示例图片&quot;</span> <span class="attr">loading</span>=<span class="string">&quot;lazy&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="响应式图片">响应式图片</h2><p>在不同的屏幕尺寸、分辨率或具有其他类似特性的设备上都呈现良好的图片。</p><h3 id="sizes属性">sizes属性</h3><p>定义了一组媒体条件（例如屏幕宽度）并且指明当某些媒体条件为真时，什么样的图片尺寸是最佳选择，如果没有设置<strong>secret</strong>属性，那么<strong>sizes</strong>属性也不起作用。</p><ol><li>媒体条件</li><li>当媒体条件为真，图片的宽度</li></ol><h3 id="secret属性">secret属性</h3><p>定义了浏览器可选择的图片集合以及每个图片的大小，每张图片信息的设置和前一个用逗号隔开，每个设置要写两个值</p><ol><li>指向图片的URL</li><li>可选项<ul><li>图片固有宽度（正整数，后面跟<code>w</code>符号），宽度除以<strong>sizes</strong>属性给出的宽度大小来计算得到有效的像素密度，即<code>x</code>符号等价的值</li><li>像素密度（正浮点数，后面跟<code>x</code>符号）</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">  <span class="attr">srcset</span>=<span class="string">&quot;demo-480w.jpg 480w, demo-800w.jpg 800w&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">sizes</span>=<span class="string">&quot;(max-width: 600px) 480px,</span></span></span><br><span class="line"><span class="string"><span class="tag">         800px&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;demo-800w.jpg&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">alt</span>=<span class="string">&quot;这是一个示例图片&quot;</span> /&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(6)-链接</title>
    <link href="/2024/06/11/HTML%E5%AD%A6%E4%B9%A0(6)-%E9%93%BE%E6%8E%A5/"/>
    <url>/2024/06/11/HTML%E5%AD%A6%E4%B9%A0(6)-%E9%93%BE%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<p>超链接使我们能够将我们的文档链接到任何其他文档（或其他资源），也可以链接到文档的指定部分，我们可以在一个简单的网址上提供应用程序。几乎任何网络内容都可以转换为链接，点击（或激活）超链接将使网络浏览器转到另一个网址。</p><span id="more"></span><h1>链接</h1><p>通过将文本或其他内容包裹在<code>&lt;a&gt;</code>元素内，并给它一个包含网址的<strong>href</strong>属性就可以创建一个基本链接。</p><h2 id="href属性">href属性</h2><p>链接所指向的URL，链接不限于基于 HTTP 的 URL，可以使用浏览器支持的任何 URL 协议。</p><h3 id="链接绝对地址">链接绝对地址</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mozilla.com&quot;</span>&gt;</span> Mozilla <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接相对地址">链接相对地址</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;//example.com&quot;</span>&gt;</span>相对于协议的URL<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/zh-CN/docs/Web/HTML&quot;</span>&gt;</span>相对于同源的URL<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./p&quot;</span>&gt;</span>相对路径的URL<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接文档某一段">链接文档某一段</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//链接相同页面</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span>&gt;</span>邮寄地址<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    请将信件邮寄至</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#address&quot;</span>&gt;</span>我们的地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//链接不同页面</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span>&gt;</span>邮寄地址<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    请将信件邮寄至</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;contacts.html#address&quot;</span>&gt;</span>我们的地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//链接到顶部</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>back top<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">or</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#top&quot;</span>&gt;</span>back top<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接邮箱地址">链接邮箱地址</h3><p><strong>href</strong>属性可以以<code>mailto:</code>开头，用于发送电子邮件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:nowhere@mozilla.org&quot;</span>&gt;</span>Send email to nowhere<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接电话号码">链接电话号码</h3><p><strong>href</strong>属性可以以<code>tel:</code>开头，用于拨打电话</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;tel:12345678910&quot;</span>&gt;</span>phone number<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="title属性">title属性</h2><p>包含关于链接的补充信息，例如页面包含什么样的信息或需要注意的事情。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  我创建了一个指向</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mozilla.org/zh-CN/&quot;</span> <span class="attr">title</span>=<span class="string">&quot;了解 Mozilla 使命以及如何参与贡献的最佳站点。&quot;</span>&gt;</span></span><br><span class="line">    Mozilla主页</span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  的超链接。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="download属性">download属性</h2><p>浏览器将链接的URL视为下载资源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">&quot;https://download.mozilla.org/?product=firefox-latest-ssl&amp;os=win64&amp;lang=zh-CN&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">download</span>=<span class="string">&quot;firefox-latest-64bit-installer.exe&quot;</span>&gt;</span></span><br><span class="line">  下载最新的 Firefox 中文版 - Windows（64 位）</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="target属性">target属性</h2><p>指定在何处显示链接的URL。</p><ol><li><strong>_self</strong>：当前页面加载</li><li><strong>_blank</strong>：新标签页打开</li><li><strong>_parent</strong>：当前浏览环境的父级浏览上下文，如果没有父级，等同于 <strong><code>_self</code></strong></li><li><strong>_top</strong>：最高的浏览上下文，如果没有祖先，等同于 <strong><code>_self</code></strong></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.mozilla.org/zh-CN/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br><span class="line">    Mozilla主页</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(5)-列表</title>
    <link href="/2024/06/10/HTML%E5%AD%A6%E4%B9%A0(5)-%E5%88%97%E8%A1%A8/"/>
    <url>/2024/06/10/HTML%E5%AD%A6%E4%B9%A0(5)-%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>HTML为我们提供了多种标记列表的不同方法。有序列表 (<code>&lt;ol&gt;</code>)、无序列表 (<code>&lt;ul&gt;</code>) 和描述列表 (<code>&lt;dl&gt;</code>)。</p><span id="more"></span><h1>列表</h1><h2 id="有序列表">有序列表</h2><p>有序列表需要按照项目的顺序列出来，<code>&lt;ol&gt;</code>元素通常表示有序列表，<code>&lt;ol&gt;</code>的唯一子级是一个或多个<code>&lt;li&gt;</code>元素。</p><p><strong>属性：</strong></p><ol><li><strong>type</strong>：用于设置编号类型<ul><li><code>a</code> 表示小写英文字母编号</li><li><code>A</code> 表示大写英文字母编号</li><li><code>i</code> 表示小写罗马数字编号</li><li><code>I</code> 表示大写罗马数字编号</li><li><code>1</code> 表示数字编号（默认）</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Blender<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Toaster<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Vacuum<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="无序列表">无序列表</h2><p>无序列表用于标记列表项目顺序无关紧要的列表，<code>&lt;ul&gt;</code>元素通常表示有序列表，<code>&lt;ul&gt;</code>的唯一子级是一个或多个<code>&lt;li&gt;</code>元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Blender<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Toaster<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Vacuum<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表项">列表项</h2><p><code>&lt;li&gt;</code>元素用于表示列表中的项目。它必须包含在一个父元素中：有序列表(<code>&lt;ol&gt;</code>)、无序列表(<code>&lt;ul&gt;</code>)或菜单(<code>&lt;menu&gt;</code>)。</p><h2 id="描述列表">描述列表</h2><p>描述列表用于描述一个术语和术语详情，<code>&lt;dl&gt;</code>元素通常表示描述列表，<code>&lt;dl&gt;</code>的子级是<code>&lt;dt&gt;</code>元素和<code>&lt;dd&gt;</code>元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>描述名词<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>描述详情<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="嵌套列表">嵌套列表</h2><p>将一个列表嵌入到另一个列表称之为嵌套列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Blender<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Toaster<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        Vacuum</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>test2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(4)-文本</title>
    <link href="/2024/06/09/HTML%E5%AD%A6%E4%B9%A0(4)-%E6%96%87%E6%9C%AC/"/>
    <url>/2024/06/09/HTML%E5%AD%A6%E4%B9%A0(4)-%E6%96%87%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>HTML 的主要工作之一是赋予文本结构，使浏览器能够按照开发者的意图显示 HTML 文档。</p><span id="more"></span><h1>标题</h1><p>每个标题必须被包裹在一个标题元素中，一共有 <strong>h1、h2、h3、h4、h5、h6</strong> 六种标题元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>最佳实践：</strong></p><ol><li>最好只对每个页面使用一次 <code>&lt;h1&gt;</code></li><li>确保在层次结构中顺序使用标题</li><li>在深层次文件中，尽量使用不超过三个标题元素，避免难以浏览</li></ol><h1>段落</h1><p>每个段落是通过<code>&lt;p&gt;</code>元素标签进行定义的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>粗体字</h1><p>为了强调重要的词，在口语方面我们往往用重音强调，在书面用语中则是用粗体字来达到强调的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>就指望你了，千万<span class="tag">&lt;<span class="name">strong</span>&gt;</span>不要<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>迟到！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>斜体字</h1><p>在口语表达中，我们有时会强调某些字，用来改变这句话的意思。同样地，在书面用语中，我们可以使用斜体字来达到同样的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我很<span class="tag">&lt;<span class="name">em</span>&gt;</span>庆幸<span class="tag">&lt;/<span class="name">em</span>&gt;</span>你没有<span class="tag">&lt;<span class="name">em</span>&gt;</span>迟到<span class="tag">&lt;/<span class="name">em</span>&gt;</span>。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>缩略语</h1><p>通过<code>&lt;abbr&gt;</code>用来包裹一个缩略语或缩写，并且提供缩写的解释。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  第 33 届<span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;夏季奥林匹克运动会&quot;</span>&gt;</span>奥运会<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span>将于 2024 年 8</span><br><span class="line">  月在法国巴黎举行。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>联系方式</h1><p>通过<code>&lt;address&gt;</code>标记联系方式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Chris Mills<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    Manchester<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    The Grim North<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    UK</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>上标和下标</h1><p>通过 <code>&lt;sup&gt;</code> 和 <code>&lt;sub&gt;</code> 来表示化学方程式或数学公式的上标或下标。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  咖啡因的化学方程式是 C<span class="tag">&lt;<span class="name">sub</span>&gt;</span>8<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>H<span class="tag">&lt;<span class="name">sub</span>&gt;</span>10<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>N<span class="tag">&lt;<span class="name">sub</span>&gt;</span>4<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>O<span class="tag">&lt;<span class="name">sub</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>如果 x<span class="tag">&lt;<span class="name">sup</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sup</span>&gt;</span> 的值为 9，那么 x 的值必为 3 或 -3。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>代码</h1><p>通过以下HMTL元素可以来标记计算机代码</p><p><code>&lt;code&gt;</code>：用于标记计算机通用代码。</p><p><code>&lt;pre&gt;</code>：用于保留空白字符（通常用于代码块）</p><p><code>&lt;var&gt;</code>：用于标记具体变量名</p><p><code>&lt;kbd&gt;</code>：用于标记输入电脑的键盘（或其他类型）输入。</p><p><code>&lt;samp&gt;</code>：用于标记计算机程序的输出。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span></span><br><span class="line">const para = document.querySelector(&#x27;p&#x27;);</span><br><span class="line"></span><br><span class="line">para.onclick = function() &#123;</span><br><span class="line">  alert(&#x27;噢，噢，噢，别点我了。&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  请不要使用 <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>font<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span>、<span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>center<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> 等表象元素。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>在上述的 JavaScript 示例中，<span class="tag">&lt;<span class="name">var</span>&gt;</span>para<span class="tag">&lt;/<span class="name">var</span>&gt;</span> 表示一个段落元素。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>按 <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Ctrl<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>/<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>Cmd<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> + <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>A<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span> 选择全部内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>$ <span class="tag">&lt;<span class="name">kbd</span>&gt;</span>ping mozilla.org<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">samp</span>&gt;</span>PING mozilla.org (63.245.215.20): 56 data bytes</span><br><span class="line">64 bytes from 63.245.215.20: icmp_seq=0 ttl=40 time=158.233 ms<span class="tag">&lt;/<span class="name">samp</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>时间和日期</h1><p>使用<code>&lt;time&gt;</code>元素将时间和日期标记为可供机器识别的格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标准简单日期 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-01-20&quot;</span>&gt;</span>20 January 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只包含年份和月份--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-01&quot;</span>&gt;</span>January 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只包含月份和日期 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;01-20&quot;</span>&gt;</span>20 January<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 只包含时间，小时和分钟数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;19:30&quot;</span>&gt;</span>19:30<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 还可包含秒和毫秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;19:30:01.856&quot;</span>&gt;</span>19:30:01.856<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 日期和时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-01-20T19:30&quot;</span>&gt;</span>7.30pm, 20 January 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 含有时区偏移值的日期时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-01-20T19:30+01:00&quot;</span>&gt;</span>7.30pm, 20 January 2016 is 8.30pm in France<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 提及特定周 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">&quot;2016-W04&quot;</span>&gt;</span>The fourth week of 2016<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>引用</h1><h2 id="块引用">块引用</h2><p>如果一个块级内容（一个段落、多个段落、一个列表等）从其他地方被引用，你应该把它用<code>&lt;blockquote&gt;</code>元素包裹起来表示，并且在<strong>cite</strong>属性里用URL来指向引用的资源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Here is a blockquote:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">cite</span>=<span class="string">&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/blockquote&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    The <span class="tag">&lt;<span class="name">strong</span>&gt;</span>HTML <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>blockquote<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> Element<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> (or <span class="tag">&lt;<span class="name">em</span>&gt;</span>HTML Block Quotation Element<span class="tag">&lt;/<span class="name">em</span>&gt;</span>) indicates that the enclosed text is an extended quotation.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="行内引用">行内引用</h2><p>如果一个行级内容从其他地方被引用，你应该把它用<code>&lt;q&gt;</code>元素包裹起来表示，并且在<strong>cite</strong>属性里用URL来指向引用的资源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  The quote element — <span class="tag">&lt;<span class="name">code</span>&gt;</span><span class="symbol">&amp;lt;</span>q<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span> — is</span><br><span class="line">  <span class="tag">&lt;<span class="name">q</span> <span class="attr">cite</span>=<span class="string">&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/q&quot;</span>&gt;</span></span><br><span class="line">    intended for short quotations that don&#x27;t require paragraph breaks.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(3)-语义化</title>
    <link href="/2024/06/08/HTML%E5%AD%A6%E4%B9%A0(3)-%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
    <url>/2024/06/08/HTML%E5%AD%A6%E4%B9%A0(3)-%E8%AF%AD%E4%B9%89%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>HTML标签的语义化，简单来说，就是用正确的标签做正确的事情，给某块内容用上一个最恰当最合适的标签，使页面有良好的结构，页面元素有含义，无论是谁都能看懂这块内容是什么。</p><span id="more"></span><h1>语义化</h1><p>语义是指“与含义相关”。编写语义HTML是指使用HTML元素根据每个元素的含义来构建内容。使用语义化标签有以下优点：</p><ol><li>在没有CSS样式情况下也能够让页面呈现出清晰的结构</li><li>有利于SEO和搜索引擎建立良好的沟通，有助于爬虫抓取更多的有效信息，爬虫是依赖于标签来确定上下文和各个关键字的权重</li><li>方便团队开发和维护，语义化更具可读性，可以减少差异化</li></ol><h2 id="语义元素">语义元素</h2><h3 id="页眉">页眉</h3><p><code>&lt;header&gt;</code>元素横跨于整个页面顶部，通常用于包含导航、标题、logo、搜索框等内容。</p><h3 id="导航">导航</h3><p><code>&lt;nav&gt;</code>元素是页面的主导航功能。</p><h3 id="主内容">主内容</h3><p><code>&lt;main&gt;</code>元素存放页面的内容。每个页面上只能用一次 <code>&lt;main&gt;</code>，位于<code>&lt;body&gt;</code>元素中。最好不要把它嵌套进其他元素。</p><h4 id="section">section</h4><p><code>&lt;section&gt;</code>元素适用于将页面按功能分块，就像是新闻有不同的板块（国内新闻、国外新闻），在<code>&lt;main&gt;</code>元素中可以有一个或多个<code>&lt;section&gt;</code>元素，每个<code>&lt;section&gt;</code>元素都有一个标题，里面可以放置若干个<code>&lt;article&gt;</code>元素。</p><h4 id="article">article</h4><p><code>&lt;article&gt;</code>元素表示页面的文章，就像是新闻的文章或是一篇博客，<code>&lt;article&gt;</code>元素里面也可以含有多个<code>&lt;section&gt;</code>元素。</p><h3 id="侧边栏">侧边栏</h3><p><code>&lt;aside&gt;</code>元素通常嵌套在<code>&lt;main&gt;</code>元素中，<code>&lt;aside&gt;</code>元素包含一些页面的相关信息，例如术语条目、作者简介、相关链接等。</p><h3 id="页脚">页脚</h3><p><code>&lt;footer&gt;</code>元素是网站的页脚，通常放置版权声明、联系信息等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML学习<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>文档结构<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>语义元素<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>文本<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>语义化<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;<span class="name">section</span>&gt;</span>...<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">section</span>&gt;</span>...<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">                ...</span><br><span class="line">            <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>参考文献链接<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://developer.mozilla.org/&quot;</span>&gt;</span>MDN<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>zzstriker blogs<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="无语义元素">无语义元素</h2><p>有些时候，HTML文档中的内容并没有什么含义，现有的语义元素并不好表达，可以用无语义元素来说明。</p><h3 id="行级无语义元素">行级无语义元素</h3><p><code>&lt;span&gt;</code>元素是一个行级无语义元素，用于无法找到更好的语义元素来包含内容时，或者不想增加特定的含义时。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>行级无语义元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="块级无语义元素">块级无语义元素</h3><p><code>&lt;div&gt;</code>元素是一个块级无语义元素，应仅用于找不到更好的块级元素时，或者不想增加特定的意义时。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    块级无语义元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="换行元素">换行元素</h2><p><code>&lt;br&gt;</code>元素可以在文本中进行换行，能够生成多个短行结构。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    第一段文本<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    第二段文本<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="中断元素">中断元素</h2><p><code>&lt;hr&gt;</code>元素在文档中生成一条水平分割线，表示文本中主题的变化。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>主题1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    主题1的描述</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>主题2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    主题2的描述</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(2)-文档结构</title>
    <link href="/2024/06/07/HTML%E5%AD%A6%E4%B9%A0(2)-%E6%96%87%E6%A1%A3%E7%BB%93%E6%9E%84/"/>
    <url>/2024/06/07/HTML%E5%AD%A6%E4%B9%A0(2)-%E6%96%87%E6%A1%A3%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>HTML 文档包含一个文档类型声明和 <code>&lt;html&gt;</code> 根元素，<code>&lt;html&gt;</code> 元素中嵌套的是<code>&lt;head&gt;</code>和<code>&lt;body&gt;</code>元素。页面在浏览器加载后<code>&lt;head&gt;</code>元素内的内容不会在浏览器中显示，它的作用是保存页面的一些元数据。</p><span id="more"></span><h1>HTML文档结构</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>页面内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DOCTYPE-html"><code>&lt;!DOCTYPE html&gt;</code></h2><p>Doctype是HTML5的文档声明，通过它可以告诉浏览器，使用哪一个HTML版本标准解析文档。在浏览器发展的过程中，HTML出现过很多版本，不同的版本之间格式书写上略有差异。如果没有事先告诉浏览器，那么浏览器就不知道文档解析标准是什么？此时，大部分浏览器将开启最大兼容模式来解析网页，我们一般称为<strong>怪异模式</strong>，这不仅会降低解析效率，而且会在解析过程中产生一些难以预知的<strong>bug</strong>，所以文档声明是必须的。</p><h2 id="html"><code>&lt;html&gt;</code></h2><p><code>&lt;html&gt;</code> 元素是 HTML 文档的根元素。它是 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 的父级，其中包含 HTML 文档中除 DOCTYPE 之外的所有内容。</p><p><strong>lang属性</strong></p><p>用于定义文档的主要语言，<strong>lang</strong>属性的值是两个或三个字母的<code>ISO</code>语言代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    …</span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>lang</strong>属性不限于 <code>&lt;html&gt;</code> 标记。如果网页中有文本使用的语言与主文档的语言不同，则应使用<strong>lang</strong>属性标识文档中主要语言。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Japanese example: <span class="tag">&lt;<span class="name">span</span> <span class="attr">lang</span>=<span class="string">&quot;ja&quot;</span>&gt;</span>ご飯が熱い。<span class="tag">&lt;/<span class="name">span</span>&gt;</span>.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="head-元素"><code>&lt;head&gt;</code>元素</h3><p>包含文档的所有元数据，其中必须包含标题、字符集、视口设置。</p><h4 id="title"><code>&lt;title&gt;</code></h4><p>设置页面的标题，显示在浏览器标签页上，也作为收藏网页的描述文字。</p><h4 id="meta"><code>&lt;meta&gt;</code></h4><p>用于提供关于HTML文档的元数据。</p><p><strong>属性</strong>：</p><ol><li><p><strong>charset</strong>：指定文档中的字符编码</p></li><li><p><strong>content</strong>：是<strong>http-equiv</strong>或<strong>name</strong>属性的值</p></li><li><p><strong>http-equiv</strong>：定义了一个编译指示指令，所允许的值都是特定 HTTP 标头的名称，例如：content-type、refresh</p></li><li><p><strong>name</strong>：用于描述网页，例如：keywords、description、viewport、robots、author</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="link"><code>&lt;link&gt;</code></h4><p>设置HTML文档与外部资源的关系，常用于链接样式表，也可以创建站点图标。</p><p><strong>属性</strong>：</p><ol><li><p><strong>rel</strong>：命名链接文档与当前文档的关系，例如：icon、stylesheet</p></li><li><p><strong>href</strong>：指定被链接资源的URL。URL可以是绝对的，也可以是相对的</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;main.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="style"><code>&lt;style&gt;</code></h4><p>包含文档的样式信息或文档的部分内容。其中的 CSS 会应用于包含 <code>&lt;style&gt;</code> 元素的文档内容。</p><h4 id="script"><code>&lt;script&gt;</code></h4><p>用于嵌入可执行代码或数据，通常用作嵌入或者引用 JavaScript 代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;javascript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>属性</strong>：</p><ol><li><p><strong>type</strong>：表示所代表的脚本类型</p></li><li><p><strong>async</strong>：脚本并行加载，加载完成之后立即执行，执行时机不确定，有可能阻塞HTML解析</p></li><li><p><strong>defer</strong>：脚本并行加载，等待HTML解析完成之后，按照加载顺序执行脚本</p></li><li><p><strong>src</strong>：定义引用外部脚本的 URI，直接在文档中嵌入脚本</p></li></ol><h4 id="noscript"><code>&lt;noscript&gt;</code></h4><p>定义了一段HTML，如果页面上的脚本类型不受支持，或者浏览器当前关闭了脚本，则插入该HTML。</p><h4 id="base"><code>&lt;base&gt;</code></h4><p>一个文档中只能有一个<code>&lt;base&gt;</code>元素。指定用于一个文档中包含的所有相对URL的根URL，类似提供一个指定的默认目标地址。</p><p><strong>属性</strong>：</p><ol><li><p><strong>href</strong>：设置文档中相对URL地址的基准URL，在链接中设置相对的访问目标，浏览器便会自动解析出一个完整的链接地址进行访问，倘若链接的访问目标为空，浏览器也会根据<code>&lt;base&gt;</code>所给的URL进行访问。值得注意的是，<code>&lt;base&gt;</code>标签需放在所有包含URL地址的语句前面。</p></li><li><p><strong>target</strong>：网页窗口的打开方式</p><ul><li><p><strong>_blank</strong>：在新窗口打开链接页面。</p></li><li><p><strong>_parent</strong>：在上一级窗口中打开链接。</p></li><li><p><strong>_self</strong>：在当前窗口打开链接,此为默认值，可以省略。</p></li><li><p><strong>_top</strong>：在浏览器的整个窗口打开链接，忽略任何框架。</p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习(1)-HTML介绍</title>
    <link href="/2024/06/06/HTML%E5%AD%A6%E4%B9%A0(1)-HTML%E4%BB%8B%E7%BB%8D/"/>
    <url>/2024/06/06/HTML%E5%AD%A6%E4%B9%A0(1)-HTML%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p>超文本标记语言-----<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage，HTML 不是一门编程语言，而是一种用于定义内容结构的标记语言。HTML 由一系列的元素组成，这些元素可以用来包围不同部分的内容，使其以某种方式呈现或者工作。</p><span id="more"></span><h1>HTML</h1><h2 id="元素">元素</h2><ol><li>开始标签（Opening tag）：包含元素的名称，被大于号、小于号所包围。表示元素从这里开始或者开始起作用 。</li><li>结束标签（Closing tag）：与开始标签相似，只是其在元素名之前包含了一个斜杠。这表示着元素的结尾。</li><li>内容（Content）：元素的内容。</li></ol><h3 id="嵌套元素">嵌套元素</h3><p>将一个元素置于其他元素之中称作嵌套。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>My cat is <span class="tag">&lt;<span class="name">strong</span>&gt;</span>very<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> grumpy.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="块级元素">块级元素</h3><p>块级元素在页面中以块的形式展现。一个块级元素出现在它前面的内容之后的新行上。任何跟在块级元素后面的内容也会出现在新的行上。块级元素通常是页面上的结构元素。一个块级元素不会嵌套在一个内联元素里面，但它可能嵌套在另一个块级元素里面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="行级元素">行级元素</h3><p>行级元素通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="空元素">空元素</h3><p>不是所有元素都拥有开始标签、内容和结束标签。在HTML中空元素不能存在子元素，只有开始标签且没有结束标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/firefox-icon.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性">属性</h2><p><img src="/imgs/HTML/attribute.png" alt=""></p><ol><li>属性只会显示在开始标签中；</li><li>在属性与元素名称（或上一个属性，如果有超过一个属性的话）之间需要一个空格符隔开；</li><li>属性的名称与值之间用等号连接；</li><li>属性值由引号所包围。</li></ol><h3 id="布尔属性">布尔属性</h3><p>没有值的属性被称为布尔属性，布尔属性只能有一个值，这个值一般与属性名称相同。</p><h3 id="全局属性">全局属性</h3><p>全局属性是指可对任何 HTML 元素设置的属性。</p><h4 id="id">id</h4><p>用于定义元素的唯一标识符。</p><h4 id="class">class</h4><p>用来设置元素的一个或多个类名。</p><ol><li><p>类名不能以数字开头</p></li><li><p>类名可以设置多个值，以空格分开</p></li><li><p>不同的元素可以有相同的类名</p></li></ol><h4 id="style">style</h4><p>用于设置元素的行内样式。</p><h4 id="tabindex">tabindex</h4><p>在元素中添加tabindex属性，使其能够获得焦点，定义添加到Tab键顺序</p><h2 id="特殊字符">特殊字符</h2><table><thead><tr><th>原义字符</th><th>等价字符引用</th></tr></thead><tbody><tr><td>&lt;</td><td>&amp;lt;</td></tr><tr><td>&gt;</td><td>&amp;gt;</td></tr><tr><td>&quot;</td><td>&amp;quot;</td></tr><tr><td>’</td><td>&amp;apos;</td></tr><tr><td>&amp;</td><td>&amp;amp;</td></tr></tbody></table><h2 id="注释">注释</h2><p>HTML 拥有在代码中写注释的机制。浏览器会忽略注释，有效地使注释对用户来说不可见。注释的目的是让你在代码中加入注释，以解释你的逻辑或编码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我在注释外！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- &lt;p&gt;我在注释内！&lt;/p&gt; --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>HTML</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
